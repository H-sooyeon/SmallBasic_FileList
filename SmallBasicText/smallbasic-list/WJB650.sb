'Numbers are stored in binary in computers
'so it is very likely that the maximum number will be a binary number 1111111...
'111111 = 1000000 - 1 in binary
'The maximum number is likely to be 2^n-1
'Further, usually one bit is used for + or - and numbers are stored in Bytes (8 bits)
'If the number of bytes is n, then the total number of bits is 8n
'Take of one bit for + -, then we expect the number of bits to be 8n-1, where n is an integer
'A bit of testing shows that n = 12, the number of bits is 95 with a maximum number 2^(96)-1

'The number is 79228162514264337593543950335
largestNumber = 0

numBit = 96 '12 Bytes or 8*12 = 96 bits

'Calculates 2^(numBit)-1 = Sum(2^x), where the sum is 0 To x-1, just like 1000-1 = 111 (in Binary) = 8-1 =4+2+1=7 (in Decimal)
For i = 1 To numBit
  power = 1
  For j = 1 To i-1
    power = power*2
  EndFor
  largestNumber = largestNumber+power
  TextWindow.WriteLine("2^"+i+"-1 = "+largestNumber)
EndFor

TextWindow.WriteLine("The largest number is "+largestNumber)
largestNumber = largestNumber+1 'Test this causes a crash
