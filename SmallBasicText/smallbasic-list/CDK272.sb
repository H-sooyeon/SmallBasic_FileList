GraphicsWindow.BackgroundColor="teal

GraphicsWindow.Title = "Games of the XXXII Olympiad

Init()

GraphicsWindow.PenWidth=4

GraphicsWindow.PenColor="white

for f=0 to 2

  GraphicsWindow.DrawEllipse(230+f*55 230 45 45)

  if f<2 Then

    GraphicsWindow.DrawEllipse(257+f*55 249 45 45)

    EndIf

EndFor

GraphicsWindow.PenWidth=1

GraphicsWindow.PenColor="darkblue

GraphicsWindow.DrawLine(230 315 380 315)

GraphicsWindow.BrushColor="white

GraphicsWindow.FontBold="false

GraphicsWindow.FontName="Century Gothic

GraphicsWindow.FontSize=33

GraphicsWindow.DrawText(235 320 "T O K Y O")

GraphicsWindow.BrushColor="darkblue

GraphicsWindow.FontSize=22

GraphicsWindow.FontItalic="true

GraphicsWindow.DrawText(285 365 "2020.")

Turtle.PenUp()

Turtle.X = gw / 2

Turtle.Y = gh / 2

Turtle.Turn(a / 2 + 180)

Turtle.Move(r)

Turtle.Turn(-a / 2)

Turtle.Turn(90)

' draw a regular icositetragon (24-gon)

Turtle.PenDown()

nEdge = 24

MoveArc()

Turtle.PenUp()

' draw 45 regular dodecagons (12-gons)

For k = 1 To 3

  ' #1

  Turtle.Move(-e)

  Turtle.Turn(-a2)

  DrawDodecagon()

  type = 3

  angle = 30 + (k - 1) * 120

  AddRectangle()

  ' #2

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 2

  angle = -45 + (k - 1) * 120

  AddRectangle()

  ' #3

  Turtle.Turn(180 - a2)

  MoveToOpposite()

  Turtle.Turn(a2)

  Turtle.Move(e)

  Turtle.Turn(-a2)

  DrawDodecagon()

  type = 2

  angle = 45 + (k - 1) * 120

  AddRectangle()

  ' #4

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 3

  angle = -30 + (k - 1) * 120

  AddRectangle()

  ' #5

  Turtle.Turn(180 - a2)

  MoveToOpposite()

  Turtle.Turn(a2)

  nEdge = 1

  MoveArc()

  Turtle.Turn(a - 90)

  DrawDodecagon()

  type = 1

  angle = 30 + (k - 1) * 120

  AddRectangle()

  ' #6

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 2

  angle = 45 + (k - 1) * 120

  AddRectangle()

  ' #7

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 3

  angle = -30 + (k - 1) * 120

  AddRectangle()

  For j = 1 To 2

    Turtle.Turn(180 - a2)

    MoveToOpposite()

  EndFor

  ' #8

  Turtle.Move(-e2)

  Turtle.Turn(a2)

  DrawDodecagon()

  type = 1

  angle = 60 + (k - 1) * 120

  AddRectangle()

  ' #9

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 2

  angle = 75 + (k - 1) * 120

  AddRectangle()

  ' #10

  Turtle.Turn(180 - a2)

  MoveToOpposite()

  Turtle.Turn(-a2)

  Turtle.Move(e2)

  Turtle.Turn(90 - a)

  nEdge = 2

  MoveArc()

  Turtle.Turn(a - 90)

  DrawDodecagon()

  type = 1

  angle = 60 + (k - 1) * 120

  AddRectangle()

  ' #11

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 2

  angle = 75 + (k - 1) * 120

  AddRectangle()

  ' #12-14

  Turtle.Turn(180 - a2)

  MoveToOpposite()

  Turtle.Turn(90 - a)

  nEdge = 3

  MoveArc()

  Turtle.Turn(90 - a2)

  For j = 1 To 3

    DrawDodecagon()

    type = 1

    angle = 90 + (j - 1) * -30 + (k - 1) * 120

    AddRectangle()

    Turtle.Turn(a2)

    Turtle.Move(e2)

    Turtle.Turn(-2 * a2)

  EndFor

  ' #15

  Turtle.Turn(2 * a2)

  MoveToOpposite()

  Turtle.Turn(a2 + 180)

  DrawDodecagon()

  type = 2

  angle = 45 + (k - 1) * 120

  AddRectangle()

  ' to next position

  Turtle.Turn(180 - a2)

  MoveToOpposite()

  Turtle.Turn(180 - a2)

  For j = 1 To 3

    Turtle.Turn(a2)

    Turtle.Move(e2)

  EndFor

  Turtle.Turn(90)

  nEdge = 2

  MoveArc()

  'Program.Delay(2000)

EndFor

ClearBackground()

Turtle.Hide()



Sub AddRectangle

  GraphicsWindow.PenWidth = 0

  o[n] = Shapes.AddRectangle(w[type], h[type])

  LDShapes.BrushColour(o[n] "white")

  Shapes.Move(o[n], cx[n] - w[type] / 2, cy[n] - h[type] / 2)

  Shapes.Rotate(o[n], angle)

  LDShapes.AnimateOpacity(o[n] 1500 15)

  'Shapes.SetOpacity(o[n], 80)

  LDEffect.DropShadow(o[n] "")

  GraphicsWindow.PenWidth = 1

EndSub



Sub ClearBackground

LDShapes.RemoveTurtleLines()

  For i = 1 To n

    Shapes.SetOpacity(o[i], 100)

  EndFor

EndSub



Sub DrawDodecagon

  ' draw a regular 12-gon

  Turtle.PenDown()

  For i = 1 To 12

    If i = 1 Then

      n = n + 1

      cx[n] = Turtle.X

      cy[n] = Turtle.Y

    EndIf

    If i = 7 Then

      cx[n] = (cx[n] + Turtle.X) / 2

      cy[n] = (cy[n] + Turtle.Y) / 2

    EndIf

    Turtle.Turn(a2)

    If n = 1 Then

      _i = Math.Remainder(Turtle.Angle + 90, 360) / 30

      vx[_i] = Turtle.X

      vy[_i] = Turtle.Y

    EndIf

    Turtle.Move(e2)

  EndFor

  Turtle.PenUp()

'  GraphicsWindow.DrawText(cx[n] - 7, cy[n] - 6, n)

  If n = 1 Then

    w[1] = vx[9] - vx[4]

    h[1] = vy[3] - vy[4]

    _w = vx[9] - vx[5]

    _h = vy[9] - vy[5]

    w[2] = Math.SquareRoot(_w * _w + _h * _h) 

    _w = vx[5] - vx[3]

    _h = vy[3] - vy[5]

    h[2] = Math.SquareRoot(_w * _w + _h * _h)

    w[3] = vx[8] - vx[5]

    h[3] = vy[2] - vy[5]

  EndIf

EndSub



Sub Init

  gw = 600

  gh = 600

  GraphicsWindow.Width = gw

  GraphicsWindow.Height = gh

  GraphicsWindow.Top = 4

  GraphicsWindow.PenColor = "Gray"

  GraphicsWindow.PenWidth = 1

  GraphicsWindow.BrushColor = "#012063"

  Turtle.Speed = 10

  n = 0

  ' calculate parameters for icositetragon (24-gon)

  a = 360 / 24

  r = 250

  _a = Math.GetRadians(a)

  e = 2 * r * Math.Sin(_a / 2)

  ' calculate parameters for dodecagon (12-gon)

  a2 = 360 / 12

  _a2 = Math.GetRadians(a2)

  r2 = e / 2 / Math.Cos(_a2 / 2)

  e2 = 2 * r2 * Math.Sin(_a2 / 2)

EndSub



Sub MoveArc

  ' param nEdge

  If 0 < nEdge Then

    For i = 1 To nEdge

      Turtle.Turn(a)

      Turtle.Move(e)

    EndFor

  Else

    For i = -1 To nEdge Step -1

      Turtle.Move(-e)

      Turtle.Turn(-a)

    EndFor

  EndIf

EndSub  



Sub MoveToOpposite

  For i = 1 To 6

    Turtle.Turn(a2)

    Turtle.Move(e2)

  EndFor

EndSub

    


