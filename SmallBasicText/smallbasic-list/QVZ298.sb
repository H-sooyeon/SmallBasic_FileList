GraphicsWindow.KeyDown = HandleKey
GraphicsWindow.BackgroundColor = "teal

While "True"'--------------------------------------------------------------------main loop-----
  BOXES = 5     ' number of boxes per piece
  BWIDTH = 25    ' box width in pixels
  XOFFSET = 40   ' Screen X offset in pixels of where the board starts
  YOFFSET = 40   ' Screen Y offset in pixels of where the board starts
  CWIDTH = 10    ' Canvas Width, in number of boxes
  CHEIGHT = 20   ' Canvas Height, in number of boxes.
  STARTDELAY = 800
  ENDDELAY = 175
  PREVIEW_xpos = 13
  PREVIEW_ypos = 2
  
  GraphicsWindow.Clear()
  GraphicsWindow.Title = "Quintis
  GraphicsWindow.Height = 580
  GraphicsWindow.Width = 700
  GraphicsWindow.Show()
  
  SetupTemplates()
  SetupCanvas()
  
  template = Text.Append("template", Math.GetRandomNumber(4))
  
  CreatePiece() ' in: template  ret: h
  nextPiece = h
  
  end = 0
  sessionDelay = STARTDELAY
  
  While end = 0
    If sessionDelay > ENDDELAY Then
      sessionDelay = sessionDelay - 1
    EndIf
    
    delay = sessionDelay
    thisPiece = nextPiece
    template = Text.Append("template", Math.GetRandomNumber(4))
    
    CreatePiece() ' in: template  ret: h
    nextPiece = h
    DrawPreviewPiece()
    
    h = thisPiece    
    
    ypos = 0
    done = 0
    xpos = 3 ' always drop from column 3
    CheckStop() ' in: ypos, xpos, h  ret: done
    If done = 1 Then
      ypos = ypos - 1
      MovePiece()  'in: ypos, xpos, h
      end = 1
    EndIf
    
    yposdelta = 0
    
    While done = 0 Or yposdelta > 0
      MovePiece()  'in: ypos, xpos, h
      
      ' Delay, but break If the delay get set To 0 If the piece gets dropped
      delayIndex = delay      
      While delayIndex > 0 And delay > 0
        Program.Delay(10)
        delayIndex = delayIndex - 10
      EndWhile  
      
      If yposdelta > 0 Then
        yposdelta = yposdelta - 1  ' used To create freespin, when the piece is rotated
      Else
        ypos = ypos + 1            ' otherwise, move the piece down.
      EndIf
      
      ' Check If the piece should stop.
      CheckStop() ' in: ypos, xpos, h  ret: done            
    EndWhile
  EndWhile
  GraphicsWindow.ShowMessage( "Game Over", "Small Basic Tetris" )
EndWhile'----------------------------------------------------------------------------------------------------

Sub HandleKey
  ' Stop game
  If GraphicsWindow.LastKey = "Escape" Then
    Program.End()
  EndIf
  
  ' Move piece left
  If GraphicsWindow.LastKey = "Left" Then
    moveDirection = -1
    ValidateMove()  ' in: ypos, xpos, h, moveDirection  ret: invalidMove = 1 or -1 or 2 If move is invalid, otherwise 0
    If invalidMove = 0 Then
      xpos = xpos + moveDirection
    EndIf
    MovePiece()  'in: ypos, xpos, h
  EndIf
  
  ' Move piece right
  If GraphicsWindow.LastKey = "Right" Then
    moveDirection = 1
    ValidateMove()  ' in: ypos, xpos, h, moveDirection  ret: invalidMove = 1 or -1 or 2 If move is invalid, otherwise 0
    If invalidMove = 0 Then
      xpos = xpos + moveDirection
    EndIf
    MovePiece()  'in: ypos, xpos, h
  EndIf
  
  ' Move piece down
  If GraphicsWindow.LastKey = "Down" or GraphicsWindow.LastKey = "Space" Then
    delay = 20
  EndIf
  
  ' Rotate piece
  If GraphicsWindow.LastKey = "Up" Then
    basetemplate = array.GetValue(h, -1)  ' array.GetValue(h, -1) = the template name
    template = "temptemplate"
    rotation = "CW"
    CopyPiece()  'in basetemplate, template, rotation
    
    array.SetValue(h, -1, template) ' array.GetValue(h, -1) = the template name
    moveDirection = 0
    ValidateMove()  ' in: ypos, xpos, h, moveDirection  ret: invalidMove = 1 or -1 or 2 If move is invalid, otherwise 0
    
    ' See If it can be moved so that it will rotate.
    xposbk = xpos
    yposdelta = 0
    While yposdelta = 0 And Math.Abs(xposbk - xpos) < 3 ' move up To 3 times only
      ' If the rotation move worked, copy the temp To "rotatedtemplate" and use that from now on
      If invalidMove = 0 Then
        basetemplate = template
        template = "rotatedtemplate"
        array.SetValue(h, -1, template) ' array.GetValue(h, -1) = the template name
        rotation = "COPY"
        CopyPiece()  'in basetemplate, template, rotation
        yposdelta = 1 ' Don't move down If we rotate
        MovePiece()  'in: ypos, xpos, h
      ElseIf invalidMove = 2 Then
        ' Don't support shifting piece when hitting another piece To the right or left.
        xpos = 99 ' exit the loop
      Else
        ' If the rotated piece can't be placed, move it left or right and try again.
        xpos = xpos - invalidMove
        ValidateMove()  ' in: ypos, xpos, h, moveDirection  ret: invalidMove = 1 or -1 or 2 If move is invalid, otherwise 0
      EndIf
    EndWhile
    
    If invalidMove <> 0 Then
      xpos = xposbk
      array.SetValue(h, -1, basetemplate) ' array.GetValue(h, -1) = the template name
      template = ""
    EndIf      
  EndIf
EndSub


Sub DrawPreviewPiece
  xpos = PREVIEW_xpos
  ypos = PREVIEW_ypos
  h = nextPiece
  
  XOFFSETBK = XOFFSET
  YOFFSETBK = YOFFSET
  XOFFSET = XOFFSET + array.GetValue(array.GetValue(h, -1), "pviewx") ' array.GetValue(h, -1) = the template name
  YOFFSET = YOFFSET + array.GetValue(array.GetValue(h, -1), "pviewy") ' array.GetValue(h, -1) = the template name
  MovePiece()  'in: ypos, xpos, h
  
  XOFFSET = XOFFSETBK
  YOFFSET = YOFFSETBK
EndSub

Sub CopyPiece  'in basetemplate, template, rotation  
  L = array.GetValue(basetemplate, "dim")
  
  If rotation = "CW" Then
    For i = 0 To BOXES - 1 '      x' = y     y' = L - 1 - x
      v = array.GetValue(basetemplate, i)
      x = (Math.Remainder(v, 10))
      y = (L - 1 - Math.Floor(v/10))
      array.SetValue(template, i, x * 10 + y)
    EndFor
     
  ElseIf rotation = "COPY" Then
    For i = 0 To BOXES - 1
      array.SetValue(template, i, array.GetValue(basetemplate, i))
    EndFor
  Else
    GraphicsWindow.ShowMessage("invalid parameter", "Error")
    Program.End()
  EndIf
  
  array.SetValue(template, "color", array.GetValue(basetemplate, "color"))
  array.SetValue(template, "dim", array.GetValue(basetemplate, "dim"))
  array.SetValue(template, "pviewx", array.GetValue(basetemplate, "pviewx"))
  array.SetValue(template, "pviewy", array.GetValue(basetemplate, "pviewy"))
EndSub

Sub CreatePiece ' in: template  ret: h
  hcount = hcount + 1
  h = Text.Append("piece", hcount)
  array.SetValue(h, -1, template) ' array.GetValue(h, -1) = the template name
  GraphicsWindow.PenWidth = 0
  GraphicsWindow.BrushColor = array.GetValue(template, "color")
  
  For i = 0 To BOXES - 1
    s = Shapes.AddRectangle(BWIDTH, BWIDTH)
    Shapes.Move(s, -BWIDTH, -BWIDTH) ' move off screen
    array.SetValue(h, i, s)
  EndFor
EndSub

Sub MovePiece 'in: ypos, xpos, h.  ypos/xpos is 0-19, representing the top/left box coordinate of the piece on the canvas.  h returned by CreatePiece
  For i = 0 To BOXES - 1
    v = array.GetValue(array.GetValue(h, -1), i)  ' array.GetValue(h, -1) = the template name
    x = Math.Floor(v/10)
    y = Math.Remainder(v, 10)
    Shapes.Move(array.GetValue(h, i), XOFFSET + xpos * BWIDTH + x * BWIDTH, YOFFSET + ypos * BWIDTH + y * BWIDTH)
  EndFor
EndSub

Sub ValidateMove ' in: ypos, xpos, h, moveDirection  ret: invalidMove = 1 or -1 or 2 If move is invalid, otherwise 0
  i = 0
  invalidMove = 0
  While i < BOXES
    v = array.GetValue(array.GetValue(h, -1), i)  ' array.GetValue(h, -1) = the template name
    x = Math.Floor(v/10)
    y = Math.Remainder(v, 10)
    
    If (x + xpos + moveDirection) < 0 Then
      invalidMove = -1
      i = BOXES ' force getting out of the loop
    EndIf
    
    If (x + xpos + moveDirection) >= CWIDTH Then
      invalidMove = 1
      i = BOXES ' force getting out of the loop
    EndIf
    
    If array.GetValue("c", (x + xpos + moveDirection) + (y + ypos) * CWIDTH) <> "." Then
      invalidMove = 2
      i = BOXES ' force getting out of the loop
    EndIf
    
    i = i + 1
  EndWhile
EndSub

Sub CheckStop ' in: ypos, xpos, h  ret: done
  done = 0
  i = 0
  While i < BOXES
    v = array.GetValue(array.GetValue(h, -1), i)  ' array.GetValue(h, -1) = the template name
    x = Math.Floor(v/10)
    y = Math.Remainder(v, 10)
    
    If y + ypos > CHEIGHT Or array.GetValue("c", (x + xpos) + (y + ypos) * CWIDTH) <> "." Then
      done = 1
      i = BOXES ' force getting out of the loop
    EndIf
    
    i = i + 1
  EndWhile
  
   If done = 1 Then
    For i = 0 To BOXES - 1
      v = array.GetValue(array.GetValue(h, -1), i)	' array.GetValue(h, -1) = the template name
      array.SetValue("c", (Math.Floor(v/10) + xpos) + (Math.Remainder(v, 10) + ypos - 1) * CWIDTH, array.GetValue(h, i))
    EndFor
    
    score = score + 1
    GraphicsWindow.Title="Score: "+score
    
    DeleteLines()
  EndIf
EndSub

Sub DeleteLines
  linesCleared = 0
  
  ' Iterate over each row, starting from the bottom
  For y = CHEIGHT - 1 To 0 Step -1  
      x = CWIDTH
    While x = CWIDTH
      x = 0
      While x < CWIDTH
        piece = array.GetValue("c", x + y * CWIDTH)
        If piece = "." Then
          x = CWIDTH
        EndIf
        x = x + 1
      EndWhile
      
      If x = CWIDTH Then
        For x1 = 0 To CWIDTH - 1
          Shapes.Remove(array.GetValue("c", x1 + y * CWIDTH))
        EndFor
        linesCleared = linesCleared + 1
        
        ' Move everything Else down one.
        For y1 = y To 1 Step -1
          For x1 = 0 To CWIDTH - 1
            piece = array.GetValue("c", x1 + (y1 - 1) * CWIDTH)
            array.SetValue("c", x1 + y1 * CWIDTH, piece)
            Shapes.Animate(piece, Shapes.GetLeft(piece), Shapes.GetTop(piece) + BWIDTH,250)
          EndFor
        EndFor
        Program.Delay(500)
      EndIf
    EndWhile
  EndFor
  
  If linesCleared > 0 Then
    score = score + 100 * Math.Round(linesCleared * 2.15 - 1)
    GraphicsWindow.Title="Score: "+score
  EndIf
EndSub

Sub SetupCanvas
  GraphicsWindow.BackgroundColor="teal
  GraphicsWindow.Clear()
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "PeachPuff
  For x = 0 To CWIDTH-1
    For y = 0 To CHEIGHT-1
      array.SetValue("c", x + y * CWIDTH, ".") ' "." indicates spot is free
      GraphicsWindow.DrawRectangle(XOFFSET + x * BWIDTH, YOFFSET + y * BWIDTH, BWIDTH, BWIDTH)
    EndFor
  EndFor
  
  GraphicsWindow.PenWidth = 4
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.DrawLine(XOFFSET, YOFFSET, XOFFSET, YOFFSET + CHEIGHT*BWIDTH)
  GraphicsWindow.DrawLine(XOFFSET + CWIDTH*BWIDTH, YOFFSET, XOFFSET + CWIDTH*BWIDTH, YOFFSET + CHEIGHT*BWIDTH)
  GraphicsWindow.DrawLine(XOFFSET, YOFFSET + CHEIGHT*BWIDTH, XOFFSET + CWIDTH*BWIDTH, YOFFSET + CHEIGHT*BWIDTH)
  
  GraphicsWindow.PenColor = "Lime"
  GraphicsWindow.DrawLine(XOFFSET - 4, YOFFSET, XOFFSET - 4, YOFFSET + CHEIGHT*BWIDTH + 6)
  GraphicsWindow.DrawLine(XOFFSET + CWIDTH*BWIDTH + 4, YOFFSET, XOFFSET + CWIDTH*BWIDTH + 4, YOFFSET + CHEIGHT*BWIDTH + 6)
  GraphicsWindow.DrawLine(XOFFSET - 4, YOFFSET + CHEIGHT*BWIDTH + 4, XOFFSET + CWIDTH*BWIDTH + 4, YOFFSET + CHEIGHT*BWIDTH + 4)
  
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.BrushColor = "cyan
  x = XOFFSET + PREVIEW_xpos * BWIDTH - BWIDTH
  y = YOFFSET + PREVIEW_ypos * BWIDTH - BWIDTH

  
  score = 0
      GraphicsWindow.Title="Score: "+score
EndSub

Sub SetupTemplates
  array.SetValue("template1", 0, 00)
  array.SetValue("template1", 1, 01)
  array.SetValue("template1", 2, 11)
  array.SetValue("template1", 3, 21)
  array.SetValue("template1", 4, 20)
  array.SetValue("template1", "color", "Yellow")
  array.SetValue("template1", "dim", 3)
  array.SetValue("template1", "pviewx", -12)
  array.SetValue("template1", "pviewy", 12)
  
  array.SetValue("template3", 0, 10)
  array.SetValue("template3", 1, 01)
  array.SetValue("template3", 2, 11)
  array.SetValue("template3", 3, 21)
  array.SetValue("template3", 4, 12)
  array.SetValue("template3", "color", "Lime")
  array.SetValue("template3", "dim", 3)
  array.SetValue("template3", "pviewx", 0)
  array.SetValue("template3", "pviewy", 25)
   
  array.SetValue("template2", 0, 10)
  array.SetValue("template2", 1, 11)
  array.SetValue("template2", 2, 12)
  array.SetValue("template2", 3, 13)
  array.SetValue("template2", 4, 14)
  array.SetValue("template2", "color", "Red")
  array.SetValue("template2", "dim", 5)
  array.SetValue("template2", "pviewx", 0)
  array.SetValue("template2", "pviewy", 0)
  
  array.SetValue("template4", 0, 01)
  array.SetValue("template4", 1, 11)
  array.SetValue("template4", 2, 21)
  array.SetValue("template4", 3, 12)
  array.SetValue("template4", 4, 13)
  array.SetValue("template4", "color", "cyan")
  array.SetValue("template4", "dim", 4)
  array.SetValue("template4", "pviewx", 0)
  array.SetValue("template4", "pviewy", 25)
EndSub




