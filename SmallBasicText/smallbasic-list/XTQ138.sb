'Hit Box Prototype - Created by Matthew L. Parets aka codingCat. No rights reserved. Use and distribute at your pleasure
'This program automatically moves a circle and triangle around the screen
'while displaying green rectangles that show where they will interfere with each other.
'The HitDetect subroutines check to see when a corner of one shape's hit box is inside
'of the hit box of another shape.

'----------------------------------------------------------------------------

'At the top of your program - Initial Setup
'Stuff up here only happens once before the main loop
GraphicsWindow.Show()
circle = Shapes.AddEllipse(50,50)
circleX = 0 'Starting place for the circle
circleY = Math.GetRandomNumber(GraphicsWindow.Height) 'Somewhere on the left side
cxDir = 1    'The direction the circle is moving --  1 = right and down, -1 = left and up
cyDir = 1

triangle = Shapes.AddTriangle(25,0,50,50,0,50)
triangleX = GraphicsWindow.Width
triangleY = Math.GetRandomNumber(GraphicsWindow.Height) 'Somewhere on the right side
txDir = -1
tyDir = -1
frameRate = 5    'Number of milliseonds each frame (trip through the main program) should take
frameStart = Clock.ElapsedMilliseconds 'note the time to allow for frame pauses

'----------------------------------------------------------------------------

'Main Program Loop
'Repeats continuously until the escape key is pressed
key = "" 
While GraphicsWindow.LastKey <> "Escape" 'Keep going until the escape key is pressed
  MoveTheCircle()     'Update circle automatically
  MoveTheTriangle()   'Update triangle Automatically
  HitDetect()         'Chcck for collision between shapes - Nest If statments 
  'HitDetectShort()    'Chcck for collision between shapes - One compound if statement 
  FrameWait()         'Pause and wait for just a tick
endwhile

'----------------------------------------------------------------------------

'Subroutines.
'Always at the bottom of your program
'No code outside of a subroutine allowed below.


Sub MoveTheCircle
  'called once during each trip through the loop, it moves the circle as needed.
  GraphicsWindow.PenColor = "white"
  GraphicsWindow.DrawRectangle(circleX,circleY,50,50)
  circleX = circleX + cxDir
  If circleX > GraphicsWindow.Width Or circleX < 0 Then 'If off the screen
    cxDir = cxDir * -1  'reverse the direction
  EndIf
  circleY = circleY + cyDir
  If circleY > GraphicsWindow.Height Or circleY < 0 Then 'If off the screen
    cyDir = cyDir * -1  'reverse the direction
  EndIf
  Shapes.Move(circle,circleX,circleY)
  GraphicsWindow.PenColor = "green"
  GraphicsWindow.DrawRectangle(circleX,circleY,50,50)
EndSub  

Sub MoveTheTriangle
  'called once during each trip through the loop, it moves the triangle  as needed.
  GraphicsWindow.PenColor = "white"
  GraphicsWindow.DrawRectangle(triangleX,triangleY,50,50)
  triangleX = triangleX + txDir
  If triangleX > GraphicsWindow.Width Or triangleX < 0 Then 'If off the screen
    txDir = txDir * -1  'reverse the direction
  EndIf
  triangleY = triangleY + tyDir
  If triangleY > GraphicsWindow.Height Or triangleY < 0 Then 'If off the screen
    tyDir = tyDir * -1  'reverse the direction
  EndIf
  Shapes.Move(triangle,triangleX,triangleY)
  GraphicsWindow.PenColor = "green"
  GraphicsWindow.DrawRectangle(triangleX,triangleY,50,50)
EndSub  

Sub HitDetect
  'Each object is represented by a single point inside of the compter. Its upper
  'left corner. The object itself usually needs at least four points to describe
  'its full location in two-dimensional space:
  'Upper left = x,y
  'Upper right = x + width, y
  'Lower left = x, y + height
  'Lower right = x + width, y + height
  '       Side note -> you an make your hit boxes more complex. However the more points
  '            you track, the more difficult the math will be, and the more time the comparison
  '            will take. This is why most of the early 8-bit games stuck to rectangular
  '            characters that filled a 16x16 pixel grid.
  
  'To register a hit between the two objects, you have to check each of the four points 
  'to see they inside the other shape. 
  
  'Top left corner of circle inside of triangle?
  '    First check to see if the X of the top right of the circle is inside the triangles hit box
  '    Is the circles X more then the triangles X?  Is the circles X less than the triangles X plus the width of the triangle?
  If circleX > triangleX And circleX < triangleX + 50 Then
    'Next check to see if the Y of the top corner of the circle is inside the triangles hit box
    'Is the circles Y more than the triangles Y? Is the circles Y less than the triangles Y plus the height of the triangle?
    If circleY > triangleY And circleY < triangleY + 50 Then
      ReactToHit()
      
    'Bottom Left corner of circle inside of triangle?
    '    Contine check -- since we already know x is in the right place, we can check the Y for the oppisite corner 
    '    Is the circles Y plus its height more than the triangles Y? Is the circles Y plus its height less than the triangles Y plus the height of the triangle?
    ElseIf circleY + 50 > triangleY And circleY + 60 < triangleY + 50 Then
      ReactToHit()
    EndIf
    
  'Top right corner of circle inside of triangle?
  '    First check to see if the X of the top right of the circle is inside the triangles hit box
  '    Is the circles X plus its width more then the triangles X?  Is the circles X plus its width less than the triangles X plus the width of the triangle?
  ElseIf circleX+50 > triangleX And circleX + 50 < triangleX + 50 Then
    'Next check to see if the Y of the top corner of the circle is inside the triangles hit box
    'Is the circles Y more than the triangles Y? Is the circles Y less than the triangles Y plus the height of the triangle?
    If circleY > triangleY And circleY < triangleY + 50 Then
      ReactToHit()
      
    'Bottom right corner of circle inside of triangle?
    '    Contine check -- since we already know x is in the right place, we can check the Y for the oppisite corner 
    '    Is the circles Y plus its height more than the triangles Y? Is the circles Y plus its height less than the triangles Y plus the height of the triangle?
    ElseIf circleY + 50 > triangleY And circleY + 60 < triangleY + 50 Then
      ReactToHit()
    EndIf
  EndIf
EndSub

Sub HitDetectShort
  'The giganitic nested if block above can be replaced with a single If statment 
  'if you put parenthesis ( ) around the and blocks and glue them together with or blocks:
  If ((circleX > triangleX And circleX < triangleX + 50) And (circleY > triangleY And circleY < triangleY + 50)) Or ((circleX > triangleX And circleX < triangleX + 50) And (circleY + 50 > triangleY And circleY + 60 < triangleY + 50)) Or ((circleX+50 > triangleX And circleX + 50 < triangleX + 50) And (circleY > triangleY And circleY < triangleY + 50)) Or ((circleX+50 > triangleX And circleX + 50 < triangleX + 50) And (circleY + 50 > triangleY And circleY + 60 < triangleY + 50)) Then
    ReactToHit()
  EndIf
EndSub

sub ReactToHit
  'When there is a hit, reverse the direction of both shapes.
  cyDir = cyDir * -1
  cxDir = cxDir * -1
  tyDir = tyDir * -1
  txDir = txDir * -1
EndSub

Sub FrameWait
  While Clock.ElapsedMilliseconds - frameStart < frameRate
    'Sit here and do nothing until the frame clock has run out.
    'This wait keeps the automatic operations, like moving the ball
    'from running too fast. 
    'This technique is better then using Program.Delay() for two reasons:
    '   1)  The wait time is based on when we started the frame, not
    '        when we ended it. In other words, when one of our trips through
    '        the for loop above takes longer than normal, the delay will be 
    '        reduced, so each frame will be exactly the same length.
    '  2) We have the option (even though we are not using it here) of  
    '        doing some extra processing, such as checking the keyboard. 
    '        With Program.Delay() we are stuck, unable to do anything,
    '       until the  delay is complete.
  EndWhile
  frameStart = Clock.ElapsedMilliseconds 'Start  a new frame.
EndSub
