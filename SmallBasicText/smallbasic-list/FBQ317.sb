GraphicsWindow.Title= "NARUTO RPG"
GraphicsWindow.BackgroundColor = "SkyBlue"
GraphicsWindow.Width = 600
GraphicsWindow.Height=400
GraphicsWindow.CanResize = "False"

GraphicsWindow.DrawLine(0, 300, 600, 300)
head = Shapes.AddEllipse(20, 20)
headpoint["x"] = 20
headpoint["y"] = 220
Shapes.Move(head,headpoint["x"], headpoint["y"])
GraphicsWindow.BrushColor = "Red"
leftarm = Shapes.addRectangle(10, 30)
GraphicsWindow.BrushColor = "White"
torso = Shapes.AddRectangle(10, 30)
GraphicsWindow.BrushColor = "Blue"
rightarm = Shapes.AddRectangle(10, 30)
Shapes.Move(leftarm,  headpoint["x"]+5, headpoint["y"] +20)
Shapes.Move(torso, headpoint["x"]+5, headpoint["y"] +20)
Shapes.Move(rightarm,  headpoint["x"]+5, headpoint["y"] +20)
GraphicsWindow.BrushColor = "Red"
leftleg = Shapes.AddRectangle(10, 30)
GraphicsWindow.BrushColor = "Blue"
rightleg = Shapes.AddRectangle(10, 30)
Shapes.Move(rightleg,headpoint["x"]+5, headpoint["y"] +50 )
Shapes.Move(leftleg,headpoint["x"]+5, headpoint["y"] +50 )
direction = -1
GraphicsWindow.KeyDown = move
GraphicsWindow.KeyUp = stop
GraphicsWindow.MouseMove = movehand
GraphicsWindow.MouseDown = click
Sub click
  clicked = "true"

  endsub
 reticle = Shapes.AddEllipse(20,20)
framestart = Clock.ElapsedMilliseconds ' getsthe time
frames = 60
frameLength = 1000/frames
notfinished="True"
While 1=1
  ProcessKey() 'processes the key at the current frame
  ProcessMouse()
  processclick()
  framedelay()'frame delay
endwhile

Sub processclick
  If clicked = "true" Then
    
 GraphicsWindow.BrushColor="Black"
 force = Shapes.AddEllipse(30, 30)
 
    startx = headpoint["x"] +(Math.Cos(math.GetRadians(angleh))*20)
    starty = headpoint["y"]+5 +(Math.sin(math.GetRadians(angleh))*20)  
    
    If(mx < headpoint["x"]) Then
     enddistx = startx-(Math.Cos(Math.GetRadians(angleh))*200)
    enddisty = starty-(Math.sin(Math.GetRadians(angleh))*200)
    Else 
    enddistx = startx+(Math.Cos(Math.GetRadians(angleh))*200)
    enddisty = starty+(Math.sin(Math.GetRadians(angleh))*200)
    endif
    clicked="false"
 Shapes.Move(force,enddistx,enddisty)
  EndIf
  endsub
sub ProcessMouse
  dividebyzero = (mx-(headpoint["x"]+5))
  If dividebyzero = 0 Then 
    dividebyzero = 0.0001
    endif
  degreeofinclination = (my-(headpoint["y"] +20))/(mx-( headpoint["x"]+5))
 angleh = Math.ArcTan(degreeofinclination)
 angleh = Math.GetDegrees(angleh)
 TextWindow.WriteLine(angleh)
If(mx > headpoint["x"]) Then
  displacementy = Math.Sin(math.GetRadians(angleh))*-10
  displacementx = Math.Cos(math.GetRadians(angleh))*10
Else
   displacementy = Math.Sin(math.GetRadians(angleh))*10
  displacementx = Math.Cos(math.GetRadians(angleh))*-10
  endif
Shapes.Rotate(rightarm,(angleh-90))
Shapes.Move(rightarm,  headpoint["x"]+5+displacementx, headpoint["y"] +10 - displacementy)

EndSub


Sub movehand
  mx = GraphicsWindow.MouseX
  my=GraphicsWindow.MouseY
  
  Mouse.HideCursor()
  GraphicsWindow.BrushColor="Red"
 
  moving="True"
  Shapes.Move(reticle, mx, my)
  
  
  
  endsub
Sub move
  pressed = "true"
  
  EndSub
Sub ProcessKey
  'process the keys once per frame
  If pressed = "True" Then
    key = GraphicsWindow.LastKey
    If key = "D" Then ' headpoint is the "center" point, everything else follows the head. 
    If headpoint["x"] > 390 Then
      
    Else
      headpoint["x"] = headpoint["x"] +3
    EndIf 
  ElseIf key = "A" then
    If headpoint["x"] < 20 Then
      
    Else
      
      headpoint["x"] = headpoint["x"] -3
    EndIf
  EndIf
  Shapes.Move(head,headpoint["x"], headpoint["y"])
  
  angle = angle + (deltaarm*7) ' angle change for arms and legs
  displacementx = angle/5 ' horizontal chage for arms and legs
  displacementy = math.Abs(angle/9) ' vertical change for arms and legs
  displacementforhead = (angle/300) ' vertical change for entire body
  direction = direction
  
  If direction = -1 Then ' direction of arms, -1 means their arms are moving back.
    deltaarm = 1
    If angle > 60 Then
      direction = 1 
    EndIf
  ElseIf direction = 1 then ' arms moving forward. this cam be applied to the legs as well.
    deltaarm = -1
    If angle < -60 then
      direction = -1
    EndIf
  EndIf
  Shapes.Rotate(leftarm, angle)
  'Shapes.Rotate(rightarm, -angle)
  Shapes.Rotate(leftleg, -angle)
  Shapes.Rotate(rightleg, angle)
  
  
  Shapes.Move(leftarm,  headpoint["x"]+5-displacementx, headpoint["y"] +20 - displacementy )
  
  Shapes.Move(torso, headpoint["x"]+5, headpoint["y"] +20)
  Shapes.Move(rightarm,  headpoint["x"]+5, headpoint["y"] +20)
  
  Shapes.Move(rightleg,headpoint["x"]+5-displacementx, headpoint["y"] +50 - displacementy)
  Shapes.Move(leftleg,headpoint["x"]+5+displacementx, headpoint["y"] +50 - displacementy)
  
    
    
    '===========this is the bounds check, makes sure the player doesnt leave the field.
    
    
  EndIf
EndSub

Sub stop
  pressed="False"
  'Shapes.Move(player, playerx, playery)
   angle = 0 
  Shapes.Rotate(leftarm, angle)
  Shapes.Rotate(rightarm, angle)
  Shapes.Rotate(leftleg, angle)
  Shapes.Rotate(rightleg, angle)
  
  Shapes.Move(leftarm,  headpoint["x"]+5, headpoint["y"] +20)
  Shapes.Move(rightarm,  headpoint["x"]+5, headpoint["y"] +20)
  Shapes.Move(rightleg,headpoint["x"]+5, headpoint["y"] +50 )
  Shapes.Move(leftleg,headpoint["x"]+5, headpoint["y"] +50 )
EndSub

Sub frameDelay'codingCat is the person to thank for this.
  
  
  'Precise frame timing. More exact that program.delay() because it only
  'pauses for the length of time remiaining in the current frame, rather than for the 
  'entire time slice of the frame. Even with longer, or shorter frame processing
  'times, each fram will still be exactly frameLength in duration.
  While Clock.ElapsedMilliseconds - framestart < frameLength ' if the time right now subtracted from the start time is les than frame length, then keep it.
    'do nothing
    
    
  EndWhile
  framestart = Clock.ElapsedMilliseconds
EndSub
