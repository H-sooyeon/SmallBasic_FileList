'Game Loop Prototype - Created by Matthew L. Parets aka codingCat. No rights reserved. Use and distribute at your pleasure

'This program automatically move a circle around the screen

'At the same time it will wait for user input. When the arrows

'are pressed, the turtle moves



'----------------------------------------------------------------------------



'At the top of your program - Initial Setup

'Stuff up here only happens once before the main loop

TextWindow.Show()     'Open behind the graphics window

GraphicsWindow.Show()

Turtle.Show()

Turtle.Speed = 10

GraphicsWindow.KeyDown = OnKeyDown 'Let winows know our key event is waiting for presses. 

circle = Shapes.AddEllipse(50,50)

circleX = 0 'Starting place for the circle

circleY = 0

xDir = 1    'The direction the circle is moving --  1 = right and down, -1 = left and up

yDir = 1

pressed = "False" 'No key pressed at the start of the program

frameRate = 10    'Number of milliseonds each frame (trip through the main program) should take

frameStart = Clock.ElapsedMilliseconds 'note the time to allow for frame pauses



'----------------------------------------------------------------------------



'Main Program Loop

'Repeats continuously until the escape key is pressed

key = "" 

While key <> "Escape" 'Keep going until the escape key is pressed

  GetKeyPress()       'Check if a key has been pressed

  MoveTheCircle()     'Update circle automatically

  FrameWait()         'Pause and wait for just a tick

endwhile



'----------------------------------------------------------------------------



'Program Close Down. Stuff that is down once after the main loop



GraphicsWindow.FontSize = 90

GraphicsWindow.BrushColor = "Red"

GraphicsWindow.DrawText(100,GraphicsWindow.Height/3,"Good bye")

Program.Delay(2000)

Program.end()



'----------------------------------------------------------------------------



'Events and subroutines.

'Always at the bottom of your program

'No code outside of a subroutine allowed below.





Sub GetKeyPress

  'Get key press, processes all user interaction.

  'Key presses are ignored unless the event tells us that a new key has been pressed

  If pressed = "True" Then 'ignore unless the event tells us there was a press       

    key = GraphicsWindow.LastKey  'Movement keys

    If key = "Up" Then

      Turtle.Angle = 0

      Turtle.Move(10)

    ElseIf key = "Down" then

      Turtle.Angle = 180

      Turtle.Move(10)

    ElseIf key = "Left" then

      Turtle.Angle = 270

      Turtle.Move(10)

    ElseIf key = "Right" then

      Turtle.Angle = 90

      Turtle.Move(10)

    ElseIf key = "W" then

      TextWindow.Write("Enter new width for turtle lines: ")

      'Textwindow.readnumber() is a halting command. The entire

      'program freezes and waits for the use to press enter. For this

      'example we are halted in place right here. The circle stops 

      'moving.

      width = TextWindow.ReadNumber()

      GraphicsWindow.PenWidth = width

    ElseIf key = "Space" then ' Special Keys

      GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()

    ElseIf key = "Return" then 'Randomly move the cirle

      circleX = Math.GetRandomNumber(GraphicsWindow.Width)

      circelY = Math.GetRandomNumber(GraphicsWindow.Height)

    EndIf

    pressed = "False"

  EndIf

EndSub





Sub MoveTheCircle

  'called once during each trip through the loop, it moves the circle as needed.

  circleX = circleX + xDir

  If circleX > GraphicsWindow.Width Or circleX < 0 Then 'If off the screen

    xDir = xDir * -1  'reverse the direction

  EndIf

  circleY = circleY + yDir

  If circleY > GraphicsWindow.Height Or circleY < 0 Then 'If off the screen

    yDir = yDir * -1  'reverse the direction

  EndIf

  Shapes.Move(circle,circleX,circleY)

EndSub  





Sub FrameWait

  While Clock.ElapsedMilliseconds - frameStart < frameRate

    'Sit here and do nothing until the frame clock has run out.

    'This wait keeps the automatic operations, like moving the ball

    'from running too fast. 

    'This technique is better then using Program.Delay() for two reasons:

    '   1)  The wait time is based on when we started the frame, not

    '        when we ended it. In other words, when one of our trips through

    '        the for loop above takes longer than normal, the delay will be 

    '        reduced, so each frame will be exactly the same length.

    '  2) We have the option (even though we are not using it here) of  

    '        doing some extra processing, such as checking the keyboard. 

    '        With Program.Delay() we are stuck, unable to do anything,

    '       until the  delay is complete.

  EndWhile

  frameStart = Clock.ElapsedMilliseconds 'Start  a new frame.

EndSub





Sub OnKeyDown

  'Take note of the fact that a key has been pressed. This event is 

  'needed because the GraphicsWindow.lastkey property never

  'clears. Making otherwise impossible to distinguish between

  'multiple presses of the same key

  pressed = "True"

EndSub

  


