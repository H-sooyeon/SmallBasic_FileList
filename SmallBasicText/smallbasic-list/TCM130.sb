' Pictionary - Xor

' Copyright Â© 2017-2018 Nonki Takahashi.  The MIT License.

' Last update 2020



GraphicsWindow.Title = "Pictionary"

SB_Workaround()

gw = 598

gh = 428

GraphicsWindow.Width = gw

GraphicsWindow.Height = gh

' initialize shapes

Shapes_Init_And()

' add shapes

scale = 1

angle = 0

iMin = 1

iMax = Array.GetItemCount(shape)

Shapes_Add()

' initialize shapes

Shapes_Init_Caption()

iMax = Array.GetItemCount(shape)

' add shapes

Shapes_Add()



Sub Shapes_Init_And

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 130 ' x offset

  shY = 100 ' y offset

  shape = ""

  shape[55] = "pw=0;bc=white;func=tri;x1=7.13;y1=0;x2=0;y2=7.65;x3=14.27;y3=7.65;x=162.32;y=28.06;"

  shape[56] = "pw=0;bc=white;func=tri;x1=7.13;y1=0;x2=0;y2=7.65;x3=14.27;y3=7.65;x=161.39;y=28.06;"

  shape[3]  = "pw=0;bc=white;func=rect;width=0.93;height=7.65;x=168.53;y=28.06;"

  shape[4]  = "pw=0;bc=white;func=tri;x1=6.44;y1=0;x2=0;y2=8.24;x3=12.88;y3=8.24;x=169.02;y=34.39;"

  shape[5]  = "pw=0;bc=white;func=tri;x1=6.44;y1=0;x2=0;y2=8.24;x3=12.88;y3=8.24;x=156.08;y=34.39;"

  shape[6]  = "pw=0;bc=white;func=rect;width=12.94;height=8.24;x=162.52;y=34.39;"

  shape[7]  = "pw=0;bc=white;func=tri;x1=5.7;y1=0;x2=0;y2=8.77;x3=11.4;y3=8.77;x=175.2;y=41.22;"

  shape[8]  = "pw=0;bc=white;func=tri;x1=5.7;y1=0;x2=0;y2=8.77;x3=11.4;y3=8.77;x=151.39;y=41.22;"

  shape[9]  = "pw=0;bc=white;func=rect;width=23.8;height=8.77;x=157.09;y=41.22;"

  shape[10] = "pw=0;bc=white;func=tri;x1=4.91;y1=0;x2=0;y2=9.24;x3=9.82;y3=9.24;x=180.8;y=48.49;"

  shape[11] = "pw=0;bc=white;func=tri;x1=4.91;y1=0;x2=0;y2=9.24;x3=9.82;y3=9.24;x=147.36;y=48.49;"

  shape[12] = "pw=0;bc=white;func=rect;width=33.43;height=9.24;x=152.28;y=48.49;"

  shape[13] = "pw=0;bc=white;func=tri;x1=4.08;y1=0;x2=0;y2=9.63;x3=8.17;y3=9.63;x=185.78;y=56.16;"

  shape[14] = "pw=0;bc=white;func=tri;x1=4.08;y1=0;x2=0;y2=9.63;x3=8.17;y3=9.63;x=144.03;y=56.16;"

  shape[15] = "pw=0;bc=white;func=rect;width=41.75;height=9.63;x=148.12;y=56.16;"

  shape[16] = "pw=0;bc=white;func=tri;x1=3.23;y1=0;x2=0;y2=9.95;x3=6.46;y3=9.95;x=190.12;y=64.16;"

  shape[17] = "pw=0;bc=white;func=tri;x1=3.23;y1=0;x2=0;y2=9.95;x3=6.46;y3=9.95;x=141.4;y=64.16;"

  shape[18] = "pw=0;bc=white;func=rect;width=48.71;height=9.95;x=144.64;y=64.16;"

  shape[19] = "pw=0;bc=white;func=tri;x1=2.35;y1=0;x2=0;y2=10.19;x3=4.7;y3=10.19;x=193.77;y=72.43;"

  shape[20] = "pw=0;bc=white;func=tri;x1=2.35;y1=0;x2=0;y2=10.19;x3=4.7;y3=10.19;x=139.51;y=72.43;"

  shape[21] = "pw=0;bc=white;func=rect;width=54.25;height=10.19;x=141.87;y=72.43;"

  shape[22] = "pw=0;bc=white;func=tri;x1=1.45;y1=0;x2=0;y2=10.36;x3=2.91;y3=10.36;x=196.7;y=80.91;"

  shape[23] = "pw=0;bc=white;func=tri;x1=1.45;y1=0;x2=0;y2=10.36;x3=2.91;y3=10.36;x=138.38;y=80.91;"

  shape[24] = "pw=0;bc=white;func=rect;width=58.32;height=10.36;x=139.83;y=80.91;"

  shape[25] = "pw=0;bc=white;func=tri;x1=0.54;y1=0;x2=0;y2=10.45;x3=1.09;y3=10.45;x=198.9;y=89.54;"

  shape[26] = "pw=0;bc=white;func=tri;x1=0.54;y1=0;x2=0;y2=10.45;x3=1.09;y3=10.45;x=138;y=89.54;"

  shape[27] = "pw=0;bc=white;func=rect;width=60.9;height=10.45;x=138.54;y=89.54;"

  shape[28] = "pw=0;bc=white;func=tri;x1=0.36;y1=0;x2=0;y2=10.46;x3=0.73;y3=10.46;x=199.25;y=98.25;angle=180;"

  shape[29] = "pw=0;bc=white;func=tri;x1=0.36;y1=0;x2=0;y2=10.46;x3=0.73;y3=10.46;x=138.01;y=98.25;angle=180;"

  shape[30] = "pw=0;bc=white;func=rect;width=61.23;height=10.46;x=138.38;y=98.25;"

  shape[31] = "pw=0;bc=white;func=tri;x1=1.27;y1=0;x2=0;y2=10.38;x3=2.55;y3=10.38;x=197.2;y=106.97;angle=180;"

  shape[32] = "pw=0;bc=white;func=tri;x1=1.27;y1=0;x2=0;y2=10.38;x3=2.55;y3=10.38;x=138.24;y=106.97;angle=180;"

  shape[33] = "pw=0;bc=white;func=rect;width=58.96;height=10.38;x=139.51;y=106.97;"

  shape[34] = "pw=0;bc=white;func=tri;x1=2.17;y1=0;x2=0;y2=10.23;x3=4.35;y3=10.23;x=194.41;y=115.64;angle=180;"

  shape[35] = "pw=0;bc=white;func=tri;x1=2.17;y1=0;x2=0;y2=10.23;x3=4.35;y3=10.23;x=139.23;y=115.64;angle=180;"

  shape[36] = "pw=0;bc=white;func=rect;width=55.18;height=10.23;x=141.4;y=115.64;"

  shape[37] = "pw=0;bc=white;func=tri;x1=3.06;y1=0;x2=0;y2=10;x3=6.12;y3=10;x=190.9;y=124.19;angle=180;"

  shape[38] = "pw=0;bc=white;func=tri;x1=3.06;y1=0;x2=0;y2=10;x3=6.12;y3=10;x=140.97;y=124.19;angle=180;"

  shape[39] = "pw=0;bc=white;func=rect;width=49.93;height=10;x=144.03;y=124.19;"

  shape[40] = "pw=0;bc=white;func=tri;x1=3.92;y1=0;x2=0;y2=9.7;x3=7.84;y3=9.7;x=186.7;y=132.55;angle=180;"

  shape[41] = "pw=0;bc=white;func=tri;x1=3.92;y1=0;x2=0;y2=9.7;x3=7.84;y3=9.7;x=143.44;y=132.55;angle=180;"

  shape[42] = "pw=0;bc=white;func=rect;width=43.26;height=9.7;x=147.36;y=132.55;"

  shape[43] = "pw=0;bc=white;func=tri;x1=4.75;y1=0;x2=0;y2=9.32;x3=9.5;y3=9.32;x=181.85;y=140.67;angle=180;"

  shape[44] = "pw=0;bc=white;func=tri;x1=4.75;y1=0;x2=0;y2=9.32;x3=9.5;y3=9.32;x=146.64;y=140.67;angle=180;"

  shape[45] = "pw=0;bc=white;func=rect;width=35.2;height=9.32;x=151.39;y=140.67;"

  shape[46] = "pw=0;bc=white;func=tri;x1=5.54;y1=0;x2=0;y2=8.87;x3=11.09;y3=8.87;x=176.36;y=148.48;angle=180;"

  shape[47] = "pw=0;bc=white;func=tri;x1=5.54;y1=0;x2=0;y2=8.87;x3=11.09;y3=8.87;x=150.53;y=148.48;angle=180;"

  shape[48] = "pw=0;bc=white;func=rect;width=25.83;height=8.87;x=156.08;y=148.48;"

  shape[49] = "pw=0;bc=white;func=tri;x1=6.29;y1=0;x2=0;y2=8.35;x3=12.59;y3=8.35;x=170.3;y=155.91;angle=180;"

  shape[50] = "pw=0;bc=white;func=tri;x1=6.29;y1=0;x2=0;y2=8.35;x3=12.59;y3=8.35;x=155.09;y=155.91;angle=180;"

  shape[51] = "pw=0;bc=white;func=rect;width=15.2;height=8.35;x=161.39;y=155.91;"

  shape[52] = "pw=0;bc=white;func=tri;x1=7;y1=0;x2=0;y2=7.77;x3=14;y3=7.77;x=163.7;y=162.93;angle=180;"

  shape[53] = "pw=0;bc=white;func=tri;x1=7;y1=0;x2=0;y2=7.77;x3=14;y3=7.77;x=160.28;y=162.93;angle=180;"

  shape[54] = "pw=0;bc=white;func=rect;width=3.42;height=7.77;x=167.28;y=162.93;"

  shape[1]  = "pw=4;pc=#000;bc=orange;func=ell;width=200;height=200;x=0;y=0;"

  shape[2]  = "pw=4;pc=#000;bc=orange;func=ell;width=200;height=200;x=138;y=0;"

  shape[57] = "pw=4;pc=#000;bc=transparent;func=ell;width=200;height=200;x=0;y=0;"

  shape[58] = "pw=4;pc=#000;bc=transparent;func=ell;width=200;height=200;x=138;y=0;"

EndSub



Sub Shapes_Init_Caption

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 488 ' x offset

  shY = 358 ' y offset

  shape = ""

  shape[1] = "func=text;x=0;y=0;text=Xor;fn=Trebuchet MS;fs=50;fb=True;pw=0;bc=Black;"

EndSub



Sub SB_RotateWorkaround

  ' Small Basic | Rotate workaround for Silverlight

  ' param shp - current shape

  ' param x, y - original coordinate

  ' param alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shp["func"] = "tri" Then

    x1 = -Math.Floor(shp["x3"] / 2)

    y1 = -Math.Floor(shp["y3"] / 2)

  ElseIf shp["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

EndSub



Sub SB_Workaround

  ' Small Basic | Workaround for Silverlight

  ' returns silverlight - "True" if in remote

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

    msWait = 300

  Else

    silverlight = "False"

  EndIf

EndSub



Sub Shapes_Add

  ' Shapes | add shapes as shapes data

  ' param iMin, iMax - shape indices to add

  ' param shape - array of shapes

  ' param scale - 1 if same scale

  ' return shWidth, shHeight - total size of shapes

  ' return shAngle - current angle of shapes

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  Shapes_CalcWidthAndHeight()

  s = scale

  For i = iMin To iMax

    shp = shape[i]

    GraphicsWindow.PenWidth = shp["pw"] * s

    If shp["pw"] > 0 Then

      GraphicsWindow.PenColor = shp["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then

      GraphicsWindow.BrushColor = shp["bc"]

    EndIf

    If shp["func"] = "rect" Then

      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "ell" Then

      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "tri" Then

      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)

    ElseIf shp["func"] = "line" Then

      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)

    ElseIf shp["func"] = "text" Then

      If silverlight Then

        fs = Math.Floor(shp["fs"] * 0.9)

      Else

        fs = shp["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shp["fn"]

      shp["obj"] = Shapes.AddText(shp["text"])

    EndIf

    x = shp["x"]

    y = shp["y"]

    shp["rx"] = x

    shp["ry"] = y

    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then

      alpha = Math.GetRadians(shp["angle"])

      SB_RotateWorkaround()

      shp["wx"] = x

      shp["wy"] = y

    EndIf

    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then

      Shapes.Rotate(shp["obj"], shp["angle"])

    EndIf

    shape[i] = shp

  EndFor

  shAngle = 0

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub



Sub Shapes_CalcWidthAndHeight

  ' Shapes | Calculate total width and height of shapes

  ' param iMin, iMax - shape indices to add

  ' return shWidth, shHeight - total size of shapes

  For i = iMin To iMax

    shp = shape[i]

    If shp["func"] = "tri" Or shp["func"] = "line" Then

      xmin = shp["x1"]

      xmax = shp["x1"]

      ymin = shp["y1"]

      ymax = shp["y1"]

      If shp["x2"] < xmin Then

        xmin = shp["x2"]

      EndIf

      If xmax < shp["x2"] Then

        xmax = shp["x2"]

      EndIf

      If shp["y2"] < ymin Then

        ymin = shp["y2"]

      EndIf

      If ymax < shp["y2"] Then

        ymax = shp["y2"]

      EndIf

      If shp["func"] = "tri" Then

        If shp["x3"] < xmin Then

          xmin = shp["x3"]

        EndIf

        If xmax < shp["x3"] Then

          xmax = shp["x3"]

        EndIf

        If shp["y3"] < ymin Then

          ymin = shp["y3"]

        EndIf

        If ymax < shp["y3"] Then

          ymax = shp["y3"]

        EndIf

      EndIf

      shp["width"] = xmax - xmin

      shp["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shp["x"] + shp["width"]

      shHeight = shp["y"] + shp["height"]

    Else

      If shWidth < shp["x"] + shp["width"] Then

        shWidth = shp["x"] + shp["width"]

      EndIf

      If shHeight < shp["y"] + shp["height"] Then

        shHeight = shp["y"] + shp["height"]

      EndIf

    EndIf

    shape[i] = shp

  EndFor

EndSub


