GraphicsWindow.Title = "Aquarium

Not = "False=True;True=False

WQ = Text.GetCharacter(34)



Colors_Init()

gw = 598

gh = 428

GraphicsWindow.Width = gw

GraphicsWindow.Height = gh

width = 400

height = 300

depth = 230

gap = 10

hCaption = 16

x = Math.Floor((gw - width) / 2)

y = Math.Floor((gh - height - gap - hCaption) / 2)

' draw aqarium

GraphicsWindow.BackgroundColor = "darkblue

GraphicsWindow.PenColor = "cyan

rr=shapes.addRectangle( width, height)

shapes.Move( rr x y)

LDEffect.DropShaddow(rr "")

' draw caption

GraphicsWindow.FontName = "Tahoma

GraphicsWindow.BrushColor = "Black

caption = "Orchid Fish

name = caption

wCaption = 68 + 2 * 7

GraphicsWindow.FillRectangle(x + (width - wCaption) / 2, y + height + gap, wCaption, hCaption)

GraphicsWindow.BrushColor = "White"

GraphicsWindow.DrawBoundText(x + (width - wCaption) / 2 + 7, y + height + gap, wCaption, caption)

AddBall()

AddBubbles()

AddFish()

AddWater()

addgrass()

StartTimer()



While "true

  cc=cc+1

  If Math.Remainder (cc 150)=0 Then

    cc=1

    ff=-ff

    LDPhysics.SetGravity (ff, -100)    

  endif

  LDPhysics.DoTimestep ()

  Program.Delay (15)

EndWhile 



Sub addgrass

  GraphicsWindow.PenColor="green

  For z=1 To 5

    If z=1 Then

      ss=20

      pp=90+50

    else

      pp=10+50

      ss=30

    Endif

    For xx=1 To 4

      s[z][xx]=shapes.AddEllipse (6 6)

      

      Shapes.Move (s[z][xx] 10*z+ss+pp,330+z*5)

      ss=ss*1.618

      LDPhysics.AddMovingShape (s[z][xx] 0 .3 2)

    EndFor

    fs=10*z+ss+pp

    a1[z]=LDPhysics.AddFixedAnchor (fs 330+z*5)

    LDPhysics.RopeColour="green

    'GraphicsWindow.DrawEllipse (fs,150 8 8)

    LDPhysics.AttachShapesWithJoint     ( s[z][4] a1[z] "Distance" "" 0 )

    LDPhysics.AddRope (a1[z] s[z][4] )

    

    For xx=0 To 2

      LDPhysics.AttachShapesWithJoint     ( s[z][3-xx] s[z][4-xx] "Distance" "" 0 )

      LDPhysics.AddRope (s[z][3-xx] s[z][4-xx])

    EndFor   

    

    If z>1 Then

      LDPhysics.AttachShapesWithJoint     ( s[z][4] s[z-1][4] "Distance" "" 0 )

    Endif

    If z>=1 Then 

      LDPhysics.AttachShapesWithJoint(s[z][1] s[z][1], "Mouse" "" "")

    endif

  EndFor 

  LDPhysics.SetGravity (0, -60)

EndSub 



Sub AddFish

  nFish = 3

  hFish = 20        ' body height

  wFish = hFish * 2 ' body width

  colorPen = "DarkOrchid"

  colorBrush = "Orchid"

  param["pw"] = 2

  For i = 1 To nFish

    shape = ""

    iMax = 0

    Stack.PushValue("local", x)

    Stack.PushValue("local", y)

    shX = x + 10 + Math.GetRandomNumber(width - 10 - hFish * 3)

    shY = y + height - hFish - Math.GetRandomNumber(depth - hFish)

    opacity = 60

    color = colorPen

    Color_SetAlpha()

    param["pc"] = color                         ' tail color

    color = colorBrush

    Color_SetAlpha()

    param["bc"] = color                         ' tail color

    param["width"] = hFish * 1.5

    param["height"] = hFish * 0.5

    param["func"] = "rect"

    param["x"] = 0

    param["y"] = hFish * 0.25

    Shapes_AddFunc()

    param["pc"] = colorPen                      ' fish color

    param["bc"] = colorBrush                    ' fish color

    param["width"] = wFish

    param["height"] = hFish

    param["func"] = "ell"

    param["x"] = hFish

    param["y"] = 0

    Shapes_AddFunc()

    param["pc"] = "White"                       ' eye color

    param["bc"] = "Black"                       ' eye color

    param["width"] = hFish * 0.5

    param["height"] = hFish * 0.5

    param["func"] = "ell"

    param["x"] = hFish * 2.25

    param["y"] = hFish * 0.25

    Shapes_AddFunc()

    y = Stack.PopValue("local")

    x = Stack.PopValue("local")

    Group_Add()

  EndFor

EndSub



Sub MoveFish

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  xo = x

  yo = y

  distance = 4

  For i = 1 To nFish

    grp = group[i]

    x = grp["x"] + distance * grp["dir"]

    y = grp["y"]

    Group_Move()

    If x < xo + (distance + 10) Then

      Timer.Pause()

      Group_Flip()

      Timer.Resume()

    ElseIf xo + width - (distance + 10) < x + hFish * 3 Then

      Timer.Pause()

      Group_Flip()

      Timer.Resume()

    EndIf

  EndFor

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

EndSub



Sub AddBubbles

  nBubbles = 10

  GraphicsWindow.Penwidth = 0

  GraphicsWindow.BrushColor = "cyan

  For i = 1 To nBubbles

    oBubbles[i] = Shapes.AddEllipse(5, 5)

    xBubbles[i] = x + 60 + Math.GetRandomNumber(50)

    yBubbles[i] = y + height - 25 - Math.GetRandomNumber(depth - 25)

  EndFor

EndSub



Sub MoveBubbles

  up = 40

  For i = 1 To nBubbles

    yBubbles[i] = yBubbles[i] - up

    If yBubbles[i] < y + height - depth Then

      xBubbles[i] = x + 60 + Math.GetRandomNumber(50)

      yBubbles[i] = y + height - 25 - Math.GetRandomNumber(up)

    EndIf

    Shapes.Move(oBubbles[i], xBubbles[i], yBubbles[i])

  EndFor

EndSub



Sub AddBall

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  GraphicsWindow.PenWidth  = 0

  GraphicsWindow.BrushColor = "blue

  oAquarium = Shapes.AddEllipse(50, 50)

  x = x + 60

  y = y + height - 50

  Shapes.Move(oAquarium, x, y)

  Shapes.SetOpacity(oAquarium, 50)

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

EndSub



Sub AddWater

  Stack.PushValue("local", y)

  y = y + height - depth

  GraphicsWindow.PenColor = "cyan

  GraphicsWindow.BrushColor = "Aquamarine

  oAquarium = Shapes.AddRectangle(width, depth)

  

  Shapes.Move(oAquarium, x, y)

  Shapes.SetOpacity(oAquarium, 10)

  y = Stack.PopValue("local")

EndSub



Sub StartTimer

  Timer.Interval = 40

  Timer.Tick = OnTick

EndSub



Sub OnTick

  MoveBubbles()

  MoveFish()

EndSub



Sub Color_NameToColor  ' param color - color name

  '                                                return color -"#rrggbb"

  If Text.StartsWith(color, "#") Then

    color = Text.ConvertToUpperCase(color)

  Else

    color = Text.ConvertToLowerCase(color)

    color = colors[color]

  EndIf

EndSub



Sub Color_SetAlpha   ' param color - color to set alpha blending

  ' param opacity - opacity   ' return color - transparent color

  Color_NameToColor()

  p = 0

  If Text.GetLength(color) = 9 Then

    hex = Text.GetSubText(color, 2, 2)

    

    a = LDMath.Base2Decimal (hex 16)

    p = 4

  ElseIf Text.GetLength(color) = 7 Then

    a = 255

    p = 2

  EndIf

  If 0 < p Then

    dec = Math.Floor(a * opacity / 100)

    If dec<16 then

      hex= text.Append ("0" LDMath.Decimal2Base (dec 16))

    Else

      hex=LDMath.Decimal2Base (dec 16)

    EndIf 

    color = "#" + hex + Text.GetSubTextToEnd(color, p)

  EndIf

EndSub



Sub Colors_Init  ' Colors | Initialize 140 colors array

  txt = "aliceblue,antiquewhite,aqua,aquamarine,"

  txt = txt + "azure,beige,bisque,black,blanchedalmond,"

  txt = txt + "blue,blueviolet,brown,burlywood,"

  txt = txt + "cadetblue,chartreuse,chocolate,coral,"

  txt = txt + "cornflowerblue,cornsilk,crimson,"

  txt = txt + "cyan,darkblue,darkcyan,darkgoldenrod,"

  txt = txt + "darkgray,darkgreen,darkkhaki,"

  txt = txt + "darkmagenta,darkolivegreen,darkorange,"

  txt = txt + "darkorchid,darkred,darksalmon,darkseagreen,"

  txt = txt + "darkslateblue,darkslategray,"

  txt = txt + "darkturquoise,darkviolet,deeppink,"

  txt = txt + "deepskyblue,dimgray,dodgerblue,"

  txt = txt + "firebrick,floralwhite,forestgreen,"

  txt = txt + "fuchsia,gainsboro,ghostwhite,gold,"

  txt = txt + "goldenrod,gray,green,greenyellow,"

  txt = txt + "honeydew,hotpink,indianred,indigo,"

  txt = txt + "ivory,khaki,lavender,lavenderblush,"

  txt = txt + "lawngreen,lemonchiffon,lightblue,"

  txt = txt + "lightcoral,lightcyan,lightgoldenrodyellow,"

  txt = txt + "lightgray,lightgreen,lightpink,"

  txt = txt + "lightsalmon,lightseagreen,lightskyblue,"

  txt = txt + "lightslategray,lightsteelblue,"

  txt = txt + "lightyellow,lime,limegreen,linen,"

  txt = txt + "magenta,maroon,mediumaquamarine,mediumblue,"

  txt = txt + "mediumorchid,mediumpurple,mediumseagreen,"

  txt = txt + "mediumslateblue,mediumspringgreen,"

  txt = txt + "mediumturquoise,mediumvioletred,midnightblue,"

  txt = txt + "mintcream,mistyrose,moccasin,navajowhite,"

  txt = txt + "navy,oldlace,olive,olivedrab,orange,"

  txt = txt + "orangered,orchid,palegoldenrod,palegreen,"

  txt = txt + "paleturquoise,palevioletred,papayawhip,"

  txt = txt + "peachpuff,peru,pink,plum,powderblue,"

  txt = txt + "purple,red,rosybrown,royalblue,saddlebrown,"

  txt = txt + "salmon,sandybrown,seagreen,seashell,"

  txt = txt + "sienna,silver,skyblue,slateblue,slategray,"

  txt = txt + "snow,springgreen,steelblue,"

  txt = txt + "tan,teal,thistle,tomato,turquoise,violet,"

  txt = txt + "wheat,white,whitesmoke,yellow,yellowgreen"

  delim = ","

  arry=ldtext.Split (txt ",")

  saved = GraphicsWindow.PenColor

  n = Array.GetItemCount(arry)

  For i = 1 To n

    GraphicsWindow.PenColor = arry[i]

    c = GraphicsWindow.PenColor

    colors[arry[i]] = c

  EndFor

  GraphicsWindow.PenColor = saved

EndSub



Sub Group_Add   ' param name - group name   ' param shX, shY, origin of shape array

  ' param shape[] - shape array  ' param nGroup - number of group

  ' return nGroup - updated number of group   ' return group - group array

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  nGroup = nGroup + 1

  grp = ""

  grp["name"] = name

  grp["x"] = shX

  grp["y"] = shY

  grp["angle"] = 0

  grp["dir"] = 1

  Shapes_CalcWidthAndHeight()

  grp["width"] = shWidth

  grp["cx"] = shWidth / 2

  grp["height"] = shHeight

  s = 1

  grp["scale"] = s

  For i = 1 To Array.GetItemCount(shape)

    shp = shape[i]

    GraphicsWindow.PenWidth = shp["pw"] * s

    If shp["pw"] > 0 Then

      GraphicsWindow.PenColor = shp["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then

      GraphicsWindow.BrushColor = shp["bc"]

    EndIf

    If shp["func"] = "rect" Then

      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "ell" Then

      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "tri" Then

      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)

    ElseIf shp["func"] = "line" Then

      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)

    ElseIf shp["func"] = "text" Then

      

      fs = shp["fs"]

      

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shp["fn"]

      shp["obj"] = Shapes.AddText(shp["text"])

    EndIf

    x = shp["x"]

    y = shp["y"]

    shp["rx"] = x

    shp["ry"] = y

    

    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then

      Shapes.Rotate(shp["obj"], shp["angle"])

    EndIf

    shape[i] = shp

  EndFor

  grp["shape"] = shape

  group[nGroup] = grp

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub



Sub Group_Flip  ' param group[i] - group to flip

  ' return group[i] - flipped group

  grp = group[i]

  gx = grp["x"]

  gy = grp["y"]

  shape = grp["shape"]

  n = Array.GetItemCount(shape)

  For angle = 20 To 180 Step 20

    _a = Math.GetRadians(angle)

    scaleX = Math.Cos(_a)

    For j = 1 To n

      shp = shape[j]

      Shapes.Zoom(shp["obj"], Math.Abs(scaleX), 1)

      cx = shp["x"] + shp["width"] / 2

      cx = (cx - grp["cx"]) * scaleX + grp["cx"]

      Shapes.Move(shp["obj"], cx - shp["width"] / 2 + gx, shp["y"] + gy)

      If angle = 100 And shp["angle"] <> 0 Then

        shp["angle"] = -shp["angle"]

        Shapes.Rotate(shp["obj"], shp["angle"])

        shape[j] = shp

      EndIf

      If angle = 180 Then

        _x = Math.Floor((cx - shp["width"] / 2) * 100) / 100

        shp["rx"] = _x

        shp["x"] = _x

        shape[j] = shp

      EndIf

    EndFor

    Program.Delay(20)

  EndFor

  grp["dir"] = grp["dir"] * -1

  grp["shape"] = shape

  group[i] = grp

EndSub



Sub Group_Move  ' param group[i] - group to move

  ' param x, y - position to move   ' return group[i] - updated group

  grp = group[i]

  s = grp["scale"]

  grp["x"] = x

  grp["y"] = y

  shape = grp["shape"]

  n = Array.GetItemCount(shape)

  For j = 1 To n

    shp = shape[j]

    _x = shp["rx"]

    _y = shp["ry"]

    Shapes.Move(shp["obj"], grp["x"] + _x * s, grp["y"] + _y * s)

  EndFor

  group[i] = grp

EndSub



Sub Shapes_AddFunc  ' Shapes | Add a shape to shape array

  iMax = iMax + 1

  shape[iMax] = param

EndSub



Sub Shapes_CalcWidthAndHeight  ' param shape[] - shape array

  ' return shWidth, shHeight - total size of shapes

  For i = 1 To Array.GetItemCount(shape)

    shp = shape[i]

    If shp["func"] = "tri" Or shp["func"] = "line" Then

      xmin = shp["x1"]

      xmax = shp["x1"]

      ymin = shp["y1"]

      ymax = shp["y1"]

      If shp["x2"] < xmin Then

        xmin = shp["x2"]

      EndIf

      If xmax < shp["x2"] Then

        xmax = shp["x2"]

      EndIf

      If shp["y2"] < ymin Then

        ymin = shp["y2"]

      EndIf

      If ymax < shp["y2"] Then

        ymax = shp["y2"]

      EndIf

      If shp["func"] = "tri" Then

        If shp["x3"] < xmin Then

          xmin = shp["x3"]

        EndIf

        If xmax < shp["x3"] Then

          xmax = shp["x3"]

        EndIf

        If shp["y3"] < ymin Then

          ymin = shp["y3"]

        EndIf

        If ymax < shp["y3"] Then

          ymax = shp["y3"]

        EndIf

      EndIf

      shp["width"] = xmax - xmin

      shp["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shp["x"] + shp["width"]

      shHeight = shp["y"] + shp["height"]

    Else

      If shWidth < shp["x"] + shp["width"] Then

        shWidth = shp["x"] + shp["width"]

      EndIf

      If shHeight < shp["y"] + shp["height"] Then

        shHeight = shp["y"] + shp["height"]

      EndIf

    EndIf

    shape[i] = shp

  EndFor

EndSub


