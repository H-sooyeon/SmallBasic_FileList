'5 balls for testing
Ball_Amount = 5
Ball_Radius = 25
Ball_Diameter = Ball_Radius * 2
Game_Width = 600
Game_Height = 600

GraphicsWindow.Width = Game_Width
GraphicsWindow.Height = Game_Height
GraphicsWindow.BackgroundColor = "Black"
GraphicsWindow.BrushColor = "#55FFAA"
GraphicsWindow.PenColor = "Red" 'GraphicsWindow.BrushColor
GraphicsWindow.PenWidth = 5

For i = 1 To Ball_Amount
  Ball[i] = Shapes.AddEllipse(Ball_Diameter,Ball_Diameter)
  Ball_X[i] = Math.GetRandomNumber(Game_Width - Ball_Diameter) + Ball_Radius
  Ball_Y[i] = Math.GetRandomNumber(Game_Height - Ball_Diameter) + Ball_Radius
  Ball_WX[i] = Math.GetRandomNumber(100) - 50
  Ball_WY[i] = Math.GetRandomNumber(100) - 50
endfor

'Moved outside main loop - these are constant
Game_Width = GraphicsWindow.Width
Game_Height = GraphicsWindow.Height

While "True"
  
  CheckCollisions()
  Program.Delay(15)
  
endwhile


Sub CheckCollisions
  
  For i = 1 To Ball_Amount
    
    For j = i+1 to Ball_Amount
      
      Distance_X = Ball_X[i] - Ball_X[j]
      Distance_Y = Ball_Y[i] - Ball_Y[j]
      Distance_XY = Math.SquareRoot(Distance_X * Distance_X + Distance_Y * Distance_Y)
      
      If Distance_XY <= Ball_Diameter Then
        'WXi = Ball_WX[i]
        'WYi = Ball_WY[i]
        'WXj = Ball_WX[j]
        'WYj = Ball_WY[j]
        'Ball_WX[i] = WXi + WXj
        'Ball_WY[i] = WYi + WYj
        'Ball_WX[j] = WXi + WXj
        'Ball_WY[j] = WYi + WYj
        
        'too many collisions causes this to crash
        'Sound.PlayClick()
        
        'this is the main collision bit using vectors to estimate bounce velocity
        'Unit vector
        Distance_X = Distance_X/Distance_XY
        Distance_Y = Distance_Y/Distance_XY
        'Dot product of unit vector between balls with ball velocity
        nDOTi = Math.Abs(Ball_WX[i]*Distance_X + Ball_WY[i]*Distance_Y)
        'Rebound velocity can be calculated from vector component along ball centres (draw a diagram)
        Ball_WX[i] = Ball_WX[i] + 2*nDOTi*Distance_X        
        Ball_WY[i] = Ball_WY[i] + 2*nDOTi*Distance_Y       
        nDOTj = Math.Abs(Ball_WX[j]*Distance_X + Ball_WY[j]*Distance_Y)
        Ball_WX[j] = Ball_WX[j] - 2*nDOTj*Distance_X      
        Ball_WY[j] = Ball_WY[j] - 2*nDOTj*Distance_Y    
        'Add rebound friction
        Ball_WX[i] = 0.995*Ball_WX[i]
        Ball_WY[i] = 0.995*Ball_WY[i]
        Ball_WX[j] = 0.995*Ball_WX[j]
        Ball_WY[j] = 0.995*Ball_WY[j]
        
        'This code changes WX, then uses it for WX and WY
        'Ball_WX[i] = Ball_WX[i]*0.5 - Ball_WX[j]*0.5 + Distance_X *0.25
        'Ball_WY[i] = Ball_WY[i]*0.5 - Ball_WY[j]*0.5 + Distance_Y *0.25
        'Ball_WX[j] = Ball_WX[i]*0.5 + Ball_WX[j]*0.5 - Distance_X *0.25
        'Ball_WY[j] = Ball_WY[i]*0.5 + Ball_WY[j]*0.5 - Distance_Y *0.25
        
        'Ball_X[i] = Ball_X[j] - Distance_X/2
        'Ball_Y[i] = Ball_Y[j] - Distance_Y/2
        'Ball_X[j] = Ball_X[i] - Distance_X/2
        'Ball_Y[j] = Ball_Y[i] - Distance_Y/2
      EndIf
      
    endfor
    
    'No gravity for testing
    'Ball_WY[i] = Ball_WY[i] + 1
    Ball_X[i] = Ball_X[i] + Ball_WX[i]
    Ball_Y[i] = Ball_Y[i] + Ball_WY[i]
    
    Bounce()
    
    Shapes.Move(Ball[i],Ball_X[i]-Ball_Radius,Ball_Y[i]-Ball_Radius)
  EndFor
  
endsub

Sub Bounce
  
  'Friction for X and Y directions
  Ball_WX[i] = Ball_WX[i]*0.995
  Ball_WY[i] = Ball_WY[i]*0.995
  If Ball_X[i] > Game_Width - Ball_Radius Then
    Ball_WX[i] = Ball_WX[i]*-0.8
    Ball_X[i] = Game_Width - Ball_Radius
  ElseIf Ball_X[i] < Ball_Radius Then
    Ball_X[i] = Ball_Radius
    Ball_WX[i] = Ball_WX[i]*-0.8
  endif
  
  If Ball_Y[i] > Game_Height - Ball_Radius Then
    Ball_Y[i] = Game_Height - Ball_Radius
    Ball_WY[i] = Ball_WY[i]*-0.8
  ElseIf Ball_Y[i] < Ball_Radius Then
    Ball_Y[i] = Ball_Radius
    Ball_WY[i] = Ball_WY[i]*-0.8
  endif
  
EndSub



