gw = 720 'Graphics Window Dimensions (all can be changed)

gh = 650

Ball_Radius = 20

Ball_Number = 10   'Number of balls to be created

Ball_Diameter = 2 * Ball_Radius

Acceleration_Flag = 0  '1 for deceleration / 0 for no deceleration

dt = 1 'Timestep size (could reduce if tunnelling is an issue)



GraphicsWindow.Hide() 'Hides graphics window during set-up

GraphicsWindow.Width = gw

GraphicsWindow.Height = gh



GraphicsWindow.BrushColor = "Black"

GraphicsWindow.Show()



For i = 1 To Ball_Number   'Create balls and their variables

  Ball[i] = Shapes.AddEllipse(Ball_Diameter, Ball_Diameter)  

  Ball_X[i] = (Math.GetRandomNumber(gw - Ball_Diameter))  'Initial X Co-ord

  Ball_Y[i] = (Math.GetRandomNumber(gh - Ball_Diameter)) 

  Ball_vX[i] = (Math.GetRandomNumber(40) / 40) + 0.5      'Initial X Velocity

  Ball_vY[i] = (Math.GetRandomNumber(40) / 40) + 0.5

EndFor



While "True"          'Main Loop for Movement

  For i = 1 To Ball_Number

    Ball_X[i] = Ball_X[i] + Ball_vX[i]*dt

    Ball_Y[i] = Ball_Y[i] + Ball_vY[i]*dt

    Shapes.Move(Ball[i], Ball_X[i], Ball_Y[i])

    

    'Update Velocities for deceleration

    Ball_aX[i] = Ball_vX[i] * -0.0005 * Acceleration_Flag

    Ball_aY[i] = Ball_vY[i] * -0.0005 * Acceleration_Flag

    Ball_vX[i] = Ball_vX[i] + Ball_aX[i]

    Ball_vY[i] = Ball_vY[i] + Ball_aY[i]

  EndFor

  

  BounceCheck()           'Collisions with walls

  CollisionCheck()        'Collisions between balls

  Program.Delay(5)

EndWhile



Sub BounceCheck               'Simple inverting velocities

  For i = 1 To Ball_Number

    If (Ball_X[i] + Ball_Diameter) > gw Then

      Ball_vX[i] = -Ball_vX[i]

    EndIf

    If (Ball_X[i]) < 0 Then

      Ball_vX[i] = -Ball_vX[i]

    EndIf

    If (Ball_Y[i] + Ball_Diameter) > gh Then

      Ball_vY[i] = -Ball_vY[i]

    EndIf

    If Ball_Y[i] < 0 Then

      Ball_vY[i] = -Ball_vY[i]

    EndIf

  EndFor

EndSub



Sub CollisionCheck      'Subroutine to check if a collision needs to be calculated

  For i = 1 To (Ball_Number - 1)  'PROBLEM HERE?

    For j = i+1 To Ball_Number

      dx = Ball_X[i] - Ball_X[j]

      dy = Ball_Y[i] - Ball_Y[j]

      Distance = Math.SquareRoot(dx * dx + dy * dy)

      If Distance < Ball_Diameter Then

        CollisionCalculation()

      EndIf

    EndFor

  EndFor

EndSub



Sub CollisionCalculation      'Calculation of post collision velocities. Thanks to litdev for a great forum post on this

  

  Cx = (Ball_vX[i]+ball_vX[j])/2

  Cy = (Ball_vY[i]+ball_vY[j])/2

  Relative_vX[i] = Ball_vX[i] - Cx

  Relative_vY[i] = Ball_vY[i] - Cy

  Relative_vX[j] = Ball_vX[j] - Cx

  Relative_vY[j] = Ball_vY[j] - Cy

  Nx = dx / Distance

  Ny = dy / Distance

  L[i] = Nx * Relative_vX[i] + Ny * Relative_vY[i]

  L[j] = Nx * Relative_vX[j] + Ny * Relative_vY[j]

  

  Relative_vX[i] = Relative_vX[i] - (2 * L[i] * Nx)

  Relative_vY[i] = Relative_vY[i] - (2 * L[i] * Ny)

  Relative_vX[j] = Relative_vX[j] - (2 * L[j] * Nx)

  Relative_vY[j] = Relative_vY[j] - (2 * L[j] * Ny)

  

  Ball_vX[i] = (Relative_vX[i] + Cx) 

  Ball_vY[i] = (Relative_vY[i] + Cy)

  Ball_vX[j] = (Relative_vX[j] + Cx)

  Ball_vY[j] = (Relative_vY[j] + Cy)

  

EndSub
























