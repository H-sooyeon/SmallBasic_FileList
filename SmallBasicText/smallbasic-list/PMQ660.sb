' File Challenge Test
' Copyright Â© 2015 Nonki Takahashi.  The MIT License.
' Version 0.2a
' Last update 2015-05-18
'
title = "File Challenge Test 0.2a"
CRLF = Text.GetCharacter(13) + Text.GetCharacter(10)
Not = "True=False;False=True;"
TextWindow.Title = title
TextWindow.WriteLine(title + CRLF)

TextWindow.WriteLine("1. File_Exists(exists): True")
' The following line could be harmful and has been automatically commented.
' temp = File.GetTemporaryFilePath()
TextWindow.WriteLine("   " + temp)
param = ""
param["path"] = temp
File_Exists()
TextWindow.WriteLine("   Result: " + fileExists)
pass = fileExists
Test_Pass()

TextWindow.WriteLine("2. File_Exists(not exists): False")
' The following line could be harmful and has been automatically commented.
' File.DeleteFile(temp)
File_Exists()
TextWindow.WriteLine("   Result: " + fileExists)
pass = Not[fileExists]
Test_Pass()

TextWindow.WriteLine("3. Directory_Exists(exists): Ture")
Path_GetDirectoryName()
GetStamp()
temp = directoryName + "\dir" + stamp
' The following line could be harmful and has been automatically commented.
' File.CreateDirectory(temp)
param["path"] = temp
TextWindow.WriteLine("   " + temp)
Directory_Exists()
TextWindow.WriteLine("   Result: " + directoryExists)
pass = directoryExists
Test_Pass()

TextWindow.WriteLine("4. Directory_Exists(not exists): False")
' The following line could be harmful and has been automatically commented.
' File.DeleteDirectory(temp)
Directory_Exists()
TextWindow.WriteLine("   Result: " + directoryExists)
pass = Not[directoryExists]
Test_Pass()

Sub GetStamp
  ' return stamp
  stamp = Clock.Year + "-" + Clock.Month + "-" + Clock.Day
  stamp = stamp + "-" + Clock.Hour + "-" + Clock.Minute + "-" + Clock.Second
EndSub

Sub Directory_Exists
  ' param["path"] - the full path of the directory that needs to be checked 
  ' return directoryExists - "True" if the directory exists
  directoryExists = "False"
  Path_GetDirectoryName()
' The following line could be harmful and has been automatically commented.
'   dirs = File.GetDirectories(directoryName)
  nDirs = Array.GetItemCount(dirs)
  For i = 1 To nDirs
    If Text.ConvertToLowerCase(dirs[i]) = Text.ConvertToLowerCase(param["path"]) Then
      directoryExists = "True"
      i = nDirs ' break
    EndIf
  EndFor
EndSub

Sub File_Exists
  ' param["path"] - the full path of the file that needs to be checked 
  ' return fileExists - "True" if the file exists
  fileExists = "False"
  Path_GetDirectoryName()
' The following line could be harmful and has been automatically commented.
'   files = File.GetFiles(directoryName)
  nFiles = Array.GetItemCount(files)
  For i = 1 To nFiles
    If Text.ConvertToLowerCase(files[i]) = Text.ConvertToLowerCase(param["path"]) Then
      fileExists = "True"
      i = nFiles  ' break
    EndIf
  EndFor
EndSub

Sub Path_GetFileName
  ' param["path"] - the full path to be gotton file name 
  ' return fileName - the file name
  fileName = ""
  For p = Text.GetLength(param["path"]) To 1 Step -1
    c = Text.GetSubText(param["path"], p, 1)
    If c = "\" Or c = "/" Then
      fileName = Text.GetSubTextToEnd(param["path"], p + 1)
      p = 1 ' break
    EndIf
  EndFor
EndSub

Sub Path_GetDirectoryName
  ' param["path"] - the full path to be gotton directory name 
  ' return directoryName - the directory name
  directoryName = ""
  For p = Text.GetLength(param["path"]) To 1 Step -1
    c = Text.GetSubText(param["path"], p, 1)
    If c = "\" Or c = "/" Then
      directoryName = Text.GetSubText(param["path"], 1, p - 1)
      p = 1 ' break
    EndIf
  EndFor
EndSub

Sub Test_Pass
  ' param pass - if True show pass else show fail
  TextWindow.Write("   ")
  If pass Then
    TextWindow.ForegroundColor = "Green"
    TextWindow.WriteLine("PASS" + CRLF)
  Else
    TextWindow.ForegroundColor = "Red"
    TextWindow.WriteLine("FAIL" + CRLF)
  EndIf
  TextWindow.ForegroundColor = "Gray"
EndSub 
