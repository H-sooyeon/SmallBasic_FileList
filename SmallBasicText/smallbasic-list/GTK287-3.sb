Initialise()  'by Jibba Jabba, May 2014.  <<Hit the Roof - Level Ten>> v0.1.  GTK287-3  (a clone of a game by Zock77)



While "True"

  UpdateGame()  

  Shapes.Move(ball, X, Y)  'Update Frame  

  FrameRate() 

EndWhile



Sub UpdateGame

  'Process Async Events

  If keyPressed = "Right" Then  'reduce loc using array values 5 and -5

    velX = 5

  ElseIf keyPressed = "Left" Then    

    velX = -5

  EndIf

  keyPressed = ""

  

  'Update X & Y  

  Y = Y + velY 

  X = X + velX 

  

  'Check X & Y for Program Event and Update XY Precicisely  

  If Y <= 0 Then  'end of level    

    If level < 10 Then

      Shapes.Move(ball, X, 0)  'Program pauses & takes input so Update Frame relevent components

      GraphicsWindow.ShowMessage("Congrats, Level Complete. Start Next Level", "Level Won!!")

      ConfigureLevel()    

      InitialiseBallPosition()

    Else

      GraphicsWindow.Clear()

      GraphicsWindow.DrawText(10, 10, "OMG!! You hit the roof in Level 10!")

    EndIf

  EndIf  

  

  'Hit Side

  If X <= 0 Then  'split these 2 Or conditions to prevent ball getting locked against side (using posX) (check how this works)??

    velX = -velX  ' velX = -velX  +/- velX is set by keyPressed so i don't know if it is +/-  ????

    X = 0

  EndIf

  If X >= GraphicsWindow.Width - diameter Then

    velX = -velX

    X = GraphicsWindow.Width - diameter

  EndIf

  

  If Y > GraphicsWindow.Height - diameter Then   'Hit floor

    Y = GraphicsWindow.Height - diameter 

    bounceY = "True"

  EndIf 

  

  For i = Array.GetItemCount(rung) To 1 Step -1  'Hit rung

    If Y < Shapes.GetTop(rung[i]) And velY > 0 And Y > Shapes.GetTop(rung[i]) - diameter - velY Then

      If X + diameter/2 > Shapes.GetLeft(rung[i]) And X + diameter/2 < Shapes.GetLeft(rung[i]) + ((80-(level-1)*5) - ((i-1)* 5)) Then

        bounceY = "True"

        Y = Shapes.GetTop(rung[i]) - diameter  'can squash ball as well

      EndIf

    EndIf

  EndFor  

  

  If bounceY Then   'update velY for a bounce event     

    If bounceVelY = "" Then  'stores the 1st bounce velY, used once to maintain the same bounce height

      bounceVelY = velY

    Else

      velY = -bounceVelY 

    EndIf

    bounceY = "False" 

  Else    

    velY = velY + 1    

  EndIf

EndSub



Sub Initialise 

  GraphicsWindow.CanResize = "False" 

  GraphicsWindow.Width = 270

  GraphicsWindow.Height = 400  

  

  For i = 1 To 6   

    rung[i] = Shapes.AddRectangle(80, 5)

  EndFor

  

  ConfigureLevel()

  

  diameter = 15  'Add ball

  ball = Shapes.AddEllipse(diameter, diameter)

  

  InitialiseBallPosition()  

  

  GraphicsWindow.KeyDown = OnKeyDown

EndSub



Sub OnKeyDown

  keyPressed = GraphicsWindow.LastKey    

EndSub



Sub InitialiseBallPosition

  X = Shapes.GetLeft(rung[1]) - diameter - 20

  If X < 0 Then

    X = Shapes.GetLeft(rung[1]) + diameter + ((80-(level-1)*5) - ((1-1)* 5))

  EndIf

  Y = GraphicsWindow.Height - 100  

EndSub



Sub ConfigureLevel

  velX = 0  

  velY = 0  

  level = level + 1

  For i = 1 To Array.GetItemCount(rung)

    Shapes.Move(rung[i], Math.GetRandomNumber(GraphicsWindow.Width - ((80-(level-1)*5) - ((i-1)* 5))), GraphicsWindow.Height - 55 *i)

    

    'Validate for doability,  'maxGap = 70

    If Shapes.GetLeft(rung[i]) > Shapes.GetLeft(rung[i-1]) + (80-(level-1)*5) - ((i-2)* 5) + 70 And i > 1 Then      

      Shapes.Move(rung[i], Shapes.GetLeft(rung[i-1]) + (80-(level-1)*5) - ((i-2)* 5) + 70, GraphicsWindow.Height - 55 *i)

    EndIf    

    If Shapes.GetLeft(rung[i]) + (80-(level-1)*5) - ((i-1)* 5) - Shapes.GetLeft(rung[i-1]) < -70  Then      

      Shapes.Move(rung[i], Shapes.GetLeft(rung[i-1]) - ((80-(level-1)*5) - ((i-1)* 5)) - 70, GraphicsWindow.Height - 55 *i)

    EndIf

    

    Controls.SetSize(rung[i], (80-(level-1)*5) - ((i-1)* 5), 5) 'use this to calc rungWidths in Collision Check ((80-(level-1)*5) - ((i-1)* 5))

  EndFor  

  GraphicsWindow.Title = "<<Hit the Roof>> Level " + level + " of 10" '+ " : Time " + 0 'replace <0> w/  <(score + 0)>     

EndSub



Sub FrameRate

  Program.Delay(Math.Max(0, 20 - (Clock.ElapsedMilliseconds - start))) '50 fps Else Delay(0) & any lag

  start = Clock.ElapsedMilliseconds

EndSub


