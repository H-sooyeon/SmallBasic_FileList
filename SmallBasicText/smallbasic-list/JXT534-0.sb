' Cancer
' Version 0.2
' かに
' July
' Copyright © 2016 Nonki Takahashi.  The MIT License.
' Update 2016-04-02
' Program ID JXT534-0
'
' Reference:
'  http://en.wikipedia.org/wiki/List_of_stars_in_Cancer
'
GraphicsWindow.Title = "Cancer 0.2"
SB_Workaround()
zodiac = "1=♑;2=♒;3=♓;4=♈;5=♉;6=♊;7=♋;8=♌;9=♍;10=♎;11=♏;12=♐;"
mname = "1=January;2=February;3=March;4=April;5=May;6=June;7=July;"
mname = mname + "8=August;9=September;10=October;11=November;"
mname = mname + "12=December;"
year = 2016
month = 7
wrap = "False"
gw = 598
gh = 428
xz = gw - 120 ' for zodiac symbol
yz = 20
xm = 50       ' for month and year
ym = 320
xc = 30       ' for calendar
yc = 30
xs = -800     ' offset for star sign
ys = 150
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
GraphicsWindow.BackgroundColor = "Black"
'Goto Skip
' initialize shapes
Shapes_Init()
' add shapes
scale = 1
angle = 0
iMin = 1
iMax = 40
Shapes_Add()
Skip:
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontName = "Tahoma"
GraphicsWindow.FontSize = 100
GraphicsWindow.BrushColor = "Gray"
symbol = Shapes.AddText(zodiac[month])
Shapes.Move(symbol, xz, yz)
InitStars()
num = Array.GetItemCount(star)
index = Array.GetAllIndices(star)
offsetX = 0
offsetY = 0
GetMinMax()
offsetX = -xMin + xs
offsetY = -yMin + ys
DrawGrids()
GraphicsWindow.PenWidth = 1
GraphicsWindow.PenColor = "DarkGray"
num = Array.GetItemCount(edge)
index = Array.GetAllIndices(edge)
For i = 1 To num
  e = edge[index[i]]
  m = Text.GetIndexOf(e, "-")
  ra = star[Text.GetSubText(e, 1, m - 1)]["RA"]
  dec = star[Text.GetSubText(e, 1, m - 1)]["Dec"]
  RADec2XY()
  x1 = x
  y1 = y
  ra = star[Text.GetSubTextToEnd(e, m + 1)]["RA"]
  dec = star[Text.GetSubTextToEnd(e, m + 1)]["Dec"]
  RADec2XY()
  x2 = x
  y2 = y
  Shapes.AddLine(x1, y1, x2, y2)
EndFor
num = Array.GetItemCount(star)
index = Array.GetAllIndices(star)
GraphicsWindow.BrushColor = "White"
For i = 1 To num
  ra = star[index[i]]["RA"]
  dec = star[index[i]]["Dec"]
  RADec2XY()
  mag = star[index[i]]["Mag"]
  d = 20 / mag
  ell = Shapes.AddEllipse(d, d)
  Shapes.Move(ell, x - d / 2, y - d / 2) 
EndFor
GraphicsWindow.BrushColor = "White"
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 30
GraphicsWindow.DrawText(xm, ym, mname[month])
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 40
GraphicsWindow.DrawText(xm, ym + 30, year)
Cal_Init()
sBuf = year + "," + month
Command_GetArgs()
iYear = sArg[1]
if iYear = "" Then
  Goto lEnd
Endif
If Math.Remainder(iYear, 4) = 0 And Math.Remainder(iYear, 100) > 0 Or Math.Remainder(iYear, 400) = 0 Then
  iDoM[2] = iDoM[2] + 1
Endif
iNoL = Math.Floor((iYear - 1) / 4) - Math.Floor((iYear - 1) / 100) + Math.Floor((iYear - 1) / 400)  ' number of leap year
iWoY = Math.Remainder((iYear + iNoL), 7)  ' week of year
iMonth = sArg[2]
If iMonth = "" Then
  iM0 = 1
  iM1 = 12
Else
  iM0 = iMonth
  iM1 = iMonth
Endif
iDoY = 0  ' days of year
iNoM = 1  ' number of month
For iM = iM0 To iM1
  While iNoM < iM
    iDoY = iDoY + iDoM[iNoM]
    iNoM = iNoM + 1
  EndWhile
  Cal_DrawMonth()
EndFor  
lEnd:
' Blink start
While "True"
  Program.Delay(2900)
  Shapes.HideShape(shape[39]["obj"])
  Shapes.HideShape(shape[40]["obj"])
  Program.Delay(100)
  Shapes.ShowShape(shape[39]["obj"])
  Shapes.ShowShape(shape[40]["obj"])
EndWhile
' end of main
Sub Cal_Init
  ' Calendar | Initialize days of month
  CRLF = Text.GetCharacter(13) + Text.GetCharacter(10)
  iDoM = "1=31;2=28;3=31;4=30;5=31;6=30;7=31;8=31;9=30;10=31;11=30;12=31;"
EndSub
Sub Cal_DrawMonth
  ' Calendar | Print month
  ' param iM - month
  ' param iDoY - days of year
  ' param iWoY - week of year
  ' param xc, yc - coordinate for left top of the calendar
  If silverlight Then
    Program.Delay(msWait)
  EndIf
  GraphicsWindow.FontSize = 16
  GraphicsWindow.FontName = "Consolas"
  iW = Math.Remainder((iDoY + iWoY), 7)
  line = "SUN MON TUE WED THU FRI SAT" + CRLF
  iWoM = 0
  While iWoM < iW
    line = line + "    "
    iWoM = iWoM + 1
  EndWhile
  For iD = 1 To iDoM[iM]
    If iD < 10 Then
      line = line + "  " + iD + " "
    Else
      line = line + " " + iD + " "
    EndIf
    If Math.Remainder(iWoM, 7) = 6 Then
      line = line + CRLF
    EndIf
    iWoM = iWoM + 1
  EndFor
  If Math.Remainder(iWoM, 7) > 0 Then
    line = line + CRLF
  EndIf
  cal = Shapes.AddText(line)
  Shapes.Move(cal, xc, yc)
EndSub
Sub Command_GetArgs
  ' Command line | Get arguments
  ' param sBuf - input buffer
  ' return sArg[] - arguments
  ' return iN - number of arguments
  iP = 1  ' buffer pointer
  iN = 1  ' number of args
  iC = Text.GetIndexOf(sBuf, ",")   ' index of comma
  While iC > iP
    sArg[iN] = Text.GetSubText(sBuf, iP, iC - iP)
    iP = iC + 1
    iN = iN + 1
    iC = Text.GetIndexOf(sBuf, ",")
  EndWhile
  iE = Text.GetLength(sBuf) + 1     ' end of buffer
  sArg[iN] = Text.GetSubText(sBuf, iP, iE - iP)  
EndSub
Sub GetMinMax
  For i = 1 To num
    ra = star[index[i]]["RA"]
    dec = star[index[i]]["Dec"]
    RADec2XY()
    ra1 = Text.GetSubText(ra, 1, 2)
    If wrap And 12 < ra1 Then
      ra1 = ra1 - 24
    EndIf
    If i = 1 Then
      raMin = ra1
      decMin = Text.GetSubText(dec, 1, 3)
      raMax = ra1
      decMax = Text.GetSubText(dec, 1, 3)
      xMin = x
      yMin = y
      xMax = x
      yMax = y
    Else
      raMin = Math.Min(ra1, raMin)
      decMin = Math.Min(Text.GetSubText(dec, 1, 3), decMin)
      raMax = Math.Max(ra1, raMax)
      decMax = Math.Max(Text.GetSubText(dec, 1, 3), decMax)
      xMin = Math.Min(x, xMin)
      yMin = Math.Min(y, yMin)
      xMax = Math.Max(x, xMax)
      yMax = Math.Max(y, yMax)
    EndIf
  EndFor
  decMin = Math.Floor(decMin / 10) * 10
  raMax = raMax + 1
  decMax = decMax + 1
EndSub
Sub InitStars
  ' Initialize stars in Cancer
  ' index: Flamsteed designation
  ' RA (Right ascension), Dec (Declination), Mag (Apparent magnitude)
  star[17] = "name=β Cnc;ra=08 16 30.95;dec=+09 11 08.4;mag=3.53;"
  star[47] = "name=δ Cnc;ra=08 44 41.11;dec=+18 09 17.5;mag=3.94;"
  star[48] = "name=ι Cnc A;ra=08 46 41.83;dec=+28 45 36.0;mag=4.03;"
  star[65] = "name=α Cnc;ra=08 58 29.20;dec=+11 51 28.0;mag=4.26;"
  star[43] = "name=γ Cnc;ra=08 43 17.21;dec=+21 28 06.9;mag=4.66;"
  star[16] = "name=ζ Cnc;ra=08 12 12.71;dec=+17 38 53.3;mag=4.67;"
  star[8] = "name=8 Cnc;ra=08 05 04.51;dec=+13 07 06.1;mag=5.14;"
  star[18] = "name=χ Cnc;ra=08 20 03.87;dec=+27 13 07.0;mag=5.14;"
  star[77] = "name=ξ Cnc;ra=09 09 21.53;dec=+22 02 43.6;mag=5.16;"
  star[62] = "name=ο1 Cnc;ra=08 57 14.91;dec=+15 19 21.8;mag=5.22;"
  star[58] = "name=ρ2 Cnc;ra=08 55 39.69;dec=+27 55 39.2;mag=5.23;"
  star[64] = "name=σ3 Cnc;ra=08 59 32.68;dec=+32 25 07.1;mag=5.23;"
  star[76] = "name=κ Cnc;ra=09 07 44.82;dec=+10 40 05.6;mag=5.23;"
  star[10] = "name=μ2 Cnc;ra=08 07 45.84;dec=+21 34 55.1;mag=5.30;"
  star[31] = "name=θ Cnc;ra=08 31 35.77;dec=+18 05 40.4;mag=5.33;"
  star[33] = "name=η Cnc;ra=08 32 42.52;dec=+20 26 28.6;mag=5.33;"
  star[82] = "name=82 Cnc;ra=09 15 13.88;dec=+14 56 29.5;mag=5.36;"
  star[57] = "name=57 Cnc;ra=08 54 14.70;dec=+30 34 45.0;mag=5.40;"
  star[72] = "name=τ Cnc;ra=09 08 00.07;dec=+29 39 15.2;mag=5.42;"
  star[60] = "name=60 Cnc;ra=08 55 55.56;dec=+11 37 33.8;mag=5.44;"
  star[59] = "name=σ2 Cnc;ra=08 56 56.63;dec=+32 54 38.1;mag=5.44;"
  star[69] = "name=ν Cnc;ra=09 02 44.27;dec=+24 27 10.6;mag=5.45;"
  star[27] = "name=27 Cnc;ra=08 26 43.95;dec=+12 39 17.5;mag=5.56;"
  star[22] = "name=φ1 Cnc;ra=08 26 27.73;dec=+27 53 37.9;mag=5.58;"
  star[3] = "name=3 Cnc;ra=08 00 47.31;dec=+17 18 31.4;mag=5.60;"
  star[15] = "name=15 Cnc;ra=08 13 08.87;dec=+29 39 23.7;mag=5.62;"
  star[45] = "name=45 Cnc;ra=08 43 12.34;dec=+12 40 51.1;mag=5.62;"
  star[49] = "name=49 Cnc;ra=08 44 45.04;dec=+10 04 54.2;mag=5.63;"
  star[51] = "name=σ1 Cnc;ra=08 52 34.62;dec=+32 28 26.8;mag=5.67;"
  star[63] = "name=ο2 Cnc;ra=08 57 35.16;dec=+15 34 52.4;mag=5.68;"
  star[30] = "name=υ1 Cnc;ra=08 31 30.57;dec=+24 04 52.4;mag=5.71;"
  star[14] = "name=ψ2 Cnc;ra=08 10 27.23;dec=+25 30 29.4;mag=5.73;"
  star[1] = "name=1 Cnc;ra=07 56 59.47;dec=+15 47 25.4;mag=5.80;"
  star[2] = "name=ω1 Cnc;ra=08 00 55.87;dec=+25 23 34.2;mag=5.87;"
  star[50] = "name=50 Cnc;ra=08 46 56.06;dec=+12 06 36.3;mag=5.89;"
  star[66] = "name=66 Cnc;ra=09 01 24.13;dec=+32 15 08.3;mag=5.89;"
  star[19] = "name=λ Cnc;ra=08 20 32.15;dec=+24 01 20.5;mag=5.92;"
  star[36] = "name=36 Cnc;ra=08 37 05.79;dec=+09 39 20.1;mag=5.92;"
  star[20] = "name=20 Cnc;ra=08 23 21.87;dec=+18 19 56.2;mag=5.94;"
  star[29] = "name=29 Cnc;ra=08 28 37.35;dec=+14 12 39.1;mag=5.94;"
  star[75] = "name=75 Cnc;ra=09 08 47.42;dec=+26 37 48.0;mag=5.95;"
  star[(1)] = "name=1 LMi;ra=08 38 19.00;dec=+32 48 07.3;mag=5.96;"
  star[55] = "name=55 Cnc;ra=08 52 36.13;dec=+28 19 53.0;mag=5.96;"
  star[9] = "name=μ1 Cnc;ra=08 06 18.40;dec=+22 38 07.8;mag=5.97;"
  star[5] = "name=5 Cnc;ra=08 01 30.29;dec=+16 27 19.2;mag=5.99;"
  star[79] = "name=79 Cnc;ra=09 10 20.86;dec=+21 59 47.1;mag=6.04;"
  star[28] = "name=28 Cnc;ra=08 28 36.80;dec=+24 08 42.2;mag=6.05;"
  star[67] = "name=67 Cnc;ra=09 01 48.88;dec=+27 54 10.0;mag=6.07;"
  star[21] = "name=21 Cnc;ra=08 23 55.21;dec=+10 37 55.6;mag=6.11;"
  star[25] = "name=25 Cnc;ra=08 25 49.99;dec=+17 02 47.9;mag=6.11;"
  star[46] = "name=46 Cnc;ra=08 45 21.42;dec=+30 41 51.9;mag=6.12;"
  star[23] = "name=φ2 Cnc A;ra=08 26 47.08;dec=+26 56 07.7;mag=6.14;"
  star[23] = "name=φ2 Cnc B;ra=08 26 47.00;dec=+26 56 07.0;mag=6.19;"
  star[(4)] = "name=4 LMi;ra=08 40 18.31;dec=+31 56 31.1;mag=6.21;"
  star[12] = "name=12 Cnc;ra=08 08 42.44;dec=+13 38 27.4;mag=6.25;"
  star[53] = "name=53 Cnc;ra=08 52 28.60;dec=+28 15 33.0;mag=6.25;"
  star[61] = "name=61 Cnc;ra=08 57 58.63;dec=+30 14 01.5;mag=6.25;"
  star[41] = "name=ε Cnc;ra=08 40 27.03;dec=+19 32 41.4;mag=6.29;"
  star[4] = "name=4 Cnc;ra=08 01 43.77;dec=+25 05 22.0;mag=6.32;"
  star[32] = "name=υ2 Cnc;ra=08 33 00.14;dec=+24 05 05.7;mag=6.35;"
  star[54] = "name=54 Cnc;ra=08 51 01.53;dec=+15 21 01.7;mag=6.36;"
  star[39] = "name=39 Cnc;ra=08 40 06.44;dec=+20 00 28.1;mag=6.39;"
  star[13] = "name=ψ1 Cnc;ra=08 10 13.12;dec=+25 50 40.4;mag=6.44;"
  star[34] = "name=34 Cnc;ra=08 32 39.87;dec=+10 03 57.7;mag=6.48;"
  star[81] = "name=81 Cnc;ra=09 12 17.87;dec=+14 59 43.6;mag=6.49;"
  star[24] = "name=24 Cnc A;ra=08 26 39.82;dec=+24 32 03.7;mag=6.51;"
  star[37] = "name=37 Cnc;ra=08 38 05.19;dec=+09 34 28.7;mag=6.54;"
  star[35] = "name=35 Cnc;ra=08 35 19.47;dec=+19 35 24.3;mag=6.55;"
  '  star[48] = "name=ι Cnc B;ra=08 46 40.00;dec=+28 45 54.6;mag=6.58;"
  star[40] = "name=40 Cnc;ra=08 40 11.47;dec=+19 58 16.2;mag=6.61;"
  star[83] = "name=83 Cnc;ra=09 18 58.91;dec=+17 42 20.4;mag=6.61;"
  star[38] = "name=38 Cnc;ra=08 39 42.68;dec=+19 46 42.5;mag=6.66;"
  star[70] = "name=70 Cnc;ra=09 04 09.87;dec=+27 53 53.9;mag=6.67;"
  star[(2)] = "name=2 LMi;ra=08 39 31.87;dec=+32 30 56.2;mag=6.69;"
  star[(3)] = "name=3 LMi;ra=08 39 56.35;dec=+32 43 38.2;mag=6.71;"
  star[42] = "name=42 Cnc;ra=08 40 43.23;dec=+19 43 09.6;mag=6.83;"
  star[7] = "name=7 Cnc;ra=08 03 50.48;dec=+22 04 14.9;mag=6.84;"
  star[80] = "name=80 Cnc;ra=09 11 56.93;dec=+18 02 39.0;mag=6.87;"
  star[78] = "name=78 Cnc;ra=09 09 02.31;dec=+17 28 10.7;mag=7.18;"
  star[52] = "name=52 Cnc;ra=08 51 10.83;dec=+15 59 57.8;mag=7.38;"
  star[24] = "name=24 Cnc B;ra=08 26 40.10;dec=+24 32 07.0;mag=7.81;"
  star[44] = "name=44 Cnc;ra=08 43 08.36;dec=+18 09 02.0;mag=8.03;"
  star[71] = "name=71 Cnc;ra=09 05 45.52;dec=+17 23 24.5;mag=8.10;"
  edge = "1=48-43;2=43-47;3=47-65;4=47-17;"
EndSub
Sub DrawGrids
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "DimGray"
  GraphicsWindow.BrushColor = "DimGray"
  If silverlight Then
    Program.Delay(msWait)
  EndIf
  GraphicsWindow.FontSize = 12
  y1 = 0
  y2 = GraphicsWindow.Height
  For ra = raMin To raMax
    RADec2XY()
    Shapes.AddLine(x, y1, x, y2)
    raTxt = ra
    If wrap And raTxt < 0 Then
      raTxt = raTxt + 24
    EndIf
    txt = Shapes.AddText(raTxt + "h")
    Shapes.Move(txt, x, 5) 
  EndFor
  x1 = 0
  x2 = GraphicsWindow.Width
  For dec = decMin To decMax + 10 Step 10
    If dec > 0 Then
      dec = Text.Append("+", Math.Abs(dec))
    EndIf
    RADec2XY()
    Shapes.AddLine(x1, y, x2, y)
    txt = Shapes.AddText(dec)
    Shapes.Move(txt, x1, y) 
  EndFor
EndSub
Sub RADec2XY
  ' param ra - right ascension
  ' param dec - declination
  ' return x, y
  x = Text.GetSubText(ra, 1, 2)
  If wrap And 12 < x Then
    x = x - 24
  EndIf
  x = x + Text.GetSubText(ra, 4, 2) / 60
  x = x + Text.GetSubText(ra, 7, 5) / 3600
  x = offsetX - (x - raMin) * 3600 / 24
  y = Text.GetSubText(dec, 2, 2)
  y = y + Text.GetSubText(dec, 5, 2) / 60
  y = y + Text.GetSubText(dec, 8, 5) / 3600
  y = y * Text.Append(Text.GetSubText(dec, 1, 1), "1")
  y = offsetY - y * 3600 / 360
EndSub
Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 243 ' x offset
  shY = 117 ' y offset
  shape = ""
  shape[1] = "func=ell;x=60;y=44;width=126;height=181;bc=#661F1F;pc=#000000;pw=2;"
  shape[2] = "func=ell;x=54;y=99;width=21;height=21;bc=#661F1F;pc=#000000;pw=2;"
  shape[3] = "func=ell;x=56;y=145;width=21;height=21;bc=#661F1F;pc=#000000;pw=2;"
  shape[4] = "func=rect;x=73;y=22;width=27;height=23;angle=12;bc=#661F1F;pc=#000000;pw=2;"
  shape[5] = "func=rect;x=96;y=30;width=24;height=22;angle=21;bc=#661F1F;pc=#000000;pw=2;"
  shape[6] = "func=rect;x=49;y=209;width=29;height=22;bc=#661F1F;pc=#000000;pw=2;"
  shape[7] = "func=rect;x=70;y=207;width=24;height=19;angle=327;bc=#661F1F;pc=#000000;pw=2;"
  shape[8] = "func=tri;x=107;y=15;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=332;bc=#661F1F;pc=#000000;pw=2;"
  shape[9] = "func=tri;x=131;y=12;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=338;bc=#661F1F;pc=#000000;pw=2;"
  shape[10] = "func=tri;x=152;y=21;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=346;bc=#661F1F;pc=#000000;pw=2;"
  shape[11] = "func=tri;x=170;y=34;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=351;bc=#661F1F;pc=#000000;pw=2;"
  shape[12] = "func=tri;x=103;y=218;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=214;bc=#661F1F;pc=#000000;pw=2;"
  shape[13] = "func=tri;x=127;y=217;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=214;bc=#661F1F;pc=#000000;pw=2;"
  shape[14] = "func=tri;x=142;y=219;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=214;bc=#661F1F;pc=#000000;pw=2;"
  shape[15] = "func=tri;x=161;y=206;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=214;bc=#661F1F;pc=#000000;pw=2;"
  shape[16] = "func=tri;x=49;y=102;x1=7;y1=0;x2=0;y2=37;x3=14;y3=37;angle=290;bc=#661F1F;pc=#000000;pw=2;"
  shape[17] = "func=tri;x=49;y=122;x1=7;y1=0;x2=0;y2=36;x3=14;y3=36;angle=264;bc=#661F1F;pc=#000000;pw=2;"
  shape[18] = "func=rect;x=127;y=77;width=14;height=33;angle=351;bc=#661F1F;pc=#000000;pw=2;"
  shape[19] = "func=rect;x=141;y=74;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[20] = "func=rect;x=158;y=84;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[21] = "func=rect;x=169;y=96;width=14;height=33;angle=10;bc=#661F1F;pc=#000000;pw=2;"
  shape[22] = "func=rect;x=122;y=161;width=14;height=33;angle=7;bc=#661F1F;pc=#000000;pw=2;"
  shape[23] = "func=rect;x=136;y=162;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[24] = "func=rect;x=153;y=160;width=14;height=33;angle=352;bc=#661F1F;pc=#000000;pw=2;"
  shape[25] = "func=rect;x=167;y=150;width=14;height=33;angle=351;bc=#661F1F;pc=#000000;pw=2;"
  shape[26] = "func=rect;x=120;y=48;width=14;height=33;angle=338;bc=#661F1F;pc=#000000;pw=2;"
  shape[27] = "func=rect;x=139;y=46;width=14;height=33;angle=351;bc=#661F1F;pc=#000000;pw=2;"
  shape[28] = "func=rect;x=158;y=55;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[29] = "func=rect;x=173;y=67;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[30] = "func=rect;x=117;y=191;width=14;height=33;angle=12;bc=#661F1F;pc=#000000;pw=2;"
  shape[31] = "func=rect;x=136;y=194;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[32] = "func=rect;x=154;y=192;width=14;height=33;angle=7;bc=#661F1F;pc=#000000;pw=2;"
  shape[33] = "func=rect;x=170;y=181;width=14;height=33;bc=#661F1F;pc=#000000;pw=2;"
  shape[34] = "func=ell;x=70;y=99;width=114;height=68;bc=#661F1F;pc=#000000;pw=2;"
  shape[35] = "func=ell;x=14;y=0;width=50;height=102;angle=45;bc=#661F1F;pc=#000000;pw=2;"
  shape[36] = "func=ell;x=0;y=132;width=49;height=105;angle=342;bc=#661F1F;pc=#000000;pw=2;"
  shape[37] = "func=tri;x=16;y=34;x1=18;y1=0;x2=0;y2=66;x3=36;y3=66;angle=30;bc=#000000;pw=0;"
  shape[38] = "func=tri;x=13;y=130;x1=11;y1=0;x2=0;y2=73;x3=23;y3=73;angle=168;bc=#000000;pw=0;"
  shape[39] = "func=ell;x=54;y=99;width=21;height=21;bc=#33000000;pc=#000000;pw=2;"
  shape[40] = "func=ell;x=56;y=145;width=21;height=21;bc=#33000000;pc=#000000;pw=2;"
EndSub
Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub
Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub
Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub
Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
