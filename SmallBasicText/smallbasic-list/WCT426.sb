GraphicsWindow.Title = "DuckShoot"

Shapes_Init()
scale = 1
angle = 0
iMin = 1
iMax = 10
Shapes_Add()
Sighter_Init()
iMin = 11
iMax = 14
Shapes_Add()
GraphicsWindow.FontSize = 50
GraphicsWindow.BackgroundColor = "Darkgreen
GraphicsWindow.BrushColor = "#77ff0000"
txx=Shapes.AddText("DuckShoot")
shapes.move(txx 170 60)
Timer.Tick=ttt
Timer.Interval=75
GraphicsWindow.MouseDown=mdd
'GraphicsWindow.MouseMove=mww


Sub ttt
  
  dx=dx+9
  dy=dy+4
  If dx>200 Then 
    dx=-200
  EndIf
  If dy>100 Then
    dy=-100
  EndIf
EndSub

Sub mdd
  GraphicsWindow.BrushColor="black
  GraphicsWindow.PenWidth=0
  ff=Shapes.AddEllipse(9 9)
  Shapes.Move(ff GraphicsWindow.MouseX GraphicsWindow.MouseY)
  Shapes.HideShape(ff)
  tm=0
  trgg="true
  GraphicsWindow.BackgroundColor = "Darkred
  For q=11 To 14
    Shapes.HideShape(shape[q]["obj"])
  EndFor
EndSub

wait = "True"

While wait
  Program.Delay(35)
  x =GraphicsWindow.MouseX-45
  y =GraphicsWindow.MouseY-45
  iMin = 11
  iMax = 14
  Shapes_Move()
  
  iMin = 1
  iMax = 10
  x=GraphicsWindow.Width-GraphicsWindow.MouseX+dx
  y=GraphicsWindow.Height-GraphicsWindow.MouseY+dy
  Shapes_Move()
  tm=tm+1
  If trgg and tm>20 Then
    tm=0
    
    trgg="false
    Shapes.ShowShape(ff)
    For n=1 To 10
      If LDShapes.OverlapCircle(ff shape[n]["obj"]) Then
        Shapes.SetText(txx "Hit !")
        Goto hhh
      EndIf
    EndFor
    Shapes.SetText(txx "Missed :(")
    hhh:
    
    
    Program.Delay(1150)
    Shapes.SetText(txx "Shoot...")
    Shapes.Remove(ff)
    GraphicsWindow.BackgroundColor = "Darkgreen
    For q=11 To 14
      Shapes.showShape(shape[q]["obj"])
    EndFor
  EndIf
  
  If Math.Remainder(tm 20)=0 Then
    Shapes.HideShape(shape[4]["obj"])
    Program.Delay(73)
    Shapes.ShowShape(shape[4]["obj"])
  EndIf
EndWhile

Sub Sighter_Init
  shX = 250 ' x offset
  shY = 200 ' y offset
  shape[11] = "func=ell;x=0;y=0;width=80;height=80;bc=#005AC3CD;pc=#FFFFFF;pw=2;"
  shape[12] = "func=ell;x=20;y=20;width=40;height=40;bc=#005AC3CD;pc=#FFFFFF;pw=2;"
  shape[13] = "func=line;x=1;y=40;x1=0;y1=0;x2=80;y2=0;pc=#FFFFFF;pw=2;"
  shape[14] = "func=line;x=41;y=0;x1=0;y1=0;x2=0;y2=80;pc=#FFFFFF;pw=2;"
EndSub

Sub Shapes_Init
  shX = 194 ' x offset
  shY = 150 ' y offset
  shape = ""
  shape[1] = "func=tri;x=153;y=41;x1=47;y1=0;x2=0;y2=22;x3=95;y3=22;bc=#CD845A;pw=0;"
  shape[2] = "func=ell;x=118;y=0;width=91;height=73;bc=#CDBE5A;pw=0;"
  shape[3] = "func=line;x=172;y=36;x1=0;y1=0;x2=22;y2=0;pc=#000000;pw=2;"
  shape[4] = "func=ell;x=172;y=25;width=22;height=22;bc=#000000;pw=0;"
  shape[5] = "func=tri;x=132;y=58;x1=31;y1=0;x2=0;y2=45;x3=62;y3=45;bc=#CDBE5A;pw=0;"
  shape[6] = "func=tri;x=0;y=80;x1=37;y1=0;x2=0;y2=32;x3=75;y3=32;angle=178;bc=#CDBE5A;pw=0;"
  shape[7] = "func=line;x=91;y=134;x1=0;y1=0;x2=0;y2=36;pc=#CD845A;pw=8;"
  shape[8] = "func=ell;x=33;y=72;width=164;height=82;bc=#CDBE5A;pw=0;"
  shape[9] = "func=tri;x=58;y=180;x1=46;y1=0;x2=0;y2=14;x3=93;y3=14;bc=#CD845A;pw=0;"
  shape[10] = "func=line;x=90;y=169;x1=0;y1=0;x2=14;y2=15;pc=#CD845A;pw=8;"
EndSub

Sub Math_CartesianToPolar
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub Shapes_Add
  Stack.PushValue("local", i)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    GraphicsWindow.PenWidth = shape[i]["pw"] * s
    If shape[i]["pw"] > 0 Then
      GraphicsWindow.PenColor = shape[i]["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) Then
      GraphicsWindow.BrushColor = shape[i]["bc"]
    EndIf
    If shape[i]["func"] = "rect" Then
      shape[i]["obj"] = Shapes.AddRectangle(shape[i]["width"]* s, shape[i]["height"] * s)
    ElseIf shape[i]["func"] = "ell" Then
      shape[i]["obj"] = Shapes.AddEllipse(shape[i]["width"]* s, shape[i]["height"] * s)
    ElseIf shape[i]["func"] = "tri" Then
      shape[i]["obj"] = Shapes.AddTriangle(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s, shape[i]["x3"] * s, shape[i]["y3"] * s)
    ElseIf shape[i]["func"] = "line" Then
      shape[i]["obj"] = Shapes.AddLine(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s)
    EndIf
    
    Shapes.Move(shape[i]["obj"], shX + shape[i]["x"] * s, shY + shape[i]["y"] * s)
    
    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) And shape[i]["angle"] <> 0 Then
      Shapes.Rotate(shape[i]["obj"], shape[i]["angle"])
    EndIf
    shape[i]["rx"] = shape[i]["x"]
    shape[i]["ry"] = shape[i]["y"]
  EndFor
  shAngle = 0
  i = Stack.PopValue("local")
EndSub

Sub Shapes_CalcWidthAndHeight
  For i = iMin To iMax
    If shape[i]["func"] = "tri" Or shape[i]["func"] = "line" Then
      xmin = shape[i]["x1"]
      xmax = shape[i]["x1"]
      ymin = shape[i]["y1"]
      ymax = shape[i]["y1"]
      If shape[i]["x2"] < xmin Then
        xmin = shape[i]["x2"]
      EndIf
      If xmax < shape[i]["x2"] Then
        xmax = shape[i]["x2"]
      EndIf
      If shape[i]["y2"] < ymin Then
        ymin = shape[i]["y2"]
      EndIf
      If ymax < shape[i]["y2"] Then
        ymax = shape[i]["y2"]
      EndIf
      If shape[i]["func"] = "tri" Then
        If shape[i]["x3"] < xmin Then
          xmin = shape[i]["x3"]
        EndIf
        If xmax < shape[i]["x3"] Then
          xmax = shape[i]["x3"]
        EndIf
        If shape[i]["y3"] < ymin Then
          ymin = shape[i]["y3"]
        EndIf
        If ymax < shape[i]["y3"] Then
          ymax = shape[i]["y3"]
        EndIf
      EndIf
      shape[i]["width"] = xmax - xmin
      shape[i]["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shape[i]["x"] + shape[i]["width"]
      shHeight = shape[i]["y"] + shape[i]["height"]
    Else
      If shWidth < shape[i]["x"] + shape[i]["width"] Then
        shWidth = shape[i]["x"] + shape[i]["width"]
      EndIf
      If shHeight < shape[i]["y"] + shape[i]["height"] Then
        shHeight = shape[i]["y"] + shape[i]["height"]
      EndIf
    EndIf
  EndFor
EndSub

Sub Shapes_Move
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    _x = shape[i]["rx"]
    _y = shape[i]["ry"]
    Shapes.Move(shape[i]["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
