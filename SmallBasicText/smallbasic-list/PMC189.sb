' * @param ryb   {array} RYB values in the form of [0, 255, 0] 
' * @param limit {int}   [optional] max value of the color, defaults to 255 
' * @param magic {array} An array of magic colors to use in the color space interpolation 

' * returns an array of the RGB values 
GraphicsWindow.Title="RYB mixing ----------------    vs    --------------   RGB mixing
args=0
GraphicsWindow.BackgroundColor="teal
mm="1,1,1|1,1,0|1,0,0|1,0.5,0|0.163,0.373,0.6|0.0,0.66,0.2|0.5,0.0,0.5|0.2,0.094,0
m1=LDText.Split(mm "|")
For r=0 to 7 
  ss= LDText.Split(m1[r] ",")
  For s=1 to 3
    MAGIC[r][s-1] =ss[s]
  endfor
  'TextWindow.WriteLine (r+": "+MAGIC_COLORS [r])
endfor


' // see http://threekings.tk/mirror/ryb_TR.pdf 
sub cbInt'(t, A, B){ 
  t=args[1]
  a=args[2]
  b=args[3]
  weight = t * t * (3 - 2 * t) 
  return= A + weight * (B - A) 
endsub 


sub getR'(iR, iY, iB, magic) '{ 
  
  iR=args[1]
  iY=args[2]
  iB=args[3]
  x0 = ldcall.function3("cbint" iB, magic[0][0], magic[4][0]) 
  x1 = ldcall.function3("cbint" iB, magic[1][0], magic[5][0]) 
  x2 = ldcall.function3("cbint" iB, magic[2][0], magic[6][0]) 
  x3 = ldcall.function3("cbint" iB, magic[3][0], magic[7][0]) 
  y0 = ldcall.function3("cbint" iY, x0, x1) 
  y1 = ldcall.function3("cbint" iY, x2, x3) 
  return= ldcall.function3("cbint" iR, y0, y1) 
endsub 


sub getG'(iR, iY, iB, magic)' { 
  
  iR=args[1]
  iY=args[2]
  iB=args[3]
  x0 = ldcall.function3("cbint" iB, magic[0][1], magic[4][1]) 
  x1 = ldcall.function3("cbint" iB, magic[1][1], magic[5][1]) 
  x2 = ldcall.function3("cbint" iB, magic[2][1], magic[6][1]) 
  x3 = ldcall.function3("cbint" iB, magic[3][1], magic[7][1]) 
  y0 = ldcall.function3("cbint" iY, x0, x1) 
  y1 = ldcall.function3("cbint" iY, x2, x3) 
  return= ldcall.function3("cbint" iR, y0, y1) 
endsub 


sub getB'(iR, iY, iB, magic)' { 
  
  iR=args[1]
  iY=args[2]
  iB=args[3]
  x0 = ldcall.function3("cbint" iB, magic[0][2], magic[4][2]) 
  x1 = ldcall.function3("cbint" iB, magic[1][2], magic[5][2]) 
  x2 = ldcall.function3("cbint" iB, magic[2][2], magic[6][2]) 
  x3 = ldcall.function3("cbint" iB, magic[3][2], magic[7][2]) 
  y0 = ldcall.function3("cbint" iY, x0, x1) 
  y1 = ldcall.function3("cbint" iY, x2, x3) 
  return = ldcall.function3("cbint" iR, y0, y1) 
endsub 


sub ryb2rgb'(color, limit, magic) {
  limit = 255'limit || 255 
  
  R = color[0] / limit 
  Y = color[1] / limit 
  B = color[2] / limit 
  R1 = ldcall.function3("getR" R, Y, B) 
  G1 = ldcall.function3("getg" R, Y, B) 
  B1 = ldcall.function3("getR" R, Y, B)
  return=0 
  return [1]=  Math.Floor (R1 * limit)
  return [2]= Math.Floor (G1 * limit)
  return [3]= Math.Floor (B1 * limit) 
  
endsub 

GraphicsWindow.Width=1200
GraphicsWindow.Height=600
GraphicsWindow.PenColor="white
GraphicsWindow.PenWidth=2
For z= 0 To 255 Step 45
  f5=9
  For yy= 0 To 51
    For rr=0 to 255
      color[0]=yy*5
      color[1]=z
      color[2]=255-rr
      ryb2rgb()
      
      GraphicsWindow.brushColor= GraphicsWindow.GetColorFromRGB (return[1] return[2] return[3])
      GraphicsWindow.FillRectangle (50+rr*2 30+yy*f5 2 f5)
      
      GraphicsWindow.brushColor= GraphicsWindow.GetColorFromRGB (rr z yy*5)
      GraphicsWindow.FillRectangle (rr*2+650 30+yy*f5 2 f5)
      
    endfor
    'GraphicsWindow.DrawLine (50 (yy+1)*f5+32 500  (yy+1)*f5+32)
  endfor
  Program.Delay (555)
endfor

