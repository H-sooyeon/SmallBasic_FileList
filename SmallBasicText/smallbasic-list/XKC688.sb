GraphicsWindow.BackgroundColor = "DarkBlue" 

GraphicsWindow.MouseMove = OnMouseMove 

Mouse.HideCursor()



x = 10 

y = 10 

deltaX = 1 

deltaY = 1 



paddleWidth = 120

paddleHeight = 12

ballRadius = 8

ballSpeed = 2



params = 0

return = 0



paddle = Shapes.AddRectangle(paddleWidth, paddleHeight) 

ball = Shapes.AddEllipse(ballRadius * 2, ballRadius * 2) 



RunLoop: 

x = x + deltaX 

y = y + deltaY 



gw = GraphicsWindow.Width 

gh = GraphicsWindow.Height 

If (x >= gw - ballRadius or x <= ballRadius) Then 

  deltaX = -deltaX 

EndIf 

If (y <= ballRadius) Then 

  deltaY = -deltaY 

EndIf 



If (y = gh - paddleHeight - ballRadius and x >= paddleLeft and x <= paddleRight) Then 

  ' Get the position where the ball hit the paddle. -1 is the left end, 1 is the right end and 0 is the middle.

  ballOffset = (x - paddleX) * 2 / paddleWidth

  ' Get the angle by multiplying the largest desired angle with the offset.

  ' If the ball hits at the edge of the paddle it will fly off at a 80 degrees angle. If it hits in the middle it will fly straight up.

  angle = Math.GetRadians(80) * ballOffset

  

  ' Rotate the up vector with the angle. In the Small Basic graphics window up is represented by (0, -1).

  Stack.PushValue(params, 0) ' X

  Stack.PushValue(params, -ballSpeed) ' Y

  Stack.PushValue(params, angle)

  RotationMatrix()

  deltaX = Stack.PopValue(return)

  deltaY = Stack.PopValue(return)

EndIf 



Shapes.Move(ball, x - ballRadius, y - ballRadius) 

Program.Delay(5) 



If (y < gh) Then 

  Goto RunLoop 

EndIf 



GraphicsWindow.ShowMessage("You Lose", "Paddle") 



Sub OnMouseMove 

  paddleX = GraphicsWindow.MouseX

  paddleLeft = paddleX - paddleWidth / 2

  paddleRight = paddleX + paddleWidth / 2

  Shapes.Move(paddle, paddleX - paddleWidth / 2, GraphicsWindow.Height - paddleHeight) 

EndSub 



Sub RotationMatrix

  paramAngle = Stack.PopValue(params)

  paramY = Stack.PopValue(params)

  paramX = Stack.PopValue(params)

  m11 = Math.Cos(paramAngle)

  m12 = Math.Sin(paramAngle)

  Stack.PushValue(return, paramX * m12 + paramY * m11)

  Stack.PushValue(return, paramX * m11 + paramY * -m12)

EndSub


