

'LoadSelectLoadingMenu

Sub LoadSelectLoadingMenu

  GraphicsWindow.PenWidth = 1

  GraphicsWindow.PenColor = ClrBorderDark

  GraphicsWindow.BrushColor = ClrBasicDark

  wWidth2 = Math.Round(GraphicsWindow.Width)

  wHeight2 = Math.Round(GraphicsWindow.Height)

  SlmShape[1] = Shapes.AddRectangle(400, 150)

  Shapes.Move(SlmShape[1], Math.Round((wWidth2 - 400) / 2), Math.Round((wHeight2 - 100) / 2))

  GraphicsWindow.BrushColor = ClrBackDark

  SlmShape[2] = Shapes.AddRectangle(380, 110)

  Shapes.Move(SlmShape[2], Math.Round((wWidth2 - 380) / 2), Math.Round((wHeight2 - 40) / 2))

  GraphicsWindow.BrushColor = "White"

  If CurrentAction = "Copy" Or CurrentAction = "" Then

    SlmShape[3] = Shapes.AddText("Copying area...")

  ElseIf CurrentAction = "Cut" Then

    SlmShape[3] = Shapes.AddText("Cutting area...")

  ElseIf CurrentAction = "FlipHorizontal" Or CurrentAction = "FlipVertical" Then

    SlmShape[3] = Shapes.AddText("Please wait...")

  Else

    SlmShape[3] = Shapes.AddText("")

  EndIf

  Shapes.Move(SlmShape[3], Math.Round((wWidth2 - 380) / 2), Math.Round((wHeight2 / 2) - 40))

  GraphicsWindow.BrushColor = ClrTextDark

  If CurrentAction = "Copy" Or CurrentAction = "" Then

    SlmShape[4] = Shapes.AddText("Please wait while the area is being copied.")

  ElseIf CurrentAction = "Cut" Then

    SlmShape[4] = Shapes.AddText("Please wait while the area is being cut.")

  ElseIf CurrentAction = "FlipHorizontal" Or CurrentAction = "FlipVertical" Then

    SlmShape[4] = Shapes.AddText("Currently storing the pixels of the area.")

  EndIf

  Shapes.Move(SlmShape[4], (wWidth2 - 300) / 2 (wHeight2 / 2) + 10)

  GraphicsWindow.BrushColor = ClrBasicDark

  SlmShape[5] = Shapes.AddRectangle(300, 10)

  Shapes.Move(SlmShape[5], Math.Round((wWidth2 - 300) / 2), Math.Round((wHeight2 / 2) + 40))

  ySlmShape5 = Shapes.GetTop(SlmShape[5])

  GraphicsWindow.PenColor = "Cyan"

  GraphicsWindow.BrushColor = "DarkTurquoise"

  SlmShape[13] = Shapes.AddRectangle(54, 54)

  Shapes.Move(SlmShape[13], Math.Round((wWidth2 - 323) / 2), Math.Round(wHeight2 / 2 + 8))

  Shapes.HideShape(SlmShape[13])

  SlmShape[6] = Shapes.AddRectangle(0, 8)

  Shapes.Move(SlmShape[6], Math.Round((wWidth2 - 300) / 2 + 1), ySlmShape5 + 1)

  SlmShape[7] = Shapes.AddImage(Load_ImgCut)

  Shapes.Move(SlmShape[7], Math.Round((wWidth2 - 315) / 2), Math.Round(wHeight2 / 2 + 10))

  SlmShape[8] = Shapes.AddImage(Load_ImgCopy)

  Shapes.Move(SlmShape[8], Math.Round((wWidth2 - 195) / 2), Math.Round(wHeight2 / 2 + 10))

  SlmShape[9] = Shapes.AddImage(Load_ImgPaste)

  Shapes.Move(SlmShape[9], Math.Round(wWidth2 / 2 - 27), Math.Round(wHeight2 / 2 + 10))

  SlmShape[10] = Shapes.AddImage(Load_ImgHorizontal)

  Shapes.Move(SlmShape[10], Math.Round(wWidth2 / 2 + 30), Math.Round(wHeight2 / 2 + 7))

  Shapes.Zoom(SlmShape[10], 0.8, 0.8)

  SlmShape[11] = Shapes.AddImage(Load_ImgVertical)

  Shapes.Move(SlmShape[11], Math.Round(wWidth2 / 2 + 95), Math.Round(wHeight2 / 2 + 5))

  Shapes.Zoom(SlmShape[11], 0.8, 0.8)

  SlmShape[12] = Shapes.AddImage(Load_ImgCloseSm)

  Shapes.Move(SlmShape[12], Math.Round(wWidth2 / 2 + 162), Math.Round(wHeight2 / 2 - 50))

  For Times = 7 To Array.GetItemCount(SlmShape)

    Shapes.HideShape(SlmShape[Times])

  EndFor

  CurrentMenu = "SelectLoadingMenu"

EndSub



'CopySelectedArea / CutSelectedArea

Sub CopySelectedArea

  CurrentMenu = "CopySelectedAreaMenu"

  MaxSelectedPixels = AreaWidth * AreaHeight

  LbWidthAddition = 298 / MaxSelectedPixels

  LbWidth = 0

  a1=ldArray.Create  ((AreaWidth+1)*(AreaHeight+1) )

  Shapes.SetOpacity(IndiSelect, 10)

  For Loop = AreaLeft To AreaWidth + AreaLeft

    For Times = AreaTop To AreaHeight + AreaTop

      ldArray.SetValue (a1,loop-AreaLeft+(times-AreaTop)*AreaWidth   ,GraphicsWindow.GetPixel(Loop, Times))

      'SelectedPixel[Loop][Times] = GraphicsWindow.GetPixel(Loop, Times)

      LbWidth = LbWidth + LbWidthAddition

      If LbWidth < 298 Then

        Controls.SetSize(SlmShape[6], LbWidth, 8)

      Else

        Controls.SetSize(SlmShape[6], 298, 8)

      EndIf

    EndFor

  EndFor

  'Sound.PlayAndWait("C:\Windows\Media\Windows Ding.wav")

  Shapes.SetOpacity(IndiSelect, 30)

  ShowSelectActionMenu()

EndSub



'ShowSelectActionMenu

Sub ShowSelectActionMenu

  CanCloseIndiSelect = "False"

  Shapes.Remove(SlmShape[4])

  Shapes.Remove(SlmShape[5])

  Shapes.Remove(SlmShape[6])

  For Times = 7 To Array.GetItemCount(SlmShape)

    Shapes.ShowShape(SlmShape[Times])

  EndFor

  Shapes.SetText(SlmShape[3], "Select an action for the selected area")

  Shapes.Move(SlmShape[3], (wWidth2 - 380) / 2, (wHeight2 / 2) - 40)

  CurrentMenu = "SelectAction"

EndSub



'CloseSelectLoadingMenu

Sub CloseSelectLoadingMenu

  For Times = 1 To Array.GetItemCount(SlmShape)

    Shapes.Remove(SlmShape[Times])

  EndFor

  If CanCloseIndiSelect = "True" Then

    Shapes.Remove(IndiSelect)

    CurrentTool = PreSelectTool

  EndIf

  CanAddIndiSelect = "True"

  CurrentMenu = "MainPaint"

EndSub



'PerformAction

Sub PerformAction

  If CurrentAction = "Cut" Then

    CanCloseIndiSelect = "False"

    CloseSelectLoadingMenu()

    LoadSelectLoadingMenu()

    CopySelectedArea()

    GraphicsWindow.BrushColor = SecondColor

    GraphicsWindow.FillRectangle(AreaLeft, AreaTop, AreaWidth, AreaHeight)

  ElseIf CurrentAction = "Copy" Then

    CanCloseIndiSelect = "False"

    CloseSelectLoadingMenu()

    LoadSelectLoadingMenu()

    CopySelectedArea()

  ElseIf CurrentAction = "Paste" Then

    CanCloseIndiSelect = "True"

    CloseSelectLoadingMenu()

    LoadPastingMenu()

  ElseIf CurrentAction = "FlipHorizontal" Then

    hFlipSelectedArea()

  ElseIf CurrentAction = "FlipVertical" Then

    vFlipSelectedArea()

  EndIf

EndSub



'LoadPastingMenu

Sub LoadPastingMenu

  CurrentMenu = "PastingMenu"

  CanPaste = "True"

  GraphicsWindow.PenWidth = 1

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.BrushColor = "SkyBlue"

  IndiPaste = Shapes.AddRectangle(AreaWidth, AreaHeight)

  Shapes.SetOpacity(IndiPaste, 30)

  Shapes.Move(IndiPaste, xDown - (AreaWidth / 2), yDown - (AreaHeight / 2))

EndSub



'LoadVerifyPaste

Sub LoadVerifyPaste

  CurrentMenu = "VerifyPasteMenu"

  GraphicsWindow.BrushColor = ClrBasicDark

  GraphicsWindow.PenColor = ClrBorderDark

  OldXDown = xDown

  OldYDown = yDown

  If xDown < 199 Then

    xDown = 100

  ElseIf xDown > GraphicsWindow.Width - 199 Then

    xDown = GraphicsWindow.Width - 100

  EndIf

  If yDown < 90 Then

    yDown = 50

  ElseIf yDown > GraphicsWindow.Height - 40 Then

    yDown = GraphicsWindow.Height - 40

  EndIf

  VpmShape[1] = Shapes.AddRectangle(200, 80)

  Shapes.Move(VpmShape[1], xDown - 100, yDown - 40)

  GraphicsWindow.BrushColor = ClrBackDark

  VpmShape[2] = Shapes.AddRectangle(180, 40)

  Shapes.Move(VpmShape[2], xDown - 90, yDown - 10)

  GraphicsWindow.BrushColor = ClrTextDark

  VpmShape[3] = Shapes.AddText("Paste here?")

  Shapes.Move(VpmShape[3], xDown - 90, yDown - 30)

  GraphicsWindow.BrushColor = "Black"

  VpmShape[4] = Controls.AddButton("Yes", xDown - 85, yDown)

  Controls.SetSize(VpmShape[4], 80, 23)

  VpmShape[5] = Controls.AddButton("No", xDown + 5, yDown)

  Controls.SetSize(VpmShape[5], 80, 23)

  xDown = OldXDown

  yDown = OldYDown

EndSub

'

Sub CloseVerifyPaste

  Shapes.Remove(IndiPaste)

  For Times = 1 To Array.GetItemCount(VpmShape)

    Shapes.Remove(VpmShape[Times])

  EndFor

EndSub

'

Sub ReAddIndiSelect

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.BrushColor = "SkyBlue"

  IndiSelect = Shapes.AddRectangle(AreaWidth, AreaHeight)

  Shapes.SetOpacity(IndiSelect, 30)

  Shapes.Move(IndiSelect, AreaLeft, AreaTop)

EndSub

'

Sub Paste

  CurrentMenu = "PasteMenu"

  For Loop = AreaLeft To AreaWidth + AreaLeft

    For Times = AreaTop To AreaHeight + AreaTop

      ' GraphicsWindow.SetPixel(xDown + Loop - AreaLeft, yDown + Times - AreaTop, SelectedPixel[Loop][Times])

      GraphicsWindow.SetPixel(xDown +Loop -AreaLeft , yDown + Times - AreaTop, ldArray.GetValue (a1,loop-AreaLeft  +(times-AreaTop)  *AreaWidth) )

      

    EndFor

  EndFor

  Shapes.Remove(IndiSelect)

  CurrentMenu = "MainPaint"

  AddTool()

EndSub

'

Sub hFlipSelectedArea

  CurrentMenu = "hFlipMenu"

  CloseSelectLoadingMenu()

  LoadSelectLoadingMenu()

  CopySelectedArea()

  CloseSelectLoadingMenu()

  Shapes.Remove(IndiSelect)

  For x = AreaLeft To AreaLeft + AreaWidth Step 1

    k = k + 2

    For y = AreaTop To AreaTop + AreaHeight Step 1

      GraphicsWindow.SetPixel((x - k) + AreaWidth, y, ldArray.GetValue (a1,x-AreaLeft +(y-AreaTop )*AreaWidth) )

    EndFor

  EndFor

  ldArray.Delete (a1)

  k = 0

EndSub

'

Sub vFlipSelectedArea

  CurrentMenu = "vFlipMenu"

  CloseSelectLoadingMenu()

  LoadSelectLoadingMenu()

  CopySelectedArea()

  CloseSelectLoadingMenu()

  Shapes.Remove(IndiSelect)

  For y = AreaTop To AreaTop + AreaHeight

    k = k + 2

    For x = AreaLeft To AreaLeft + AreaWidth

      GraphicsWindow.SetPixel(x, y-k+AreaHeight ,ldArray.GetValue (a1,x-AreaLeft +(y-AreaTop )*AreaWidth) )

      

      ' GraphicsWindow.SetPixel(x, (y - k) + AreaHeight, SelectedPixel[x][y])

    EndFor

  EndFor

  ldArray.Delete (a1)

  k = 0

EndSub

'

Sub LoadPatternsMenu

  GraphicsWindow.PenWidth = 1

  GraphicsWindow.PenColor = ClrBorderDark

  GraphicsWindow.BrushColor = ClrBasicDark

  PmShape[1] = Shapes.AddRectangle(310, 545)

  Shapes.Move(PmShape[1], dDownPosX, 50)

  GraphicsWindow.PenColor = "Cyan"

  GraphicsWindow.BrushColor = "DarkTurquoise"

  PmShape[76] = Shapes.AddRectangle(144, 27)

  Shapes.Move(PmShape[76], xIndiPatRandClrs, 493)

  PmShape[40] = Shapes.AddRectangle(54, 54)

  Shapes.Move(PmShape[40], xIndiPattern, yIndiPattern)

  PmShape[41] = Shapes.AddRectangle(144, 27)

  Shapes.Move(PmShape[41], xIndiPatternBorder, 353)

  PmShape[42] = Shapes.AddEllipse(39, 39)

  Shapes.Move(PmShape[42], xIndiPatternBorderThickness, 416)

  If ParticleBorders = "False" Then

    Shapes.HideShape(PmShape[42])

  EndIf

  GraphicsWindow.PenColor = ClrBorderDark

  GraphicsWindow.BrushColor = ClrTextDark

  PmShape[2] = Shapes.AddText("Pattern type:")

  Shapes.Move(PmShape[2], dDownPosX + 10, 60)

  PmShape[71] = Shapes.AddText(CurrentPattern)

  Shapes.Move(PmShape[71], dDownPosX + 80, 60)

  PmShape[72] = Shapes.AddText("Use random colors:")

  Shapes.Move(PmShape[72], dDownPosX + 10, 470)

  PmShape[77] = Shapes.AddRectangle(290, 1)

  Shapes.Move(PmShape[77], dDownPosX + 10, 550)

  PmShape[78] = Shapes.AddText("Pattern drawing mode:")

  Shapes.Move(PmShape[78], dDownPosX + 10, 535)

  PmShape[73] = Shapes.AddRectangle(290, 1)

  Shapes.Move(PmShape[73], dDownPosX + 10, 485)

  PmShape[3] = Shapes.AddRectangle(260, 1)

  Shapes.Move(PmShape[3], dDownPosX + 10, 75)

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.BrushColor = ClrBackDark

  For Times = 4 To 8

    PmShape[Times] = Shapes.AddRectangle(50, 50)

    Shapes.Move(PmShape[Times], Times * 60 + dDownPosX - 230, 85)

  EndFor

  For Times = 9 To 13

    PmShape[Times] = Shapes.AddRectangle(50, 50)

    Shapes.Move(PmShape[Times], Times * 60 + dDownPosX - 530, 145)

  EndFor

  PmShape[61] = Shapes.AddImage(Load_ImgLines)

  Shapes.Move(PmShape[61], dDownPosX + 13, 88)

  PmShape[62] = Shapes.AddImage(Load_ImgSquares)

  Shapes.Move(PmShape[62], dDownPosX + 73, 88)

  PmShape[63] = Shapes.AddImage(Load_ImgCircles)

  Shapes.Move(PmShape[63], dDownPosX + 133, 88)

  PmShape[64] = Shapes.AddImage(Load_ImgTriangles)

  Shapes.Move(PmShape[64], dDownPosX + 193, 88)

  PmShape[65] = Shapes.AddImage(Load_ImgRhombus)

  Shapes.Move(PmShape[65], dDownPosX + 253, 88)

  PmShape[66] = Shapes.AddImage(Load_ImgCubes)

  Shapes.Move(PmShape[66], dDownPosX + 13, 148)

  PmShape[67] = Shapes.AddImage(Load_ImgSpheres)

  Shapes.Move(PmShape[67], dDownPosX + 73, 148)

  PmShape[68] = Shapes.AddImage(Load_ImgPyramids)

  Shapes.Move(PmShape[68], dDownPosX + 133, 148)

  PmShape[69] = Shapes.AddImage(Load_ImgEllipses)

  Shapes.Move(PmShape[69], dDownPosX + 193, 148)

  PmShape[70] = Shapes.AddImage(Load_ImgCrosses)

  Shapes.Move(PmShape[70], dDownPosX + 253, 148)

  For Times = 50 To 54

    PmShape[Times] = Controls.AddButton("", Times * 60 + dDownPosX - 2990, 85)

    Controls.SetSize(PmShape[Times], 50, 50)

    Shapes.SetOpacity(PmShape[Times], 0)

  EndFor

  For Times = 55 To 59

    PmShape[Times] = Controls.AddButton("", Times * 60 + dDownPosX - 3290, 145)

    Controls.SetSize(PmShape[Times], 50, 50)

    Shapes.SetOpacity(PmShape[Times], 0)

  EndFor

  GraphicsWindow.PenColor = ClrBorderDark

  GraphicsWindow.BrushColor = ClrTextDark

  PmShape[14] = Shapes.AddText("Particle width:")

  Shapes.Move(PmShape[14], dDownPosX + 10, 210)

  PmShape[15] = Shapes.AddRectangle(290, 1)

  Shapes.Move(PmShape[15], dDownPosX + 10, 225)

  GraphicsWindow.BrushColor = "Black"

  PmShape[16] = Controls.AddTextBox(dDownPosX + 10, 235)

  Controls.SetSize(PmShape[16], 290, 20)

  Controls.SetTextBoxText(PmShape[16], ParticleWidth)

  GraphicsWindow.BrushColor = ClrTextDark

  PmShape[17] = Shapes.AddText("Particle height:")

  Shapes.Move(PmShape[17], dDownPosX + 10, 270)

  PmShape[18] = Shapes.AddRectangle(290, 1)

  Shapes.Move(PmShape[18], dDownPosX + 10, 285)

  GraphicsWindow.BrushColor = "Black"

  PmShape[19] = Controls.AddTextBox(dDownPosX + 10, 295)

  Controls.SetSize(PmShape[19], 290, 20)

  Controls.SetTextBoxText(PmShape[19], ParticleHeight)

  PmShape[22] = Controls.AddButton("Yes", dDownPosX + 10, 355)

  Controls.SetSize(PmShape[22], 140, 23)

  PmShape[23] = Controls.AddButton("No", dDownPosX + 160, 355)

  Controls.SetSize(PmShape[23], 140, 23)

  GraphicsWindow.BrushColor = ClrTextDark

  PmShape[20] = Shapes.AddText("Add a border to each particle:")

  Shapes.Move(PmShape[20], dDownPosX + 10, 330)

  PmShape[21] = Shapes.AddRectangle(290, 1)

  Shapes.Move(PmShape[21], dDownPosX + 10, 345)

  GraphicsWindow.BrushColor = ClrTextDark

  PmShape[24] = Shapes.AddText("Border thickness:")

  Shapes.Move(PmShape[24], dDownPosX + 10, 393)

  PmShape[25] = Shapes.AddRectangle(290, 1)

  Shapes.Move(PmShape[25], dDownPosX + 10, 408)

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.BrushColor = ClrBackDark

  For Times = 26 To 32

    PmShape[Times] = Shapes.AddEllipse(35, 35)

    Shapes.Move(PmShape[Times], Times * 42 + dDownPosX - 1080, 418)

  EndFor

  AdditionThickness = 0

  GraphicsWindow.PenColor = "Black"

  For Times = 33 To 39

    AdditionThickness = AdditionThickness + 1

    GraphicsWindow.PenWidth = AdditionThickness

    PmShape[Times] = Shapes.AddLine(Times * 42 + dDownPosX - 1364, 435, (Times * 42 + dDownPosX - 1364) + 15, 435)

  EndFor

  For Times = 43 To 49

    PmShape[Times] = Controls.AddButton("", Times * 42 + dDownPosX - 1794, 418)

    Controls.SetSize(PmShape[Times], 35, 35)

    Shapes.SetOpacity(PmShape[Times], 0)

  EndFor

  GraphicsWindow.BrushColor = "Black"

  PmShape[74] = Controls.AddButton("Yes", dDownPosX + 10, 495)

  Controls.SetSize(PmShape[74], 140, 23)

  PmShape[75] = Controls.AddButton("No", dDownPosX + 160, 495)

  Controls.SetSize(PmShape[75], 140, 23)

  PmShape[60] = Controls.AddButton("Fullscreen", dDownPosX + 10, 560)

  Controls.SetSize(PmShape[60], 290, 23)

  PmShape[0] = Shapes.AddImage(Load_ImgCloseSm)

  Shapes.Move(PmShape[0], dDownPosX + 279, 49)

  CurrentMenu = "PatternsMenu"

EndSub



'ClosePatternMenu

Sub ClosePatternMenu

  GetParticleWidth = Controls.GetTextBoxText(PmShape[16])

  GetParticleHeight = Controls.GetTextBoxText(PmShape[19])

  If GetParticleWidth = "" Or GetParticleHeight = "" Then

    GraphicsWindow.ShowMessage("Please make sure that all data have been entered.", "Information")

  Else

    If GetParticleWidth > 0 And GetParticleHeight > 0 Then

      ParticleWidth = GetParticleWidth

      ParticleHeight = GetParticleHeight

      For Times = 0 To Array.GetItemCount(PmShape)

        Shapes.Remove(PmShape[Times])

      EndFor

      CurrentMenu = "MainPaint"

    Else

      GraphicsWindow.ShowMessage("Invalid values have been entered.", "Error")

    EndIf

  EndIf

EndSub



'DrawPattern

Sub DrawPattern

  GraphicsWindow.PenWidth = PatternBorderThickness

  If DrawFullscreen = "False" Then

    PatternWidth = xUp - xDown

    PatternHeight = yUp - yDown

  ElseIf DrawFullscreen = "True" Then

    PatternWidth = dWidth

    PatternHeight = dHeight

    xDown = 0

    yDown = 50

    xUp = dWidth

    yUp = dHeight

  EndIf

  If CurrentPattern = "Lines" Then

    For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

      If PatternRandomClrs = "False" Then

        GraphicsWindow.PenColor = BrushColor

      Else

        GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()

      EndIf

      GraphicsWindow.DrawLine(xDown, yDown + Times * ParticleHeight - ParticleHeight, xUp, yDown + Times * ParticleHeight - ParticleHeight)

    EndFor

    For Times = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

      If PatternRandomClrs = "False" Then

        GraphicsWindow.PenColor = BrushColor

      Else

        GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()

      EndIf

      GraphicsWindow.DrawLine(xDown + Times * ParticleWidth - ParticleWidth, yDown, xDown + Times * ParticleWidth - ParticleWidth, yUp)

    EndFor

  ElseIf CurrentPattern = "Squares" Then

    If PatternRandomClrs = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillRectangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

        EndFor

      EndFor

    Else

      GraphicsWindow.BrushColor = SecondColor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.FillRectangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      GraphicsWindow.BrushColor = BrushColor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.FillRectangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.FillRectangle(xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

    EndIf

    If ParticleBorders = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.DrawRectangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.DrawRectangle(xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Circles" Then

    If PatternRandomClrs = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

        EndFor

      EndFor

    Else

      GraphicsWindow.BrushColor = SecondColor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.FillEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      GraphicsWindow.BrushColor = BrushColor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.FillEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.FillEllipse(xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

    EndIf

    If ParticleBorders = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.DrawEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.DrawEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth Step 2

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight Step 2

          GraphicsWindow.DrawEllipse(xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)  

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Triangles" Then

    If PatternRandomClrs = "False" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = BrushColor

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = SecondColor

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight)

        EndFor

      EndFor

    Else

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight)

        EndFor

      EndFor

    EndIf

    If ParticleBorders = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.DrawTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.DrawTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight)

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Rhombuses" Then

    If ParticleBorders = "True" Then

      If Math.Remainder(PatternBorderThickness, 2) = 0 Then

      Else

        PatternBorderThickness = PatternBorderThickness + 1

      EndIf

      GraphicsWindow.PenWidth = PatternBorderThickness

    EndIf

    If PatternRandomClrs = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          ColorUsed1 = GraphicsWindow.GetRandomColor()

          GraphicsWindow.BrushColor = ColorUsed1

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          ColorUsed2 = GraphicsWindow.GetRandomColor()

          GraphicsWindow.BrushColor = ColorUsed2

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          If ParticleBorders = "True" Then

            GraphicsWindow.PenColor = "Black"

            GraphicsWindow.DrawTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.DrawTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.DrawTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.DrawTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.PenColor = ColorUsed1

            GraphicsWindow.DrawLine(xDown + PatternBorderThickness + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth - PatternBorderThickness, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.PenColor = ColorUsed2

            GraphicsWindow.DrawLine(xDown + (ParticleWidth / 2) + PatternBorderThickness + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + ParticleWidth + Loop * ParticleWidth - ParticleWidth - PatternBorderThickness, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          EndIf

        EndFor

      EndFor

    Else

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = BrushColor

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = SecondColor

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          If ParticleBorders = "True" Then

            GraphicsWindow.PenColor = "Black"

            GraphicsWindow.DrawTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.DrawTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.DrawTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.DrawTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.PenColor = BrushColor

            GraphicsWindow.DrawLine(xDown + PatternBorderThickness + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth - PatternBorderThickness, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

            GraphicsWindow.PenColor = SecondColor

            GraphicsWindow.DrawLine(xDown + (ParticleWidth / 2) + PatternBorderThickness + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + ParticleWidth + Loop * ParticleWidth - ParticleWidth - PatternBorderThickness, yDown + (ParticleHeight / 2) + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          EndIf

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Cubes" Then

    If PatternRandomClrs = "False" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = "Gray"

          GraphicsWindow.FillRectangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

          GraphicsWindow.BrushColor = "DarkGray"

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.2, ParticleHeight / 1.2)

          GraphicsWindow.BrushColor = "LightGray"

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.4, ParticleHeight / 1.4)

          GraphicsWindow.BrushColor = "Gainsboro"

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.8, ParticleHeight / 1.8)

          GraphicsWindow.BrushColor = "White"

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2.6, ParticleHeight / 2.6)

        EndFor

      EndFor

    Else

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillRectangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.2, ParticleHeight / 1.2)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.4, ParticleHeight / 1.4)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.8, ParticleHeight / 1.8)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillRectangle(xDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2.6, ParticleHeight / 2.6)

        EndFor

      EndFor

    EndIf

    If ParticleBorders = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          'GraphicsWindow.PenColor = "Black"

          GraphicsWindow.DrawRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.2, ParticleHeight / 1.2)

          GraphicsWindow.DrawRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.4, ParticleHeight / 1.4)

          GraphicsWindow.DrawRectangle(xDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.8, ParticleHeight / 1.8)

          GraphicsWindow.DrawRectangle(xDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2.6, ParticleHeight / 2.6)

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Spheres" Then

    If PatternRandomClrs = "False" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = "Gray"

          GraphicsWindow.FillEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

          GraphicsWindow.BrushColor = "DarkGray"

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.2, ParticleHeight / 1.2)

          GraphicsWindow.BrushColor = "LightGray"

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.4, ParticleHeight / 1.4)

          GraphicsWindow.BrushColor = "Gainsboro"

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.8, ParticleHeight / 1.8)

          GraphicsWindow.BrushColor = "White"

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2.6, ParticleHeight / 2.6)

        EndFor

      EndFor

    Else

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.2, ParticleHeight / 1.2)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.4, ParticleHeight / 1.4)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.8, ParticleHeight / 1.8)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2.6, ParticleHeight / 2.6)

        EndFor

      EndFor

    EndIf

    If ParticleBorders = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.PenColor = "Black"

          GraphicsWindow.DrawEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.2)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.2, ParticleHeight / 1.2)

          GraphicsWindow.DrawEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.4)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.4, ParticleHeight / 1.4)

          GraphicsWindow.DrawEllipse(xDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 1.8)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 1.8, ParticleHeight / 1.8)

          GraphicsWindow.DrawEllipse(xDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleWidth - (ParticleWidth / 2.6)) / 2 + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2.6, ParticleHeight / 2.6)

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Pyramids" Then

    If PatternRandomClrs = "False" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = "Gray"

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = "DarkGray"

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight - (ParticleHeight / 3), xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = "LightGray"

        EndFor

      EndFor

    Else

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.FillTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight - (ParticleHeight / 3), xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

        EndFor

      EndFor

    EndIf

    If ParticleBorders = "True" Then

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.DrawTriangle(xDown + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.DrawTriangle(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight - (ParticleHeight / 3), xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, xDown + ParticleWidth + Loop * ParticleWidth - ParticleWidth, yDown + ParticleHeight + Times * ParticleHeight - ParticleHeight)

        EndFor

      EndFor

    EndIf

  ElseIf CurrentPattern = "Ellipses" Then

    xLength = (PatternWidth / 2) - ParticleWidth / 2

    yLength = (PatternHeight / 2) - ParticleHeight / 2

    Angle = 0.0

    AngleStepSize = 0.1

    While (Angle < 2 * Math.Pi)

      x = xLength * Math.Cos(Angle)

      y = yLength * Math.Sin(Angle)

      If PatternRandomClrs = "True" Then

        GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()

      EndIf

      GraphicsWindow.DrawEllipse(xDown + x + xLength, yDown + y + yLength, ParticleWidth, ParticleHeight)

      Angle = Angle + AngleStepSize

    EndWhile

  ElseIf CurrentPattern = "Crosses" Then

    If PatternRandomClrs = "False" Then

      GraphicsWindow.PenColor = BrushColor

      GraphicsWindow.BrushColor = SecondColor

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.DrawEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth / 3.6) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 3.6) + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2, ParticleHeight / 2)

          GraphicsWindow.DrawLine(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + PatternWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.DrawLine(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + PatternHeight)

        EndFor

      EndFor

    Else

      For Loop = 1 To (PatternWidth + ParticleWidth) / ParticleWidth

        For Times = 1 To (PatternHeight + ParticleHeight) / ParticleHeight

          GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.DrawEllipse(xDown + Loop * ParticleWidth - ParticleWidth, yDown + Times * ParticleHeight - ParticleHeight, ParticleWidth, ParticleHeight)

          GraphicsWindow.FillEllipse(xDown + (ParticleWidth / 3.6) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 3.6) + Times * ParticleHeight - ParticleHeight, ParticleWidth / 2, ParticleHeight / 2)

          GraphicsWindow.PenColor = GraphicsWindow.GetRandomColor()

          GraphicsWindow.DrawLine(xDown + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight, xDown + (ParticleWidth / 2) + PatternWidth, yDown + (ParticleHeight / 2) + Times * ParticleHeight - ParticleHeight)

          GraphicsWindow.DrawLine(xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown, xDown + (ParticleWidth / 2) + Loop * ParticleWidth - ParticleWidth, yDown + (ParticleHeight / 2) + PatternHeight)

        EndFor

      EndFor

    EndIf

  EndIf

EndSub


