' Set the graphics window position and properties



GraphicsWindow.Width = 1920

GraphicsWindow.Height = 1072

GraphicsWindow.Left = -3

GraphicsWindow.Top = -25

' Value for .Top is 17 for actual Sky Writer monitor

GraphicsWindow.BackgroundColor = "black"

GraphicsWindow.CanResize = "false"



' Initialize variables that need values



ActiveOpacityIndicator = "none"







r = 0

SelectedView = 1

LoadedView = 0

IconXOffset = 1350

IconYOffset = 30

Button = "Initial"

ViewMode = "Viewer"

MaskOpacity = 0

SingleMultiMode = "Single"

LinkedUnlinkedMode = "Unlinked"

ZoomFactor = 1

Dmx = 0

Dmy = 0

For x = 1 to 9

SlideOpacity[x] = 100

endfor





' Define the root path to the Sky Writer Library



RootPath = "C:\users\gary\desktop\Sky Writer 1.0\Sky Writer Library\"



' Get the number of available constellations in the Library



' The following line could be harmful and has been automatically commented.

' NumberOfViews = File.ReadLine(RootPath + "Views\" + "Views List.txt", 1)



' Put the View names from the list into the 'file' array



For x = 1 To NumberOfViews

' The following line could be harmful and has been automatically commented.

'   ViewName[x] = File.ReadLine(RootPath + "Views\" + "Views List.txt", x + 1)

EndFor



' Draw the Controller



a=Imagelist.LoadImage(RootPath + "Controller\" + "ControllerBackgroundImage.png")

C[25] = Shapes.AddImage(a)

Shapes.Move(C[25], IconXOffset, IconYOffset)



a=Imagelist.LoadImage(RootPath + "Controller\" + "Viewer.png")

C[10] = Shapes.AddImage(a)

Shapes.Move(C[10], IconXOffset + 20, IconYOffset + 225)

  

  a=Imagelist.LoadImage(RootPath + "Controller\" + "ObjectOpacityIndicator.png")

  

  C[11] = Shapes.AddImage(a)

  Shapes.HideShape(C[11])

  Shapes.Move(C[11], IconXOffset + 115, IconYOffset + 425)

    

  C[12] = Shapes.AddImage(a)

  Shapes.HideShape(C[12])

  Shapes.Move(C[12], IconXOffset + 265, IconYOffset  + 425)

  

  C[13] = Shapes.AddImage(a)

  Shapes.HideShape(C[13])

  Shapes.Move(C[13], IconXOffset  + 415, IconYOffset  + 425)

  

  C[14] = Shapes.AddImage(a)

  Shapes.HideShape(C[14])

  Shapes.Move(C[14], IconXOffset  + 115, IconYOffset  + 575)

  

  C[15] = Shapes.AddImage(a)

  Shapes.HideShape(C[15])

  Shapes.Move(C[15], IconXOffset  + 265, IconYOffset + 575)

  

  C[16] = Shapes.AddImage(a)

  Shapes.HideShape(C[16])

  Shapes.Move(C[16], IconXOffset  + 415, IconYOffset  + 575)

  

  C[17] = Shapes.AddImage(a)

  Shapes.HideShape(C[17])

  Shapes.Move(C[17], IconXOffset + 115, IconYOffset  + 725)

  

  C[18] = Shapes.AddImage(a)

  Shapes.HideShape(C[18])

  Shapes.Move(C[18], IconXOffset  + 265, IconYOffset  + 725)

  

  C[19] = Shapes.AddImage(a)

  Shapes.HideShape(C[19])

  Shapes.Move(C[19], IconXOffset  + 415, IconYOffset  + 725)

  



a=Imagelist.LoadImage(RootPath + "Controller\" + "ObjectOnIcon.png")

  

  C[1] = Shapes.AddImage(a)

  Shapes.HideShape(C[1])

  Shapes.Move(C[1], IconXOffset  + 25, IconYOffset  + 325)

   

  C[2] = Shapes.AddImage(a)

  Shapes.HideShape(C[2])

  Shapes.Move(C[2], IconXOffset  + 175, IconYOffset  + 325)

  

  C[3] = Shapes.AddImage(a)

  Shapes.HideShape(C[3])

  Shapes.Move(C[3], IconXOffset + 325, IconYOffset  + 325)

  

  C[4] = Shapes.AddImage(a)

  Shapes.HideShape(C[4])

  Shapes.Move(C[4], IconXOffset  + 25, IconYOffset  + 475)

  

  C[5] = Shapes.AddImage(a)

  Shapes.HideShape(C[5])

  Shapes.Move(C[5], IconXOffset  + 175, IconYOffset  + 475)

  

  C[6] = Shapes.AddImage(a)

  Shapes.HideShape(C[6])

  Shapes.Move(C[6], IconXOffset  + 325, IconYOffset  + 475)

  

  C[7] = Shapes.AddImage(a)

  Shapes.HideShape(C[7])

  Shapes.Move(C[7], IconXOffset  + 25, IconYOffset  + 625)

  

  C[8] = Shapes.AddImage(a)

  Shapes.HideShape(C[8])

  Shapes.Move(C[8], IconXOffset  + 175, IconYOffset  + 625)

  

  C[9] = Shapes.AddImage(a)

  Shapes.HideShape(C[9])

  Shapes.Move(C[9], IconXOffset  + 325, IconYOffset  + 625)

  

a=Imagelist.LoadImage(RootPath + "Controller\" + "Single.png")

C[20] = Shapes.AddImage(a)

Shapes.Move(C[20], IconXOffset + 100, IconYOffset + 175)





a=Imagelist.LoadImage(RootPath + "Controller\" + "Unlinked.png")

C[21] = Shapes.AddImage(a)

Shapes.Move(C[21], IconXOffset + 100, IconYOffset + 250)



a=Imagelist.LoadImage(RootPath + "Controller\" + "MoveDistanceIndicator.png")

C[22] = Shapes.AddImage(a)

Shapes.Move(C[22], IconXOffset + 104, IconYOffset + 879)



a=Imagelist.LoadImage(RootPath + "Controller\" + "RotateSpeedIndicator.png")

C[23] = Shapes.AddImage(a)

Shapes.Move(C[23], IconXOffset + 327, IconYOffset + 882)



a=Imagelist.LoadImage(RootPath + "Controller\" + "ControllerOpacityIndicator.png")

C[24] = Shapes.AddImage(a)

Shapes.HideShape(C[24])

Shapes.Move(C[24], IconXOffset + 402, IconYOffset + 171)



' Draw the "ViewName[SelectedView]" text shape



  GraphicsWindow.BrushColor = "white"

  GraphicsWindow.FontSize = "18"

  SV = Shapes.AddText(ViewName[SelectedView])

  Shapes.HideShape(SV)

  Shapes.Move(SV, IconXOffset + 70, IconYOffset + 85)

  Shapes.ShowShape(SV)

  

  ' Draw the "ViewName[LoadedView]" text shape

  

  GraphicsWindow.BrushColor = "white"

  GraphicsWindow.FontSize = "25"

 

  LV = Shapes.AddText("STAR WRITER" )

  Shapes.HideShape(LV)

  Shapes.Move(LV, IconXOffset + 50, IconYOffset + 24)

  Shapes.ShowShape(LV)

  

  ' Draw the "Slide Opacity" text shapes

  GraphicsWindow.BrushColor = "blue"

  GraphicsWindow.FontSize = "14"

 

  SO[1] = Shapes.AddText(SlideOpacity[1])

  Shapes.HideShape(SO[1])

  Shapes.Move(SO[1], IconXOffset + 131, IconYOffset + 440)

  Shapes.ShowShape(SO[1])

  

   SO[2] = Shapes.AddText(SlideOpacity[2])

  Shapes.HideShape(SO[2])

  Shapes.Move(SO[2], IconXOffset + 281, IconYOffset + 440)

  Shapes.ShowShape(SO[2])

  

  SO[3] = Shapes.AddText(SlideOpacity[3])

  Shapes.HideShape(SO[3])

  Shapes.Move(SO[3], IconXOffset + 431, IconYOffset + 440)

  Shapes.ShowShape(SO[3])

  

   SO[4] = Shapes.AddText(SlideOpacity[4])

  Shapes.HideShape(SO[4])

  Shapes.Move(SO[4], IconXOffset + 131, IconYOffset + 590)

  Shapes.ShowShape(SO[4])

  

   SO[5] = Shapes.AddText(SlideOpacity[5])

  Shapes.HideShape(SO[5])

  Shapes.Move(SO[5], IconXOffset + 281, IconYOffset + 590)

  Shapes.ShowShape(SO[5])

  

   SO[6] = Shapes.AddText(SlideOpacity[6])

  Shapes.HideShape(SO[6])

  Shapes.Move(SO[6], IconXOffset + 431, IconYOffset + 590)

  Shapes.ShowShape(SO[6])

  

   SO[7] = Shapes.AddText(SlideOpacity[7])

  Shapes.HideShape(SO[7])

  Shapes.Move(SO[7], IconXOffset + 131, IconYOffset + 740)

  Shapes.ShowShape(SO[7])

  

   SO[8] = Shapes.AddText(SlideOpacity[8])

  Shapes.HideShape(SO[8])

  Shapes.Move(SO[8], IconXOffset + 281, IconYOffset + 740)

  Shapes.ShowShape(SO[8])

  

   SO[9] = Shapes.AddText(SlideOpacity[9])

  Shapes.HideShape(SO[9])

  Shapes.Move(SO[9], IconXOffset + 431, IconYOffset + 740)

  Shapes.ShowShape(SO[9])

  

  'Draw the Controller (Mask) Opacity text 

  

  MO = Shapes.AddText(Math.Abs(100 - MaskOpacity))

  Shapes.HideShape(MO)

  Shapes.Move(MO, IconXOffset + 405, IconYOffset + 287)

  Shapes.ShowShape(MO)

  

  'Draw the Controller Zoom Amount text



  GraphicsWindow.BrushColor = "yellow"

  GraphicsWindow.FontSize = "17"

  Zoom = Shapes.AddText("1.000")

  Shapes.HideShape(Zoom)

  Shapes.Move(Zoom, IconXOffset + 32 IconYOffset + 176)

  Shapes.ShowShape(Zoom)

  

  ' Draw the Opacity mask

  

  a=Imagelist.LoadImage(RootPath + "Controller\" + "Mask.png")

  C[26] = Shapes.AddImage(a)

  Shapes.SetOpacity(C[26], MaskOpacity)

  Shapes.Move(C[26], IconXOffset, IconYOffset)

  

  a=Imagelist.LoadImage(RootPath + "Controller\" + "PictureMask.png")

  C[27] = Shapes.AddImage(a)

  Shapes.Move(C[27], IconXOffset-50, IconYOffset-50)

  FCControls.SetZIndex(C[27], -1)

  



  

' ********************************Mouse Action ******************************************************************************  



GraphicsWindow.MouseDown = MouseAction

GraphicsWindow.KeyDown = KeyAction



sub MouseAction

  

  Mx = Mouse.MouseX

  My = Mouse.MouseY

  

        'GraphicsWindow.BrushColor = "black"

        'GraphicsWindow.FillRectangle(450, 450, 600, 600)

        'GraphicsWindow.BrushColor = "green"

        'GraphicsWindow.FontSize ="30"

        'GraphicsWindow.DrawText(500, 550, Mx + "  Mx")

        'GraphicsWindow.DrawText(550, 600, My + "  My")

        '

        'GraphicsWindow.PenColor  = "red"

        'GraphicsWindow.DrawRectangle(60, 0, 1070,1070)

        '

' Control - Controller Opacity

        

  If (Mx > 1750 and Mx < 1813) and (My > 199 and My < 312 )then

  ' ****************

  Button = "Controller Opacity"

  ' ****************

  If ActiveOpacityIndicator = "Controller"  then

  Else

    Shapes.ShowShape(C[24])

    ActiveOpacityIndicator = "Controller"

  For x = 11 to 19

  Shapes.HideShape(C[x])

  endfor  

  

  endif

 

endif



'  Control - Single/Multi 

If (Mx > IconXOffset + 100 and Mx < IconXOffset + 275) and (My > IconYOffset + 175 and My < IconYOffset + 225) then

  ' ****************

  Button = "Single/Multi"

  ' ****************

If SingleMultiMode = "Multi" then

SingleMultiMode = "Single"

Shapes.ShowShape(C[20])

For x = 1 To 9

  'Shapes.HideShape(P[x])

EndFor

Else

SingleMultiMode = "Multi"

Shapes.HideShape(C[20])

endif



 

endif



'  Control - Linked/Unlinked

If (Mx > IconXOffset + 100 and Mx < IconXOffset + 275) and (My > IconYOffset + 225 and My < IconYOffset + 300) then



If LinkedUnlinkedMode = "Linked" then

LinkedUnlinkedMode = "Unlinked"

Shapes.ShowShape(C[21])

Else

  LinkedUnlinkedMode = "Linked"

  Shapes.HideShape(C[21])

  Total = 0

  For x = 1 To 9

    Total = Total + SlideOpacity[x]

  EndFor

  LinkedOpacity = Math.Round(Total / 9)

  offset = Math.Remainder(LinkedOpacity, 5)

  LinkedOpacity = LinkedOpacity - offset

  For x = 1 To 9

    Shapes.SetOpacity(S[x], LinkedOpacity)

    SlideOpacity[x] = LinkedOpacity

    Shapes.SetText(SO[x], LinkedOpacity)

    Shapes.ShowShape(C[x + 10])

  EndFor

    

    ActiveOpacityIndicator = "Linked"

    Shapes.HideShape(C[24])

  

  

    



endif



endif



'  Control - All on

If (Mx > IconXOffset + 300 and Mx < IconXOffset + 375) and (My > IconYOffset + 175 and My < IconYOffset + 225) then

 ' ****************

  Button = "All on"

  ' ****************

  If SingleMultiMode = "Multi" Then

    For x = 1 To 9 

      Shapes.ShowShape(S[x])

      Shapes.ShowShape(C[x])

      SOnOff[x] = "On"

    endfor

  endif

Else

endif



'  Control - All off 

If (Mx > IconXOffset + 300 and Mx < IconXOffset + 375) and (My > IconYOffset + 250 and My < IconYOffset + 300) then

 ' ****************

  Button = "All Off"

  ' ****************

  For x = 1 To 9

   Shapes.HideShape(S[x])

    Shapes.HideShape(C[x])

    SOnOff[x] = "Off"

  Endfor

Else

  

endif



'  Control - "A" ViewName select 

If (Mx > IconXOffset + 25 and Mx < IconXOffset + 50) and (My > IconYOffset + 75 and My < IconYOffset + 125) then

 ' ****************

  Button = "A view name select"

  ' ****************

  If SelectedView > 1 Then

    SelectedView = SelectedView - 1

    Shapes.SetText(SV, ViewName[SelectedView])

  endif

 

endif



'  Control - "Z" ViewName select

If (Mx > IconXOffset + 300 and Mx < IconXOffset + 325) and (My > IconYOffset + 75 and My < IconYOffset + 125) then

  ' ****************

  Button = "Z view name select"

  ' ****************

If SelectedView < NumberOfViews Then

    SelectedView = SelectedView + 1

    Shapes.SetText(SV, ViewName[SelectedView])

  endif

  

 

endif



'  Control - Load 

If (Mx > IconXOffset + 75 and Mx < IconXOffset + 275) and (My > IconYOffset + 125 and My < IconYOffset + 150) then



 ' Get the number of Slides in selected view



' The following line could be harmful and has been automatically commented.

' NumberOfSlides = File.ReadLine(RootPath + "Views\"+ ViewName[SelectedView] + "\SlideList.txt", 1)



' Turn off all the On/Off indicators, and remove slides



For x = 1 To 9

  Shapes.HideShape(C[x])

  SOnOff[x] = "Off"

  Shapes.Remove(S[x])

endfor

r = 0

ZoomFactor = 1.000

MoveMx1 = 589

MoveMx2 = 608

MoveMy1 = 524

MoveMy2 = 543



Shapes.SetText(Zoom, ZoomFactor)



' Put the Slide images into the Shape variables, turn on indicators and names



  For x = 1 To NumberOfSlides

' The following line could be harmful and has been automatically commented.

'     SlideName[x] = File.ReadLine(RootPath + "Views\" + ViewName[SelectedView] + "\SlideList.txt", x + 1)

    a=Imagelist.LoadImage(RootPath + "Views\" + ViewName[SelectedView] + "\" + SlideName[x] + ".png")

    S[x] = Shapes.AddImage(a)

    Shapes.SetOpacity(S[x], SlideOpacity[x])

    Shapes.Move(S[x], 60, 0)

    Shapes.Rotate(S[x], 1)

    Shapes.Rotate(S[x], -1)

    Shapes.Zoom(S[x], 1.1, 1.1)

    Shapes.Zoom(S[x], 1.0, 1.0)

        If x > 1 Then

         Shapes.HideShape(S[x])

        endif

  EndFor

  Shapes.ShowShape(C[1])

  SOnOff[1] = "On"

  

  For x = 1 To 9

    FCControls.SetZIndex(S[x], -5)

  EndFor

  

  

  Shapes.SetText(LV, ViewName[SelectedView])



endif



'  Control - Correct/Viewer Mode



If (Mx > IconXOffset + 20 and Mx < IconXOffset + 86) and (My > IconYOffset + 225 and My < IconYOffset + 311) then

' ****************

  Button = "Correct/Viewer"

  ' ****************

  If ViewMode = "Viewer" then

    Shapes.HideShape(C[10])

    ViewMode = "Correct"

  Else

    Shapes.ShowShape(C[10])

    ViewMode = "Viewer"

  Endif  

endif



'  Control  - Slide 1

If (Mx > IconXOffset + 25 and Mx < IconXOffset + 175) and (My > IconYOffset + 325 and My < IconYOffset + 475) and ((NumberOfSlides + 1) > 1)  then 

  If Mx > IconXOffset + 125 And My > IconYOffset + 436 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "One"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[11])

    EndIf

  Else

    If SOnOff[1] = "On" Then

      Shapes.HideShape(C[1])

      Shapes.HideShape(S[1])

      SOnOff[1] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[1])

      Shapes.ShowShape(S[1])

      SOnOff[1] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[11])

      ActiveOpacityIndicator = "One"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 2

If (Mx > IconXOffset + 175 and Mx < IconXOffset + 325) and (My > IconYOffset + 325 and My < IconYOffset + 475) and ((NumberOfSlides + 1) > 2)  then

  If Mx > IconXOffset + 275 And My > IconYOffset + 436 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Two"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[12])

    EndIf

  Else

    If SOnOff[2] = "On" Then

      Shapes.HideShape(C[2])

      Shapes.HideShape(S[2])

      SOnOff[2] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[2])

      Shapes.ShowShape(S[2])

      SOnOff[2] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[12])

      ActiveOpacityIndicator = "Two"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 3

If (Mx > IconXOffset + 325 and Mx < IconXOffset + 475) and (My > IconYOffset + 325 and My < IconYOffset + 475) and ((NumberOfSlides + 1) > 3)  then

  If Mx > IconXOffset + 425 And My > IconYOffset + 436 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Three"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[13])

    EndIf

  Else

    If SOnOff[3] = "On" Then

      Shapes.HideShape(C[3])

      Shapes.HideShape(S[3])

      SOnOff[3] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[3])

      Shapes.ShowShape(S[3])

      SOnOff[3] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[13])

      ActiveOpacityIndicator = "Three"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 4

If (Mx > IconXOffset + 25 and Mx < IconXOffset + 175) and (My > IconYOffset + 475 and My < IconYOffset + 625) and ((NumberOfSlides + 1) > 4)  then

  If Mx > IconXOffset + 125 And My > IconYOffset + 586 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Four"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[14])

    EndIf

  Else

    If SOnOff[4] = "On" Then

      Shapes.HideShape(C[4])

      Shapes.HideShape(S[4])

      SOnOff[4] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[4])

      Shapes.ShowShape(S[4])

      SOnOff[4] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[14])

      ActiveOpacityIndicator = "Four"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 5

If (Mx > IconXOffset + 175 and Mx < IconXOffset + 325) and (My > IconYOffset + 475 and My < IconYOffset + 625)  and ((NumberOfSlides + 1) > 5) then

  If Mx > IconXOffset + 275 And My > IconYOffset + 586 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Five"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[15])

    EndIf

  Else

    If SOnOff[5] = "On" Then

      Shapes.HideShape(C[5])

      Shapes.HideShape(S[5])

      SOnOff[5] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[5])

      Shapes.ShowShape(S[5])

      SOnOff[5] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[15])

      ActiveOpacityIndicator = "Five"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 6

If (Mx > IconXOffset + 325 and Mx < IconXOffset + 475) and (My > IconYOffset + 475 and My < IconYOffset + 625) and ((NumberOfSlides + 1) > 6)  then

  If Mx > IconXOffset + 425 And My > IconYOffset + 586 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Six"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[16])

    EndIf

  Else

    If SOnOff[6] = "On" Then

      Shapes.HideShape(C[6])

      Shapes.HideShape(S[6])

      SOnOff[6] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[6])

      Shapes.ShowShape(S[6])

      SOnOff[6] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[16])

      ActiveOpacityIndicator = "Six"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 7

If (Mx > IconXOffset + 25 and Mx < IconXOffset + 175) and (My > IconYOffset + 625 and My < IconYOffset + 775)  and ((NumberOfSlides + 1) > 7) then

  If Mx > IconXOffset + 125 And My > IconYOffset + 736 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Seven"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[17])

    EndIf

  Else

    If SOnOff[7] = "On" Then

      Shapes.HideShape(C[7])

      Shapes.HideShape(S[7])

      SOnOff[7] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[7])

      Shapes.ShowShape(S[7])

      SOnOff[7] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      

      Shapes.ShowShape(C[17])

      ActiveOpacityIndicator = "Seven"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 8

If (Mx > IconXOffset + 175 and Mx < IconXOffset + 325) and (My > IconYOffset + 625 and My < IconYOffset + 775)  and ((NumberOfSlides + 1) > 8) then

  If Mx > IconXOffset + 275 And My > IconYOffset + 736 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Eight"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[18])

    EndIf

  Else

    If SOnOff[8] = "On" Then

      Shapes.HideShape(C[8])

      Shapes.HideShape(S[8])

      SOnOff[8] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[8])

      Shapes.ShowShape(S[8])

      SOnOff[8] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      

      Shapes.ShowShape(C[18])

      ActiveOpacityIndicator = "Eight"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Slide 9

If (Mx > IconXOffset + 325 and Mx < IconXOffset + 475) and (My > IconYOffset + 625 and My < IconYOffset + 775)  and ((NumberOfSlides + 1) > 9) then

  If Mx > IconXOffset + 425 And My > IconYOffset + 736 Then

    If LinkedUnlinkedMode = "Linked" then

      ActiveOpacityIndicator = "Linked"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.ShowShape(C[x])

      EndFor

    Else

      ActiveOpacityIndicator = "Nine"

      Shapes.HideShape(C[24])

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      Shapes.ShowShape(C[19])

    EndIf

  Else

    If SOnOff[9] = "On" Then

      Shapes.HideShape(C[9])

      Shapes.HideShape(S[9])

      SOnOff[9] = "Off"

    Else

      If SingleMultiMode = "Single" Then

        For x = 1 To 9 

          Shapes.HideShape(S[x])

          Shapes.HideShape(C[x])

          SOnOff[x] = "Off"

        EndFor

      EndIf

      Shapes.ShowShape(C[9])

      Shapes.ShowShape(S[9])

      SOnOff[9] = "On"

      If LinkedUnlinkedMode = "Unlinked" then

      For x = 11 To 19

        Shapes.HideShape(C[x])

      EndFor

      

      Shapes.ShowShape(C[19])

      ActiveOpacityIndicator = "Nine"

      endif

    EndIf

  EndIf

  

Else

endif



'  Control  - Opacity 

If (Mx > IconXOffset + 425 and Mx < IconXOffset + 475) and (My > IconYOffset + 800 and My < IconYOffset + 975) then

  

  

  If ActiveOpacityIndicator = "Controller" Then

     If My < IconYOffset + 839 Then

      MaskOpacity = 0 

      Shapes.SetOpacity(C[26], MaskOpacity)

      Shapes.SetText(MO, Math.Abs(100 - MaskOpacity))

    

     ElseIf My > IconYOffset + 838 and My < IconYOffset + 888 then

       If MaskOpacity > 0 then

          MaskOpacity = MaskOpacity - 5

          Shapes.SetOpacity(C[26], MaskOpacity)

          Shapes.SetText(MO, Math.Abs(100 - MaskOpacity))

       EndIf

     ElseIf My > IconYOffset + 887 and My < IconYOffset + 938 then

       If MaskOpacity < 75 then

        MaskOpacity = MaskOpacity + 5

        Shapes.SetOpacity(C[26], MaskOpacity)

        Shapes.SetText(MO, Math.Abs(100 - MaskOpacity))

       EndIf

     ElseIf My > IconYOffset + 937 and My < IconYOffset + 975 then

       MaskOpacity = 75

       Shapes.SetOpacity(C[26], MaskOpacity)

       Shapes.SetText(MO, Math.Abs(100 - MaskOpacity))

     EndIf

     

     

     

   ElseIf ActiveOpacityIndicator = "Linked" then

      If My < IconYOffset + 839 Then

        For x = 1 to 9

         Shapes.SetOpacity(S[x], 100)

         SlideOpacity[x] = 100

         Shapes.SetText(SO[x], 100)

        endfor

    

     ElseIf My > IconYOffset + 838 and My < IconYOffset + 888 then

       If LinkedOpacity <100 then

         LinkedOpacity = LinkedOpacity + 5

         For x = 1 To 9

           Shapes.SetOpacity(S[x], LinkedOpacity)

           SlideOpacity[x] = LinkedOpacity

          Shapes.SetText(SO[x], LinkedOpacity)

          Endfor

       EndIf

     ElseIf My > IconYOffset + 887 and My < IconYOffset + 938 then

       If LinkedOpacity > 0 then

         LinkedOpacity = LinkedOpacity - 5

         For x = 1 To 9

           Shapes.SetOpacity(S[x], LinkedOpacity)

           SlideOpacity[x] = LinkedOpacity

          Shapes.SetText(SO[x], LinkedOpacity)

        endfor

        EndIf

     ElseIf My > IconYOffset + 937 and My < IconYOffset + 975 then

        For x = 1 to 9

         Shapes.SetOpacity(S[x], 0)

         SlideOpacity[x] = 0

         Shapes.SetText(SO[x], 0)

        endfor

     EndIf

     

   Else

     

     If ActiveOpacityIndicator = "One" then

       O = 1

     ElseIf ActiveOpacityIndicator = "Two" then

       O = 2

     ElseIf ActiveOpacityIndicator = "Three" then

       O = 3

     ElseIf ActiveOpacityIndicator = "Four" then

       O = 4

     ElseIf ActiveOpacityIndicator = "Five" then

       O = 5

     ElseIf ActiveOpacityIndicator = "Six" then

       O = 6

     ElseIf ActiveOpacityIndicator = "Seven" then

       O = 7

     ElseIf ActiveOpacityIndicator = "Eight" then

       O = 8

     ElseIf ActiveOpacityIndicator = "Nine" then

       O = 9

     Endif  

     If My < IconYOffset + 839 Then

         Shapes.SetOpacity(S[O], 100)

         SlideOpacity[O] = 100

         Shapes.SetText(SO[O], 100)

       

    

     ElseIf My > IconYOffset + 838 and My < IconYOffset + 888 then

       If SlideOpacity[O] < 100 then

         SlideOpacity[O] = SlideOpacity[O] + 5

         Shapes.SetOpacity(S[O], SlideOpacity[O])

          Shapes.SetText(SO[O], SlideOpacity[O])

       EndIf

     ElseIf My > IconYOffset + 887 and My < IconYOffset + 938 then

       If SlideOpacity[O] > 0 then

         SlideOpacity[O] = SlideOpacity[O] - 5

         

          Shapes.SetOpacity(S[O], SlideOpacity[O])

          Shapes.SetText(SO[O], SlideOpacity[O])

       EndIf

     ElseIf My > IconYOffset + 937 and My < IconYOffset + 975 then

        Shapes.SetOpacity(S[O], 0)

         SlideOpacity[O] = 0

         Shapes.SetText(SO[O], 0)

     EndIf

    

   

  Endif 

Endif







'  Control  - Rotate Speed

If (Mx > IconXOffset + 290 and Mx < IconXOffset + 348) and (My > IconYOffset + 850 and My < IconYOffset + 925) then



      If My < IconYOffset + 875 Then

        Shapes.Move(C[23], IconXOffset + 327, IconYOffset + 859)

        d = .02

        Delay = 30

      ElseIf My > IconYOffset + 874 and My < IconYOffset + 900 then

        Shapes.Move(C[23], IconXOffset + 327, IconYOffset + 882)

        d = .05

        Delay = 15

        

      ElseIf My > IconYOffset + 899 then

        Shapes.Move(C[23], IconXOffset + 327, IconYOffset + 907)

        d = 1

        Delay = 50

      EndIf

 

endif



' Mouse Control for Rotate and Move 



If (Mx > 60 and Mx < 1130) and (My > 0 and My < IconYOffset + 1070) then

  If (Mx > MoveMx1 and Mx < MoveMx2) and (My > MoveMy1 and My < MoveMy2) then



    

     While Mouse.IsLeftButtonDown

       Dmx = Mouse.MouseX - Mx

       Dmy = Mouse.Mousey - My

      

       

       For x = 1 to NumberOfSlides

        Shapes.Move(S[x], Dmx + 60, Dmy)

       EndFor

     EndWhile

     

     MoveMx1 = MoveMx1 + Dmx

     MoveMx2 = MoveMx2 + Dmx

     MoveMy1 = MoveMy1 + Dmy

     MoveMy2 = MoveMy2 + Dmy

     

     

     

  Else

    While Mouse.IsLeftButtonDown = "True"

      DeltaX = (Mx - Mouse.MouseX) / 15

    For x = 1 To NumberOfSlides

    'Shapes.Rotate(S[x], r + DeltaX)

    FCControls.SetRotationAngle(S[x],r + DeltaX)

   EndFor

   Program.Delay(Delay)

   endwhile 

   r = r + DeltaX

   endif

 endif

 

 

' Control Rotate Clockwise



If (Mx > IconXOffset + 230 and Mx < IconXOffset + 289) and (My > IconYOffset + 800 and My < IconYOffset + 975) then

   Rotate()



endif 

  

' Control Rotate Counterclockwise

  

 If (Mx > IconXOffset + 349 and Mx < IconXOffset + 405) and (My > IconYOffset + 800 and My < IconYOffset + 975) then 

    Rotate()

  

 Endif



' Control - Mouse Move

















'  Control  - Move

If (Mx > IconXOffset + 25 and Mx < IconXOffset + 200) and (My > IconYOffset + 800 and My < IconYOffset + 975) then

  ' ****************

  Button = "Move"

  ' ****************

  

   Mx1 = Mx

   My1 = My

   SideA = Math.Abs(1475 - Mx1)

   SideB = Math.Abs(927 - My1)

   H = Math.SquareRoot((Math.Power(SideA, 2)) + (Math.Power(SideB, 2)))

   If H < 88 then

    Move()

   EndIf

 

endif



'GraphicsWindow.DrawText(600, 650, Button + " Button")



 

endsub













sub KeyAction

Key = GraphicsWindow.LastKey



If Key = "NumPad3" then

  d = .1

  RotateKey()

  elseIf Key = "NumPad1" then

  d = -.1

  RotateKey()

  elseIf Key = "NumPad9" then

  d = 1

  RotateKey()

  elseIf Key = "NumPad7" then

  d = -1

  RotateKey()

elseif Key = "F11" then

  ZoomFactor = ZoomFactor - .005

    For x = 1 To 9

     Shapes.Zoom(S[x], ZoomFactor, ZoomFactor)

   endfor

    Shapes.SetText(Zoom, ZoomFactor)

  elseif Key = "F12" then

    ZoomFactor = ZoomFactor + .005

  For x = 1 To 9

    Shapes.Zoom(S[x], ZoomFactor, ZoomFactor)

  endfor

  Shapes.SetText(Zoom, ZoomFactor)

  

endif

endsub



Sub Rotate

  While Mouse.IsLeftButtonDown = "True"

  r = r + d

  For x = 1 To NumberOfSlides

    Shapes.Rotate(S[x], r)

  EndFor

  Program.Delay(Delay)

 endwhile 

Endsub  



Sub RotateKey

  r = r + d

  For x = 1 To NumberOfSlides

    Shapes.Rotate(S[x], r)

  EndFor

  Program.Delay(Delay)

EndSub



Sub Move

    Dmx = (1475 - Mx1) / 6000

    Dmy = (927 - My1) / 6000

    While Mouse.IsLeftButtonDown

    VposX = Shapes.GetLeft(S[1])

    VposY = Shapes.GetTop(S[1])

    VposX = VposX + Dmx

    VposY = VposY + Dmy

    

    

    

    For x = 1 to NumberOfSlides

       Shapes.Move(S[x], VposX, VposY)

    EndFor

    EndWhile

EndSub  









'   ' Move shapes

' ElseIf Mx > 1388 and Mx < 1565 and My > 840 and My < 1015 then

'   Mx1 = Mx

'   My1 = My

'   SideA = Math.Abs(1475 - Mx1)

'   SideB = Math.Abs(927 - My1)

'   H = Math.SquareRoot((Math.Power(SideA, 2)) + (Math.Power(SideB, 2)))

'   If H < 88 then

'      ViewMove()

'    EndIf





'Sub ViewMove

''  

 '   Dmx = (1475 - Mx1) / 6000

 '   Dmy = (927 - My1) / 6000

 '   While Mouse.IsLeftButtonDown

 '   VposX = Shapes.GetLeft(V[1])

 '   VposY = Shapes.GetTop(V[1])

 '   VposX = VposX + Dmx

 '   VposY = VposY + Dmy

 '   

 '   

 '   

 '   For x = 1 to NumberOfViews

 '      Shapes.Move(V[x], VposX, VposY)

 '   EndFor

 '   EndWhile

'EndSub 


