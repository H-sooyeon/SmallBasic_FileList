Window_Width = 600

Window_Height = 600



' Stacks

Stack_Param = 0

Stack_Return = 1

Stack_Error = 2



' Properties

Prop_X = 0

Prop_Y = 1

Prop_Angle = 2



' Errors

Error_None = 0

Error_WrongArgsNum = 1



ErrorMsg[Error_None] = "None."

ErrorMsg[Error_WrongArgsNum] = "Wrong number of arguments."



Main()



Sub Main

  InitGraphicsWindow()

  While ("True")

    TextWindow.Write("x = ")

    Main_Object[Prop_X] = TextWindow.ReadNumber()

    

    TextWindow.Write("y = ")

    Main_Object[Prop_Y] = TextWindow.ReadNumber()

    

    TextWindow.Write("Angle = ")

    Main_Object[Prop_Angle] = Math.GetRadians(TextWindow.ReadNumber())

    

    Stack.PushValue(Stack_Param, Main_Object)

    RotationMatrix()

    

    Main_LastError = Stack.PopValue(Stack_Error)

    If (Main_LastError = Error_None) Then

      Main_Vector = Stack.PopValue(Stack_Return)

      TextWindow.WriteLine("x = " + Main_Vector[Prop_X])

      TextWindow.WriteLine("y = " + Main_Vector[Prop_Y])

      TextWindow.WriteLine("")

      

      Main_GridMinX = Math.Min(Main_Object[Prop_X], Main_Vector[Prop_X])

      Main_GridMinX = Math.Min(Main_GridMinX, 0) - 1

      

      Main_GridMinY = Math.Min(Main_Object[Prop_Y], Main_Vector[Prop_Y])

      Main_GridMinY = Math.Min(Main_GridMinY, 0) - 1

      

      Main_GridMaxX = Math.Max(Main_Object[Prop_X], Main_Vector[Prop_X])

      Main_GridMaxX = Math.Max(Main_GridMaxX, 0) + 1

      

      Main_GridMaxY = Math.Max(Main_Object[Prop_Y], Main_Vector[Prop_Y])

      Main_GridMaxY = Math.Max(Main_GridMaxY, 0) + 1

      

      Main_GridMinX = Math.Round(Main_GridMinX)

      Main_GridMinY = Math.Round(Main_GridMinY)

      Main_GridMaxX = Math.Round(Main_GridMaxX)

      Main_GridMaxY = Math.Round(Main_GridMaxY)

      

      Stack.PushValue(Stack_Param, Main_GridMaxY)

      Stack.PushValue(Stack_Param, Main_GridMaxX)

      Stack.PushValue(Stack_Param, Main_GridMinY)

      Stack.PushValue(Stack_Param, Main_GridMinX)

      

      Stack.PushValue(Stack_Param, Main_Vector)

      Stack.PushValue(Stack_Param, Main_Object)

      DrawGrid()

    Else

      TextWindow.WriteLine("Error: " + ErrorMsg[Main_LastError])

    EndIf

  EndWhile

EndSub



Sub InitGraphicsWindow

  GraphicsWindow.Show()

  GraphicsWindow.Title = "Rotation Matrix"

  GraphicsWindow.Width = Window_Width

  GraphicsWindow.Height = Window_Height

EndSub



Sub DrawGrid

  GraphicsWindow.Clear()

  

  DrawGrid_Vector1 = Stack.PopValue(Stack_Param)

  DrawGrid_Vector2 = Stack.PopValue(Stack_Param)

  

  DrawGrid_MinX  = Stack.PopValue(Stack_Param)

  DrawGrid_MinY = Stack.PopValue(Stack_Param)

  DrawGrid_MaxX = Stack.PopValue(Stack_Param)

  DrawGrid_MaxY = Stack.PopValue(Stack_Param)

  

  DrawGrid_Rows = Math.Abs(DrawGrid_MinY - DrawGrid_MaxY)

  DrawGrid_Columns = Math.Abs(DrawGrid_MinX - DrawGrid_MaxX)

  DrawGrid_RowHeight = Window_Height / DrawGrid_Rows

  DrawGrid_ColumnWidth = Window_Width / DrawGrid_Columns

  

  GraphicsWindow.PenColor = "Gray"

  GraphicsWindow.PenWidth = 2

  For i = 1 To DrawGrid_Rows

    DrawGrid_Y = i * DrawGrid_RowHeight

    GraphicsWindow.DrawLine(0, DrawGrid_Y, Window_Width, DrawGrid_Y)

  EndFor

  For i = 1 To DrawGrid_Columns

    DrawGrid_X = i * DrawGrid_ColumnWidth

    GraphicsWindow.DrawLine(DrawGrid_X, 0, DrawGrid_X, Window_Height)

  EndFor

  

  DrawGrid_CentreX = Math.Abs(DrawGrid_MinX) * DrawGrid_ColumnWidth

  DrawGrid_CentreY = Math.Abs(DrawGrid_MinY) * DrawGrid_RowHeight

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.PenWidth = 4

  GraphicsWindow.DrawLine(DrawGrid_CentreX, 0, DrawGrid_CentreX, Window_Height)

  GraphicsWindow.DrawLine(0, DrawGrid_CentreY, Window_Width, DrawGrid_CentreY)

  

  GraphicsWindow.PenColor = "Blue"

  GraphicsWindow.DrawLine(DrawGrid_CentreX, DrawGrid_CentreY, DrawGrid_Vector1[Prop_X] * DrawGrid_ColumnWidth + DrawGrid_CentreX, DrawGrid_Vector1[Prop_Y] * DrawGrid_RowHeight + DrawGrid_CentreY)

  GraphicsWindow.PenColor = "Red"

  GraphicsWindow.DrawLine(DrawGrid_CentreX, DrawGrid_CentreY, DrawGrid_Vector2[Prop_X] * DrawGrid_ColumnWidth + DrawGrid_CentreX, DrawGrid_Vector2[Prop_Y] * DrawGrid_RowHeight + DrawGrid_CentreY)

EndSub



' Param:

' decimal x, decimal y, decimal angle

' Returns:

' decimal x, decimal y

Sub RotationMatrixXYA

  RotationMatrixXYA_Angle = Stack.PopValue(Stack_Param)

  RotationMatrixXYA_Y = Stack.PopValue(Stack_Param)

  RotationMatrixXYA_X = Stack.PopValue(Stack_Param)

  RotationMatrixXYA_m11 = Math.Cos(RotationMatrixXYA_Angle)

  RotationMatrixXYA_m12 = Math.Sin(RotationMatrixXYA_Angle)

  Stack.PushValue(Stack_Return, RotationMatrixXYA_X * RotationMatrixXYA_m12 + RotationMatrixXYA_Y * RotationMatrixXYA_m11)

  Stack.PushValue(Stack_Return, RotationMatrixXYA_X * RotationMatrixXYA_m11 + RotationMatrixXYA_Y * -RotationMatrixXYA_m12)

EndSub



' Param:

' decimal[] vector, decimal angle

' Returns:

' decimal[] vector

Sub RotationMatrixVA

  RotationMatrixVA_Angle = Stack.PopValue(Stack_Param)

  RotationMatrixVA_Vector = Stack.PopValue(Stack_Param)

  RotationMatrixVA_m11 = Math.Cos(RotationMatrixVA_Angle)

  RotationMatrixVA_m12 = Math.Sin(RotationMatrixVA_Angle)

  RotationMatrixVA_Return[Prop_X] = RotationMatrixVA_Vector[Prop_X] * RotationMatrixVA_m11 + RotationMatrixVA_Vector[Prop_Y] * -RotationMatrixVA_m12

  RotationMatrixVA_Return[Prop_Y] = RotationMatrixVA_Vector[Prop_X] * RotationMatrixVA_m12 + RotationMatrixVA_Vector[Prop_Y] * RotationMatrixVA_m11

  Stack.PushValue(Stack_Return, RotationMatrixVA_Return)

EndSub



' Param:

' decimal[] object

' Returns:

' decimal[] vector

Sub RotationMatrixO

  RotationMatrixO_Object = Stack.PopValue(Stack_Param)

  RotationMatrixO_m11 = Math.Cos(RotationMatrixO_Object[Prop_Angle])

  RotationMatrixO_m12 = Math.Sin(RotationMatrixO_Object[Prop_Angle])

  RotationMatrixO_Return[Prop_X] = RotationMatrixO_Object[Prop_X] * RotationMatrixO_m11 + RotationMatrixO_Object[Prop_Y] * -RotationMatrixO_m12

  RotationMatrixO_Return[Prop_Y] = RotationMatrixO_Object[Prop_X] * RotationMatrixO_m12 + RotationMatrixO_Object[Prop_Y] * RotationMatrixO_m11

  Stack.PushValue(Stack_Return, RotationMatrixO_Return)

EndSub



' Param:

' 1: decimal x, decimal y, decimal angle

' 2: decimal[] vector, decimal angle

' 3: decimal[] object

' Returns:

' 1: decimal x, decimal y

' 2: decimal[] vector

' 3: decimal[] vector

Sub RotationMatrix

  If (Stack.GetCount(Stack_Param) = 3) Then

    RotationMatrixXYA()

    Stack.PushValue(Stack_Error, Error_None)

  ElseIf (Stack.GetCount(Stack_Param) = 2) Then

    RotationMatrixVA()

    Stack.PushValue(Stack_Error, Error_None)

  ElseIf (Stack.GetCount(Stack_Param) = 1) Then

    RotationMatrixO()

    Stack.PushValue(Stack_Error, Error_None)

  Else

    ClearParamStack()

    Stack.PushValue(Stack_Error, Error_WrongArgsNum)

  EndIf

EndSub



Sub ClearParamStack

  While (Stack.GetCount(Stack_Param) > 0)

    Stack.PopValue(Stack_Param)

  EndWhile

EndSub






