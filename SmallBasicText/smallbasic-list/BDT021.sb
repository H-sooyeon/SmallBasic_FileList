UltimateRestart:
TextWindow.ForegroundColor = "Silver"
TextWindow.Write("Welcome User, please type in your name here:")
name= TextWindow.Read()
If name = ("taranoshi")Then
Goto DOSLoop
Else
Goto DDDSSS
EndIf
DDDSSS:
TextWindow.WriteLine("Welcome"+name+ "to BasicDOS 11.8.6.4! :-)")
TextWindow.WriteLine("Copyright 2011 By Taranoshi"+".")
TextWindow.WriteLine("Booting_BasicDOS.....................")
Program.Delay(5000)
TextWindow.WriteLine("||||||||||||||||||        ||||||||||||||||   ||||||||||||||||      ||    |||||||||||||||||")
Program.Delay(500)
TextWindow.WriteLine("||               ||       ||            ||  ||                     ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                ||      ||            || ||                      ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                 ||     ||            ||  ||                     ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                  ||    ||            ||   ||                    ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                 ||     ||            ||    ||                   ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                ||      ||            ||     ||                  ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("|||||||||||||||||||       ||||||||||||||||      |||||||||||||      ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                ||      ||            ||                  ||     ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                 ||     ||            ||                   ||    ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                  ||    ||            ||                    ||   ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                   ||   ||            ||                     ||  ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                  ||    ||            ||                    ||   ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                 ||     ||            ||                   ||    ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("||                ||      ||            ||                  ||     ||    ||               ")
Program.Delay(500)
TextWindow.WriteLine("|||||||||||||||||||       ||            ||    |||||||||||||||      ||    |||||||||||||||||")
Program.Delay(5000)
TextWindow.WriteLine("||||||||||||         ||||||||||||||         ||||||||||||||||")
Program.Delay(500)
TextWindow.WriteLine("||         ||       ||             ||      ||               ")
Program.Delay(500)
TextWindow.WriteLine("||          ||      ||             ||     ||                ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||    ||                 ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||   ||                  ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||    ||                 ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||     ||                ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||      ||               ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||       |||||||||||||   ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||                   ||  ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||                    || ")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||                     ||")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||                      ||")
Program.Delay(500)
TextWindow.WriteLine("||           ||     ||             ||                     ||")
Program.Delay(500)
TextWindow.WriteLine("||          ||      ||             ||                    || ")
Program.Delay(500)
TextWindow.WriteLine("||||||||||||         ||||||||||||||       ||||||||||||||||  Kernel Boot Loader")
Program.Delay(1000)
TextWindow.Clear()
TextWindow.WriteLine("Type {help} to get started")
Goto DOSLoop
DOSLoop:
Program.Delay(100)
TextWindow.Clear()
TextWindow.ForegroundColor = "DarkGrey"
TextWindow.Write(name + "'s " + "Profile" + "DOS A:/>")
command= TextWindow.Read()
If command= ("help") Then
  Goto Start1
Else
  Goto Apples
EndIf
Apples:
If command= ("paint")Then
  Goto Start2
Else
  Goto Apples2
EndIf
Apples2:
If command= ("restart") Then
  Goto UltimateRestart
Else
  Goto Apples3
EndIf
Apples3:
If command= ("flickr") Then
  Goto Start3
Else
  Goto Apples4
EndIf
Apples4:
If command= ("A:")Then
  Goto Start4
Else
  Goto Apples5
EndIf
Apples5:
If command= ("printtime")Then
  Goto Start5
Else
  Goto Apples6
EndIf
Apples6:
If command= ("dos")Then
  Goto Start6
Else
  Goto Apples7
EndIf
Apples7:
If command= ("tetris")Then
Goto Start7
Else
Goto Apples8
EndIf
Apples8:
If command= ("pong")Then
Goto Start8
Else
Goto Apples9
EndIf
Apples9:
If command= ("box")Then
Goto Start9
Else
Goto Apples10
EndIf
Apples10:
If command= ("tempcalc")Then
Goto Start10
Else
Goto Apples11
EndIf
Apples11:
If command= ("pong2")Then
Goto Start11
Else
Goto Apples12
EndIf
Apples12:
If command= ("astroids")Then
Goto Start12
Else
Goto Apples13
EndIf
Apples13:
If command= ("jet")Then
Goto Start13
Else
Goto Apples14
EndIf
Apples14:
If command= ("fly")Then
Goto Start14
Else
Goto Apples15
EndIf
Apples15:
If command= ("balls")Then
Goto Start15
Else
Goto Apples16
EndIf
Apples16:
If command= ("brick")Then
Goto Start16
Else
Goto Apples17
EndIf
Apples17:
If command= ("forces")Then
Goto Start17
Else
Goto Apples18
EndIf
Apples18:
If command= ("dwin") Then
Goto Startdwin
Else
Goto Apples19
EndIf
Apples19:
If command = ("word")Then
Goto Wordcom
Else
Goto Apples20
EndIf
Apples20:
If command = ("exit")Then
  Goto EXITDOS
Else
  Goto DOSLoop
  EndIf

Start1:
TextWindow.ForegroundColor = "Grey"
TextWindow.WriteLine("_______________________________________")
TextWindow.WriteLine("|_ H_E_L_P_|_|_|_|_|_|_|_|_|_|_|_|_||||")
TextWindow.WriteLine("| paint = PaintDOS 2.0             ||||")
TextWindow.WriteLine("| restart = restart/reset BASICDOS ||||")
TextWindow.WriteLine("| flickr = Flickr Pictures         ||||")
TextWindow.WriteLine("| printtime = Print the Time       ||||")
TextWindow.WriteLine("| dos = BasicDOS Version           ||||")
TextWindow.WriteLine("| tetris = Tetris Game             ||||")
TextWindow.WriteLine("| brick = Microsoft Brick Game     ||||")
TextWindow.WriteLine("| pong = pong game                 ||||")
TextWindow.WriteLine("| pong2= pong2 Game                ||||")
TextWindow.WriteLine("| astroids = Astroids Game         ||||")
TextWindow.WriteLine("| jet = Jet Lag Game               ||||")
TextWindow.WriteLine("| balls = Ball Video               ||||")
TextWindow.WriteLine("| box = Box Video                  ||||")
TextWindow.WriteLine("| fly = Swarm of Flies Video       ||||")
TextWindow.WriteLine("| tempcalc = TempCalculator        ||||")
TextWindow.WriteLine("| dwin = GUI console               ||||")
TextWindow.WriteLine("|word = word processor             ||||")
TextWindow.WriteLine("|exit = exit BasicDOS              ||||")
TextWindow.WriteLine("|||||||||||||||||||||||||||||||||||||||")
TextWindow.WriteLine("---------------------------------------")
Program.Delay(2000)
TextWindow.Clear()
Goto DOSLoop

Start2:
GraphicsWindow.Show()
GraphicsWindow.Clear()
GraphicsWindow.PenColor = "Black"
GraphicsWindow.MouseMove= OnMouseMove
  GraphicsWindow.MouseDown= OnMouseDown  
 Sub OnMouseDown
prevX= GraphicsWindow.MouseX
prevY= GraphicsWindow.MouseY
EndSub

Sub OnMouseMove
  x= GraphicsWindow.MouseX
  y= GraphicsWindow.MouseY
  EndSub
  If (Mouse.IsLeftButtonDown)Then
    GraphicsWindow.DrawLine(prevX, prevY, x, y)
  EndIf
  prevX= x
  prevY= y
Goto DOSLoop

Start3:
GraphicsWindow.BackgroundColor = "Black"
GraphicsWindow.MouseDown = OnMouseDown2
Sub OnMouseDown2
pic = Flickr.GetRandomPicture("mountains, river")
GraphicsWindow.DrawResizedImage(pic, 0, 0, 640, 480)
EndSub
Goto DOSLoop

Start4:
TextWindow.ForegroundColor = "Yellow"
TextWindow.Write("Drive A: Not Found!")
Goto DOSLoop

Start5:
Sub PrintTime
TextWindow.WriteLine(Clock.Time)
EndSub
Goto DOSLoop

Start6:
TextWindow.ForegroundColor = "Grey"
TextWindow.WriteLine("DOS Version 9.0.7.3")
Goto DOSLoop

Start7:
GraphicsWindow.KeyDown = HandleKey
GraphicsWindow.BackgroundColor = GraphicsWindow.GetColorFromRGB( 253, 252, 251 )

While "True"
  BOXES = 4      ' number of boxes per piece
  BWIDTH = 25    ' box width in pixels
  XOFFSET = 40   ' Screen X offset in pixels of where the board starts
  YOFFSET = 40   ' Screen Y offset in pixels of where the board starts
  CWIDTH = 10    ' Canvas Width, in number of boxes
  CHEIGHT = 20   ' Canvas Height, in number of boxes.
  STARTDELAY = 800
  ENDDELAY = 175
  PREVIEW_xpos = 13
  PREVIEW_ypos = 2

  GraphicsWindow.Clear()
  GraphicsWindow.Title = "Small Basic Tetris"
  GraphicsWindow.Height = 580
  GraphicsWindow.Width = 700
  GraphicsWindow.Show()

  SetupTemplates()
  SetupCanvas()
  MainLoop()

  GraphicsWindow.ShowMessage( "Game Over", "Small Basic Tetris" )
EndWhile

Sub MainLoop
  template = Text.Append("template", Math.GetRandomNumber(7))

  CreatePiece() ' in: template ret: h
  nextPiece = h

  end = 0
  sessionDelay = STARTDELAY
  While end = 0
    If sessionDelay > ENDDELAY Then
      sessionDelay = sessionDelay - 1
    EndIf

    delay = sessionDelay
    thisPiece = nextPiece
    template = Text.Append("template", Math.GetRandomNumber(7))

    CreatePiece() ' in: template ret: h
    nextPiece = h
    DrawPreviewPiece()

    h = thisPiece

    ypos = 0
    done = 0
    xpos = 3 ' always drop from column 3
    CheckStop() ' in: ypos, xpos, h ret: done
    If done = 1 Then
      ypos = ypos - 1
      MovePiece()  'in: ypos, xpos, h
      end = 1
    EndIf

    yposdelta = 0
    While done = 0 Or yposdelta > 0
      MovePiece()  'in: ypos, xpos, h

      ' Delay, but break if the delay get set to 0 if the piece gets dropped
      delayIndex = delay
      While delayIndex > 0 And delay > 0
        Program.Delay(10)
        delayIndex = delayIndex - 10
      EndWhile

      If yposdelta > 0 Then
        yposdelta = yposdelta - 1  ' used to create freespin, when the piece is rotated
      Else
        ypos = ypos + 1            ' otherwise, move the piece down.
      EndIf

      ' Check if the piece should stop.
      CheckStop() ' in: ypos, xpos, h ret: done 
    EndWhile
  EndWhile
EndSub

Sub HandleKey
  ' Stop game
  If GraphicsWindow.LastKey = "Escape" Then
    Program.End()
  EndIf

  ' Move piece left
  If GraphicsWindow.LastKey = "Left" Then
    moveDirection = -1
    ValidateMove()  ' in: ypos, xpos, h, moveDirection ret: invalidMove = 1 or -1 or 2 if move is invalid, otherwise 0
    If invalidMove = 0 Then
      xpos = xpos + moveDirection
    EndIf
    MovePiece()  'in: ypos, xpos, h
  EndIf

  ' Move piece right
  If GraphicsWindow.LastKey = "Right" Then
    moveDirection = 1
    ValidateMove()  ' in: ypos, xpos, h, moveDirection ret: invalidMove = 1 or -1 or 2 if move is invalid, otherwise 0
    If invalidMove = 0 Then
      xpos = xpos + moveDirection
    EndIf
    MovePiece()  'in: ypos, xpos, h
  EndIf

  ' Move piece down
  If GraphicsWindow.LastKey = "Down" or GraphicsWindow.LastKey = "Space" Then
    delay = 0
  EndIf

  ' Rotate piece
  If GraphicsWindow.LastKey = "Up" Then
    basetemplate = Array.GetValue(h, -1)  ' Array.GetValue(h, -1) = the template name
    template = "temptemplate"
    rotation = "CW"
    CopyPiece()  'in basetemplate, template, rotation

    Array.SetValue(h, -1, template) ' Array.GetValue(h, -1) = the template name
    moveDirection = 0
    ValidateMove()  ' in: ypos, xpos, h, moveDirection ret: invalidMove = 1 or -1 or 2 if move is invalid, otherwise 0

    ' See if it can be moved so that it will rotate.
    xposbk = xpos
    yposdelta = 0
    While yposdelta = 0 And Math.Abs(xposbk - xpos) < 3 ' move up to 3 times only
      ' if the rotation move worked, copy the temp to "rotatedtemplate" and use that from now on
      If invalidMove = 0 Then
        basetemplate = template
        template = "rotatedtemplate"
        Array.SetValue(h, -1, template) ' Array.GetValue(h, -1) = the template name
        rotation = "COPY"
        CopyPiece()  'in basetemplate, template, rotation
        yposdelta = 1 ' Don't move down if we rotate
        MovePiece()  'in: ypos, xpos, h
      ElseIf invalidMove = 2 Then
        ' Don't support shifting piece when hitting another piece to the right or left.
        xpos = 99 ' exit the loop
      Else
        ' if the rotated piece can't be placed, move it left or right and try again.
        xpos = xpos - invalidMove
        ValidateMove()  ' in: ypos, xpos, h, moveDirection ret: invalidMove = 1 or -1 or 2 if move is invalid, otherwise 0
      EndIf
    EndWhile

    If invalidMove <> 0 Then
      xpos = xposbk
      Array.SetValue(h, -1, basetemplate) ' Array.GetValue(h, -1) = the template name
      template = ""
    EndIf
  EndIf
EndSub


Sub DrawPreviewPiece
  xpos = PREVIEW_xpos
  ypos = PREVIEW_ypos
  h = nextPiece

  XOFFSETBK = XOFFSET
  YOFFSETBK = YOFFSET
  XOFFSET = XOFFSET + Array.GetValue(Array.GetValue(h, -1), "pviewx") ' Array.GetValue(h, -1) = the template name
  YOFFSET = YOFFSET + Array.GetValue(Array.GetValue(h, -1), "pviewy") ' Array.GetValue(h, -1) = the template name
  MovePiece()  'in: ypos, xpos, h

  XOFFSET = XOFFSETBK
  YOFFSET = YOFFSETBK
EndSub

' creates template that's a rotated basetemplate
Sub CopyPiece  'in basetemplate, template, rotation 
  L = Array.GetValue(basetemplate, "dim")

  If rotation = "CW" Then
    For i = 0 to BOXES - 1 ' x' = y y' = L - 1 - x
      v = Array.GetValue(basetemplate, i)

      'x = Math.Floor(v/10)
      'y = Math.Remainder(v, 10)

      ' new x and y
      x = (Math.Remainder(v, 10))
      y = (L - 1 - Math.Floor(v/10))
      Array.SetValue(template, i, x * 10 + y)
    EndFor
  ' Count-Cockwise is not currently used
  ElseIf rotation = "CCW" Then
    For i = 0 to BOXES - 1 ' x' = L - 1 - y y' = x
      v = Array.GetValue(basetemplate, i)
      'x = Math.Floor(v/10)
      'y = Math.Remainder(v, 10)

      ' new x and y
      x = (L - 1 - Math.Remainder(v, 10))
      y = Math.Floor(v/10)
      Array.SetValue(template, i, x * 10 + y)
    EndFor
  ElseIf rotation = "COPY" Then
    For i = 0 to BOXES - 1
      Array.SetValue(template, i, Array.GetValue(basetemplate, i))
    EndFor
  Else
    GraphicsWindow.ShowMessage("invalid parameter", "Error")
    Program.End()
  EndIf

  ' Copy the remain properties from basetemplate to template.
  Array.SetValue(template, "color", Array.GetValue(basetemplate, "color"))
  Array.SetValue(template, "dim", Array.GetValue(basetemplate, "dim"))
  Array.SetValue(template, "pviewx", Array.GetValue(basetemplate, "pviewx"))
  Array.SetValue(template, "pviewy", Array.GetValue(basetemplate, "pviewy"))
EndSub

Sub CreatePiece ' in: template ret: h
  ' Create a new handle, representing an arrayName, that will represent the piece
  hcount = hcount + 1
  h = Text.Append("piece", hcount)

  Array.SetValue(h, -1, template) ' Array.GetValue(h, -1) = the template name

  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.BrushColor = Array.GetValue(template, "color")

  For i = 0 to BOXES - 1
    s = Shapes.AddRectangle(BWIDTH, BWIDTH)
    Shapes.Move(s, -BWIDTH, -BWIDTH) ' move off screen
    Array.SetValue(h, i, s)
  EndFor
EndSub

Sub MovePiece 'in: ypos, xpos, h. ypos/xpos is 0-19, representing the top/left box coordinate of the piece on the canvas. h returned by CreatePiece
  For i = 0 to BOXES - 1
    v = Array.GetValue(Array.GetValue(h, -1), i)  ' Array.GetValue(h, -1) = the template name
    x = Math.Floor(v/10)
    y = Math.Remainder(v, 10)

    ' Array.GetValue(h, i) = box for piece h.
    ' xpos/ypos = are topleft of shape. x/y is the box offset within the shape.
    Shapes.Move(Array.GetValue(h, i), XOFFSET + xpos * BWIDTH + x * BWIDTH, YOFFSET + ypos * BWIDTH + y * BWIDTH)
  EndFor
EndSub

Sub ValidateMove ' in: ypos, xpos, h, moveDirection ret: invalidMove = 1 or -1 or 2 if move is invalid, otherwise 0
  i = 0
  invalidMove = 0
  While i < BOXES
    v = Array.GetValue(Array.GetValue(h, -1), i)  ' Array.GetValue(h, -1) = the template name

    'x/y is the box offset within the shape.
    x = Math.Floor(v/10)
    y = Math.Remainder(v, 10)

    If (x + xpos + moveDirection) < 0 Then
      invalidMove = -1
      i = BOXES ' force getting out of the loop
    EndIf

    If (x + xpos + moveDirection) >= CWIDTH Then
      invalidMove = 1
      i = BOXES ' force getting out of the loop
    EndIf

    If Array.GetValue("c", (x + xpos + moveDirection) + (y + ypos) * CWIDTH) <> "." Then
      invalidMove = 2
      i = BOXES ' force getting out of the loop
    EndIf

    i = i + 1
  EndWhile
EndSub


Sub CheckStop ' in: ypos, xpos, h ret: done
  done = 0
  i = 0
  While i < BOXES
    v = Array.GetValue(Array.GetValue(h, -1), i)  ' Array.GetValue(h, -1) = the template name

    'x/y is the box offset within the shape.
    x = Math.Floor(v/10)
    y = Math.Remainder(v, 10)

    If y + ypos > CHEIGHT Or Array.GetValue("c", (x + xpos) + (y + ypos) * CWIDTH) <> "." Then
      done = 1
      i = BOXES ' force getting out of the loop
    EndIf

    i = i + 1
  EndWhile

  ' If we need to stop the piece, move the box handles to the canvas
  If done = 1 Then
    For i = 0 to BOXES - 1
      v = Array.GetValue(Array.GetValue(h, -1), i) ' Array.GetValue(h, -1) = the template name
      'x = Math.Floor(v/10)
      'y = Math.Remainder(v, 10) 
      Array.SetValue("c", (Math.Floor(v/10) + xpos) + (Math.Remainder(v, 10) + ypos - 1) * CWIDTH, Array.GetValue(h, i))
    EndFor

    ' 1 points for every piece successfully dropped
    score = score + 1
    PrintScore()

    ' Delete clared lines
    DeleteLines()
  EndIf
EndSub


Sub DeleteLines
  linesCleared = 0

  ' Iterate over each row, starting from the bottom
  For y = CHEIGHT - 1 to 0 Step -1

    ' Check to see if the whole row is filled
    x = CWIDTH
    While x = CWIDTH
      x = 0
      While x < CWIDTH
        piece = Array.GetValue("c", x + y * CWIDTH)
        If piece = "." then
          x = CWIDTH
        EndIf
        x = x + 1
      EndWhile

      ' if non of them were empty (i.e "."), then remove the line.
      If x = CWIDTH Then

        ' Delete the line
        For x1 = 0 to CWIDTH - 1
          Shapes.Remove(Array.GetValue("c", x1 + y * CWIDTH))
        EndFor
        linesCleared = linesCleared + 1

        ' Move everything else down one.
        For y1 = y To 1 Step -1
          For x1 = 0 to CWIDTH - 1
            piece = Array.GetValue("c", x1 + (y1 - 1) * CWIDTH)
            Array.SetValue("c", x1 + y1 * CWIDTH, piece)
            Shapes.Move(piece, Shapes.GetLeft(piece), Shapes.GetTop(piece) + BWIDTH)
          EndFor
        EndFor
      EndIf
    EndWhile
  EndFor

  If linesCleared > 0 Then
    score = score + 100 * Math.Round(linesCleared * 2.15 - 1)
    PrintScore()
  EndIf
EndSub

Sub SetupCanvas
' GraphicsWindow.DrawResizedImage( Flickr.GetRandomPicture( "bricks" ), 0, 0, GraphicsWindow.Width, GraphicsWindow.Height)


  GraphicsWindow.BrushColor = GraphicsWindow.BackgroundColor
  GraphicsWindow.FillRectangle(XOFFSET, YOFFSET, CWIDTH*BWIDTH, CHEIGHT*BWIDTH)

  Program.Delay(200)
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "Pink"
  For x = 0 To CWIDTH-1
    For y = 0 To CHEIGHT-1
      Array.SetValue("c", x + y * CWIDTH, ".") ' "." indicates spot is free
      GraphicsWindow.DrawRectangle(XOFFSET + x * BWIDTH, YOFFSET + y * BWIDTH, BWIDTH, BWIDTH)
    EndFor
  EndFor

  GraphicsWindow.PenWidth = 4
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.DrawLine(XOFFSET, YOFFSET, XOFFSET, YOFFSET + CHEIGHT*BWIDTH)
  GraphicsWindow.DrawLine(XOFFSET + CWIDTH*BWIDTH, YOFFSET, XOFFSET + CWIDTH*BWIDTH, YOFFSET + CHEIGHT*BWIDTH)
  GraphicsWindow.DrawLine(XOFFSET, YOFFSET + CHEIGHT*BWIDTH, XOFFSET + CWIDTH*BWIDTH, YOFFSET + CHEIGHT*BWIDTH)

  GraphicsWindow.PenColor = "Lime"
  GraphicsWindow.DrawLine(XOFFSET - 4, YOFFSET, XOFFSET - 4, YOFFSET + CHEIGHT*BWIDTH + 6)
  GraphicsWindow.DrawLine(XOFFSET + CWIDTH*BWIDTH + 4, YOFFSET, XOFFSET + CWIDTH*BWIDTH + 4, YOFFSET + CHEIGHT*BWIDTH + 6)
  GraphicsWindow.DrawLine(XOFFSET - 4, YOFFSET + CHEIGHT*BWIDTH + 4, XOFFSET + CWIDTH*BWIDTH + 4, YOFFSET + CHEIGHT*BWIDTH + 4)

  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.BrushColor = "Pink"
  x = XOFFSET + PREVIEW_xpos * BWIDTH - BWIDTH
  y = YOFFSET + PREVIEW_ypos * BWIDTH - BWIDTH
  GraphicsWindow.FillRectangle(x, y, BWIDTH * 5, BWIDTH * 6)
  GraphicsWindow.DrawRectangle(x, y, BWIDTH * 5, BWIDTH * 6)

  GraphicsWindow.FillRectangle(x - 20, y + 190, 310, 170)
  GraphicsWindow.DrawRectangle(x - 20, y + 190, 310, 170)

  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontItalic = "False"
  GraphicsWindow.FontName = "Comic Sans MS"
  GraphicsWindow.FontSize = 16
  GraphicsWindow.DrawText(x, y + 200, "Game control keys:")
  GraphicsWindow.DrawText(x + 25, y + 220, "Left Arrow = Move piece left")
  GraphicsWindow.DrawText(x + 25, y + 240, "Right Arrow = Move piece right")
  GraphicsWindow.DrawText(x + 25, y + 260, "Up Arrow = Rotate piece")
  GraphicsWindow.DrawText(x + 25, y + 280, "Down Arrow = Drop piece")
  GraphicsWindow.DrawText(x, y + 320, "Press to stop game")

  Program.Delay(200) ' without this delay, the above text will use the fontsize of the score 

  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontName = "Georgia"
  GraphicsWindow.FontItalic = "True"
  GraphicsWindow.FontSize = 36
  GraphicsWindow.DrawText(x - 20, y + 400, "Small Basic Tetris")
  Program.Delay(200) ' without this delay, the above text will use the fontsize of the score 
  GraphicsWindow.FontSize = 16
  GraphicsWindow.DrawText(x - 20, y + 440, "ver.0.1")

  Program.Delay(200) ' without this delay, the above text will use the fontsize of the score 
  score = 0
  PrintScore()
EndSub


Sub PrintScore
  GraphicsWindow.PenWidth = 4
  GraphicsWindow.BrushColor = "Pink"
  GraphicsWindow.FillRectangle(500, 65, 153, 50)
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawRectangle(500, 65, 153, 50)
  GraphicsWindow.FontItalic = "False"
  GraphicsWindow.FontSize = 32
  GraphicsWindow.FontName = "Impact"
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawText(505, 70, Text.Append(Text.GetSubText( "00000000", 0, 8 - Text.GetLength( score ) ), score))
EndSub


Sub SetupTemplates
  ' each piece has 4 boxes.
  ' the index of each entry within a piece represents the box number (1-4)
  ' the value of each entry represents to box zero-based box coordinate within the piece: tens place is x, ones place y

  '_X_
  '_X_
  '_XX

  Array.SetValue("template1", 0, 10)
  Array.SetValue("template1", 1, 11)
  Array.SetValue("template1", 2, 12)
  Array.SetValue("template1", 3, 22)
  Array.SetValue("template1", "color", "Yellow")
  Array.SetValue("template1", "dim", 3)
  Array.SetValue("template1", "pviewx", -12)
  Array.SetValue("template1", "pviewy", 12)


  '_X_
  '_X_
  'XX_
  Array.SetValue("template2", 0, 10)
  Array.SetValue("template2", 1, 11)
  Array.SetValue("template2", 2, 12)
  Array.SetValue("template2", 3, 02)
  Array.SetValue("template2", "color", "Magenta")
  Array.SetValue("template2", "dim", 3)
  Array.SetValue("template2", "pviewx", 12)
  Array.SetValue("template2", "pviewy", 12)


  '_X_
  'XXX
  '_
  Array.SetValue("template3", 0, 10)
  Array.SetValue("template3", 1, 01)
  Array.SetValue("template3", 2, 11)
  Array.SetValue("template3", 3, 21)
  Array.SetValue("template3", "color", "Gray")
  Array.SetValue("template3", "dim", 3)
  Array.SetValue("template3", "pviewx", 0)
  Array.SetValue("template3", "pviewy", 25)


  'XX_
  'XX_
  '_
  Array.SetValue("template4", 0, 00)
  Array.SetValue("template4", 1, 10)
  Array.SetValue("template4", 2, 01)
  Array.SetValue("template4", 3, 11)
  Array.SetValue("template4", "color", "Cyan")
  Array.SetValue("template4", "dim", 2)
  Array.SetValue("template4", "pviewx", 12)
  Array.SetValue("template4", "pviewy", 25)


  'XX_
  '_XX
  '_
  Array.SetValue("template5", 0, 00)
  Array.SetValue("template5", 1, 10)
  Array.SetValue("template5", 2, 11)
  Array.SetValue("template5", 3, 21)
  Array.SetValue("template5", "color", "Green")
  Array.SetValue("template5", "dim", 3)
  Array.SetValue("template5", "pviewx", 0)
  Array.SetValue("template5", "pviewy", 25)


  '_XX
  'XX_
  '_
  Array.SetValue("template6", 0, 10)
  Array.SetValue("template6", 1, 20)
  Array.SetValue("template6", 2, 01)
  Array.SetValue("template6", 3, 11)
  Array.SetValue("template6", "color", "Blue")
  Array.SetValue("template6", "dim", 3)
  Array.SetValue("template6", "pviewx", 0)
  Array.SetValue("template6", "pviewy", 25)


  '_X
  '_X
  '_X
  '_X
  Array.SetValue("template7", 0, 10)
  Array.SetValue("template7", 1, 11)
  Array.SetValue("template7", 2, 12)
  Array.SetValue("template7", 3, 13)
  Array.SetValue("template7", "color", "Red")
  Array.SetValue("template7", "dim", 4)
  Array.SetValue("template7", "pviewx", 0)
  Array.SetValue("template7", "pviewy", 0)  
 EndSub 

Start8:
GraphicsWindow.BackgroundColor = "DarkBlue"
paddle = Shapes.AddRectangle(120, 12)
ball = Shapes.AddEllipse(16, 16)
GraphicsWindow.MouseMove = OnMouseMove2
x = 0
y = 0
deltaX = 1
deltaY = 1
RunLoop:
x = x + deltaX
y = y + deltaY
gw = GraphicsWindow.Width
gh = GraphicsWindow.Height
If (x >= gw - 16 or x <= 0) Then
deltaX = -deltaX
EndIf
If (y <= 0) Then
deltaY = -deltaY
EndIf
padX = Shapes.GetLeft (paddle)
If (y = gh - 28 and x >= padX and x <= padX + 120) Then
deltaY = -deltaY
EndIf
Shapes.Move(ball, x, y)
Program.Delay(5)
If (y < gh) Then
Goto RunLoop
EndIf
GraphicsWindow.ShowMessage("You Lose", "Paddle")
Sub OnMouseMove2
paddleX = GraphicsWindow.MouseX
Shapes.Move(paddle, paddleX - 60, GraphicsWindow.Height - 12)
EndSub
Goto DOSLoop

Start9:
Blah:
rows = 8
columns = 8
size = 40
For r = 1 To rows
For c = 1 To columns
GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()
boxes[r][c] = Shapes.AddRectangle(size, size)
Shapes.Move(boxes[r][c], c * size, r * size)
EndFor
EndFor
For r = 1 To rows
For c = 1 To columns
Shapes.Animate(boxes[r][c], 0, 0, 1000)
Program.Delay(300)
EndFor
EndFor
TextWindow.ForegroundColor = "Dark Grey"
TextWindow.Write("Replay Box?")
reply= TextWindow.Read()
If reply= ("yes")Then
Goto Blah
Else
Goto DOSLoop
EndIf
  
Start10:
CalcLoop:
TextWindow.ForegroundColor = "Blue"
TextWindow.Write("Enter temperature in Fahrenheit: ")
fahr = TextWindow.ReadNumber()
celsius = 5 * (fahr - 32) / 9
TextWindow.WriteLine("Temperature in Celsius is " + celsius)
TextWindow.Write("Continue usind TempCalc?")
word= TextWindow.Read()
If word= ("yes")Then
  Goto CalcLoop
Else
  Goto DOSLoop
EndIf

Start11:
'Ping Pong 
'Point Multiplier
Start5000:
'Points Multiplier
pointsMultiply = 1
score = score+1
Sub  MouseMove
  score = score+1
  EndSub 

'Bottom paddle
If (y >= gh - paddle - ball/2 and x >= padX and x <= padX + paddle) Then
  y = gh - paddle - ball/2
  Sound.PlayClick()
  score = score+1
EndIf
'Background
GraphicsWindow.BackgroundColor = GraphicsWindow.GetRandomColor()
For i = 1 To 1000
GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()
x = Math.GetRandomNumber(640)
y = Math.GetRandomNumber(480)
GraphicsWindow.FillEllipse(x, y, 10, 10)
EndFor
paddle = Shapes.AddRectangle(100, 12)
ball = Shapes.AddEllipse(16, 16)
GraphicsWindow.MouseMove = OnMouseMove12
x = 0
y = 0
deltaX = 1
deltaY = 1
RunLoop5:

'Title Page
GraphicsWindow.Title =GameTitle + (score*pointsMultiply)
GameTitle = "Ping Pong  Seconds You are playing:"

x = x + deltaX
y = y + deltaY
gw = GraphicsWindow.Width
gh = GraphicsWindow.Height
If (x >= gw - 16 or x <= 0) Then
deltaX = -deltaX
EndIf
If (y <= 0) Then
deltaY = -deltaY
EndIf
padX = Shapes.GetLeft (paddle)
If (y = gh - 28 and x >= padX and x <= padX + 120) Then
deltaY = -deltaY
EndIf
Shapes.Move(ball,  x, y)
Program.Delay(1)
If (y < gh) Then
 score = score+1
 Goto RunLoop5
EndIf
GraphicsWindow.ShowMessage ("Game Over :( . Seconds You have played:" + (score*pointsMultiply) + "Seconds. Thanks for playing! :)" "Play Again?")
Sub OnMouseMove12
paddleX = GraphicsWindow.MouseX
Shapes.Move(paddle, paddleX - 60, GraphicsWindow.Height - 12)
EndSub
Shapes.Remove(paddle)
TextWindow.ForegroundColor = "Pink"
TextWindow.Write("Play Again?")
reply2= TextWindow.Read()
If reply2= ("Yes")Then
  Goto Start5000
Else
  Goto DOSLoop
EndIf

Start12:
' Asteroids Game
' Copyright (C) 2009, Jason T. Jacques 
' License: MIT license http://www.opensource.org/licenses/mit-license.php

' Game area controls
gameWidth  = 640
gameHeight = 480
backColor = "black"

' Window title
gameTitle = "Asteroids, Score: "

' Target frames per second
fps = 25

' Key controls
leftKey  = "Left"
rightKey = "Right"
forwardKey = "Up"
backKey = "Down"
fireKey = "Space"
pauseKey = "P"

' Asteroid (rock) settings
rockSpeed = 1
rockColor = "white"
rockMin = 20 ' small size rock
rockTypes = 3 ' number of rock sizes (multiples of small rock size)
initRocks = 5

' Ammo settings
ammoSpeed = 5
ammoColor = "white"
ammoLife = 60 ' moves before auto destruct
ammoMax = 10
ammoSize = 5

' Player settings
playerColor  = "white"
playerHeight = 30
playerWidth = 20
safeTime = 100 ' time player has to get out of the way on level up

' Point multiplier
pointsMultiply = 10

' Array name initialisation
rock = "rockArray"
rockAngle = "rockAngle"
rockSize = "rockSize"
ammo = "ammoArray"
ammoAngle = "ammoAngle"
ammoAge = "ammoAge"

rockCount = 0
ammoCount = 0

bigRock = ImageList.LoadImage("http://smallbasic.com/drop/Asteroids_BigRock.png")
medRock = ImageList.LoadImage("http://smallbasic.com/drop/Asteroids_MediumRock.png")
smlRock = ImageList.LoadImage("http://smallbasic.com/drop/Asteroids_SmallRock.png")
background = ImageList.LoadImage("http://smallbasic.com/drop/Asteroids_Sky.png")


' Start game
Init()
Play()


' Setup world
Sub Init
  GraphicsWindow.Hide()
  GraphicsWindow.Title = gameTitle + "0"
  GraphicsWindow.CanResize = "False"
  GraphicsWindow.Width = gameWidth
  GraphicsWindow.Height = gameHeight


  GraphicsWindow.BackgroundColor = backColor
  GraphicsWindow.BrushColor = backColor
  GraphicsWindow.DrawImage(background, 0, 0)

  LevelCheck()

  GraphicsWindow.PenColor = playerColor
  player = Shapes.AddImage("http://smallbasic.com/drop/Asteroids_Ship.png")
  ' player = Shapes.AddTriangle(playerWidth/2, 0, 0, playerHeight, playerWidth, playerHeight)
  Shapes.Move(player, (gameWidth - playerWidth) / 2, (gameHeight - playerHeight) / 2)
  playerAngle = 0
EndSub

' Main gane routine
Sub Play
  GraphicsWindow.Show()
  GraphicsWindow.KeyDown = ChangeDirection

  ' Main loop
  play = 1
  pause = 0
  While(play = 1)
    Program.Delay(1000/fps)
    If (pause = 0) Then
      Move()
      CollisionCheck()
      AgeAmmo()
      LevelCheck()
    EndIf
  EndWhile
EndSub

' Read key event and act
Sub ChangeDirection
  If(GraphicsWindow.LastKey = rightKey) Then
    playerAngle = Math.Remainder(playerAngle + 10, 360)
  ElseIf(GraphicsWindow.LastKey = leftKey) Then
    playerAngle = Math.Remainder(playerAngle - 10, 360)
  ElseIf(GraphicsWindow.LastKey = forwardKey) Then
    playerSpeed = playerSpeed + 1
  ElseIf(GraphicsWindow.LastKey = backKey) Then
    playerSpeed = playerSpeed - 1
  ElseIf(GraphicsWindow.LastKey = fireKey) Then
    Fire()
  ElseIf(GraphicsWindow.LastKey = pauseKey) Then
    pause = Math.Remainder(pause + 1, 2)
  EndIf
  Shapes.Rotate(player, playerAngle)
EndSub

' Move all on screen items
Sub Move
  ' Move player
  x = Math.Remainder(Shapes.GetLeft(player) + (Math.Cos(Math.GetRadians(playerAngle - 90)) * playerSpeed) + gameWidth, gameWidth)
  y = Math.Remainder(Shapes.GetTop(player) + (Math.Sin(Math.GetRadians(playerAngle - 90)) * playerSpeed) + gameHeight, gameHeight)
  Shapes.Move(player, x, y)

  ' Move rocks
  For i = 1 To rockCount
    x = Math.Remainder(Shapes.GetLeft(Array.GetValue(rock, i)) + (Math.Cos(Math.GetRadians(Array.GetValue(rockAngle, i) - 90)) * rockSpeed) + gameWidth, gameWidth)
    y = Math.Remainder(Shapes.GetTop(Array.GetValue(rock, i)) + (Math.Sin(Math.GetRadians(Array.GetValue(rockAngle, i) - 90)) * rockSpeed) + gameHeight, gameHeight)
    Shapes.Move(Array.GetValue(rock, i), x, y)
  EndFor

  ' Move ammo
  For i = 1 To ammoCount
    x = Math.Remainder(Shapes.GetLeft(Array.GetValue(ammo, i)) + (Math.Cos(Math.GetRadians(Array.GetValue(ammoAngle, i) - 90)) * ammoSpeed) + gameWidth, gameWidth)
    y = Math.Remainder(Shapes.GetTop(Array.GetValue(ammo, i)) + (Math.Sin(Math.GetRadians(Array.GetValue(ammoAngle, i) - 90)) * ammoSpeed) + gameHeight, gameHeight)
    Shapes.Move(Array.GetValue(ammo, i), x, y)
    Array.SetValue(ammoAge, i, Array.GetValue(ammoAge, i) + 1)
  EndFor
EndSub

' Check for collisions between onscreen items
Sub CollisionCheck
  ' Calculate player bounding box.
  px1 = Shapes.GetLeft(player) - ( (Math.Abs(playerWidth * Math.Cos(Math.GetRadians(playerAngle)) + playerHeight * Math.Sin(Math.GetRadians(playerAngle))) - playerWidth) / 2)
  py1 = Shapes.GetTop(player) - ( (Math.Abs(playerWidth * Math.Sin(Math.GetRadians(playerAngle)) + playerHeight * Math.Cos(Math.GetRadians(playerAngle))) - playerHeight) / 2)
  px2 = px1 + Math.Abs(playerWidth * Math.Cos(Math.GetRadians(playerAngle)) + playerHeight * Math.Sin(Math.GetRadians(playerAngle)))
  py2 = py1 + Math.Abs(playerWidth * Math.Sin(Math.GetRadians(playerAngle)) + playerHeight * Math.Cos(Math.GetRadians(playerAngle)))

  ' Re-order co-oridinates if they are the wrong way arround
  If(px1 > px2) Then
    tmp = px1
    px1 = px2
    px2 = tmp
  EndIf
  If(py1 > py2) Then
    tmp = py1
    py1 = py2
    py2 = tmp
  EndIf

  ' Check if each rock has hit something
  For i = 1 To rockCount
    ax1 = Shapes.Getleft(Array.GetValue(rock, i))
    ay1 = Shapes.GetTop(Array.GetValue(rock, i))
    ax2 = ax1 + Array.GetValue(rockSize, i)
    ay2 = ay1 + Array.GetValue(rockSize, i)


    ' Player collison
    If(playerSafe < 1) Then
      If ( (ax1 < px1 And ax2 > px1) Or (ax1 < px2 And ax2 > px2) ) Then
        If ( (ay1 < py1 And ay2 > py1) Or (ay1 < py2 And ay2 > py2) ) Then
          EndGame()
        EndIf
      EndIf
    EndIf


    ' Ammo collison
    For j = 1 to ammoCount
      bx1 = Shapes.Getleft(Array.GetValue(ammo, j))
      by1 = Shapes.GetTop(Array.GetValue(ammo, j))
      bx2 = bx1 + ammoSize
      by2 = by1 + ammoSize

      If ( (ax1 < bx1 And ax2 > bx1) Or (ax1 < bx2 And ax2 > bx2) ) Then
        If ( (ay1 < by1 And ay2 > by1) Or (ay1 < by2 And ay2 > by2) ) Then
          nextRemove = i
          RemoveRock()
          nextRemove = j
          RemoveAmmo()
        EndIf
      EndIf
    EndFor

  EndFor

  ' Decrease the time player is safe
  If (playerSafe > 0) Then
    playerSafe = playerSafe - 1
  EndIf
EndSub


' Add a new rock to the world
Sub AddRock
  ' Check if the next rock size/position has been specified
  If (nextSize <> 0) Then
    size = rockMin* nextSize
    x = Shapes.GetLeft(nextPosition)
    y = Shapes.GetTop(nextPosition)
    nextSize = 0
  Else
    ' Choose a random size and position
    size = rockMin * Math.GetRandomNumber(rockTypes)
    x = Math.GetRandomNumber(gameWidth - size)
    y = Math.GetRandomNumber(gameHeight - size)
  EndIf

  ' Draw the rock
  GraphicsWindow.PenColor = rockColor
  If size = 60 Then
    Array.SetValue(rock, rockCount + 1, Shapes.AddImage(bigRock))
  ElseIf size = 40 Then
    Array.SetValue(rock, rockCount + 1, Shapes.AddImage(medRock))
  Else
    Array.SetValue(rock, rockCount + 1, Shapes.AddImage(smlRock))
  EndIf
  rockCount = rockCount + 1

  Shapes.Move(Array.GetValue(rock, rockCount), x, y)
  Array.SetValue(rockAngle, rockCount, Math.GetRandomNumber(360))
  Array.SetValue(rockSize, rockCount, size)
EndSub

' Remove a rock from the world and update score
Sub RemoveRock
  removeSize = Array.GetValue(rockSize, nextRemove) / rockMin
  ' If not a mini rock
  If (removeSize > 1) Then
    ' ... add new rocks until we have made up for it being broken apart...
    While(removeSize > 0)
      nextSize = Math.GetRandomNumber(removeSize - 1)
      nextPosition = Array.GetValue(rock, nextRemove)
      removeSize = removeSize - nextSize
      AddRock()
    EndWhile
    ' And give a point for a 'hit'
    score = score + 1
  Else
    ' We've destroyed it - give some extra points and 
    score = score + 5
  EndIf

  ' Show updated score
  GraphicsWindow.Title = gameTitle + (score * pointsMultiply)

  ' Remove all references from the arrays
  Shapes.Remove(Array.GetValue(rock, nextRemove))
  For i = nextRemove To rockCount - 1
    Array.SetValue(rock, i, Array.GetValue(rock, i+1))
    Array.SetValue(rockAngle, i, Array.GetValue(rockAngle, i+1))
    Array.SetValue(rockSize, i, Array.GetValue(rockSize, i+1))
  EndFor
  Array.RemoveValue(rock, rockCount)
  Array.RemoveValue(rockAngle, rockCount)
  Array.RemoveValue(rockSize, rockCount)
  rockCount = rockCount - 1
EndSub

' Check if the player has completed the level, if so, level up
Sub LevelCheck
  If(rockCount < 1) Then
    nextSize = 0
    For i = 1 To initRocks
      AddRock()
    EndFor
    initRocks = initRocks + 1

    ' Give players some time to move out of the way
    playerSafe = safeTime
  EndIf
EndSub

' Add ammo to game
Sub Fire
  ' Remove additional ammo
  While(ammoCount > (ammoMax - 1))
    nextRemove = 1
    RemoveAmmo()
  EndWhile

  ' Add the ammo
  GraphicsWindow.PenColor = ammoColor
  ammoCount = ammoCount + 1
  Array.SetValue(ammo, ammoCount, Shapes.AddEllipse(ammoSize, ammoSize))
  Shapes.Move(Array.GetValue(ammo, ammoCount), (px1 + px2 - ammoSize) / 2, (py1 + py2 - ammoSize) / 2)
  Array.SetValue(ammoAngle, ammoCount, playerAngle)
EndSub

' Check ammo age
Sub AgeAmmo
  While (Array.GetValue(ammoAge, 1) > ammoLife)
    nextRemove = 1
    RemoveAmmo()
  EndWhile
EndSub

' Remove top Ammo
Sub RemoveAmmo
  Shapes.Remove(Array.GetValue(ammo, nextRemove))
  For i = nextRemove To ammoCount - 1
    Array.SetValue(ammo, i, Array.GetValue(ammo, i+1))
    Array.SetValue(ammoAngle, i, Array.GetValue(ammoAngle, i+1))
    Array.SetValue(ammoAge, i, Array.GetValue(ammoAge, i+1))
  EndFor
  Array.RemoveValue(ammo, ammoCount)
  Array.RemoveValue(ammoAngle, ammoCount)
  Array.RemoveValue(ammoAge, ammoCount)
  ammoCount = ammoCount - 1
EndSub

' Display simple end game message box
Sub EndGame
  play = 0
  Shapes.Remove(player)
  GraphicsWindow.ShowMessage("You scored " + (score * pointsMultiply) + " points. Thanks for Playing.", "Game Over!")
EndSub
Goto DOSLoop

Start13:
Starter:
Initialize()
While (GameState<>"End")
    DoGameLoop()
EndWhile
Program.End()

Sub Initialize
    'Initialize Variables
    Score = 0
    Direction = 0
    GameState = "GameOver"
    GameDelay = 100

    'Initialize the GraphicsWindow
    GraphicsWindow.Show()
    UpdateScore()
    GraphicsWindow.Width = 640
    GraphicsWindow.Height = 480
    GraphicsWindow.BackgroundColor = GraphicsWindow.GetRandomColor()
    GraphicsWindow.KeyDown = OnKeyDown

    'Initialize Blocks
    GraphicsWindow.PenWidth = 0
    GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()
    For Index=0 To 29
        Temp = Shapes.AddRectangle(16,16)
        Shapes.Move(Temp,0,Index*16)
        Array.SetValue("Blocks",Index,Temp)
        Array.SetValue("BlockPositions",Index,0)
    EndFor

    'Initialize Walls
    GraphicsWindow.PenWidth = 0
    GraphicsWindow.BrushColor = "#0000FF"
    Temp = Shapes.AddRectangle(16,480)
    shapes.Move(Temp,624,0)
    shapes.AddRectangle(16,480)

    'Initialize Tail
    GraphicsWindow.PenWidth = 0
    GraphicsWindow.BrushColor = "#FFFF00"
    For Index = 0 To 4
        Temp = Shapes.AddRectangle(16,16)
        Shapes.Move(Temp,320,Index*16)
        Array.SetValue("Tail",Index,Temp)
        Array.SetValue("TailPositions",Index,20)
    EndFor

    'Initialize Head
    GraphicsWindow.PenWidth = 0
    GraphicsWindow.BrushColor = "#FF0000"
    Temp = Shapes.AddRectangle(16,16)
    Shapes.Move(Temp,320,5*16)
    Array.SetValue("Tail",5,Temp)
    Array.SetValue("TailPositions",5,20)

EndSub

Sub UpdateScore
    GraphicsWindow.Title = "SBJetLag - Score: " + Score
EndSub

Sub OnKeyDown
    Temp = GraphicsWindow.LastKey
    If (GameState = "GameOver") Then
        If (GraphicsWindow.LastKey = "Space") Then
            StartGame()
        Else
            If (GraphicsWindow.LastKey = "Escape") Then
                GameState = "End"
            Else
                 If (GraphicsWindow.LastKey = "D1") Then
                    GameDelay = 100
                    GraphicsWindow.ShowMessage("Game delay is set to 100ms","Speed Changed!")
                Else
                    If (GraphicsWindow.LastKey = "D2") Then
                        GameDelay = 200
                        GraphicsWindow.ShowMessage("Game delay is set to 200ms","Speed Changed!")
                    Else
                        If (GraphicsWindow.LastKey = "D3") Then
                            GameDelay = 300
                            GraphicsWindow.ShowMessage("Game delay is set to 300ms","Speed Changed!")
                        Else
                            If (GraphicsWindow.LastKey = "D4") Then
                                GameDelay = 400
                                GraphicsWindow.ShowMessage("Game delay is set to 400ms","Speed Changed!")
                            Else
                                If (GraphicsWindow.LastKey = "D5") Then
                                    GameDelay = 500
                                    GraphicsWindow.ShowMessage("Game delay is set to 500ms","Speed Changed!")
                                EndIf
                            EndIf
                        EndIf
                    EndIf
                EndIf
            EndIf
        Endif
    Else
        If (GraphicsWindow.LastKey = "Left") Then
            Direction = -1
        Else
            If (GraphicsWindow.LastKey = "Right") Then
                Direction = 1
            EndIf
        EndIf

    EndIf
EndSub

Sub StartGame
    Score = 0
    Direction = 1
    UpdateScore()
    For Index=0 To 29
        Temp = Array.GetValue("Blocks",Index)
        Shapes.Move(Temp,0,Index*16)
        Array.SetValue("BlockPositions",Index,0)
    EndFor
    For Index=0 To 5
        Temp = Array.GetValue("Tail",Index)
        Shapes.Move(Temp,20*16,Index*16)
        Array.SetValue("TailPositions",Index,20)
    EndFor
    GameState = "Play"
EndSub

Sub DoGameLoop
    If (GameState = "Play") Then
        Score = Score + 1
        UpdateScore()
        For Index=0 To 28
            Temp = Array.GetValue("BlockPositions",Index+1)
            Array.SetValue("BlockPositions",Index,Temp)
        EndFor
        Array.SetValue("BlockPositions",29,Math.GetRandomNumber(38))
        For Index=0 To 29
            Temp = Array.GetValue("Blocks",Index)
            Shapes.Move(Temp,Array.GetValue("BlockPositions",Index)*16,Index*16)

        EndFor
        For Index=0 To 4
            Temp = Array.GetValue("TailPositions",Index+1)
            Array.SetValue("TailPositions",Index,Temp)
        EndFor
        Array.SetValue("TailPositions",5,Array.GetValue("TailPositions",5)+Direction)
        For Index=0 To 5
            Temp = Array.GetValue("Tail",Index)
            Shapes.Move(Temp,Array.GetValue("TailPositions",Index)*16,Index*16)
        EndFor
        Temp = Array.GetValue("TailPositions",5)
        If (Temp=0 Or Temp = 39 Or Temp = Array.GetValue("BlockPositions",5)) Then
            GameState = "GameOver"
        EndIf
        Program.Delay(GameDelay)
      EndIf 
    EndSub      
    Goto DOSLoop
    
    Start14:
 GraphicsWindow.Title="Swarm Of Flies"
Background=ImageList.LoadImage("http://www.reiselandbulgarien.de/wp-content/uploaded_images/2008/Evgeni/Lake_Vaya.jpg")
GraphicsWindow.DrawImage(Background,0,0)
GraphicsWindow.Height=imagelist.GetHeightOfImage(Background)
GraphicsWindow.Width=imagelist.GetWidthOfImage(Background)
Insect_Amount=200
GraphicsWindow.BrushColor="Black"
For i = 1 To Insect_Amount
  Insect[i]=shapes.AddRectangle(5,5)
endfor
While "True"
  Mouse_X = GraphicsWindow.MouseX
  Mouse_Y = GraphicsWindow.MouseY
  For i = 1 To Insect_Amount
      Insect_GotoX[i] = Mouse_X + (math.GetRandomNumber(30.1) - 15.1)*20
      Insect_GotoY[i] = Mouse_Y + math.GetRandomNumber(20)*-20+150
      Shapes.Animate(Insect[i],Insect_GotoX[i],Insect_GotoY[i],400)
  endfor
  Program.Delay(20)
EndWhile
Goto DOSLoop

Start15:
'Program Title: Animated Balls
'From Small Basic Blog - http://blogs.msdn.com/b/smallbasic/
'Coder: Bob, 16 Aug 2011
'
For i = 1 To 100
  balls[i] = Shapes.AddEllipse(10, 10)
EndFor

While "True"
  For i = 1 To 100
    ball = balls[i]
    x = Math.GetRandomNumber(640)
    y = Math.GetRandomNumber(480)
    Shapes.Animate(ball, x, y, 2000)
  EndFor
  Program.Delay(2900)
EndWhile
Goto DOSLoop

  Start16:
 'BrickWall
'A development of the paddle game sample.
'Revove all the bricks to complete the game.
' Game over if you miss the ball.
'You are penalised -1 each time no bricks are hit.
'The movement of the ball is influenced by where it hits the paddle.
'Do not let the bricks reach the bottom of the screen.

GameStartqw:

'paddle = GraphicsWindow.AddRectangle(120, 12) 'v0.2
paddle = Shapes.AddRectangle(120, 12) 'v0.3.1
'ball = GraphicsWindow.AddEllipse(16, 16) 'v0.2
ball = Shapes.AddEllipse(16,16) 'v0.3.1
bricksLeft = 48
brickStartY = 35
hitCount = 0
GraphicsWindow.FontSize = 14
GraphicsWindow.MouseMove = OnMouseMove123
GraphicsWindow.Title = "Brick Wall"

For idx = 0 To 15
  Array.SetValue("GreenBricks", idx, 1)
  Array.SetValue("YellowBricks", idx, 1)
  Array.SetValue("RedBricks", idx, 1)
Endfor
DrawBricks()
score = 0
PrintScore()

gw = GraphicsWindow.Width
gh = GraphicsWindow.Height
y = gh - 28
'GraphicsWindow.MoveShape(ball, x, y) 'v0.2
Shapes.Move(ball,x,y) 'v0.3.1
deltaX = 1
deltaY = -2
Sound.PlayBellRingAndWait()

RunLoop300:
  x = x + deltaX
  y = y + deltaY

  gw = GraphicsWindow.Width
  gh = GraphicsWindow.Height
  If (x >= gw - 16 Or x <= 0) Then
    deltaX = -deltaX
  EndIf
  If (y <= 0) Then
    deltaY = -deltaY
  EndIf

 'padX = GraphicsWindow.GetLeftOfShape(paddle) 'v0.2
 padX = Shapes.GetLeft(paddle) 'v0.3.1
  If ((y >= gh - 28 + 2) And x >= padX And x <= padX + 120) Then
    y = gh - 28 + 2
    'Sound.PlayClick()
    hitCount = hitCount + 1
    If Math.Remainder(hitCount, 3) = 0 Then 'Move bricks downwards
      For idx = 0 To 15
        RemoveGreenBrick()
        RemoveYellowBrick()
        RemoveRedBrick()
      Endfor
      brickStartY = brickStartY + 20
      DrawBricks()
    EndIf
    TestRed:
    For idx = 0 To 15
      If Array.GetValue("RedBricks", idx) = 1 Then
        If brickStartY > gh - 160 Then
          Goto EndGame
        EndIf
      EndIf
    EndFor
    TestYellow:
    For idx = 0 To 15
      If Array.GetValue("YellowBricks", idx) = 1 Then
        If brickStartY > gh - 100 Then
          Goto EndGame
        EndIf
      EndIf
    EndFor
    TestGreen:
    For idx = 0 To 15
      If Array.GetValue("GreenBricks", idx) = 1 Then
        If brickStartY > gh - 40 Then
          Goto EndGame
        EndIf
      EndIf
    EndFor
    EndTest:

    deltaX = deltaX - 2 + (x - padX) / 30  ' Add some skill

    If score = oldScore Then  'No bricks hit
      score = score - 1
    EndIf
    oldScore = score
    PrintScore()
    deltaY = -deltaY  'Change the ball direction
  EndIf
  ' GraphicsWindow.MoveShape(ball, x, y) 'v0.2
  Shapes.Move(ball,x,y) 'v0.3.1
  Program.Delay(5)

  ' Green Bricks
  If y > brickStartY - 16 And y < brickStartY + 20 Then  ' y position of brick - diameter of ball
    idx = (x+8) / 40  ' Radius of ball / length of brick
    idx = Math.Floor(idx) ' take integer part
    If Array.GetValue("GreenBricks", idx) = 1 Then
      Array.SetValue("GreenBricks", idx, 0)
      RemoveGreenBrick()
      Sound.PlayChime()
      bricksLeft = bricksLeft - 1
      deltaY = -deltaY  'Change ball direction
      score = score + 15
      PrintScore()
      CheckEnd()
    EndIf
  EndIf

  ' Yellow Bricks
  If y > brickStartY + 44 And y < brickStartY + 80 Then  ' y position of brick - diameter of ball = 19
    idx = (x+8) / 40  ' Radius of ball / length of brick
    idx = Math.Floor(idx) ' take integer part
    If Array.GetValue("YellowBricks", idx) = 1 Then
      Array.SetValue("YellowBricks", idx, 0)
      RemoveYellowBrick()
      Sound.PlayChime()
      bricksLeft = bricksLeft - 1
      deltaY = -deltaY  'Change ball direction
      score = score + 10
      PrintScore()
      CheckEnd()
    EndIf
  EndIf

  ' Red Bricks
  If y > brickStartY + 104 And y < brickStartY + 140 Then  ' y position of brick - diameter of ball = 19
    idx = (x+8) / 40  ' Radius of ball / length of brick
    idx = Math.Floor(idx) ' take integer part
    If Array.GetValue("RedBricks", idx) = 1 Then
      Array.SetValue("RedBricks", idx, 0)
      RemoveRedBrick()
      Sound.PlayChime()
      bricksLeft = bricksLeft - 1
      deltaY = -deltaY  'Change ball direction
      score = score + 5
      PrintScore()
      CheckEnd()
    EndIf
  EndIf


  If (y < gh) Then  'Ball not reached bottom of window
    Goto RunLoop300
  EndIf

EndGame:
  GraphicsWindow.ShowMessage("Your score is: " + score, "BrickWall")
  Program.End()

Sub OnMouseMove123
  paddleX = GraphicsWindow.MouseX
  ' GraphicsWindow.MoveShape(paddle, paddleX - 60, GraphicsWindow.Height - 12) 'v0.2
  Shapes.Move(paddle, paddleX - 60, GraphicsWindow.Height - 12) 'v0.3.1
EndSub

Sub PrintScore45
  ' Clear the score first and then draw the real score text
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillRectangle(10, 10, 200, 20)
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawText(10, 10, "Score: " + score)
EndSub

Sub DrawBricks
  For idx = 0 To 15 ' Draw bricks
    'Program.Delay(100)
    If Array.GetValue("GreenBricks", idx) = 1 Then
      GraphicsWindow.PenColor = "Black"
      GraphicsWindow.BrushColor = "Green"
    Else
      GraphicsWindow.PenColor = "White"
      GraphicsWindow.BrushColor = "White"
    EndIf
    GraphicsWindow.FillRectangle(idx * 40, brickStartY, 40, 20)
    GraphicsWindow.DrawRectangle(idx * 40, brickStartY, 40, 20)

    GraphicsWindow.BrushColor = "Yellow"
    If Array.GetValue("YellowBricks", idx) = 1 Then
      GraphicsWindow.PenColor = "Black"
      GraphicsWindow.BrushColor = "Yellow"
    Else
      GraphicsWindow.PenColor = "White"
      GraphicsWindow.BrushColor = "White"
    EndIf
    GraphicsWindow.FillRectangle(idx * 40, brickStartY + 60, 40, 20)
    GraphicsWindow.DrawRectangle(idx * 40, brickStartY + 60, 40, 20)

    GraphicsWindow.BrushColor = "Red"
    If Array.GetValue("RedBricks", idx) = 1 Then
      GraphicsWindow.PenColor = "Black"
      GraphicsWindow.BrushColor = "Red"
    Else
      GraphicsWindow.PenColor = "White"
      GraphicsWindow.BrushColor = "White"
    EndIf
    GraphicsWindow.FillRectangle(idx * 40, brickStartY + 120, 40, 20)
    GraphicsWindow.DrawRectangle(idx * 40, brickStartY + 120, 40, 20)
  endfor
EndSub

Sub RemoveGreenBrick
  GraphicsWindow.PenColor = "White"
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillRectangle(idx * 40, brickStartY, 40, 20)
  GraphicsWindow.DrawRectangle(idx * 40, brickStartY, 40, 20)
EndSub

Sub RemoveYellowBrick
  GraphicsWindow.PenColor = "White"
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillRectangle(idx * 40, brickStartY + 60, 40, 20)
  GraphicsWindow.DrawRectangle(idx * 40, brickStartY + 60, 40, 20)
EndSub

Sub RemoveRedBrick
  GraphicsWindow.PenColor = "White"
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillRectangle(idx * 40, brickStartY + 120, 40, 20)
  GraphicsWindow.DrawRectangle(idx * 40, brickStartY + 120, 40, 20)
EndSub

Sub CheckEnd
 If bricksLeft = 0 Then
   GraphicsWindow.ShowMessage("Well Done. Wall destroyed. Your score is: " + score, "BrickWall")
   'Goto GameStart
   Program.End()
   'Goto EndGame
 EndIf
EndSub
Goto DOSLoop

'Copyright 2011 C Microsoft Corporation. All rights reservsed.

Start17:
'Initialise graphics window
GraphicsWindow.Hide()
gw = 800
gh = 600
GraphicsWindow.CanResize = "False"
GraphicsWindow.Top = (Desktop.Height-gh)/2
GraphicsWindow.Left = (Desktop.Width-gw)/2
GraphicsWindow.Title = "Bouncing balls with realistic collision physics"
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
GraphicsWindow.BackgroundColor = "LightBlue"

'Reduce gw for options
gw = gw-200
GraphicsWindow.MouseDown = OnMouseDown542

Start:

' Gravity, friction and attraction to mouse
grav = 0.0 ' 0 for none
fric = 0 ' 0 for none
follow = 0 'attract to mouse
attract = 0 'attract balls to each other
dt = 1 'timestep (speed)
shape = 0 '0:ball,1 square
elastic = 1 '1 fully elastic collisions
Colour = "Yellow"

'Initialise some balls
radius = 20
diam = 2*radius
nball = Math.Floor(gw/diam)
istart = "True"
reset()
ireset = "False"
istart = "False"
iend = "False"
iselect = "False"
ioptions = "False"

'Show window - an MS comment
GraphicsWindow.Show()

'Main loop
While ("True")
  If (ioptions) Then
    options()
    ioptions = "False"
  EndIf
  energy = 0.0
  isCollision = "False"
  If (iselect) Then
    For i = 1 To nball
      x = Xpos[i]
      y = Ypos[i]
      dist = (xm-x)*(xm-x)+(ym-y)*(ym-y)
      If (dist < radius*radius) Then
        u = 0
        v = 0
        Xvel[i] = u
        Yvel[i] = v
      EndIf
    EndFor
    iselect = "False"
  EndIf
  For i = 1 To nball
    update()
    move()
    u = Xvel[i]
    v = Yvel[i]
    energy = energy+(u*u+v*v)
  EndFor
  energy = dt*dt*energy
  energy = Math.Floor(energy)
  GraphicsWindow.BrushColor = "LightBlue"
  GraphicsWindow.FillRectangle(gw+15,560,190,20)
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawText(gw+65,560,"Energy "+energy)
  If (ireset) Then
    reset()
    ireset = "False"
  EndIf
  If (istart) Then
    Goto Start
  EndIf
  If (iend) Then
    Program.End()
  EndIf
' If (isCollision) Then
' Sound.PlayClick()
' EndIf
  Program.Delay(5)
EndWhile

'Update ball positions
Sub update
  u = Xvel[i]
  v = Yvel[i]
  u = Math.Min(100,Math.Max(u,-100))
  v = Math.Min(100,Math.Max(v,-100))
  x = Xpos[i]+dt*u
  y = Ypos[i]+dt*v
  bounce()
  gravity()
  collision()
  attraction()
  Xpos[i] = x
  Ypos[i] = y
EndSub

'Check for edge bounces
Sub bounce
  If (x < radius) Then
    Xvel[i] = -Xvel[i]
    x = radius
  EndIf
  If (x > gw-radius) Then
    Xvel[i] = -Xvel[i]
    x = gw-radius
  EndIf
  If (y < radius) Then
    Yvel[i] = -Yvel[i]
    y = radius
  EndIf
  If (y > gh-radius) Then
    Yvel[i] = -Yvel[i]
    y = gh-radius
  EndIf
EndSub

'Check for collisions
Sub collision
  'Only check each pair once
  For j = i+1 To nball
    xi = x
    yi = y
    xj = Xpos[j]
    yj = Ypos[j]
    dx = xi-xj
    dy = yi-yj
    dist = Math.SquareRoot(dx*dx+dy*dy)
    If (dist < diam) Then
      isCollision = "True"
      'Get ball vectors
      ui = Xvel[i]
      vi = Yvel[i]
      uj = Xvel[j]
      vj = Yvel[j]
      'Move backwards (forwards if dt < 0) in time until balls are just touching
      CoefA = (ui-uj)*(ui-uj)+(vi-vj)*(vi-vj)
      CoefB = 2*((ui-uj)*(xi-xj)+(vi-vj)*(yi-yj))
      CoefC = (xi-xj)*(xi-xj)+(yi-yj)*(yi-yj)-diam*diam
      If (CoefA = 0) Then
        t = -CoefC/CoefB
      Else
        If (dt >= 0) Then
          t = (-CoefB-Math.SquareRoot(CoefB*CoefB-4*CoefA*CoefC))/(2*CoefA)
        Else
          t = (-CoefB+Math.SquareRoot(CoefB*CoefB-4*CoefA*CoefC))/(2*CoefA)
        EndIf
      EndIF
      xi = xi+t*ui
      yi = yi+t*vi
      xj = xj+t*uj
      yj = yj+t*vj
      'Centre of momentum coordinates
      mx = (ui+uj)/2
      my = (vi+vj)/2
      ui = ui-mx
      vi = vi-my
      uj = uj-mx
      vj = vj-my
      'New centre to centre line
      dx = xi-xj
      dy = yi-yj
      dist = Math.SquareRoot(dx*dx+dy*dy)
      dx = dx/dist
      dy = dy/dist
      'Reflect balls velocity vectors in centre to centre line
      OB = -(dx*ui+dy*vi)
      ui = ui+2*OB*dx
      vi = vi+2*OB*dy
      OB = -(dx*uj+dy*vj)
      uj = uj+2*OB*dx
      vj = vj+2*OB*dy
      'Back to moving coordinates with elastic velocity change
      e = Math.SquareRoot(elastic)
      ui = e*(ui+mx)
      vi = e*(vi+my)
      uj = e*(uj+mx)
      vj = e*(vj+my)
      'Move to new bounced position
      xi = xi-t*ui
      yi = yi-t*vi
      xj = xj-t*uj
      yj = yj-t*vj
      'Set velocities
      Xvel[i] = ui
      Yvel[i] = vi
      Xvel[j] = uj
      Yvel[j] = vj
      'Set position
      Xpos[j] = xj
      Ypos[j] = yj
      x = xi
      y = yi
    EndIf
  EndFor
EndSub

'Gravity and friction and follow mouse
Sub gravity
  xm = GraphicsWindow.MouseX-x
  ym = GraphicsWindow.MouseY-y
  dist = xm*xm+ym*ym
  dist = Math.Max(dist,radius*radius)
  'dist = dist*Math.SquareRoot(dist)
  u = Xvel[i]
  v = Yvel[i]
  fricscale = (1-fric/Math.SquareRoot(1+u*u+v*v))
  Xvel[i] = follow*xm/dist+fricscale*u
  Yvel[i] = follow*ym/dist+fricscale*v+grav
EndSub

'Attract-repell balls to each other
Sub attraction
  If (attract <> 0) Then
    For j = i+1 To nball
      xm = Xpos[j]-x
      ym = Ypos[j]-y
      dist = xm*xm+ym*ym
      dist = Math.Max(dist,radius*radius)
      'dist = dist*Math.SquareRoot(dist)
      Xvel[i] = attract*xm/dist+Xvel[i]
      Yvel[i] = attract*ym/dist+Yvel[i]
      Xvel[j] = attract*xm/dist+Xvel[j]
      Yvel[j] = -attract*ym/dist+Yvel[j]
    EndFor
  EndIf
EndSub

'Move ball
Sub move156
  ball = balls[i]
  Shapes.Move(ball,x-radius,y-radius)
EndSub

'Update options display
Sub options
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.DrawLine(gw,0,gw,gh)
  GraphicsWindow.BrushColor = "LightBlue"
  GraphicsWindow.FillRectangle(gw+10,10,190,gh-20)
  For i = 0 To 5
    GraphicsWindow.DrawLine(gw+10,100*i+10,gw+190,100*i+10)
  EndFor
  GraphicsWindow.DrawLine(gw+100,10,gw+100,510)

  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawBoundText(gw+15,20,70,"Gravity")
  GraphicsWindow.DrawBoundText(gw+15,40,70,grav)
  GraphicsWindow.DrawBoundText(gw+15,120,70,"Friction")
  GraphicsWindow.DrawBoundText(gw+15,140,70,fric)
  GraphicsWindow.DrawBoundText(gw+15,220,70,"Follow")
  GraphicsWindow.DrawBoundText(gw+15,240,70,follow)
  GraphicsWindow.DrawBoundText(gw+15,320,70,"Size")
  GraphicsWindow.DrawBoundText(gw+15,340,70,radius)
  GraphicsWindow.DrawBoundText(gw+15,420,70,"Count")
  GraphicsWindow.DrawBoundText(gw+15,440,70,nball)
  GraphicsWindow.DrawBoundText(gw+15,520,170,"Click coloured options or a ball to stop it")
  GraphicsWindow.BrushColor = "Red"
  GraphicsWindow.DrawBoundText(gw+15,580,50,"RESET")
  GraphicsWindow.DrawBoundText(gw+115,580,50,"QUIT")
  GraphicsWindow.DrawBoundText(gw+15,60,70,"More")
  GraphicsWindow.DrawBoundText(gw+15,160,70,"More")
  GraphicsWindow.DrawBoundText(gw+15,260,70,"More")
  GraphicsWindow.DrawBoundText(gw+15,360,70,"More")
  GraphicsWindow.DrawBoundText(gw+15,460,70,"More")
  GraphicsWindow.BrushColor = "Blue"
  GraphicsWindow.DrawBoundText(gw+15,80,70,"Less")
  GraphicsWindow.DrawBoundText(gw+15,180,70,"Less")
  GraphicsWindow.DrawBoundText(gw+15,280,70,"Less")
  GraphicsWindow.DrawBoundText(gw+15,380,70,"Less")
  GraphicsWindow.DrawBoundText(gw+15,480,70,"Less")

  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawBoundText(gw+115,20,70,"Speed")
  GraphicsWindow.DrawBoundText(gw+115,40,70,dt)
  GraphicsWindow.DrawBoundText(gw+115,120,70,"Attraction")
  GraphicsWindow.DrawBoundText(gw+115,140,70,attract)
  GraphicsWindow.DrawBoundText(gw+115,220,70,"Elastic")
  GraphicsWindow.DrawBoundText(gw+115,240,70,elastic)
  GraphicsWindow.DrawBoundText(gw+115,320,70,"Colour")
  GraphicsWindow.BrushColor = "Red"
  GraphicsWindow.DrawBoundText(gw+115,60,70,"More")
  GraphicsWindow.DrawBoundText(gw+115,160,70,"More")
  GraphicsWindow.DrawBoundText(gw+115,260,70,"More")
  GraphicsWindow.BrushColor = "Blue"
  GraphicsWindow.DrawBoundText(gw+115,80,70,"Less")
  GraphicsWindow.DrawBoundText(gw+115,180,70,"Less")
  GraphicsWindow.DrawBoundText(gw+115,280,70,"Less")
  GraphicsWindow.BrushColor = "Red"
  GraphicsWindow.DrawBoundText(gw+115,340,70,"Red")
  GraphicsWindow.BrushColor = "Blue"
  GraphicsWindow.DrawBoundText(gw+115,360,70,"Blue")
  GraphicsWindow.BrushColor = "Yellow"
  GraphicsWindow.DrawBoundText(gw+115,380,70,"Yellow")
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawBoundText(gw+115,420,70,"Shape")
  GraphicsWindow.BrushColor = "Red"
  GraphicsWindow.DrawBoundText(gw+115,440,70,"Circle")
  GraphicsWindow.DrawBoundText(gw+115,460,70,"Square")
EndSub

'Change settings
Sub OnMouseDown542
  xm = GraphicsWindow.MouseX
  ym = GraphicsWindow.MouseY
  'Left column settings
  If (xm > gw+15 And xm < gw+85) Then
    If (ym > 60 And ym < 75) Then
      grav = grav+0.01
    EndIf
    If (ym > 80 And ym < 95) Then
      grav = grav-0.01
    EndIf
    If (ym > 160 And ym < 175) Then
      fric = fric+0.001
    EndIf
    If (ym > 180 And ym < 195) Then
      fric = fric-0.001
    EndIf
    If (ym > 260 And ym < 275) Then
      follow = follow+1
    EndIf
    If (ym > 280 And ym < 295) Then
      follow = follow-1
    EndIf
    If (ym > 360 And ym < 375) Then
      radius = radius+1
      diam = 2*radius
      ireset = "True"
    EndIf
    If (ym > 380 And ym < 395) Then
      radius = radius-1
      radius = Math.Max(1,radius)
      diam = 2*radius
      ireset = "True"
    EndIf
    If (ym > 460 And ym < 475) Then
      nball = nball+1
      ireset = "True"
    EndIf
    If (ym > 480 And ym < 495) Then
      nball = nball-1
      nball = Math.Max(1,nball)
      ireset = "True"
    EndIf
    If (ym > 580 And ym < 595) Then
      istart = "True"
    EndIf
  EndIf
  'Right column settings
  If (xm > gw+115 And xm < gw+185) Then
    If (ym > 60 And ym < 75) Then
      dt = dt+0.1
    EndIf
    If (ym > 80 And ym < 95) Then
      dt = dt-0.1
    EndIf
    If (ym > 160 And ym < 175) Then
      attract = attract+1
    EndIf
    If (ym > 180 And ym < 195) Then
      attract = attract-1
    EndIf
    If (ym > 260 And ym < 275) Then
      elastic = elastic+0.01
    EndIf
    If (ym > 280 And ym < 295) Then
      elastic = elastic-0.01
    EndIf
    If (ym > 340 And ym < 355) Then
      Colour = "Red"
      ireset = "True"
    EndIf
    If (ym > 360 And ym < 375) Then
      Colour = "Blue"
      ireset = "True"
    EndIf
    If (ym > 380 And ym < 395) Then
      Colour = "Yellow"
      ireset = "True"
    EndIf
    If (ym > 440 And ym < 455) Then
      Shape = 0
      ireset = "True"
    EndIf
    If (ym > 460 And ym < 475) Then
      Shape = 1
      ireset = "True"
    EndIf
    If (ym > 580 And ym < 595) Then
      iend = "True"
    EndIf
  EndIf
  'Select a ball
  If (xm < gw) Then
    iselect = "True"
  EndIf
  ioptions = "True"
EndSub

'Reset new balls
Sub reset
  mball = Array.GetItemCount(balls)
  For i = 1 To mball
    balls[i] = ""
    If (istart Or i > nball) Then
      Xpos[i] = ""
      Ypos[i] = ""
      Xvel[i] = ""
      Yvel[i] = ""
    EndIf
  EndFor
  GraphicsWindow.Clear()
  options()
  GraphicsWindow.BrushColor = Colour
  For i = 1 To nball
    If (shape = 0) Then
      ball = Shapes.AddEllipse(diam,diam)
    EndIf
    If (shape = 1) Then
      ball = Shapes.AddRectangle(diam,diam)
    EndIf
    balls[i] = ball
    If (istart Or i > mball) Then
      x = Math.GetRandomNumber(gw)
      y = Math.GetRandomNumber(gh)
      u = Math.GetRandomNumber(500)/100-3
      v = Math.GetRandomNumber(500)/100-3
      Xpos[i] = x
      Ypos[i] = y
      Xvel[i] = u
      Yvel[i] = v
    GraphicsWindow.Clear()
  EndIf
  EndFor
EndSub
Goto DOSLoop

Startdwin:
TextWindow.Write("Start MacOS OR Osasic")
com = TextWindow.Read()
If com= ("MacOS")Then
Goto StartMac
Else
Goto Startos
EndIf
Startos:
GraphicsWindow.BackgroundColor = "Gray"
GraphicsWindow.Title = "Osasic Operating System. Version 3.0.9.8.7"
GraphicsWindow.Width = 700
GraphicsWindow.Height = 500
GraphicsWindow.BrushColor = "Black"
GraphicsWindow.DrawText(250, 400, "Booting The  Osasic Operating System....................................")
Program.Delay(500)
GraphicsWindow.DrawText(100, 200, "<<<<<<<<<<<<Osasic Operating Systems, The next generation of OS>>>>>>>>>")
Program.Delay(500)
GraphicsWindow.DrawRectangle(1, 450, 50, 50)
Program.Delay(300)
GraphicsWindow.DrawRectangle(60, 450, 50, 50)
Program.Delay(500)
GraphicsWindow.DrawRectangle(120, 450, 50, 50)
Program.Delay(600)
GraphicsWindow.DrawRectangle(180, 450, 50, 50)
Program.Delay(700)
GraphicsWindow.DrawRectangle(240, 450, 50, 50)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(300, 450, 50, 50)
Program.Delay(920)
GraphicsWindow.DrawRectangle(360, 450, 50, 50)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(420, 450, 50, 50)
Program.Delay(500)
GraphicsWindow.DrawRectangle(480, 450, 50, 50)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(540, 450, 50, 50)
Program.Delay(300)
GraphicsWindow.DrawRectangle(600, 450, 50, 50)
GraphicsWindow.DrawRectangle(660, 450, 50, 50)
Program.Delay(5000)
GraphicsWindow.Clear()
GraphicsWindow.DrawRectangle(200, 100, 300, 300)
GraphicsWindow.BrushColor = "Black"
GraphicsWindow.DrawEllipse(250, 150, 100, 100)
GraphicsWindow.FillRectangle(225, 250, 150, 150)
Program.Delay(500)
GraphicsWindow.DrawText(200, 80, "User Name: Admin")
Program.Delay(500)
GraphicsWindow.DrawText(250, 410, "Loging Into Osasic.....................")
Program.Delay(5000)
GraphicsWindow.Clear()
GraphicsWindow.BrushColor = "DimGray"
GraphicsWindow.DrawText(3, 480, "Building The Desktop...........................................>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
GraphicsWindow.DrawRectangle(20, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(30, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(40, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(50, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(60, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(70, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(80, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(90, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(100, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(110, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(120, 485, 10, 10)
Program.Delay(1000)
GraphicsWindow.DrawRectangle(130, 485, 10, 10)
Program.Delay(5000)
GraphicsWindow.FillRectangle(0, 1, 700, 40)
Program.Delay(500)
GraphicsWindow.BrushColor = "Silver"
GraphicsWindow.FillRectangle(1, 480, 700, 20)
GraphicsWindow.BrushColor = 000000
Program.Delay(500)
GraphicsWindow.DrawText(3, 5, "Programs")
Program.Delay(100)
GraphicsWindow.DrawText(3, 20, "User Settings")
Program.Delay(200)
GraphicsWindow.DrawText(100, 5, "Personalize")
GraphicsWindow.DrawText(3, 480, "Osasic")
GraphicsWindow.DrawText(50, 480,"Finder")
Program.Delay(500)
GraphicsWindow.DrawText(630, 480,"Shut Down")
GraphicsWindow.FillRectangle(635,45,20,10)
GraphicsWindow.DrawRectangle(630,45,40,40)
GraphicsWindow.DrawRectangle(635,65,30,20)
GraphicsWindow.DrawText(635,85,"Disk")
GraphicsWindow.MouseDown = OnMouseDown909090

Sub OnMouseDown909090
  MD = GraphicsWindow.MouseX
  MDA = GraphicsWindow.MouseY
  If ((MD > 625 And MD < 648 And MDA > 460 And MDA < 480)) Then
    GraphicsWindow.Clear()
  EndIf
  If (MD < 64 And MDA > 455) Then'
    GraphicsWindow.BrushColor = "White"
    GraphicsWindow.FillRectangle(1, 200, 200, 278)
    GraphicsWindow.BrushColor = "Black"
    GraphicsWindow.DrawText(1, 200, "Computer")
    GraphicsWindow.DrawText(1, 220, "Control Panel")
    GraphicsWindow.DrawRectangle(135, 203, 50, 50,)
    GraphicsWindow.DrawText(120,260, " User: Admin")
    GraphicsWindow.DrawEllipse(145, 203, 30, 30)
    GraphicsWindow.FillRectangle(143, 233, 35, 20)
    GraphicsWindow.DrawText(1, 240, "Tools")
    GraphicsWindow.DrawText(1, 260, "Programs")
  EndIf
  If (MD > 64 OR MDA < 455) Then 
    GraphicsWindow.BrushColor = "Gray"
GraphicsWindow.FILLRectangle(1,200,200,278)
EndIf 
EndSub
Goto DOSLoop

StartMac:
GraphicsWindow.BackgroundColor = "Gray"
GraphicsWindow.Title = "Mac OS, Ver. Classic"
GraphicsWindow.Width = 700
GraphicsWindow.Height = 500
GraphicsWindow.BrushColor = "White"
GraphicsWindow.FillRectangle(1, 1, 700, 20)
GraphicsWindow.BrushColor = 000000
GraphicsWindow.DrawText(5, 5, "Mac")
GraphicsWindow.FillRectangle(3, 480, 10, 10)
GraphicsWindow.FillRectangle(635,40,20,10)
GraphicsWindow.DrawText(11, 480, "Click")
GraphicsWindow.DrawRectangle(630,40,40,40)
GraphicsWindow.DrawRectangle(635,60,30,20)
GraphicsWindow.DrawText(635,80,"Disk")
GraphicsWindow.DrawRectangle(620, 475, 15, 10)
GraphicsWindow.DrawRectangle(620, 455, 15, 20,)
GraphicsWindow.DrawRectangle(622, 450, 10, 5)
GraphicsWindow.DrawText(615, 485, "Trash")
GraphicsWindow.MouseDown = OnMouseDown90909

Sub OnMouseDown90909
  MD = GraphicsWindow.MouseX
  MDA = GraphicsWindow.MouseY
  If ((MD > 625 And MD < 648 And MDA > 460 And MDA < 480)) Then
    GraphicsWindow.BrushColor = "White"
    GraphicsWindow.FillRectangle(200, 150, 250, 250)
    GraphicsWindow.FillRectangle(223, 151, 200, 10)
    GraphicsWindow.BrushColor = "Gray"
    GraphicsWindow.FillRectangle(202, 151, 247, 20)
    GraphicsWindow.BrushColor = "White"
    GraphicsWindow.FillRectangle(300, 153, 60, 16)
    GraphicsWindow.FillRectangle(210, 154, 14, 14)
    GraphicsWindow.BrushColor = "Gray"
    GraphicsWindow.FillRectangle(202, 190, 247, 5)
    GraphicsWindow.BrushColor = "Black"
    GraphicsWindow.DrawText(310, 155, "Trash")
    
  EndIf
  If (MD < 600 And MDA > 50) Then'
    GraphicsWindow.BrushColor = "White"
    GraphicsWindow.FillRectangle(1, 21, 200, 278)
    GraphicsWindow.BrushColor = "Black"
  EndIf
  If (MD > 64 OR MDA < 455) Then 
    GraphicsWindow.BrushColor = "Gray"
GraphicsWindow.FILLRectangle(1,21,200,278)
EndIf 
EndSub
Goto DOSLoop

Wordcom:
TextWindow.WriteLine("Welcome to the BasicDOS Word Proccessor Ver 1.0.0.1")
Word:
TextWindow.ForegroundColor = "Grey"
TextWindow.Write(name + "'s Document Word D:\> ")
doc = TextWindow.Read()
If doc = ("help") Then
  TextWindow.WriteLine("------------------------------")
  TextWindow.WriteLine("| Word_Help__________________|")
  TextWindow.WriteLine("|new = make new dcument      |")
  TextWindow.WriteLine("|open = open document        |")
  TextWindow.WriteLine("|close = close document/menu |")
  TextWindow.WriteLine("|exit = exit word processor  |")
  TextWindow.WriteLine("------------------------------")
Else
  Goto Doc1
EndIf
Doc1:
If doc = ("new") Then
  Goto MakeNew
Else
  Goto Doc2
EndIf
Doc2:
If doc = ("open")Then
  Goto OpenDoc
Else
  Goto Doc3
EndIf
Doc3:
If doc = ("exit")Then
  Goto Exit
Else
  Goto Doc4
EndIf
Doc4:
If doc = ("close")Then
  Goto Close
Else
  Goto Word
EndIf

MakeNew:
TextWindow.Write("Document Name: ")
ndoc = TextWindow.Read()
TextWindow.Write(">")
ddoc = TextWindow.Read()
File[ndoc]["document"] = ddoc
Goto CloseDOC
CloseDOC:
TextWindow.Write("SAVE Document?")
svdoc = TextWindow.Read()
If svdoc = ("yes")Then
    TextWindow.WriteLine("Saving your Document..........")
    Program.Delay(800)
    TextWindow.Clear()
    Goto Word
  Else
    TextWindow.WriteLine("Exiting Document..............")
    Program.Delay(800)
    TextWindow.Clear()
    Goto Word
  EndIf
  OpenDoc:
  TextWindow.Write("Enter the document name: ")
  idoc = TextWindow.Read()
  TextWindow.WriteLine("Document: " + File[idoc]["document"])
  Program.Delay(2000)
  TextWindow.Clear()
  Goto Word
  
  Close:
  Goto Word
  
  Exit:
  TextWindow.Write("Save all work today?")
  exitans= TextWindow.Read()
  If exitans = ("yes") Then
    Goto SAVE
  Else 
    Goto EXITER
SAVE:
    TextWindow.WriteLine("Saving all work...........")
    Program.Delay(1000)
    TextWindow.WriteLine("Exiting the BasicDOS word processor.......")
    Goto DOSLoop
    
    EXITER:
    TextWindow.Write("Are you sure you wish to quit without save?")
     bdoc= TextWindow.Read()
If bdoc = ("yes")Then
 Goto DOSLoop
Else 
  Goto SAVE
EndIf
EndIf
  
  EXITDOS:
  TextWindow.Write("Are you shure you want to exit BasicDOS?   :-( ")
  exit = TextWindow.Read()
  If exit = ("yes") Then
    TextWindow.WriteLine("Exiting BasicDOS...........:-(")
    Program.Delay(500)
    Program.End()
  Else
    TextWindow.WriteLine("Yay! :-)")
    Goto DOSLoop
  EndIf
  
