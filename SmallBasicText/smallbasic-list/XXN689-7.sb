' Circuit 0.4b

' Copyright (c) 2013 Nonki Takahashi.  All rights reserved.

'

' History:

'  0.4b 2013/03/01 Added circuit evaluation. (XXN689-7)

'  0.3b 2013/02/25 Enabled keyboard and arranging circuit. (XXN689-6)

'  0.2b 2013/02/19  Modified switches to work. (XXN689-5)

'  0.15a 2013/02/18 Minor change for Silverlight. (XXN689-4)

'  0.1a 2013/02/18 Created as alpha version. (XXN689)

'  0.0 2013/02/04 18:12:18 Shapes generated by Shapes 1.5.

'

GraphicsWindow.Title = "Circuit 0.4b"

GraphicsWindow.BackgroundColor = "Black"

Circuit_Init()

Circuit_InitRotate()

SB_Workaround()

scale = 1

count = Array.GetItemCount(circuit)

pos = Array.GetAllIndices(circuit)

nSwitch = 0

For id = 1 To count ' id - part id

  angle = 0

  par = circuit[pos[id]]["part"]

  If par = "line" Then

    Shapes_Init()

  ElseIf par = "corner" Then

    Corner_Init()

  ElseIf par = "branch" Then

    Branch_Init()

  ElseIf par = "switch" Then

    Switch_Init()

  ElseIf par = "battery" Then

    Battery_Init()

  ElseIf par = "light" Then

    Light_Init()

  EndIf

  circuit[pos[id]]["connect"] = part[par]["connect"]

  Shapes_Add()

  Circuit_CalcPosParam()

  Shapes_Move()

  If circuit[pos[id]]["angle"] <> "" Then

    angle = circuit[pos[id]]["angle"]

    Circuit_Rotate()

    Shapes_Rotate()

  EndIf

  Shapes_Save() ' save part shapes information with part id

  circuit[pos[id]]["id"] = id

  num = pos[id]

  Circuit_SaveObj()

EndFor

lastCursor = 1

cursor = 1

Cursor_On()

GraphicsWindow.FontSize = 12

GraphicsWindow.BrushColor = "White"

help = Shapes.AddText("[Right][Left][Up][Down]=Move [Space]=Select [Enter]=On/Off")

Shapes.Move(help, x0, y0 + size * 4)

GraphicsWindow.KeyDown = OnKeyDown

Sub Beep

  Sound.PlayAndWait("http://www.nonkit.com/smallbasic.files/se_sad08.wav")

EndSub

Sub OnKeyDown

  ' returns circuit[0][] - selected part

  GraphicsWindow.KeyDown = DoNothing

  key = GraphicsWindow.LastKey

  num = cursor

  If key = "Return" Then

    If circuit[num]["part"] = "switch" Then

      If circuit[num]["state"] = "on" Then

        Switch_Off()

        Light_Check()

      ElseIf circuit[num]["state"] = "off" Then

        Switch_On()

        Light_Check()

      EndIf

    EndIf

  ElseIf key = "Space" Then

    If circuit[0] = "" Then  ' select

      id = circuit[num]["id"]

      Shapes_Restore()  ' restore part shapes information with part id

      Shapes_Remove()   ' remove ...

      Shapes_Add()      ' and re-add Shapes to change that Z-order 

      Shapes_Rotate()

      Circuit_SaveObj()

      Cursor_On()

      If circuit[num]["part"] = "light" Then

        light[1] = 0

      EndIf

      circuit[0] = circuit[num]

      circuit[num] = ""

      x = shX - 4

      y = shY - 4

      Shapes_Move()

      Light_Check()

    Else  ' unselect

      If circuit[num] = "" Then

        id = circuit[0]["id"]

        x = shX + 4

        y = shY + 4

        Shapes_Move()

        Shapes_Save()

        circuit[num] = circuit[0]

        circuit[0] = ""

        If circuit[num]["part"] = "light" Then

          light[1] = num

        EndIf

        lastCursor = cursor

        Light_Check()

      Else

        Beep()

      EndIf

    EndIf

  ElseIf Text.IsSubText("Right|Left|Up|Down", key) Then

    If circuit[0] <> "" Then

      Part_Move()   ' move selected part

    Else

      Cursor_Move() ' move only cursor

    EndIf

  EndIf

  GraphicsWindow.KeyDown = OnKeyDown

EndSub

Sub DoNothing

  OnKeyDown = 0

EndSub

Sub Circuit_Init

  x0 = 12

  y0 = 12

  size = 100

  part["line"] = "connect=EW;"      ' wire connecting east-west

  part["corner"] = "connect=NW;"    ' wire connecting north-west

  part["branch"] = "connect=NWS;"   ' wire connecting north-east-west

  part["switch"] = "connect=EW;"    ' switch connecting east-west

  part["battery"] = "connect=NS;"   ' battery connecting north-south

  part["light"] = "connect=EW;"     ' light connecting east-west

  circuit[1] = "part=corner;angle=180;"

  circuit[2] = "part=branch;angle=-90;"

  circuit[3] = "part=switch;state=off;"

  circuit[4] = "part=switch;state=off;"

  circuit[5] = "part=branch;angle=-90;"

  circuit[6] = "part=corner;angle=-90;"

  circuit[7] = "part=battery;"

  circuit[8] = "part=corner;angle=90;"

  circuit[9] = "part=switch;state=off;"

  circuit[10] = "part=switch;state=off;"

  circuit[11] = "part=corner;"

  circuit[12] = "part=light;angle=90;state=off;"

  circuit[13] = "part=corner;angle=90;"

  circuit[14] = "part=line;"

  circuit[15] = "part=line;"

  circuit[16] = "part=line;"

  circuit[17] = "part=line;"

  circuit[18] = "part=corner;"

  For s = 1 To 24

    pos[id] = s

    Circuit_CalcPosParam()

    GraphicsWindow.BrushColor = "Gray"

    GraphicsWindow.FillRectangle(x + 1, y + 1, size - 2, size - 2)

    GraphicsWindow.BrushColor = "White"

    GraphicsWindow.DrawText(x + 5, y + 5, (row - 1) * 6 + col)

  EndFor

EndSub

Sub Circuit_CalcPosParam

  ' param size - size of part

  ' param pos[id] - position number in circuit

  ' returns row, col - row and column

  ' returns x, y - top left coordinate for the position

  row = Math.Floor((pos[id] - 1) / 6) + 1

  col = Math.Remainder(pos[id] - 1, 6) + 1

  y = (row - 1) * size + y0

  x = (col - 1) * size + x0

EndSub

Sub Circuit_ClearSearchedFlag

  ' returns searched[] - array entry "True" if the entry doesn't have any part

  ' returns nRemain - number not searched

  nRemain = 0

  For p = 1 To 24

    If circuit[p] <> "" Then

      searched[p] = "False"

      nRemain = nRemain + 1

    Else

      searched[p] = "True"

    EndIf

  EndFor

EndSub

Sub Circuit_InitRotate

  rot[0]="N=N;S=S;E=E;W=W;"

  rot[90]="N=E;S=W;E=S;W=N;"

  rot[180]="N=S;S=N;E=W;W=E;" ' opposite

  rot[-90]="N=W;S=E;E=N;W=S;"

  offset = "N=-6;S=6;E=1;W=-1;"

EndSub

Sub Circuit_Rotate

  ' param angle - to rotate

  ' param pos[id] - position number in circuit

  ' returns circuit[pos[id]]["connect"]

  lastcon = circuit[pos[id]]["connect"]

  len = Text.GetLength(lastcon)

  con = ""

  For p = 1 To len

    con = con + rot[angle][Text.GetSubText(lastcon, p, 1)]

  EndFor

  circuit[pos[id]]["connect"] = con

EndSub

Sub Circuit_SaveObj

  ' param num - position to save shapes information

  circuit[num]["obj1"] = shape[1]["obj"]

  If circuit[num]["part"] = "switch" Then

    circuit[num]["obj" + BAR_ON] = shape[BAR_ON]["obj"]

    circuit[num]["obj" + BAR_OFF] = shape[BAR_OFF]["obj"]

    circuit[num]["obj" + SW_ON] = shape[SW_ON]["obj"]

    circuit[num]["obj" + SW_OFF] = shape[SW_OFF]["obj"]

    nSwitch = nSwitch + 1

    switch[nSwitch] = num

    If circuit[num]["state"] = "off" Then

      Switch_Off()

    EndIf

  EndIf

  If circuit[num]["part"] = "light" Then

    circuit[num]["obj" + LIGHTB] = shape[LIGHTB]["obj"]

    circuit[num]["obj" + LIGHTF] = shape[LIGHTF]["obj"]

    light[1] = num

    If circuit[num]["state"] = "on" Then

      Light_On()

    EndIf

  EndIf

EndSub

Sub Circuit_SearchBatteryMinus

  ' param posLightNext - position of next to light

  ' param next[] - array to keep next pos connect to search 

  ' returns found - "True" if found

  found = "False"

  p = posLightNext

  While found = "False" And next <> ""

    Circuit_SetSearchedFlag()

    next2 = Text.GetSubText(next[p], 1, 1)

    next[p] = Text.GetSubTextToEnd(next[p], 2)

    from2 = rot[180][next2]

    p2 = p + offset[next2]

    con = circuit[p2]["connect"]

    If Text.IsSubText(con, from2) Then

      If circuit[p]["part"] = "battery" Then

        found = "True"

      ElseIf circuit[p]["part"] = "switch" And circuit[p]["state"] = "on" Then

        q = Text.GetIndexOf(con, from2)

        next[p2] = Text.GetSubText(con, 1, q - 1)

        next[p2] = next[p2] + Text.GetSubTextToEnd(con, q + 1)

        p = p2

      ElseIf Text.IsSubText("line|branch|corner", circuit[p]["part"]) Then

        q = Text.GetIndexOf(con, from2)

        next[p2] = Text.GetSubText(con, 1, q - 1)

        next[p2] = next[p2] + Text.GetSubTextToEnd(con, q + 1)

        p = p2

      Else

        If next <> "" Then

          pos = Array.GetAllIndices(next)

          p = pos[1]

        EndIf

      EndIf

    Else

      If next <> "" Then

        pos = Array.GetAllIndices(next)

        p = pos[1]

      EndIf

    EndIf

  EndWhile

EndSub

Sub Circuit_SearchBatteryPlus

  ' returns found - "True" if found

  ' returns posPlus - position of north on battery plus if found

  found = "False"

  For p = 1 To 24

    If circuit[p]["part"] = "battery" Then

      p = p - 6

      con = circuit[p]["connect"]

      If Text.IsSubText(con, "S") Then

        q = Text.GetIndexOf(con, "S")

        next[p] = Text.GetSubText(con, 1, q - 1)

        next[p] = next[p] + Text.GetSubTextToEnd(con, q + 1)

        posPlus = p

        found = "True"

      EndIf

      p = 25  ' break

    EndIf

  EndFor

EndSub

Sub Circuit_SearchLight

  ' param posPlus - position of north on battery plus

  ' param next[] - array to keep next pos connect to search 

  ' returns found - "True" if found

  ' returns posLightNext - position of next to light if found

  Circuit_ClearSearchedFlag()

  found = "False"

  p = posPlus

  While found = "False" And next <> ""

    Circuit_SetSearchedFlag()

    next2 = Text.GetSubText(next[p], 1, 1)

    next[p] = Text.GetSubTextToEnd(next[p], 2)

    from2 = rot[180][next2]

    p2 = p + offset[next2]

    con = circuit[p2]["connect"]

    If Searched[p2] = "False" And Text.IsSubText(con, from2) Then

      If circuit[p]["part"] = "light" Then

        found = "True"

        q = Text.GetIndexOf(con, from2)

        next[p2] = Text.GetSubText(con, 1, q - 1)

        next[p2] = next[p2] + Text.GetSubTextToEnd(con, q + 1)

        posLightNext = p2

      ElseIf circuit[p]["part"] = "switch" And circuit[p]["state"] = "on" Then

        q = Text.GetIndexOf(con, from2)

        next[p2] = Text.GetSubText(con, 1, q - 1)

        next[p2] = next[p2] + Text.GetSubTextToEnd(con, q + 1)

        p = p2

      ElseIf Text.IsSubText("line|branch|corner", circuit[p]["part"]) Then

        q = Text.GetIndexOf(con, from2)

        next[p2] = Text.GetSubText(con, 1, q - 1)

        next[p2] = next[p2] + Text.GetSubTextToEnd(con, q + 1)

        p = p2

      Else

        If next <> "" Then

          pos = Array.GetAllIndices(next)

          p = pos[1]

        EndIf

      EndIf

    Else

      If next <> "" Then

        pos = Array.GetAllIndices(next)

        p = pos[1]

      EndIf

    EndIf

  EndWhile

EndSub

Sub Circuit_SetSearchedFlag

  ' param p - position to set as searched

  searched[p] = "True"

EndSub

Sub Cursor_Check

  ' param key - "Right", "Left", "Up" or "Down"

  ' param cursor - cursor position

  ' param circuit[] - circuit

  ' returns movable - "True" if movable

  ' returns x, y - new graphics coodinate if movable

  ' returns cursor - new cursor position if movable

  movable = "False"

  If key = "Right" Then

    If Math.Remainder(cursor - 1, 6) < 5 Then

      cursor = cursor + 1

      x = shX + size

      y = shY

      movable = "True"

    EndIf

  ElseIf key = "Left" Then

    If 0 < Math.Remainder(cursor - 1, 6) Then

      cursor = cursor - 1

      x = shX - size

      y = shY

      movable = "True"

    EndIf

  ElseIf key = "Up" Then

    If 0 < Math.Floor((cursor - 1) / 6) Then

      cursor = cursor - 6

      x = shX

      y = shY - size

      movable = "True"

    EndIf

  ElseIf key = "Down" Then

    If Math.Floor((cursor - 1) / 6) < 3 Then

      cursor = cursor + 6

      x = shX

      y = shY + size

      movable = "True"

    EndIf

  EndIf

EndSub

Sub Cursor_Move

  ' param key - "Right", "Left", "Up" or "Down"

  ' param cursor - cursor position

  Cursor_Check()

  If movable Then

    Cursor_On()

  EndIf

EndSub

Sub Cursor_On

  If circuit[lastCursor] <> "" Then

    Shapes.SetOpacity(circuit[lastCursor]["obj1"], 20)

  EndIf

  If circuit[cursor] <> "" Then

    Shapes.SetOpacity(circuit[cursor]["obj1"], 60)

    lastCursor = cursor

  EndIf

EndSub

Sub Light_Check

  ' Light | Check circuit and on/off the light

  ' search battery plus

  connected = "False"

  Circuit_SearchBatteryPlus()

  If found Then

    ' search connected light (no battery minus)

    Circuit_SearchLight()

    If found Then

      ' search connected battery minus

      Circuit_SearchBatteryMinus()

      If found Then

        connected = "True"

      EndIf

    EndIf

  EndIf

  Stack.PushValue("local", num)

  If connected Then

    num = light[1]

    Light_On()

  Else

    num = light[1]

    Light_Off()

  EndIf

  num = Stack.PopValue("local")

EndSub

Sub Light_On

  ' param num - number of position in circuit

  If circuit[num]["state"] = "off" Then

    For level = 0 To 100 Step 10

      Shapes.SetOpacity(circuit[num]["obj" + LIGHTB], level)

      Shapes.SetOpacity(circuit[num]["obj" + LIGHTF], level)

      Program.Delay(50)

    EndFor

  Else

    Shapes.SetOpacity(circuit[num]["obj" + LIGHTB], 100)

    Shapes.SetOpacity(circuit[num]["obj" + LIGHTF], 100)

  EndIf

  circuit[num]["state"] = "on"

EndSub

Sub Light_Off

  ' param num - number of position in circuit

  If circuit[num]["state"] = "on" Then

    For level = 100 To 0 Step -10

      Shapes.SetOpacity(circuit[num]["obj" + LIGHTB], level)

      Shapes.SetOpacity(circuit[num]["obj" + LIGHTF], level)

      Program.Delay(50)

    EndFor

  Else

    Shapes.SetOpacity(circuit[num]["obj" + LIGHTB], 0)

    Shapes.SetOpacity(circuit[num]["obj" + LIGHTF], 0)

  EndIf

  circuit[num]["state"] = "off"

EndSub

Sub Part_Move

  ' param key - "Right", "Left", "Up" or "Down"

  ' param cursor - cursor position

  ' param circuit[0][] - selected part

  Cursor_Check()

  If movable Then

    Shapes_Move()

  EndIf

EndSub

Sub SB_Workaround

  ' Small Basic | Workaround for Silverlight

  ' returns silverlight - "True" if in remote

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

  Else

    silverlight = "False"

  EndIf

EndSub

Sub SB_RotateWorkaround

  ' Small Basic | Rotate workaround for Silverlight

  ' param x, y - original coordinate

  ' param alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shape[i]["func"] = "tri" Then

    x1 = -Math.Floor(shape[i]["x3"] / 2)

    y1 = -Math.Floor(shape[i]["y3"] / 2)

  ElseIf shape[i]["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shape[i]["x1"] - shape[i]["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shape[i]["y1"] - shape[i]["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

EndSub

Sub Switch_On

  ' param num - number of position in circuit

  Shapes.SetOpacity(circuit[num]["obj" + BAR_ON], 100)

  Shapes.SetOpacity(circuit[num]["obj" + BAR_OFF], 0)

  Shapes.SetOpacity(circuit[num]["obj" + SW_ON], 40)

  Shapes.SetOpacity(circuit[num]["obj" + SW_OFF], 0)

  circuit[num]["state"] = "on"

EndSub  

Sub Switch_Off

  ' param num - number of position in circuit

  Shapes.SetOpacity(circuit[num]["obj" + BAR_ON], 0)

  Shapes.SetOpacity(circuit[num]["obj" + BAR_OFF], 100)

  Shapes.SetOpacity(circuit[num]["obj" + SW_ON], 0)

  Shapes.SetOpacity(circuit[num]["obj" + SW_OFF], 40)

  circuit[num]["state"] = "off"

EndSub

Sub Switch_Init

  ' Switch | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  BAR_ON = 4

  BAR_OFF = 5

  SW_ON = 13

  SW_OFF = 14

  shX = 0 ' x offset

  shY = 0 ' y offset

  shape = ""

  shape[1] = "func=rect;x=0;y=0;width=100;height=100;bc=#008080;op=20;pw=0;"

  shape[2] = "func=rect;x=0;y=48;width=25;height=4;bc=#A1A1A1;pw=0;"

  shape[3] = "func=ell;x=23;y=43;width=14;height=14;bc=#A1A1A1;pw=0;"

  shape[BAR_ON] = "func=rect;x=25;y=40;width=50;height=4;bc=#A1A1A1;pw=0;"

  shape[BAR_OFF] = "func=rect;x=25;y=30;width=50;height=4;bc=#A1A1A1;op=0;pw=0;"

  shape[6] = "func=ell;x=63;y=43;width=14;height=14;bc=#A1A1A1;pw=0;"

  shape[7] = "func=rect;x=75;y=48;width=25;height=4;bc=#A1A1A1;pw=0;"

  shape[8] = "func=ell;x=25;y=65;width=20;height=20;bc=#666666;pw=0;"

  shape[9] = "func=rect;x=35;y=65;width=30;height=20;bc=#666666;pw=0;"

  shape[10] = "func=ell;x=55;y=65;width=20;height=20;bc=#666666;pw=0;"

  shape[11] = "func=text;x=30;y=70;text=O;bc=#FFFFFF;fs=10;fn=Arial;"

  shape[12] = "func=text;x=64;y=70;text=I;bc=#FFFFFF;fs=10;fn=Arial;"

  shape[SW_ON] = "func=ell;x=55;y=65;width=20;height=20;bc=#FFFFFF;op=40;pw=0;"

  shape[SW_OFF] = "func=ell;x=25;y=65;width=20;height=20;bc=#FFFFFF;op=0;pw=0;"

EndSub

Sub Shapes_Init

  ' Shapes Line | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 0 ' x offset

  shY = 0 ' y offset

  shape = ""

  shape[1] = "func=rect;x=0;y=0;width=100;height=100;bc=#008080;op=20;pw=0;"

  shape[2] = "func=rect;x=0;y=48;width=100;height=4;bc=#A1A1A1;pw=0;"

EndSub

Sub Branch_Init

  ' Branch | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 0 ' x offset

  shY = 0 ' y offset

  shape = ""

  shape[1] = "func=rect;x=0;y=0;width=100;height=100;bc=#008080;op=20;pw=0;"

  shape[2] = "func=rect;x=0;y=48;width=50;height=4;bc=#A1A1A1;pw=0;"

  shape[3] = "func=rect;x=48;y=0;width=4;height=100;bc=#A1A1A1;pw=0;"

EndSub

Sub Corner_Init

  ' Corner | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 0 ' x offset

  shY = 0 ' y offset

  shape = ""

  shape[1] = "func=rect;x=0;y=0;width=100;height=100;bc=#008080;op=20;pw=0;"

  shape[2] = "func=rect;x=0;y=48;width=52;height=4;bc=#A1A1A1;pw=0;"

  shape[3] = "func=rect;x=48;y=0;width=4;height=52;bc=#A1A1A1;pw=0;"

EndSub

Sub Battery_Init

  ' Battery | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 0 ' x offset

  shY = 0 ' y offset

  shape = ""

  shape[1] = "func=rect;x=0;y=0;width=100;height=100;bc=#008080;op=20;pw=0;"

  shape[2] = "func=rect;x=48;y=0;width=4;height=100;bc=#A1A1A1;pw=0;"

  shape[3] = "func=rect;x=39;y=11;width=22;height=20;bc=#666666;pc=#000000;pw=1;"

  shape[4] = "func=rect;x=23;y=21;width=53;height=66;bc=#262626;pc=;pw=1;"

  shape[5] = "func=text;x=28;y=42;text=1.5V;fs=20;fn=Arial;bc=#FFFFFF;angle=90;"

EndSub

Sub Light_Init

  ' Light | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  LIGHTB = 9  ' light of bulb

  LIGHTF = 13 ' light of filament

  shX = 0     ' x offset

  shY = 0     ' y offset

  shape = ""

  shape[1] = "func=rect;x=0;y=0;width=100;height=100;bc=#008080;op=20;pw=0;"

  shape[2] = "func=rect;x=50;y=48;width=50;height=4;bc=#A1A1A1;pw=0;"

  shape[3] = "func=rect;x=0;y=48;width=25;height=4;bc=#A1A1A1;pw=0;"

  shape[4] = "func=rect;x=25;y=48;width=4;height=40;bc=#A1A1A1;pw=0;"

  shape[5] = "func=rect;x=25;y=84;width=25;height=4;bc=#A1A1A1;pw=0;"

  shape[6] = "func=ell;x=43;y=77;width=14;height=14;bc=#A1A1A1;pw=0;"

  shape[7] = "func=ell;x=43;y=69;width=14;height=14;bc=#666666;pc=#000000;pw=1;"

  shape[8] = "func=rect;x=41;y=68;width=17;height=10;bc=#000000;pw=0;"

  shape[LIGHTB] = "func=ell;x=29;y=7;width=42;height=42;bc=#FFFFCC;op=0;pw=0;"

  shape[10] = "func=ell;x=29;y=7;width=42;height=42;bc=#CCCCCC;op=30;pc=#000000;pw=1;"

  shape[11] = "func=rect;x=40;y=46;width=20;height=29;bc=#666666;pc=#000000;pw=1;"

  shape[12] = "func=line;x=42;y=26;x1=0;y1=0;x2=15;y2=0;pc=#000000;pw=1;"

  shape[LIGHTF] = "func=line;x=42;y=26;x1=0;y1=0;x2=15;y2=0;pc=#FFCC00;op=0;pw=3;"

  shape[14] = "func=line;x=42;y=25;x1=0;y1=0;x2=5;y2=21;pc=#000000;pw=1;"

  shape[15] = "func=line;x=52;y=24;x1=4;y1=0;x2=0;y2=22;pc=#000000;pw=1;"

  shape[16] = "func=line;x=40;y=47;x1=18;y1=0;x2=0;y2=9;pc=#000000;pw=1;"

  shape[17] = "func=line;x=41;y=54;x1=18;y1=0;x2=0;y2=10;pc=#000000;pw=1;"

  shape[18] = "func=line;x=41;y=63;x1=18;y1=0;x2=0;y2=9;pc=#000000;pw=1;"

EndSub

Sub Shapes_Add

  ' Shapes | Add shapes as shapes data

  ' param shape - array of shapes

  ' param scale - to zoom

  ' return nShapes - number of shapes

  ' return shAngle - current angle of shapes

  Stack.PushValue("local", i)

  Stack.PushValue("local", index)

  nShapes = Array.GetItemCount(shape)

  index = Array.GetAllIndices(shape)

  s = scale

  For j = 1 To nShapes

    i = index[j]

    GraphicsWindow.PenWidth = shape[i]["pw"] * s

    If shape[i]["pw"] > 0 Then

      GraphicsWindow.PenColor = shape[i]["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) Then

      GraphicsWindow.BrushColor = shape[i]["bc"]

    EndIf

    If shape[i]["func"] = "rect" Then

      shape[i]["obj"] = Shapes.AddRectangle(shape[i]["width"]* s, shape[i]["height"] * s)

    ElseIf shape[i]["func"] = "ell" Then

      shape[i]["obj"] = Shapes.AddEllipse(shape[i]["width"]* s, shape[i]["height"] * s)

    ElseIf shape[i]["func"] = "tri" Then

      shape[i]["obj"] = Shapes.AddTriangle(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s, shape[i]["x3"] * s, shape[i]["y3"] * s)

    ElseIf shape[i]["func"] = "line" Then

      shape[i]["obj"] = Shapes.AddLine(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s)

    ElseIf shape[i]["func"] = "text" Then

      If silverlight Then

        fs = Math.Floor(shape[i]["fs"] * 0.9)

      Else

        fs = shape[i]["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shape[i]["fn"]

      shape[i]["obj"] = Shapes.AddText(shape[i]["text"])

    EndIf

    If silverlight And Text.IsSubText("tri|line", shape[i]["func"]) Then

      x = shape[i]["x"]

      y = shape[i]["y"]

      alpha = Math.GetRadians(shape[i]["angle"])

      SB_RotateWorkAround()

      Shapes.Move(shape[i]["obj"], shX + x * s, shY + y * s)

    Else

      Shapes.Move(shape[i]["obj"], shX + shape[i]["x"] * s, shY + shape[i]["y"] * s)

    EndIf

    If Text.IsSubText("rect|ell|tri|line|text", shape[i]["func"]) And shape[i]["angle"] <> 0 Then

      Shapes.Rotate(shape[i]["obj"], shape[i]["angle"])

    EndIf

    If shape[i]["op"] <> "" Then

      Shapes.SetOpacity(shape[i]["obj"], shape[i]["op"])

    EndIf

    shape[i]["rx"] = shape[i]["x"]

    shape[i]["ry"] = shape[i]["y"]

  EndFor

  shAngle = 0

  index = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub

Sub Shapes_CalcWidthAndHeight

  ' Shapes | Calculate total width and height of shapes for rotation

  ' param nShapes - number of shapes

  ' return shWidth, shHeight - total size of shapes

  For i = 1 To nShapes

    If shape[i]["func"] = "tri" Or shape[i]["func"] = "line" Then

      xmin = shape[i]["x1"]

      xmax = shape[i]["x1"]

      ymin = shape[i]["y1"]

      ymax = shape[i]["y1"]

      If shape[i]["x2"] < xmin Then

        xmin = shape[i]["x2"]

      EndIf

      If xmax < shape[i]["x2"] Then

        xmax = shape[i]["x2"]

      EndIf

      If shape[i]["y2"] < ymin Then

        ymin = shape[i]["y2"]

      EndIf

      If ymax < shape[i]["y2"] Then

        ymax = shape[i]["y2"]

      EndIf

      If shape[i]["func"] = "tri" Then

        If shape[i]["x3"] < xmin Then

          xmin = shape[i]["x3"]

        EndIf

        If xmax < shape[i]["x3"] Then

          xmax = shape[i]["x3"]

        EndIf

        If shape[i]["y3"] < ymin Then

          ymin = shape[i]["y3"]

        EndIf

        If ymax < shape[i]["y3"] Then

          ymax = shape[i]["y3"]

        EndIf

      EndIf

      shape[i]["width"] = xmax - xmin

      shape[i]["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shape[i]["x"] + shape[i]["width"]

      shHeight = shape[i]["y"] + shape[i]["height"]

    Else

      If shWidth < shape[i]["x"] + shape[i]["width"] Then

        shWidth = shape[i]["x"] + shape[i]["width"]

      EndIf

      If shHeight < shape[i]["y"] + shape[i]["height"] Then

        shHeight = shape[i]["y"] + shape[i]["height"]

      EndIf

    EndIf

  EndFor

EndSub

Sub Shapes_CalcRotatePos

  ' Shapes | Calculate position for rotated shape

  ' param["x"], param["y"] - position of a shape

  ' param["width"], param["height"] - size of a shape

  ' param["cx"], param["cy"] - center of shapes

  ' param["angle"] - rotate angle

  ' return x, y - rotated position of a shape

  _cx = param["x"] + param["width"] / 2

  _cy = param["y"] + param["height"] / 2

  x = _cx - param["cx"]

  y = _cy - param["cy"]

  Math_CartesianToPolar()

  a = a + param["angle"]

  x = r * Math.Cos(a * Math.Pi / 180)

  y = r * Math.Sin(a * Math.Pi / 180)

  _cx = x + param["cx"]

  _cy = y + param["cy"]

  x = _cx - param["width"] / 2

  y = _cy - param["height"] / 2

EndSub

Sub Shapes_Move

  ' Shapes | Move shapes

  ' param shape - array of shapes

  ' param scale - to zoom

  ' param x, y - position to move

  ' return shX, shY - new position of shapes

  Stack.PushValue("local", i)

  shX = x

  shY = y

  For i = 1 To nShapes

    _x = shape[i]["rx"]

    _y = shape[i]["ry"]

    Shapes.Move(shape[i]["obj"], shX + _x * s, shY + _y * s)

  EndFor

  i = Stack.PopValue("local")

EndSub

Sub Shapes_Save

  ' Shapes | Save shapes

  ' param id - shape group id

  ' param shape[] - shape group

  ' param nShapes - number of shapes

  ' param shX, shY - shape group position

  ' param scale - to zoom

  ' param angle - to rotate

  Stack.PushValue(id, shape)

  Stack.PushValue(id, nShapes)

  Stack.PushValue(id, shX)

  Stack.PushValue(id, shY)

  Stack.PushValue(id, scale)

  Stack.PushValue(id, angle)

EndSub

Sub Shapes_Restore

  ' Shapes | Restore shapes

  ' param id - shape group id

  ' returns shape[] - shape group

  ' param nShapes - number of shapes

  ' returns shX, shY - shape group position

  ' returns scale - to zoom

  ' returns angle - to rotate

  angle = Stack.PopValue(id)

  scale = Stack.PopValue(id)

  shY = Stack.PopValue(id)

  shX = Stack.PopValue(id)

  nShapes = Stack.PopValue(id)

  shape = Stack.PopValue(id)

EndSub

Sub Shapes_Remove

  ' Shapes | Remove shapes

  ' param shape - array of shapes

  Stack.PushValue("local", i)

  For i = 1 To nShapes

    Shapes.Remove(shape[i]["obj"])

  EndFor

  i = Stack.PopValue("local")

EndSub

Sub Shapes_Rotate

  ' Shapes | Rotate shapes

  ' param shape - array of shapes

  ' param scale - to zoom

  ' param angle - to rotate

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  Shapes_CalcWidthAndHeight()

  s = scale

  param["angle"] = angle

  param["cx"] = shWidth / 2

  param["cy"] = shHeight / 2

  For i = 1 To nShapes

    param["x"] = shape[i]["x"]

    param["y"] = shape[i]["y"]

    param["width"] = shape[i]["width"]

    param["height"] = shape[i]["height"]

    Shapes_CalcRotatePos()

    If silverlight And Text.IsSubText("tri|line", shape[i]["func"]) Then

      alpha = Math.GetRadians(angle + shape[i]["angle"])

      SB_RotateWorkAround()

    EndIf

    shape[i]["rx"] = x

    shape[i]["ry"] = y

    Shapes.Move(shape[i]["obj"], shX + x * s, shY + y * s)

    Shapes.Rotate(shape[i]["obj"], angle + shape[i]["angle"])

  EndFor

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub

Sub Math_CartesianToPolar

  ' Math | convert cartesian coodinate to polar coordinate

  ' param x, y - cartesian coordinate

  ' return r, a - polar coordinate

  r = Math.SquareRoot(x * x + y * y)

  If x = 0 And y > 0 Then

    a = 90 ' [degree]

  ElseIf x = 0 And y < 0 Then

    a = -90

  Else

    a = Math.ArcTan(y / x) * 180 / Math.Pi

  EndIf

  If x < 0 Then

    a = a + 180

  ElseIf x > 0 And y < 0 Then

    a = a + 360

  EndIf

EndSub


