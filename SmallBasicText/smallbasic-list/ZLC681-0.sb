' Maze 1.4
' Copyright Â© 2012-2016 Nonki Takahashi.  The MIT License.
'
' History:
' 1.4 2016-01-22 Modified to use graph and breadth-first search. (ZLC681-0)
' 1.3 2016-01-22 Changed maze size to 11x9. (ZLC681)
' 0.61 2012-10-29 Modified for Sliverlight (about pen width). (PNC833-4)
' 0.5 2012-10-27 Modified for Sliverlight and removed debug routines. (PNC833-1)
' 0.4 2012-09-04 Changed time unit from [ms] to [s]. (PNC833-0)
' 0.3 2012-06-22 Maze genaration algorithm changed. (PNC833)
' 0.2 2012-06-08 Title added.
' 0.1 2012-06-08 Created.
'
' Reference :
' [1] Wikipedia, Randomized Prim's algorithm, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Randomized_Prim.27s_algorithm
' [2] YouTube, Breadth First Search Algorithm, https://www.youtube.com/watch?v=QRq6p9s8NVg
'
' Data structure :
' start : cell[2][2] (node #1)
' goal : cell[rows - 1][cols - 1] (node #rowsPassage*colsPassage)
'
title = "Maze 1.4"
debug = "False"
GraphicsWindow.Title = title
WALL = "W"
PASSAGE = " "
Not = "False=True;True=False;"
Form()
bStart = "False"
While bStart = "False"
  GenerateMaze()
  Controls.ShowControl(oNext)
  Controls.ShowControl(oStart)
  WaitButtonClick()
  Controls.HideControl(oNext)
  Controls.HideControl(oStart)
  If bStart Then
    t0 = Clock.ElapsedMilliseconds
    SolveMaze()
    t1 = Clock.ElapsedMilliseconds
    title = title + " - time: " + (Math.Floor((t1 - t0) / 10) / 100) + " [s]"
    GraphicsWindow.Title = title
  EndIf
EndWhile
Sub AddButtons
  GraphicsWindow.BrushColor = "Black"
  y1 = y0 + (rowsPassage + 0.6) * pathw
  oNext = Controls.AddButton("Next", x0, y1)
  Controls.HideControl(oNext)
  oStart = Controls.AddButton("Start", x0 + 50, y1)
  Controls.HideControl(oStart)
  Controls.ButtonClicked = OnButtonClicked
EndSub
Sub AddWallToList
  ' param col, row - cell
  ' return nWalls - number of wall list
  ' return iWalls - index of wall list
  ' return colWalls[], rowWalls[] - wall list
  ' return colOpp[], rowOpp[] - cell list (on the opposite side)
  For d = 0 To 3
    colw = col + colAdj[d]
    roww = row + rowAdj[d]
    If 1 < colw And colw < cols And 1 < roww And roww < rows And cell[roww][colw] = WALL Then
      i = colw + (roww - 1) * cols
      ' find i in wall list
      FindWallInList()
      If i = iFound Then ' found
        ' remove the wall
        nWalls = nWalls - 1
        iWalls[iPrev] = iWalls[iFound]
      Else
        ' add the wall to wall list
        nWalls = nWalls + 1
        iNext = iWalls[0]
        iWalls[0] = i
        iWalls[i] = iNext
        colWall[i] = colw            ' wall
        rowWall[i] = roww
        colOpp[i] = colw + colAdj[d] ' cell on the opposite side
        rowOpp[i] = roww + rowAdj[d]
        colPath[i] = col              ' for graph
        rowPath[i] = row              ' for graph
      EndIf
    EndIf
  EndFor
EndSub
Sub BreadthFirstSearch
  ' param root - root number
  visited = ""
  Queue_Init()
  node = root
  Queue_Put()
  Queue_Check()
  While Not[isEmpty]
    Queue_Get()
    GrayNode()
    moves = moves + 1
    If node = goal Or maxmoves <= moves Then
      isEmpty = "True"
    Else
      index = Array.GetAllIndices(edge[node])
      n = Array.GetItemCount(edge[node])
      from = node
      For i = 1 To n
        node = index[i]
        If visited[node] Then
        Else
          Queue_Put()
          edge[from][node] = ""
        EndIf
      EndFor
    EndIf
  EndWhile
EndSub
Sub ClearMaze
  ' param x0, y0
  ' param colsPassage, rowsPassage
  ' param width
  GraphicsWindow.BrushColor = "Green"
  GraphicsWindow.FillRectangle(x0, y0, pathw * colsPassage, pathw * rowsPassage)
  col0 = colsPassage 'Math.GetRandomNumber(colsPassage) ' start cell of maze generate
  row0 = 1    'Math.GetRandomNumber(rowsPassage)
  x = x0 + (col0 - 1) * pathw
  y = y0 + (row0 - 1) * pathw
  GraphicsWindow.BrushColor = colorPassage
  GraphicsWindow.FillRectangle(x + (wallw / 2), y + (wallw / 2), pathw - wallw, pathw - wallw)  ' start cell
  GraphicsWindow.BrushColor = colorWall
  GraphicsWindow.FillRectangle(x0 - (wallw / 2), y0 - (wallw / 2), pathw * colsPassage + wallw, wallw)
  GraphicsWindow.FillRectangle(x0 - (wallw / 2), y0 + pathw * rowsPassage - (wallw / 2), pathw * colsPassage + wallw, wallw)
  GraphicsWindow.FillRectangle(x0 - (wallw / 2), y0 - (wallw / 2), wallw, pathw * rowsPassage + wallw)
  GraphicsWindow.FillRectangle(x0 + pathw * colsPassage - (wallw / 2), y0 - (wallw / 2), wallw, pathw * rowsPassage + wallw)
  y1 = y0 + pathw * rowsPassage
  For col = 1 To colsPassage - 1
    x = x0 + pathw * col
    GraphicsWindow.FillRectangle(x - (wallw / 2), y0 - (wallw / 2), wallw, y1 - y0)
  EndFor
  x1 = x0 + pathw * colsPassage
  For row = 1 To rowsPassage - 1
    y = y0 + pathw * row
    GraphicsWindow.FillRectangle(x0 - (wallw / 2), y - (wallw / 2), x1 - x0, wallw)
  EndFor
  For row = 1 To rows
    For col = 1 To cols
      cell[row][col] = WALL
    EndFor
  EndFor
  cell[2 * row0][2 * col0] = PASSAGE  ' generate start
  nWalls = 0
  edge = "" ' sparse matrix for maze graph
EndSub
Sub DrawGoal
  ' param x0, y0
  ' param colsPassage, rowsPassage
  ' param pathw - path width
  xg = x0 + (colsPassage - 1) * pathw
  yg = y0 + (rowsPassage - 1) * pathw
  GraphicsWindow.BrushColor = "Red"
  GraphicsWindow.FillTriangle(xg + 0.3 * pathw, yg + 0.2 * pathw, xg + 0.7 * pathw, yg + 0.4 * pathw, xg + 0.3 * pathw, yg + 0.6 * pathw)
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.DrawTriangle(xg + 0.3 * pathw, yg + 0.2 * pathw, xg + 0.7 * pathw, yg + 0.4 * pathw, xg + 0.3 * pathw, yg + 0.6 * pathw)
  GraphicsWindow.DrawLine(xg + 0.3  * pathw, yg + 0.6 * pathw, xg + 0.3 * pathw, yg + 0.8 * pathw)
EndSub
Sub DrawGraph
  ' param x0, y0
  ' param colsPassage, rowsPassage
  ' param pathw - path width
  ' param edge - array of edges
  edge2 = edge
  GraphicsWindow.PenWidth = 2
  GraphicsWindow.PenColor = "Black"
  For row = 1 To rowsPassage
    y1 = y0 + pathw / 2 + (row - 1) * pathw
    For col = 1 To colsPassage
      node1 = (row - 1) * colsPassage + col
      x1 = x0 + pathw / 2 + (col - 1) * pathw
      If row < rowsPassage Then
        node2 = node1 + colsPassage
        If edge2[node1][node2] Then
          edge2[node2][node1] = ""
          y2 = y0 + pathw / 2 + row * pathw
          GraphicsWindow.DrawLine(x1, y1, x1, y2)
        EndIf
      EndIf
      If col < colsPassage Then
        node2 = node1 + 1
        If edge2[node1][node2] Then
          edge2[node2][node1] = ""
          x2 = x0 + pathw / 2 + col * pathw
          GraphicsWindow.DrawLine(x1, y1, x2, y1)
        EndIf
      EndIf  
    EndFor
  EndFor
  size = pathw * 0.6
  dy = pathw * 0.14
  GraphicsWindow.FontSize = pathw * 0.3
  For row = 1 To rowsPassage
    y = y0 + pathw * 0.2 + (row - 1) * pathw
    For col = 1 To colsPassage
      x = x0 + pathw * 0.2 + (col - 1) * pathw
      node = (row - 1) * colsPassage + col
      GraphicsWindow.BrushColor = "White"
      GraphicsWindow.FillEllipse(x, y, size, size)
      GraphicsWindow.DrawEllipse(x, y, size, size)
      GraphicsWindow.BrushColor = "Black"
      If node < 10 Then
        dx = pathw * 0.2
      Else
        dx = pathw * 0.1
      EndIf
      GraphicsWindow.DrawText(x + dx, y + dy, node)
    EndFor
  EndFor
EndSub
Sub GrayNode
  ' param node
  GraphicsWindow.BrushColor = "#80000000"
  visited[node] = "True"
  Node2Pos()
  GraphicsWindow.FillEllipse(x - size / 2, y - size / 2, size, size)
EndSub
Sub DumpCell
  For j = 1 To rows
    For i = 1 To cols
      TextWindow.Write(cell[j][i])
    EndFor
    TextWindow.WriteLine("")
  EndFor
EndSub
Sub DumpSparseMatrix
  For j = 1 To rowsPassage * colsPassage
    For i = 1 To rowsPassage * colsPassage 
      If edge[j][i] Then
        TextWindow.Write("(" + j + "," + i + ") ")
      EndIf
    EndFor
    TextWindow.WriteLine("")
  EndFor
EndSub
Sub Form
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  colsPassage = 11
  rowsPassage = 9
  cols = 2 * colsPassage + 1
  rows = 2 * rowsPassage + 1
  pathw = 38  ' path width
  wallw = 10  ' wall width (even number)
  colorRoute = "White"
  colorWall = "#004400"
  colorPassage = "Peru"
  GraphicsWindow.BackgroundColor = "DeepSkyBlue"
  x0 = (GraphicsWindow.Width - colsPassage * pathw) / 2
  y0 = 0.6 * pathw
  colAdj = "0=1;1=0;2=-1;3=0;"
  rowAdj = "0=0;1=1;2=0;3=-1;"
  AddButtons()
  InitTurtle()
EndSub
Sub FindWallInList
  ' param i - index to remove of wall list
  ' return iPrev - previous index of i
  ' return iFound - i if found
  iFound = 0
  c = 1
  While i <> iFound And c <= nWalls
    c = c + 1
    iPrev = iFound
    iFound = iWalls[iFound]
  EndWhile
EndSub
Sub GenerateMaze
  ' Generate maze with randomized Prim's algorithm
  ' param x0, y0
  ' param colsPassage, rowsPassage
  ' param width
  ' 1. Start with a grid full of walls.
  ClearMaze()
  ' 2. Pick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.
  col = 2 * col0
  row = 2 * row0
  AddWallToList()
  ' 3. While there are walls in the list:
  While nWalls > 0
    ' 1. Pick a random wall from the list. If the cell on the opposite side isn't in the maze yet:
    GetRandomIndex()
    col = colOpp[i] 
    row = rowOpp[i]
    If cell[row][col] = WALL Then
      ' 1. Make the wall a passage and mark the cell on the opposite side as part of the maze.
      colw = colWall[i]
      roww = rowWall[i]
      RemoveWallFromList()
      cell[roww][colw] = PASSAGE  ' wall
      cell[row][col] = PASSAGE    ' cell on the opposite side
      colp = colPath[i] ' for graph
      rowp = rowPath[i] ' for graph
      node1 = (rowp / 2 - 1) * colsPassage + colp / 2 ' node # for graph
      node2 = (row / 2 - 1) * colsPassage + col / 2 ' node # for graph
      edge[node1][node2] = "True" ' one direction edge to maze graph 
      edge[node2][node1] = "True" ' opposite direction edge to maze graph
      node1 = node2 ' for graph
      KnockDownWall()
      ' 2. Add the neighboring walls of the cell to the wall list.
      AddWallToList()
    Else
      ' 2. If the cell on the opposite side already was in the maze, remove the wall from the list.
      RemoveWallFromList()
    EndIf
  EndWhile
  DrawGoal()
  DrawGraph()
  If debug Then
    DumpCell()
    DumpSparseMatrix()
  EndIf
EndSub
Sub GetRandomIndex
  ' get random index of wall list
  ' return i - index
  n = Math.GetRandomNumber(nWalls)
  i = 0
  For c = 1 To n
    i = iWalls[i]
  EndFor
EndSub
Sub InitTurtle
  Turtle.Show()
  Turtle.PenUp()
  Turtle.Speed = 9
  Turtle.MoveTo(x0 + pathw / 2, y0 + pathw / 2)  
  Turtle.Turn(90 - Turtle.Angle)
  Turtle.Speed = 10
EndSub
Sub KnockDownWall
  ' param colw, roww - wall
  ' param col, row - cell on the opposite side
  x = x0 + (col / 2 - 1) * pathw
  y = y0 + (row / 2 - 1) * pathw
  GraphicsWindow.BrushColor = colorPassage
  GraphicsWindow.FillRectangle(x + (wallw / 2), y + (wallw / 2), pathw - wallw, pathw - wallw)
  If Math.Remainder(colw, 2) = 1 Then ' vertical wall
    x = x0 + (colw - 1) / 2 * pathw
    y1 = y0 + (roww / 2 - 1) * pathw
    y2 = y0 + (roww / 2) * pathw
    GraphicsWindow.FillRectangle(x - (wallw / 2), y1 + (wallw / 2), wallw, y2 - y1 - wallw)
  ElseIf Math.Remainder(roww, 2) = 1 Then ' horizontal wall
    x1 = x0 + (colw / 2 - 1) * pathw
    x2 = x0 + (colw / 2) * pathw
    y = y0 + (roww - 1) / 2 * pathw
    GraphicsWindow.FillRectangle(x1 + (wallw / 2), y - (wallw / 2), x2 - x1 - wallw, wallw)
  EndIf
EndSub
Sub Node2Pos
  ' param node
  ' return x, y
  col = Math.Remainder(node - 1, colsPassage) + 1
  row = Math.Floor((node - 1) /  colsPassage) + 1 
  x = x0 + pathw / 2 + (col - 1) * pathw
  y = y0 + pathw / 2 + (row - 1) * pathw
EndSub
Sub OnButtonClicked
  bIdle = "False"
EndSub
Sub RemoveWallFromList
  ' param i - index to remove of wall list
  ' param wall[] - wall list
  ' param nWalls - number of wall list
  FindWallInList()
  If i = iFound Then ' found
    iWalls[iPrev] = iWalls[iFound]
    iWalls[iFound] = ""
    nWalls = nWalls - 1
  EndIf
EndSub
Sub SolveMaze
  root = 1
  goal = colsPassage * rowsPassage
  moves = 0
  maxmoves = goal * 2
  BreadthFirstSearch()
  If node = goal Then
    While node <> root
      Stack.PushValue("path", node)
      index = Array.GetAllIndices(edge[node])
      node = index[1]
    EndWhile
  EndIf
  Turtle.PenDown()
  GraphicsWindow.PenWidth = 2
  GraphicsWindow.PenColor = "White"
  While 0 < Stack.GetCount("path")
    node = Stack.PopValue("path")
    Node2Pos()
    Turtle.MoveTo(x, y)
  EndWhile
  Sound.PlayBellRing()
EndSub
Sub WaitButtonClick
  bIdle = "True"
  While bIdle
    Program.Delay(300)
  EndWhile
  If Controls.LastClickedButton = oStart Then
    bStart = "True"
  Else
    bStart = "False"
  EndIf
EndSub
Sub Queue_Init
  inQ = 0
  outQ = 0
  queue = ""
EndSub
Sub Queue_Check
  ' return isEmpty
  If inQ = outQ Then
    isEmpty = "True"
  Else
    isEmpty = "False"
  EndIf
EndSub
Sub Queue_Put
  ' param node
  inQ = inQ + 1
  queue[inQ] = node
EndSub
Sub Queue_Get
  ' return node
  Queue_Check()
  If Not[isEmpty] Then
    outQ = outQ + 1
    node = queue[outQ]
    queue[outQ] = ""
  EndIf
EndSub
