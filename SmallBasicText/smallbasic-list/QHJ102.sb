' SmallBasic Version 1.0

' Funktion: Zock77MathGetAngle

' Autor: Zock77 (mod Pappa Lapub)

' Herkunft: http://social.msdn.microsoft.com/Forums/en-US/2749e2bd-4363-4a64-8158-a2f7ca74fffb/post-your-first-sb-program

' ImportURL: http://smallbasic.com/program/?NKP831

' Extension: Zock77Math, LitDev (SBMath)

' Kommentar: Zock77Math-Sample: TDW726

'  

' Variablen: 

'  

' --------------------------------------------------------------------------------

'Zock77Math.GetAngle(X, Tx, Y, Ty)

'Gets the clockwise angle [degrees] between 2 points in GraphicsWindow



'X =  The x coordinate of the target point  to which point (Tx,Ty) is turned to

'Tx = The x coordinate of the turning point (0 degrees = 12h)

'y = The y coordinate of the target point  to which point (Tx,Ty) is turned to

'Ty =  The y coordinate of the rotation point (0 degrees = 12h)

' returns  ...  The angle [degrees], where +/-  for clockwise/counterclockwise

' example ...  ID: NKP831



args = ""             ' for Variant2 (LDCall)

'GetDegrees3()         ' for Variant3 (LDInline)



pi = 3.14159  '  Math.Pi

W = 60

H = 4

Tx = (GraphicsWindow.Width - W)/2

Ty = (GraphicsWindow.Height - H)/2

line = Shapes.AddRectangle(W,H)

Shapes.Move(line,Tx,Ty)



GraphicsWindow.MouseMove = OnMouseMove





'' EVENT

Sub OnMouseMove

  x = GraphicsWindow.MouseX - W/2

  y = GraphicsWindow.MouseY - H/2

  xy[1] = x - Tx

  xy[2] = y - Ty

  

  '' VariantOrig ID: NKP831, Zock77Math Ext

  angle = Zock77Math.GetAngle(x,Tx,y,Ty) - 90

  

  '' Variant1, SUB

  'GetDegrees1()

  

  '' Variant2, LDCall function

  'angle = LDCall.Function4("GetDegrees2", x, Tx, y, Ty) - 90

  

  '' Variant3, LDInline

  'angle = LDInline.Call("SBMath.ATan2Deg", xy)   ' "1=x;2=y;",  additionally uncomment GetDegrees3()

  

  '' Variant4, SBMath Ext

  'angle = SBMath.ATan2Deg(x-Tx,y-Ty)

  

  Shapes.Rotate(line,angle)

  'GraphicsWindow.Title = angle

EndSub





'' SUBs



' Variant1

Sub GetDegrees1

  If (x > Tx) Then

    angle = Math.ArcTan((y-Ty) / (x-Tx)) + pi/2

  ElseIf (x < Tx) Then

    angle = Math.ArcTan((y-Ty) / (x-Tx)) - pi/2

  ElseIf (x = Tx And y > Ty) Then

    angle = Math.ArcTan((y-Ty) / (x-Tx)) + pi

  EndIf

  angle = Math.GetDegrees(angle) - 90

EndSub



' Variant2 (LDCall)

Sub GetDegrees2

  If (args[1] > args[2]) Then

    return = Math.ArcTan((args[3] - args[4]) / (args[1] - args[2])) + pi/2

  ElseIf (args[1] < args[2]) Then

    return = Math.ArcTan((args[3] - args[4]) / (args[1] - args[2])) - pi/2

  ElseIf (args[1] = args[2] And args[3] > args[4]) Then

    return = Math.ArcTan((args[3] - args[4]) / (args[1] - args[2])) + pi

  EndIf

  return = Math.GetDegrees(return)

EndSub



' Variant3 (LDInline)

Sub GetDegrees3

  cs = "using System;"

  cs = cs+ "using Microsoft.SmallBasic.Library;"

  cs = cs+ "public static class SBMath {"

  cs = cs+ "public static Primitive ATan2Deg(Primitive x, Primitive y) {"

  cs = cs+ "return 180 * System.Math.Atan2(y, x) / System.Math.PI; } }"

  LDInline.IncludeCS(cs,"","")

EndSub

  


