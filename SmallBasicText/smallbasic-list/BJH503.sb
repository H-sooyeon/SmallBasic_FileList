' The following line could be harmful and has been automatically commented.

' ff=File.ReadContents("e:\bann.svm")

GraphicsWindow.Title="SVM Renderer

bbb=LDShapes.BrushGradient("1=tan;2=brown" "DD")

LDGraphicsWindow.BackgroundBrush(bbb)

hlw="true

VT = Text.GetCharacter(9)

CR = Text.GetCharacter(13)

LF = Text.GetCharacter(10)

WQ = Text.GetCharacter(34)

scale=4

not="true=false;false=true

LDEvents.MouseWheel=mww

GraphicsWindow.KeyDown=kkd

rendd()



Sub kkd

  lk=text.ConvertToLowerCase( GraphicsWindow.LastKey)

  If lk="left" Then

    ox=ox-20

    

  ElseIf lk="right" Then

    ox=ox+20

    

  ElseIf lk="up" Then

    oy=oy-20

    

  ElseIf lk="down" Then

    oy=oy+20

  EndIf

  LDGraphicsWindow.Reposition(zz zz ox, oy 0)

EndSub



Sub mww

  zz=zz+LDEvents.LastMouseWheelDelta/10

  LDGraphicsWindow.Reposition(zz zz ox, oy 0)

  GraphicsWindow.Title=zz

EndSub

Sub rendd

  For q=1 To Array.GetItemCount(ff)

    If Array.ContainsIndex(ff[q] "d") Then

      buf=(ff[q]["d"])

      

      Parse_d()

    EndIf

  EndFor

EndSub



Sub AddArcPoints  ' param large_arc_flag = 1 if angle > 180Â°  param swp_flag = 1 if positive angle

  _x = (ps["x"] + pe["x"]) / 2

  _y = (ps["y"] + pe["y"]) / 2

  dx = (ps["x"] - pe["x"])

  dy = (ps["y"] - pe["y"])

  d = Math.SquareRoot(dx * dx + dy * dy)

  da = 10

  r = d / 2

  k = rx / r

  If k < 1 Then

    match = "False"

  Else

    _d = k * d

    _r = _d / 2

    If large_arc_flag = sweep_flag Then

      cx = _x - (dy / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

      cy = _y + (dx / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

    Else

      cx = _x + (dy / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

      cy = _y - (dx / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

    EndIf

    cc=ldMath.Convert2Radial(cx cy ps["x"] ps["y"])

    as = cc[2]

    cc=ldMath.Convert2Radial(cx cy pe["x"] pe["y"])

    ae = cc[2]

    If sweep_flag = 1 Then

      If ae < as Then

        ae = ae + 360

      EndIf

      For a = as To ae Step da

        x = cx + rx * LDMath.Cos(a)

        y = cy + ry * LDMath.Sin(a)

        AddPoint()

      EndFor

      If a < ae + da Then

        x = cx + rx * LDMath.Cos(ae)

        y = cy + ry * LDMath.Sin(ae)

        AddPoint()

      EndIf

    Else ' sweep_flag = 0

      If as < ae Then

        as = as + 360

      EndIf

      For a = as To ae Step -da

        x = cx + rx * LDMath.Cos(a)

        y = cy + ry * LDMath.Sin(a)

        AddPoint()

      EndFor

      If ae - da < a Then

        x = cx + rx * LDMath.Cos(ae)

        y = cy + ry * LDMath.Sin(ae)

        AddPoint()

      EndIf

    EndIf

    xo = x

    yo = y

  EndIf

EndSub



Sub AddCubicPoints

  nC = nC + 1

  _c[nC] = "x=" + x1 + ";y=" + y1 + ";"

  nc = nC + 1

  _c[nC] = "x=" + x2 + ";y=" + y2 + ";"

  nc = nC + 1

  _c[nC] = "x=" + x + ";y=" + y + ";"

  For t = 0 To 1 Step 0.05

    x1 = (1 - t) * _c[nC - 3]["x"] + t * _c[nC - 2]["x"]

    y1 = (1 - t) * _c[nC - 3]["y"] + t * _c[nC - 2]["y"]

    x2 = (1 - t) * _c[nC - 2]["x"] + t * _c[nC - 1]["x"]

    y2 = (1 - t) * _c[nC - 2]["y"] + t * _c[nC - 1]["y"]

    x3 = (1 - t) * _c[nC - 1]["x"] + t * _c[nC]["x"]

    y3 = (1 - t) * _c[nC - 1]["y"] + t * _c[nC]["y"]

    x12 = (1 - t) * x1 + t * x2

    y12 = (1 - t) * y1 + t * y2

    x23 = (1 - t) * x2 + t * x3

    y23 = (1 - t) * y2 + t * y3

    x = (1 - t) * x12 + t * x23

    y = (1 - t) * y12 + t * y23

    AddPoint()

  EndFor

  xo = x

  yo = y

EndSub



Sub AddPoint

  If _points <> "" Then

    _points = _points + " "

  EndIf

  _points = _points + x + "," + y

EndSub



Sub AddQuadPoints

  nQ = nQ + 1

  _q[nQ] = "x=" + x1 + ";y=" + y1 + ";"

  nQ = nQ + 1

  _q[nQ] = "x=" + x + ";y=" + y + ";"

  For t = 0 To 1 Step 0.05

    x1 = (1 - t) * _q[nQ - 2]["x"] + t * _q[nQ - 1]["x"]

    y1 = (1 - t) * _q[nQ - 2]["y"] + t * _q[nQ - 1]["y"]

    x2 = (1 - t) * _q[nQ - 1]["x"] + t * _q[nQ]["x"]

    y2 = (1 - t) * _q[nQ - 1]["y"] + t * _q[nQ]["y"]

    x = (1 - t) * x1 + t * x2

    y = (1 - t) * y1 + t * y2

    AddPoint()

  EndFor

  xo = x

  yo = y

EndSub



Sub Parse_Arc

  _p = p

  char = "Aa"

  Parse_Char()

  If match Then

    cmd = c

  EndIf

  matchA = "False"

  ps = "x=" + xo + ";y=" + yo + ";" ' start point

  While match

    Parse_Space()

    Parse_Point()     ' rx, ry

    If match Then

      rx = x

      ry = y

      Parse_Space()

      Parse_Number()  ' x-axis-rotation

    EndIf

    If match Then

      x_axis_rotation = number

      Parse_Space()

      char = "01"

      Parse_Char()    ' large-arc-flag

    EndIf

    If match Then

      large_arc_flag = c

      Parse_Space()

      char = "01"

      Parse_Char()    ' sweep-flag

    EndIf

    If match Then

      sweep_flag = c

      Parse_Space()

      Parse_Point()   ' end point

    EndIf

    If match Then

      If cmd = "a" Then

        x = xo + x

        y = yo + y

      EndIf

      matchA = "True"

      pe = "x=" + x + ";y=" + y + ";"

      AddArcPoints()

    EndIf

  EndWhile

  If Not[matchA] Then

    p = _p

  Else

    points[nPoints] = points[nPoints] + " " + _points

    match = "True"

  EndIf

EndSub



Sub Parse_Char

  match = "False"

  c = Text.GetSubText(buf, p, 1)

  If (p <= len) And Text.IsSubText(char, c) Then

    match = "True"

    p = p + 1

  EndIf

EndSub



Sub Parse_ClosePath

  char = "Zz"

  Parse_Char()

  If match Then

    closed[nPoints] = "True"

    xo = xz

    yo = yz

    cmd = c

  EndIf

EndSub



Sub Parse_Cubic

  _p = p

  char = "CcSs"

  Parse_Char()

  If match Then

    cmd = c

  EndIf

  matchC = "False"

  If Text.IsSubText("Cc", cmd) Then

    _c = ""

    nC = 1

    _c[nC]["x"] = xo

    _c[nC]["y"] = yo

    While match

      Parse_Space()

      Parse_Point()   '  control point 1

      If match Then

        If cmd = "c" Then

          x = xo + x

          y = yo + y

        EndIf

        x1 = x

        y1 = y

        Parse_Space()

        Parse_Point() ' control point 2

        If cmd = "c" Then

          x = xo + x

          y = yo + y

        EndIf

      EndIf

      If match Then

        x2 = x

        y2 = y

        Parse_Space()

        Parse_Point() ' end point

        If cmd = "c" Then

          x = xo + x

          y = yo + y

        EndIf

      EndIf

      If match Then

        matchC = "True"

        AddCubicPoints()

      EndIf

    EndWhile

  Else  ' S or s

    Parse_Space()

    Parse_Point() ' end point

    If match Then

      If cmd = "s" Then

        x = xo + x

        y = yo + y

      EndIf

      x1 = _c[nC]["x"] + (_c[nC]["x"] - _c[nC - 1]["x"])

      y1 = _c[nC]["y"] + (_c[nC]["x"] - _c[nC - 1]["x"])

      AddCubicPoints()

    EndIf

  EndIf

  If Not[matchC] Then

    p = _p

  Else

    points[nPoints] = points[nPoints] + " " + _points

    match = "True"

  EndIf

EndSub



Sub Render_Polygon

  For iPts = 1 To nPts

    _pt = LDText.Split(pts[iPts], ",")

    pt[iPts][1] = Math.Round(_pt[1] * scale)

    pt[iPts][2] = Math.Round(_pt[2] * scale)

  EndFor

  nShp = nShp + 1

  shp[nShp] = LDShapes.AddPolygon(pt)

  

  If hlw Then

    LDShapes.BrushColour(shp[nShp] "transparent")

    LDShapes.PenWidth(shp[nShp] .6)

    LDShapes.PenColour(shp[nShp] "black")

  EndIf

  Shapes.Move(shp[nShp], 0 0)'xL, yT)

EndSub



Sub Parse_LineTo

  _p = p

  char = "LlHhVv"

  Parse_Char()

  If match Then

    cmd = c

    _points = ""

  EndIf

  matchL = "False"

  If Text.IsSubText("Ll", cmd) Then

    While match

      Parse_Space()

      Parse_Point()

      If match Then

        matchL = "True"

        If cmd = "l" Then

          x = xo + x

          y = yo + y

        EndIf

        AddPoint()

        xo = x

        yo = y

      EndIf

    EndWhile

  Else

    ' cmd is subtext of "HhVv"

    While match

      Parse_Space()

      Parse_Number()

      If match Then

        matchL = "True"

        If cmd = "H" Then

          x = number

          y = yo

        ElseIf cmd = "h" Then

          x = xo + number

          y = yo

        ElseIf cmd = "V" Then

          x = xo

          y = number

        ElseIf cmd = "v" Then

          x = xo

          y = yo + number

        EndIf

        AddPoint()

        xo = x

        yo = y

      EndIf

    EndWhile

  EndIf

  If Not[matchL] Then

    p = _p

  Else

    points[nPoints] = points[nPoints] + " " + _points

    match = "True"

  EndIf

EndSub



Sub Parse_MoveTo

  _p = p

  char = "Mm"

  Parse_Char()

  If match Then

    cmd = c

    _points = ""

  EndIf

  matchM = "False"

  While match

    Parse_Space()

    Parse_Point()

    If match Then

      matchM = "True"

      If cmd = "m" Then

        x = xo + x

        y = yo + y

      EndIf

      AddPoint()

      xo = x

      yo = y

      xz = x

      yz = y

    EndIf

  EndWhile

  If Not[matchM] Then

    p = _p

  Else

    match = "True"

    nPoints = nPoints + 1

    points[nPoints] = _points

    closed[nPoints] = "False"

  EndIf

EndSub



Sub Parse_Number

  

  _p = p

  matchN = "False"

  char = "-"

  Parse_Char()

  If match Then

    number = "-"

  Else

    number = ""

  EndIf

  match = "True"

  char = "0123456789"

  While match

    Parse_Char()

    If match Then

      number = Text.Append(number, c)

      matchN = "True"

    EndIf

  EndWhile

  char = "."

  Parse_Char()

  

  If match Then

    number = Text.Append(number, c)

  EndIf

  char = "0123456789"

  While match

    Parse_Char()

    If match Then

      number = Text.Append(number, c)

      matchN = "True"

    EndIf

  EndWhile

  If Not[matchN] Then

    p = _p

  Else

    match = "True"

  EndIf

EndSub



Sub Parse_Point

  

  _p = p

  match = "False"

  Parse_Number()

  If match Then

    x = number

    Parse_Space()

    match = "True"

  EndIf

  If match Then

    Parse_Number()

  EndIf

  If match Then

    y = number

  Else

    p = _p

  EndIf

EndSub



Sub Parse_Quadratic

  

  _p = p

  char = "QqTt"

  Parse_Char()

  If match Then

    cmd = c

  EndIf

  matchQ = "False"

  If Text.IsSubText("Qq", cmd) Then

    _q = ""

    nQ = 1

    _q[nQ]["x"] = xo

    _q[nQ]["y"] = yo

    While match

      Parse_Space()

      Parse_Point()   '  control point

      If cmd = "q" Then

        x = xo + x

        y = yo + y

      EndIf

      x1 = x

      y1 = y

      If match Then

        Parse_Space()

        Parse_Point() ' end point

        If cmd = "q" Then

          x = xo + x

          y = yo + y

        EndIf

      EndIf

      If match Then

        matchQ = "True"

        AddQuadPoints()

      EndIf

    EndWhile

  Else  ' T or t

    Parse_Space()

    Parse_Point() ' end point

    If match Then

      If cmd = "t" Then

        x = xo + x

        y = yo + y

      EndIf

      x1 = _q[nQ]["x"] + (_q[nQ]["x"] - _q[nQ - 1]["x"])

      y1 = _q[nQ]["y"] + (_q[nQ]["x"] - _q[nQ - 1]["x"])

      AddQuadPoints()

    EndIf

  EndIf

  If Not[matchQ] Then

    p = _p

  Else

    points[nPoints] = points[nPoints] + " " + _points

    match = "True"

  EndIf

EndSub



Sub Parse_d'--------------paths---------

  match = "False"

  len = Text.GetLength(buf)

  p = 1

  points = ""

  closed = ""

  nPoints = 0

  xo = 0

  yo = 0

  While p <= len

    Parse_Space()

    Parse_MoveTo()

    If Not[match] Then

      Parse_LineTo()

    EndIf

    If Not[match] Then

      Parse_Cubic()

    EndIf

    If Not[match] Then

      Parse_Quadratic()

    EndIf

    If Not[match] Then

      Parse_Arc()

    EndIf

    If Not[match] Then

      Parse_ClosePath()

    EndIf

  EndWhile

  ' SVG_SetAttr()

  For iPoints = 1 To nPoints

    pt = ""

    pts = LDText.Split(points[iPoints], " ")

    nPts = Array.GetItemCount(pts)

    

    Render_Polygon()

    

  EndFor

EndSub



Sub Parse_Space

  

  match = "False"

  While (p <= len) And Text.IsSubText(" ," + VT + CR + LF, Text.GetSubText(buf, p, 1))

    match = "True"

    p = p + 1

  EndWhile

EndSub


