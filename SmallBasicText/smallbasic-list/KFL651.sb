level = 0
maxLevel = 4

maxHealth = 5
health = maxHealth

playerSightRadius = 9
viewportSize = playerSightRadius * 2 - 1
tileSize = 24

viewportPixels = viewportSize * tileSize

center = viewportPixels / 2

resourceMode = "online"
'resourceMode = "local"

'drawMode = "immediate"
drawMode = "retained"

imageName[ 1 ] = "Floor"
imageName[ 2 ] = "Wall"
imageName[ 3 ] = "Breakable"
imageName[ 4 ] = "Broken"
imageName[ 5 ] = "Stairs"
imageName[ 6 ] = "Player"
imageName[ 7 ] = "PowerUp"

'The level tiles are tiles that change for each level - the engine looks for an image that has the name followed by the level number
levelTilesEndIndex = 5

blockings[ 1 ] = "Wall"
blockings[ 2 ] = "Breakable"
blockings[ 3 ] = "Stairs"

GraphicsWindow.CanResize = "False"
GraphicsWindow.BackgroundColor = "Black"
GraphicsWindow.Clear()

working = "False"

playerShape = ""

LoadResources()
DownLevel()
Draw() 

'move when the player releases the key so that they have to press it once for each movement
GraphicsWindow.KeyUp = MoveKeyboard 
GraphicsWindow.MouseUp = MoveMouse

Sub StartProgress  
  GetDimensions()
  working = "True"
  GraphicsWindow.BrushColor = "Gray"
  GraphicsWindow.FillRectangle( offsetX, offsetY, ( viewportSize ) * tileSize, ( viewportSize ) * tileSize )
  GraphicsWindow.BrushColor = "Black"
  progressWidth = viewportSize - 2
  GraphicsWindow.FillRectangle( tileSize + offsetX, ( viewportSize / 2 ) * tileSize + offsetY, progressWidth * tileSize, tileSize )

  progress = 0
  stepAmount = progressWidth / steps
  GraphicsWindow.BrushColor = "Green"  
EndSub

Sub Progress
  progress = progress + 1
  GraphicsWindow.FillRectangle( tileSize + offsetX, ( viewportSize / 2 ) * tileSize + offsetY, stepAmount * progress * tileSize, tileSize )   
EndSub

Sub EndProgress
  working = "False"
EndSub

Sub LoadResources
  If ( resourceMode = "online" ) Then
    path = "http://dl.dropbox.com/u/26751885/Small%20Basic%20Tile%20Engine/"
  Else 
    path = Program.Directory + "\"
  EndIf
  
  steps = levelTilesEndIndex * maxLevel + Array.GetItemCount( imageName ) - levelTilesEndIndex
  StartProgress()

  For i = 1 to Array.GetItemCount( imageName )
    If ( i > levelTilesEndIndex ) Then
      loadImageName = imageName[ i ]
      LoadImage()
    Else
      For l = 1 To maxLevel
        loadImageName = imageName[ i ] + l
        LoadImage()
      EndFor
    EndIf
    indexFromName[ imageName[ i ] ] = i  
  EndFor

  EndProgress()  
EndSub  

Sub LoadImage
  fullPath = path + loadImageName + ".png"
  tiles[ loadImageName ] = ImageList.LoadImage( fullPath )
  Progress()
EndSub

Sub MoveKeyboard
  If( working = "False" ) Then
    direction = GraphicsWindow.LastKey  
    Update()
  EndIf
EndSub

Sub MoveMouse
  If ( working = "False" ) Then
    upAmount = centerY - GraphicsWindow.MouseY
    downAmount = GraphicsWindow.MouseY - centerY
    leftAmount = centerX - GraphicsWindow.MouseX
    rightAmount = GraphicsWindow.MouseX - centerX
    
    If( upAmount > downAmount And upAmount > leftAmount And upAmount > rightAmount ) Then
      direction = "Up"
    ElseIf( downAmount > leftAmount And downAmount > rightAmount ) Then
      direction = "Down"
    ElseIf( leftAmount > rightAmount ) Then 
      direction = "Left"
    Else
      direction = "Right"
    EndIf
    
    Update()
  EndIf
EndSub

Sub Update
  'make a copy of the player's current location
  newX = playerX 
  newY = playerY
  
  'check if the player is moving and if so change the copy of the location accordingly
  If ( direction = "Up" ) Then 
    newY = newY - 1
  ElseIf ( direction = "Down" ) Then
    newY = newY + 1
  ElseIf ( direction = "Left" ) Then
    newX = newX - 1
  ElseIf ( direction = "Right" ) Then
    newX = newX + 1
  EndIf
  
  'set location to the new position
  location = newX + ":" + newY 
  
  'the square of map at this location might not have been created yet
  CheckMapAtLocation() 
  
  'only update position if they're not trying to move into a wall
  If ( Array.ContainsValue( blockings, map[ level ][ location ] ) = "False" ) Then 
    
    'if the player walked onto a powerup...
    If( map[ level ][ location ] = "PowerUp" ) Then 
      'give them a point
      score = score + 1  
      
      'remove the star and place an empty floor here instead    
      updateLocation = location
      updateTilename = "Floor"
      UpdateMap()
    EndIf
    
    'update the player location
    oldX = playerX
    oldY = playerY
    playerX = newX 
    playerY = newY
    
    'draw the score in the title bar
    GraphicsWindow.Title = "Score: " + score 
  Else
    If ( map[ level ][ location ] = "Breakable" ) Then
      updateLocation = location
      updateTilename = "Broken"
      UpdateMap()      
    ElseIf ( map[ level ][ location ] = "Stairs" ) Then
      DownLevel()
    EndIf
  EndIf
  
  Draw()
  
  direction = "None"
EndSub

Sub GetDimensions
  offsetX = ( GraphicsWindow.Width - viewportPixels ) / 2 
  offsetY = ( GraphicsWindow.Height - viewportPixels ) / 2
  centerX = center + offsetX
  centerY = center + offsetY  
EndSub

Sub Draw
  If ( drawMode = "retained" ) Then
    DrawRetained()
  Else
    DrawImmediate()
  EndIf  
EndSub  

Sub DrawRetained  
  RedrawLevel()
  DrawPlayer()
EndSub  

Sub DrawImmediate
  GetDimensions()
  
  'draw a section of the map that is 17 x 17 tiles in size  
  For y = 0 To viewportSize - 1
    For x = 0 to viewportSize - 1
      GetLocationRelativeToPlayer()
      
      GetScreenPosition()
      
      'the part of the map at this location might not have been created yet       
      CheckMapAtLocation() 
      
      GetLevelTileName()
      
      viewPortLocation = x + ":" + y
      
      'check lastDrawn array for this tile - we only want to bother drawing if the tile is different to the last one we drew here
      If ( Array.ContainsIndex( lastDrawn, viewPortLocation ) = "False" Or tile <> lastDrawn[ viewPortLocation ] ) Then
        'draw a floor first        
        GraphicsWindow.DrawImage( tiles[ "Floor" + level ], screenX,  screenY )
        
        'if the current tile IS a floor then no point in drawing it again
        If ( map[ level ][ location ] <> "Floor" ) Then        
          GraphicsWindow.DrawImage( tiles[ tile ], screenX, screenY )
        EndIf
      EndIf
      
      'now overlay the player sprite if the current location is the player's location
      If ( x = playerSightRadius - 1 And y = playerSightRadius - 1 ) Then
        GraphicsWindow.DrawImage( tiles[ "Player" ],  screenX,  screenY )
      EndIf
      
      lastDrawn[ viewPortLocation ] = tile
    EndFor
  EndFor    
EndSub

Sub DrawPlayer
  GetDimensions()
  oldPlayerShape = playerShape
  playerShape = Shapes.AddImage( tiles[ "Player" ] )
  playerPosition = ( playerSightRadius - 1 ) * tileSize
  Shapes.Move( playerShape, playerPosition + offsetX, playerPosition + offsetY )
  If ( playerShape <> "" ) Then    
    Shapes.Remove( oldPlayerShape )
  EndIf
EndSub

Sub RedrawLevel 
  GetDimensions()
  startX = -1
  endX = viewportSize
  startY = -1
  endY = viewportSize
  RedrawPartial() 
EndSub

Sub RedrawPartial
  GetDimensions()
  
  For y = startY To endY
    For x = startX to endX
      column = x
      row = y
      
      GetLocationRelativeToPlayer()
      
      'the part of the map at this location might not have been created yet       
      CheckMapAtLocation() 
      
      GetLevelTileName()
      
      If ( map[ level ][ location ] <> "Floor" ) Then        
        If ( Array.ContainsIndex( levelShapes[ level ], location ) = "False" ) Then
          levelShapes[ level ][ location ] = Shapes.AddImage( tiles[ tile ] )
        EndIf
        GetScreenPosition()
        Shapes.Move( levelShapes[ level ][ location ], screenX, screenY )
        If ( x < 0 Or x > ( viewportSize - 1 ) Or y < 0 Or y > ( viewportSize - 1 ) ) Then
          Shapes.HideShape( levelShapes[ level ][ location ] )
        ElseIf( x = 0 or x = viewportSize - 1 Or y = 0 Or y = viewportSize - 1 ) Then
          Shapes.ShowShape( levelShapes[ level ][ location ] )
        EndIf
      EndIf      
    EndFor
  EndFor
EndSub  

Sub ShowColumn
  x = column
  For y = 0 To viewportSize - 1
    GetLocationRelativeToPlayer()
    Shapes.ShowShape( levelShapes[ level ][ location ] )
  EndFor
EndSub  

Sub HideColumn
  x = column
  For y = 0 To viewportSize - 1
    GetLocationRelativeToPlayer()
    Shapes.HideShape( levelShapes[ level ][ location ] )
  EndFor
EndSub    

Sub ShowRow
  y = row
  For x = 0 To viewportSize - 1
    GetLocationRelativeToPlayer()
    Shapes.ShowShape( levelShapes[ level ][ location ] )
  EndFor
EndSub  

Sub HideRow
  y = row
  For x = 0 To viewportSize - 1
    GetLocationRelativeToPlayer()
    Shapes.HideShape( levelShapes[ level ][ location ] )
  EndFor
EndSub

Sub CreateFloor
  GetDimensions()
  
  For y = 0 To viewportSize - 1
    For x = 0 To viewportSize - 1
      floorLocation = x + ":" + y
      
      floorShapes[ level ][ floorLocation ] = Shapes.AddImage( tiles[ "Floor" + level ] )
      
      Shapes.HideShape( floorShapes[ level ][ floorLocation ] )
      
      GetScreenPosition()
      Shapes.Move( floorShapes[ level ][ floorLocation ], screenX, screenY )
    EndFor  
  EndFor  
EndSub  

Sub ShowFloor
  For y = 0 To viewportSize - 1
    For x = 0 To viewportSize - 1
      Shapes.ShowShape( floorShapes[ level ][ x + ":" + y ] )
    EndFor  
  EndFor
EndSub  

Sub HideFloor
  For y = 0 To viewportSize - 1
    For x = 0 To viewportSize - 1
      Shapes.HideShape( floorShapes[ level ][ x + ":" + y ] )
    EndFor  
  EndFor
EndSub  

Sub DownLevel
  If ( level < maxLevel ) Then
    If ( drawMode = "retained" And level > 0 ) Then
      HideFloor()
    EndIf
    
    level = level + 1    
    
    If ( drawMode = "retained" And Array.ContainsIndex( floorShapes, level ) = "False" ) Then
      CreateFloor()
    EndIf
    
    playerX = 0
    playerY = 0
    ClearAroundPlayer()
    lastDrawn = ""
    
    If ( drawMode = "retained" ) Then
      ShowFloor()
    EndIf    
  EndIf  
EndSub

Sub ClearAroundPlayer 
  updateTilename = "Breakable"

  updateLocation = playerX + ":" + ( playerY - 1 )
  UpdateMap()

  updateLocation = ( playerX - 1 ) + ":" + playerY
  UpdateMap()
  
  updateTilename = "Floor"
  
  updateLocation = playerX + ":" + ( playerY + 1 )
  UpdateMap()

  updateLocation = ( playerX + 1 ) + ":" + playerY 
  UpdateMap()
  
  updateLocation = playerX + ":" + playerY
  UpdateMap()
EndSub

Sub UpdateMap
  map[ level ][ updateLocation ] = updateTilename
  If ( drawMode = "retained" And Array.ContainsIndex( levelShapes[ level ], updateLocation ) ) Then    
    tile = updateTilename
    GetLevelTileName()
    currentShape = levelShapes[ level ][ updateLocation ]
    levelShapes[ level ][ updateLocation ] = Shapes.AddImage( tiles[ tile ] )
    Shapes.Remove( currentShape )    
  EndIf
EndSub

Sub GetLocationRelativeToPlayer
  location = ( x - playerSightRadius + playerX + 1 ) + ":" + ( y - playerSightRadius + playerY + 1 )   
EndSub  

Sub GetScreenPosition
  screenX = x * tileSize + offsetX
  screenY = y * tileSize + offsetY  
EndSub

Sub GetTile
  tile = map[ level ][ location ]
EndSub

Sub GetLevelTileName
  GetTile()
  tileIndex = indexFromName[ tile ]
  If ( tileIndex <= levelTilesEndIndex ) Then
    tile = tile + level
  EndIf
EndSub

'check if the map is empty at this location and if it is then randomly pick a tile to place here
Sub CheckMapAtLocation 
  If ( Array.ContainsIndex( map[ level ], location ) = "False" ) Then
    If ( Math.GetRandomNumber( 1000 ) = 1 ) Then
      'Stairs - next level
      map[ level ][ location ] = "Stairs"      
    ElseIf ( Math.GetRandomNumber( 100 ) = 1 ) Then            
      'PowerUp - increases your score
      map[ level ][ location ] = "PowerUp" 
    ElseIf ( Math.GetRandomNumber( 4 ) = 1 ) Then
      'Wall - a square you can't move through
      map[ level ][ location ] = "Wall" 
    ElseIf ( Math.GetRandomNumber( 3 ) = 1 ) Then
      'Breakable - a wall you can break down
      map[ level ][ location ] = "Breakable" 
    Else
      'Floor - a square you can move over
      map[ level ][ location ] = "Floor" 
    EndIf
  EndIf
EndSub
