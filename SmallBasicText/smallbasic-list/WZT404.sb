' Arc Demo

' Copyright © 2020 Nonki Takahashi.  The MIT License.

' Using LitDev Extension



Init()

x_axis_rotation = 0 ' [degree]

large_arc_flag = 0  ' angle < 180°

sweep_flag = 0      ' negative angle

ShowArc()

While "True"

  If checkBoxChanged Then

    If LDControls.CheckBoxGetState(cboxLarge) Then

      large_arc_flag = 1  ' angle > 180°

    Else

      large_arc_flag = 0  ' angle < 180°

    EndIf

    If LDControls.CheckBoxGetState(cboxSweep) Then

      sweep_flag = 1      ' positive angle

    Else

      sweep_flag = 0      ' negative angle

    EndIf

    RemoveArc()

    ShowArc()

    checkBoxChanged = "False"

  Else

    Program.Delay(200)

  EndIf

EndWhile



Sub DrawArc

  ' param p[1][] - start point

  ' param p[2][] - end point

  ' param rx - radius x

  ' param ry - radius y

  ' param x_axis_rotation - rotation angle [degree]

  ' param large_arc_flag - 1 if angle > 180°

  ' param sweep_flag - 1 if positive angle

  If large_arc_flag = sweep_flag Then

    cx = _x1

    cy = _y1

  Else

    cx = _x2

    cy = _y2

  EndIf

  x = p[1]["x"] - cx

  y = p[1]["y"] - cy

  Math_CartesianToPolar()

  a1 = a

  x = p[2]["x"] - cx

  y = p[2]["y"] - cy

  Math_CartesianToPolar()

  a2 = a

  If sweep_flag = 1 Then

    If a2 < a1 Then

      a2 = a2 + 360

    EndIf

    For a = a1 To a2 Step 10

      x2 = cx + rx * LDMath.Cos(a)

      y2 = cy + ry * LDMath.Sin(a)

      If a1 < a Then

        nShp = nShp + 1

        shp[nShp] = Shapes.AddLine(x1, y1, x2, y2)

      EndIf

      x1 = x2

      y1 = y2

    EndFor

    If a < a2 + 10 Then

      x2 = cx + rx * LDMath.Cos(a2)

      y2 = cy + ry * LDMath.Sin(a2)

      nShp = nShp + 1

      shp[nShp] = Shapes.AddLine(x1, y1, x2, y2)

    EndIf

  Else ' sweep_flag = 0

    If a1 < a2 Then

      a1 = a1 + 360

    EndIf

    For a = a1 To a2 Step -10

      x2 = cx + rx * LDMath.Cos(a)

      y2 = cy + ry * LDMath.Sin(a)

      If a1 > a Then

        nShp = nShp + 1

        shp[nShp] = Shapes.AddLine(x1, y1, x2, y2)

      EndIf

      x1 = x2

      y1 = y2

    EndFor

    If a2 - 10 < a Then

      x2 = cx + rx * LDMath.Cos(a2)

      y2 = cy + ry * LDMath.Sin(a2)

      nShp = nShp + 1

      shp[nShp] = Shapes.AddLine(x1, y1, x2, y2)

    EndIf

  EndIf

EndSub



Sub DrawPoints

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.PenColor = "Transparent"

  For i = 1 To Array.GetItemCount(p)

    nShp = nShp + 1

    shp[nShp] = Shapes.AddEllipse(12, 12)

    Shapes.Move(shp[nShp], p[i]["x"] - 6, p[i]["y"] - 6)

    nShp = nShp + 1

    shp[nShp] = Shapes.AddText("p" + i)

    Shapes.Move(shp[nShp], p[i]["x"], p[i]["y"])

  EndFor

EndSub



Sub Init

  p[1] = "x=280;y=160;"

  p[2] = "x=370;y=280;"

  title = "Arc Demo | p1 = (" + p[1]["x"] + ", " + p[1]["y"] + ")"

  title = title + ", p2 = (" + p[2]["x"] + ", " + p[2]["y"] + ")"

  x = (p[1]["x"] + p[2]["x"]) / 2

  y = (p[1]["y"] + p[2]["y"]) / 2

  dx = (p[1]["x"] - p[2]["x"])

  dy = (p[1]["y"] - p[2]["y"])

  d = Math.SquareRoot(dx * dx + dy * dy)

  r = d / 2

  kr = 120

  rx = kr

  ry = kr

  title = title + ", rx = ry = " + (Math.Round(kr * 100) / 100)

  GraphicsWindow.Title = title

  k = kr / r

  _d = k * d

  _r = _d / 2

  GW_DrawGrid()

  GraphicsWindow.PenColor = "LightGray"

  _x1 = x - (dy / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

  _y1 = y + (dx / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

  GraphicsWindow.DrawEllipse(_x1 - _d / 2, _y1 - _d / 2, _d, _d)

  _x2 = x + (dy / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

  _y2 = y - (dx / 2) * (k * r * Math.Sin(Math.ArcCos(1 / k))) / r

  GraphicsWindow.DrawEllipse(_x2 - _d / 2, _y2 - _d / 2, _d, _d)

  GraphicsWindow.BrushColor = "Black"

  cboxLarge = LDControls.AddCheckBox("large-arc-flag")

  Shapes.Move(cboxLarge, 20, 20)

  cboxSweep = LDControls.AddCheckBox("sweep-flag")

  Shapes.Move(cboxSweep, 20, 50)

  LDControls.CheckBoxChanged = OnCheckBoxChanged

EndSub



Sub OnCheckBoxChanged

  checkBoxChanged = "True"

EndSub



Sub RemoveArc

  For nShp = nShp To 1 Step -1

    Shapes.Remove(shp[nShp])

    shp[nShp] = ""

  EndFor

EndSub



Sub ShowArc

  GraphicsWindow.PenColor = "Red"

  GraphicsWindow.PenWidth = 4

  DrawArc()

  DrawPoints()

EndSub



Sub GW_DrawGrid

  ' GraphicsWindow | draw grid

  _gw = GraphicsWindow.Width

  _gh = GraphicsWindow.Height

  _c100 = "#66009999"

  _c10 = "#33009999"

  For _x = 0 To _gw Step 10

    If Math.Remainder(_x, 100) = 0 Then

      GraphicsWindow.PenColor = _c100 

    Else

      GraphicsWindow.PenColor = _c10

    EndIf

    GraphicsWindow.DrawLine(_x, 0, _x, _gh)

  EndFor

  For _y = 0 To _gh Step 10

    If Math.Remainder(_y, 100) = 0 Then

      GraphicsWindow.PenColor = _c100

    Else

      GraphicsWindow.PenColor = _c10

    EndIf

    GraphicsWindow.DrawLine(0, _y, _gw, _y)

  EndFor

EndSub



Sub Math_CartesianToPolar

  ' Math | convert Cartesian coodinate to polar coordinate

  ' param x, y - Cartesian coordinate

  ' return r, a - polar Coordinate (0<=a<360)

  r = Math.SquareRoot(x * x + y * y)

  If x = 0 And y > 0 Then

    a = 90 ' [degree]

  ElseIf x = 0 And y < 0 Then

    a = -90

  ElseIf x = 0 And y = 0 Then

    a = 0

  Else

    a = Math.ArcTan(y / x) * 180 / Math.Pi

  EndIf

  ' at this point -90<=a<=90

  If x < 0 Then

    a = a + 180

  ElseIf x >= 0 And y < 0 Then

    a = a + 360

  EndIf

  ' at this point 0<=a<360

EndSub


