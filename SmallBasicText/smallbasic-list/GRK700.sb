Rec = Shapes.AddRectangle(120,30)
Shapes.Move(Rec,200,300)
LDPhysics.AddMovingShape(Rec,0.5,0.5,0.5)

Rec2 = Shapes.AddRectangle(120,30)
Shapes.Move(Rec2,350,300)
LDPhysics.AddMovingShape(Rec2,0.5,0.5,0.5)

Ball = Shapes.AddEllipse(20,20)
Shapes.Move(Ball,255,5)
LDPhysics.AddMovingShape(Ball,0.5,0.5,7)

Ball2 = Shapes.AddEllipse(20,20)
Shapes.Move(Ball2,405,5)
LDPhysics.AddMovingShape(Ball2,0.5,0.5,7)

Anc = LDPhysics.AddFixedAnchor(255,10)
Anc2 = LDPhysics.AddFixedAnchor(470,315)

Joint = LDPhysics.AttachShapesWithJoint(Rec,Anc,"Prismatic_V","False","")
Joint2 = LDPhysics.AttachShapesWithJoint(Anc2,Rec2,"Revolute","False","")

GraphicsWindow.MouseDown = Mouse
GraphicsWindow.MouseUp = MouseUp

While 1 = 1
  Program.Delay(10)
  LDPhysics.DoTimestep()
  Pos = LDPhysics.GetPosition(Rec)
  Vel = LDPhysics.GetVelocity(Rec)
  pjt = Pos[2] - 300
  pjs = Vel[2]
  If (pjt * 100) + (pjs * 10) < 0 Then
    Sine = -1
  Else
    Sine = 1
  EndIf
  LDPhysics.SetJointMotor(Joint,1000*Sine,Math.abs((pjt * 100) + (pjs * 10)))
  
  rja = LDPhysics.GetAngle(Rec2)
  rjs = LDPhysics.GetRotation(Rec2)
  If (rja * 5000) + (rjs * 100) < 0 Then
    Sine = 1
  Else
    Sine = -1
  EndIf
  LDPhysics.SetJointMotor(Joint2,1000*Sine,Math.abs((rja * 5000) + (rjs * 100)))
EndWhile

Sub Mouse
  Shape = LDShapes.GetAllShapesAt(GraphicsWindow.MouseX,GraphicsWindow.MouseY)
  MJoint = LDPhysics.AttachShapesWithJoint(Shape[1],Shape[1],"Mouse","False","")
EndSub

Sub MouseUp
  LDPhysics.DetachJoint(MJoint)
EndSub
