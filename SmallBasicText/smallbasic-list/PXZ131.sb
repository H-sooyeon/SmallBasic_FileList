'Seive of Eratosthenes

'Written by Ed Dunaway

'Very slightly modified by Stendec, 4/4/09

'****************************************************************

' This program shows a graphical representation of the Seive of Eratosthenes

'method of finding prime numbers. Each integer is represented as 1 pixel. 

'As the algorithm eliminates a number as not a Prime, it's representative 

'pixel is set to black. The top row represents 0 - 399, the next row is 400 -799

'and so forth.



'It is actually a very fast, but very memory intensive way of finding all 

'prime numbers from 2 to N. 



'The Seive works by starting with 2, the lowest prime number, 

'and then eliminating all multiples of 2 from the list. Then you go to the 

'next lowest prime remaining (which would be 3, and repeat, eliminating 

'all multiples of three.



' After each loop, the next lowest number will be a prime number 

'and you eliminate all multiples of that number. 



'Continue until you get to the square root of N, after which your list 

'will only contain Prime Numbers.



'On a side note, this takes about 2 and a half minutes to finish on 

'my computer. This is due to all the graphics. The same algorithm

'without the graphical representation can find and print all primes

'from 2 to 120,000 in just 8 seconds.

'****************************************************************

screenWidth = 400

screenHeight = 400



GraphicsWindow.Width = screenWidth

GraphicsWindow.Height = screenHeight

GraphicsWindow.BackgroundColor = "White"



'Set N = width * (height - 100) ( bottom 100 pixels reserved for text)

N = screenWidth * (screenHeight - 100)



'Get Starting time in Minutes and Seconds'

minute = Clock.Minute

second = Clock.Second



'Set Array prime[0] and  prime[1] to 0. 0 and 1 are not prime by definition.'



Array.SetValue("prime",0,0)

GraphicsWindow.SetPixel(0,0,"Black")

Array.SetValue("prime",1,0)

GraphicsWindow.SetPixel(1,0,"Black")



'Initialize all the rest of the numbers to -1. If they are still -1 at the end,

'then they are Prime numbers.

for i=2 to N

  Array.SetValue("prime",i,-1)

EndFor

'The heart of the Seive. Checks all numbers from 2 to the Square Root of  N.

for i=2 to Math.SquareRoot(N)

'erase text area

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FillRectangle(5,325,350,25)

  GraphicsWindow.BrushColor = "Black"

   

'show which number we are removing multiples of

   GraphicsWindow.DrawText(5,325,"Removing Multiples of " + i)

   

   isPrime = Array.GetValue("prime",i)

   

' i at this point is the lowest Prime number left in the Array.

  if isPrime = -1 then

  

' we start eliminating multiples of i at i*i since any non-Prime number smaller

' than that has already been eliminated.

    for k=i*i to N step i



      If(Array.GetValue("prime",k) = -1) Then 'Test added, Stendec

'eliminate k from the list since it is a multiple of i.

        Array.SetValue("prime",k,0)



'get x and y values to eliminate graphically

        y = Math.Floor(k/screenWidth)

        x = Math.Remainder(k,screenWidth)

        'GraphicsWindow.SetPixel(x,y,"Black")

        GraphicsWindow.FillRectangle(x,y,1,1) 'Drawing method changed, Stendec

      EndIf      

    EndFor

  EndIf

EndFor



'Get ending time for time elapsed calculation

minute = Clock.Minute - minute

second = Clock.Second - second

time = 60 * minute + second



'erase text area

GraphicsWindow.BrushColor = "White"

GraphicsWindow.FillRectangle(5,325,350,25)

GraphicsWindow.BrushColor = "Black"



'write out elapsed time.

GraphicsWindow.DrawText(5,325,"Done!!!  " + time + "seconds")



'*****************************************************




