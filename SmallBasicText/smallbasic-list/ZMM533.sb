GraphicsWindow.Left = 0
GraphicsWindow.Top = 1
'
gwWidth = 1660
gwHeight = 1000
GraphicsWindow.Width = gwWidth
GraphicsWindow.Height = gwHeight
GraphicsWindow.BackgroundColor = "black"
GraphicsWindow.Show()
TextWindow.Top = 690
TextWindow.Left = 10
TextWindow.Show()

xO = gwWidth/2
yO = 200 'zero hozontal reference line


'Populate array
'oX is octave. then note. then length. or vice versa 
'E PHRYGIAN MINOR
'
note[1] = "o1 c8"
note[2] = "o1 d9" 
'
note[3] = "o1 e8"
note[4] = "o1 f8"
note[5] = "o1 g8"
note[6] = "o1 a8"
note[7] = "o1 b8"
note[8] = "o2 c8"
note[9] = "o2 d9"
'
note[10] = "o2 e8"
note[11] = "o2 f8"
note[12] = "o2 g8"
note[13] = "o2 a8"
note[14] = "o2 b8"
note[15] = "o3 c8"
note[16] = "o3 d8"
'
note[17] = "o3 e8"
note[18] = "o3 f8"
note[19] = "o3 g8"
note[20] = "o3 a8"
note[21] = "o3 b8"
note[22] = "o4 c8"
note[23] = "o4 d8"
'
note[24] = "o4 e8"
note[25] = "o4 f8"
note[26] = "o4 g8"
note[27] = "o4 a8"
note[28] = "o4 b8"
note[29] = "o5 c8"
note[30] = "o5 d8"
'
note[31] = "o5 e8"
note[32] = "o5 f8"
note[33] = "o5 g8"
note[34] = "o5 a8"
note[35] = "o5 b8"
note[36] = "o6 c8"
note[37] = "o6 d8"
'
note[38] = "o6 e8"
note[39] = "o6 f8"
note[40] = "o6 g8"
note[41] = "o6 a8"
note[42] = "o6 b8"
note[43] = "o7 c8"
note[44] = "o7 d8"
'
note[45] = "o7 e8"
note[46] = "o7 f8"
note[47] = "o7 g8"
note[48] = "o7 a8"
note[49] = "o7 b8"
note[50] = "o8 c8"
note[51] = "o8 d8"
'
note[52] = "o8 e8"
note[53] = "o8 f8"
note[54] = "o8 g8"
note[55] = "o8 a8"
note[56] = "o8 b8"

cnote[1] = "o1l64c"
cnote[2] = "o1l64d" 
'
cnote[3] = "o1l64e"
cnote[4] = "o1l64f"
cnote[5] = "o1l64g"
cnote[6] = "o1l64a"
cnote[7] = "o1l64b"
cnote[8] = "o2l64c"
cnote[9] = "o2l64d"
'
cnote[10] = "o2l64e"
cnote[11] = "o2l64f"
cnote[12] = "o2l64g"
cnote[13] = "o2l64a"
cnote[14] = "o2l64b"
cnote[15] = "o3l64c"
cnote[16] = "o3l64d"
'
cnote[17] = "o3l64e"
cnote[18] = "o3l64f"
cnote[19] = "o3l64g"
cnote[20] = "o3l64a"
cnote[21] = "o3l64b"
cnote[22] = "o4l64c"
cnote[23] = "o4l64d"
'
cnote[24] = "o4l64e"
cnote[25] = "o4l64f"
cnote[26] = "o4l64g"
cnote[27] = "o4l64a"
cnote[28] = "o4l64b"
cnote[29] = "o5l64c"
cnote[30] = "o5l64d"
'
cnote[31] = "o5l64e"
cnote[32] = "o5l64f"
cnote[33] = "o5l64g"
cnote[34] = "o5l64a"
cnote[35] = "o5l64b"
cnote[36] = "o6l64c"
cnote[37] = "o6l64d"
'
cnote[38] = "o6l64e"
cnote[39] = "o6l64f"
cnote[40] = "o6l64g"
cnote[41] = "o6l64a"
cnote[42] = "o6l64b"
cnote[43] = "o7l64c"
cnote[44] = "o7l64d"
'
cnote[45] = "o7l64e"
cnote[46] = "o7l64f"
cnote[47] = "o7l64g"
cnote[48] = "o7l64a"
cnote[49] = "o7l64b"
cnote[50] = "o8l64c"
cnote[51] = "o8l64d"
'
cnote[52] = "o8l64e"
cnote[53] = "o8l64f"
cnote[54] = "o8l64g"
cnote[55] = "o8l64a"
cnote[56] = "o8l64b"

samplestart = 1' * gwWidth
screens = 3
For repeat = 1 To screens 'screens of screenwidth (gwWidth)
  GraphicsWindow.Clear()' clears previous screen
  'For line = 1 to gwWidth step 2 'redraws reference lines  100, 200 below zero fef line to show roughly j iterations (100 line) before rejection and qty of consecutive non primes 200 line)
    'GraphicsWindow.SetPixel(line, yO, "gray")
    'GraphicsWindow.SetPixel(line, yO + 400, "gray")
  'Endfor ' finish drawing reference lines
  sample = samplestart + ((gwWidth * repeat) - gwWidth) ' sample is variable placeholder of actual number to test. sample is incremented by 1 before each screen
  sampleend = sample + gwWidth 'last sample for current screen. Text info only
  GraphicsWindow.BrushColor = "white"
  GraphicsWindow.DrawText(10,6, "This range " + (sample+1) + " to " + sampleend) ' display sample range for current screen
  GraphicsWindow.DrawText(10,20, "Current screen " + repeat + "  of  " + screens) ' display  current screen count
  'GraphicsWindow.DrawText(10,34, "Screens to run " + (screens - repeat)) 'display total screens to generate
  
  countnp = 0
  countp = 0
  oldcountnp = 0
  j = 0

For x = 1 to gwWidth Step 1 ' number sequence across screen
  sample = sample + 1 'increment number to test.
  isPrime = "true" ' set to true before test. if sample is non prime, sub will jump out with value of false
  PrimeCheck() 'sub to test sample
'Program.Delay(1000)
If isPrime = "false" Then ' not prime, do stuff
  countnp = countnp + 1 ' count consecutive non primes . Key data item!
  npcol = "blue" 'iterations as blue
    For dot = yO To yO + (j*2) Step 1 'if non prime, shows qty of (j) iterations downscreen as pixels. needs scaling
      If dot = yO + (j*2) then
        npcol = "white" 'last iteration, (j) as white
      EndIf
      GraphicsWindow.SetPixel(x, dot, npcol)
    EndFor
       TextWindow.Write(" " + j)
       n = 56 - Math.Ceiling(j/1) 'each unit below 56 lowers range of notes. if j > 56 then silence
       If n <  56 Then
       Sound.PlayMusic (note[n])
      EndIf
        Program.Delay(20)
      
Else 'prime, do other stuff
  npcol = "green"
  For dot = yO + 300 to (yO + 300) + (countnp * 4)
      If dot = (yO + 300) + (countnp * 4) then
        npcol = "white" 'last dot (countnp) as white
      EndIf 
  GraphicsWindow.SetPixel(x, dot, npcol)' plot consecutive non prime qty
  EndFor
  n = 35 - countnp ' both n values must be linked to retain harmony
  If countnp > 7 Then
    Sound.PlayMusic(cnote[n + 5])'  far primes as low chords = 5th, or  3rd, 
    Sound.PlayMusic(note[n])
  else
    Sound.PlayMusic (cnote[n +5 ] + note[n + 10])' close primes as high chords = eg 5th plus octave 3rd
  EndIf
  Program.Delay(20)
  countnp = 0 'on positive result for prime, reset consecutive non prime counter
    TextWindow.Write(" P" + sample)
    For dot = yO - 140 To yO - 150 Step -1  ' draw bar to show prime. height is constant & irrelavent 
      GraphicsWindow.SetPixel(x, dot, "yellow")
    EndFor  'finish drawing prime bar
    
EndIf  'end of prime/non prime actions
      
Endfor 'end of screen width

Endfor 'repeat with next screenwidth

GraphicsWindow.DrawText(10,48, "Done") 'check screen sequence ended and displays confirmation

Sub PrimeCheck 'test for prime. sets isPrime to true or false and sets value of j
  For j = 2 To Math.SquareRoot(sample)
    test = (Math.Remainder(sample, j))
      If (test = 0) Then
      isPrime = "false"
      Goto EndLoop
      EndIf
  Endfor 'isPrime = true
    EndLoop:'isPrime = false
EndSub
