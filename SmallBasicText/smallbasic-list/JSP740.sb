Ball_Amount = 2

Ball_Radius = 25

Ball_Diameter = Ball_Radius * 2

Game_Width = 600

Game_Height = 600



GraphicsWindow.Width = Game_Width

GraphicsWindow.Height = Game_Height

GraphicsWindow.BackgroundColor = "Black"

GraphicsWindow.PenWidth = 0



For i = 1 To Ball_Amount

  GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

  Ball[i] = Shapes.AddEllipse(Ball_Diameter,Ball_Diameter)

  Ball_X[i] = Math.GetRandomNumber(Game_Width - Ball_Diameter) + Ball_Radius

  Ball_Y[i] = Math.GetRandomNumber(Game_Height - Ball_Diameter) + Ball_Radius

  Ball_WX[i] = Math.GetRandomNumber(50)*2 - 50

  Ball_WY[i] = Math.GetRandomNumber(50)*2 - 50

endfor





While "True"

  Mouse_X = GraphicsWindow.MouseX

  Mouse_Y = GraphicsWindow.MouseX

  

  If Mouse.IsLeftButtonDown Then

    Ball_WX[1] = Ball_WX[1] + 0.2

  endif

  If Mouse.IsRightButtonDown Then

    Ball_WX[1] = Ball_WX[1] - 0.2

  endif

  

  CheckCollisions()

  

  Program.Delay(15)

endwhile





Sub CheckCollisions

  For i = 1 To Ball_Amount

    For j = i+1 to Ball_Amount

      

      Distance_X = math.Abs(Ball_X[i] - Ball_X[j])

      Distance_Y = Ball_Y[i] - Ball_Y[j]

      Distance_XY = Math.SquareRoot(Distance_X * Distance_X + Distance_Y * Distance_Y)

      

      If Distance_XY = 0 Then

        Distance_XY = 1

      endif 

      

      If Distance_XY <= Ball_Diameter Then

        

        Ball_WX[i] = (((Ball_X[i] - Ball_X[j])/Ball_Diameter)*(Ball_Diameter-Distance_X)) 'Ball_Diameter-Distance_X <- Because of this a value is higher when the

        Ball_WX[j] = (((Ball_X[j] - Ball_X[i])/Ball_Diameter)*(Ball_Diameter-Distance_X)) ' distance is smaller, when the distance is bigger, the value gets lower.

        

      EndIf

      

    endfor

    

    if Ball_X[i] < Mouse_X Then

      Ball_WX[i] = Ball_WX[i] + 0.1

    ElseIf Ball_X[i] > Mouse_X Then

      Ball_WX[i] = Ball_WX[i] - 0.1

    endif

    Ball_WY[i] = Ball_WY[i] + 1

    Ball_X[i] = Ball_X[i] + Ball_WX[i]

    Ball_Y[i] = Ball_Y[i] + Ball_WY[i]

    

    Bounce()

    

    Shapes.Move(Ball[i],Ball_X[i]-Ball_Radius,Ball_Y[i]-Ball_Radius)

  EndFor

endsub



Sub Bounce

  Ball_WX[i] = Ball_WX[i]*0.99

  If Ball_X[i] > Game_Width - Ball_Radius Then

    Ball_WX[i] = 0

    Ball_X[i] = Game_Width - Ball_Radius

  ElseIf Ball_X[i] < Ball_Radius Then

    Ball_X[i] = Ball_Radius

    Ball_WX[i] = 0

  endif

  

  If Ball_Y[i] > Game_Height - Ball_Radius Then

    Ball_Y[i] = Game_Height - Ball_Radius

    Ball_WY[i] = 0

  ElseIf Ball_Y[i] < Ball_Radius Then

    Ball_Y[i] = Ball_Radius

    Ball_WY[i] = 0

  endif

EndSub






