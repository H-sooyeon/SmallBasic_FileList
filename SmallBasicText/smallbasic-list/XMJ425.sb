/* 

  For SmallBasic Version 1.1

  Extension: SBExtra.cs - Extension with alternatives to Data/ESL/Fremy/SayPlus extension methods for SB 1.1

  Changelog: 15.06

  Author: Pappa Lapub

  Website: https://social.msdn.microsoft.com/Forums/en-US/1e8c53bb-7974-47ef-9d48-7367931b4fac/small-basic-graphic-and-animations-and-more

  ImportURL: http://smallbasic.com/program/?

  ToDo: FCExtensions.GetAllSubs, SPExtra.SendKeys



================================================================================

::[SBExtraCompile.bat:]



:: ------ SNIP ------

@ECHO OFF

:: ** Following command string has to be a SINGLE line in the bat file !! **

:: ** ALSO adjust all '\Program Files\' paths below to your system 32/64bit !! **

C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\csc.exe /t:library /r:"C:\Program Files\

Microsoft\Small Basic\SmallBasicLibrary.dll" /r:"C:\Program Files\Reference Assemblies\

Microsoft\Framework\.NETFramework\v4.0\PresentationCore.dll" /r:"C:\Program Files\

Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\PresentationFramework.dll" /r:"C:\

Program Files\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\WindowsBase.dll" /r:"C:\

Program Files\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Xaml.dll" /r:"C:\

Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.VisualBasic.dll" /doc:SBExtra.xml SBExtra.cs

:: ------ SNAP -------



*/



using System;

using System.Windows.Forms;										// Is..Pressed, WindowsBase.dll

using System.Windows.Input;										// Is..Down, PresentationCore.dll

using System.Reflection;										// Attributes, Name, Version

using Microsoft.VisualBasic;									// InputBox, Microsoft.VisualBasic.dll

using System.Threading;											// StackTrace

using System.Diagnostics;										// StackTrace

using System.Collections.Generic;								// Dictionary

using SBArry = Microsoft.SmallBasic.Library.Array;				// SBArrays

using Microsoft.SmallBasic.Library;								// SmallBasicLibrary.dll



[assembly:AssemblyProduct("SBTools")]							// ProductName

[assembly:AssemblyTitle("SBExtra")]								// FileDescription

[assembly:AssemblyVersion("1.1.0.1")]							// ProductVersion (+FileVersion)

[assembly:AssemblyCompany("pappalapub")]						// CompanyName

[assembly:AssemblyDescription("SmallBasic Extra Extension")]	// Comments



namespace SBTools

{

	/// <summary>Alternatives to Data/ESL/Fremy/SayPlus extension methods for SB 1.1.

	/// eg. Math/text functions, modifier keys, InputBox, variables.</summary>

	[SmallBasicType]

	public static class SBExtra

	{

		#region MATHS

		// MathPlus.ATan2(x, y)

		/// <summary>Gets the ArcTan2 of a point as rad/degrees (angle to pos. x-axis around origin, 0째=3h) as default or in full circle.</summary>

		/// <param name="x">The X coordinate of the point (-/0/+).</param>

		/// <param name="y">The Y coordinate of the point (-/0/+).</param>

		/// <param name="degree">Output as degrees (else rad)?  "True" or "False" (default).</param>

		/// <param name="circle">Output in the range 0 to 2?/360째 (else default +/-)?  "True" or "False" (default).</param>

		/// <returns>The angle [rad/째] counter clockwise from 0째=3h (0 to ?/180 for +y, -?/-180 to 0 for -y or from 0 to 2?/360).</returns>

		public static Primitive ATan2(Primitive x, Primitive y, Primitive degree, Primitive circle)

		{

			double atn2 = System.Math.Atan2((double)y, (double)x);

			if(degree) atn2 = atn2 * (180.0 / System.Math.PI);

			if(!circle) return atn2;						// default+/- [rad/deg]

			

			if(degree)

			{

				if(atn2 < 0) return atn2 + 360.0;

				else return atn2;							// fullCirc [deg]

			}



			if(atn2 < 0) return atn2 + 2.0 * System.Math.PI;

			return atn2;									// fullCirc [rad]

		}



		// ESLMaths.HexToInteger(hex)

		/// <summary>Converts a hexadecimal string to a decimal integer.</summary>

        /// <param name="hex">The hexadecimal string (eg. "FE").</param>

        /// <returns>The decimal value of the hexadecimal string on success, else "".</returns>

        /// <example>SBExtra.HexToDec("FE") ' 254</example>

        public static Primitive HexToDec(Primitive hex)

        {

            try

            {

				int num = Convert.ToInt32(hex, 16);

				return num;

			}

			catch

			{ return ""; }

        }



        /// <summary>Converts a bool value "True"/"False" to its opposite.</summary>

        /// <param name="value">The bool value to invert ("True" or "False").</param>

        /// <returns>The inverted bool value on success, else "FAILED".</returns>

        /// <example>SBExtra.Not(Text.IsSubText("abc", "b")) ' "False"</example>

        public static Primitive Not(Primitive value)

        {

			bool tmp = false;

			try

			{

				tmp = bool.Parse(value);

				return !tmp;

			}

			catch

			{ return "FAILED"; }

        }



		/// <summary>Rounds a floating-point value to a specified number of fractional digits away from zero.</summary>

		/// <param name="number">A floating-point number to be rounded.</param>

		/// <param name="decimals">The number of fractional digits in the return value or 0.</param>

		/// <returns>The number nearest to value that has a number of fractional digits equal to digits.

		/// If value has less fractional digits than digits, value is returned unchanged.</returns>

		/// <example>RoundTo(2.5, 0)  ' 3

		/// RoundTo(-2.5, 0) ' -3

		/// RoundTo(3.5, 0)  ' 4

		/// RoundTo(-3.5, 0) ' -4</example>

		public static Primitive RoundTo(Primitive number, Primitive decimals)

		{

			return System.Math.Round((double)number, (int)decimals, MidpointRounding.AwayFromZero);

		}



		// MathPlus.Sign(number)

		/// <summary>Gets a value indicating the sign of the given number.</summary>

		/// <param name="number">A signed number.</param>

		/// <returns>A number that indicates the sign of value, as shown in following table:

		/// -1  for value &lt; 0

		///  0  for value = 0

		///  1  for value &gt; 0</returns>

		public static Primitive Sgn(Primitive number)

		{

			return System.Math.Sign(number);

		}



		// ESLMaths.Square(number)

		/// <summary>Gets the square value of a given number.</summary>

		/// <param name="number">The number.</param>

		/// <returns>The square value of the number.</returns>

		public static Primitive Sqr(Primitive number)

		{

			return number * number;

		}



		// MathPlus.ToNumber(string)

		/// <summary>Converts a Primitive (Double/String/DateTime) value to a number, if possible (input is a number).</summary>

		/// <param name="number">The value (string or number) with or w/o "" (quotes are removed).</param>

		/// <returns>The number as Double (-1.8e308 to 1.8e308) on success, else "".</returns>

		public static Primitive ToNumber(Primitive number)

		{

			string val = number;

			val = val.Replace("\"", ""); // ?? .Trim();

			double num = 0.0;

			try

			{ num = System.Convert.ToDouble(val); }

			catch

			{ return ""; }	//?? { return val; }

			return num;

		}

		#endregion





		#region TEXT

		// ESLText.CRLF

		/// <summary>Gets the 'CrLf' character (NewLine, chr(13)+chr(10) for CarriageReturn+LineFeed).</summary>

		/// <example>Text.GetCharacter(13) + TextGetCharacter(10)</example>

		public static Primitive CrLf

		{

			get

			{ return "\n"; }

		}



		// ESLText.Remove(text, offset, length)

		/// <summary>Removes the selected number of characters from a string.</summary>

        /// <param name="text">The string to remove from.</param>

        /// <param name="offset">The index of the character to start from (starts from 1).</param>

        /// <param name="length">The number of characters to remove (0 to text length).</param>

        /// <returns>The resulting string on success, else "FAILED".</returns>

        public static Primitive Remove(Primitive text, Primitive offset, Primitive length)

        {

			string str = text;

			if((int)offset < 1 || (int)length < 0) return "FAILED";

			if(str.Length < offset + length -1) return "FAILED";

            return str.Remove(offset-1, length);

        }

        #endregion





		#region KEYBOARD

		// FCKeyboard.IsAltPressed, .IsControlPressed, .IsShiftPressed

		/// <summary>Gets if the 'Alt' key is pressed ("True" or "False").</summary>

		public static Primitive IsAltPressed

		{

			get

			{

				if(Control.ModifierKeys == Keys.Alt) return true;

				else return false;

			}

		}

		/// <summary>Gets if the 'Ctrl' key is pressed ("True" or "False").</summary>

		public static Primitive IsControlPressed

		{

			get

			{

				if(Control.ModifierKeys == Keys.Control) return true;

				else return false;

			}

		}

		/// <summary>Gets if the 'Shift' key is pressed ("True" or "False").</summary>

		public static Primitive IsShiftPressed

		{

			get

			{

				if(Control.ModifierKeys == Keys.Shift) return true;

				else return false;

			}

		}



		// FCKeyboard.IsAltPressed, .IsControlPressed, .IsShiftPressed

		/// <summary>Gets if the 'Alt' key is pressed ("True" or "False").</summary>

		public static Primitive IsAltDown

		{

			get

			{

				if(Keyboard.Modifiers == ModifierKeys.Alt) return true;

				else return false;

			}

		}

		/// <summary>Gets if the 'Ctrl' key is pressed ("True" or "False").</summary>

		public static Primitive IsControlDown

		{

			get

			{

				if(Keyboard.Modifiers == ModifierKeys.Control) return true;

				else return false;

			}

		}

		/// <summary>Gets if the 'Shift' key is pressed ("True" or "False").</summary>

		public static Primitive IsShiftDown

		{

			get

			{

				if(Keyboard.Modifiers == ModifierKeys.Shift) return true;

				else return false;

			}

		}





		// SPExtra.SendKeys(keys)

		/// <summary>UNSURE WiP  Sends the specified word, phrase, number or character as simulated keyboard press(es) to the current program.</summary>

		/// <param name="keytosend">The key stroke(s) to send.</param>

		/// <returns>The sended keys on success, else "FAILED".</returns>

		/// <example>https://msdn.microsoft.com/en-us/library/System.Windows.Forms.SendKeys.aspx</example>

		public static Primitive SendKeys(Primitive keytosend)

		{

			string str = keytosend.ToString();

			try

			{

				System.Windows.Forms.SendKeys.Send(str);

				return keytosend;

			}

			catch

			{ return "FAILED"; }

		}

		#endregion





		#region DIALOG

		// FCDialogs.AskForTextLine(txt)

		/// <summary>Shows an InputBox (centered on desktop) and waits for user input and apply (OK, Cancel).

		/// Accepts keys "Return" for 'OK' and "Escape" to 'Cancel'.</summary>

		/// <param name="text">The message text to show on the InputBox (max. 1024 characters) or "".</param>

		/// <param name="title">The title for the InputBox or "".</param>

		/// <param name="value">The default return value (on empty input or canceled) or "".</param>

		/// <returns>The entered user input, else default value on empty input or 'Cancel' button pressed. "FAILED" on failue.</returns>

		public static Primitive InputBox(Primitive text, Primitive title, Primitive value)

		{

			try

			{

				string result = Microsoft.VisualBasic.Interaction.InputBox(text, title, value, -1, -1);

				if(string.IsNullOrEmpty(result)) result = value;

				return result;

			}

			catch

			{ return "FAILED"; }

		}

		#endregion





		#region VARIABLES

		// FCExtensions.GetAllVariables()

		/// <summary>Gets names and values of all defined variables in the current program as array.</summary>

		/// <param name="type">The type of the variables to get:

		/// "all","" for all types

		/// "array"  for arrays

		/// "bool"   for True/False

		/// "date"   for date/time

		/// "number" for int, double, ..

		/// "shape"  for Shapes, Control#, Image#, ..

		/// "text"   for text strings, NO number</param>

		/// <returns>All definined variables with value(s) of the given type as array ("v1=val1;v2=val2;..") on success, else "FAILED".</returns>

		/// <example>allVars = SBExtra.GetVariables("")</example>

		public static Primitive GetVariables(Primitive type)

		{

			StackTrace stackTrace = new StackTrace(Thread.CurrentThread, false);

			System.Diagnostics.StackFrame frame = stackTrace.GetFrame(stackTrace.FrameCount - 1);

			MethodBase method = frame.GetMethod();

			Type typ = method.DeclaringType;

			FieldInfo[] fields = typ.GetFields(BindingFlags.Static | BindingFlags.NonPublic);

			Primitive vars = new Primitive();

			string str = type;

			

			switch(str.ToLower())

			{

				case "array":

				{

					string value;

					foreach(FieldInfo field in fields)

					{

						value = field.GetValue(null).ToString();

						if(SBArry.IsArray(value))

							vars[field.Name] = value;

					}

				}

				break;

				

				case "bool":

				{

					foreach(FieldInfo field in fields)

					{

						string value = field.GetValue(null).ToString();

						if(bool.Parse(value))

							vars[field.Name] = value;

					}

				}

				break;

				

				case "date":

				{

					DateTime dt;

					foreach(FieldInfo field in fields)

					{

						var value = field.GetValue(null).ToString();

						if(DateTime.TryParse(value, out dt))

							vars[field.Name] = value;

					}

				}

				break;

				

				case "number":

				{

					double dVal = 0;

					foreach(FieldInfo field in fields)

					{

						var value = field.GetValue(null).ToString();

						if(double.TryParse(value, out dVal))

							vars[field.Name] = value;

					}

				}

				break;

				

				case "shape":

				{

					Type ShapesType = typeof(Shapes);

					Dictionary<string, int> _nameGenerationMap;

					_nameGenerationMap = (Dictionary<string, int>)ShapesType.GetField("_nameGenerationMap", BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.IgnoreCase).GetValue(null);

					int num = 0;

					foreach(FieldInfo field in fields)

					{

						var value = field.GetValue(null).ToString();

						if(_nameGenerationMap.TryGetValue(value, out num))

							vars[field.Name] = value;

					}

				}

				break;

				

				case "text":	// means NOT a number

				{

					double dVal;

					foreach(FieldInfo field in fields)

					{

						var value = field.GetValue(null).ToString();

						if(!double.TryParse(value, out dVal))

							vars[field.Name] = value;

					}

				}

				break;

				

				default:

				{

					foreach(FieldInfo field in fields)

						vars[field.Name] = field.GetValue(null).ToString();

				}

				break;

			}

			return vars;

		}

		

		// FCExtensions.GetAllSubs()

		/// <summary>UNSURE WiP  Gets the names of all defined 'Sub ..' routines in the current program as array.</summary>

		public static Primitive GetAllSubs

		{

			get

			{

				string str = "";

				Primitive subs = new Primitive();

				

				{

					//foreach( in )

						subs[SBArry.GetItemCount(subs) + 1] = str;

				}

				return subs;

			}

		}

		#endregion



	}

 }


