'If line segment x1,y1 to x2,y2 is vertical
'will cause a divide by zero error when
'calculating the slope, so swap the
'points around to avoid the error.
x1=100 
y1=100
x2=150
y2=150
x3=200
y3=100
GraphicsWindow.BackgroundColor="teal
GraphicsWindow.PenColor ="white
GraphicsWindow.BrushColor ="orange
GraphicsWindow.PenWidth =0
s1=Shapes.AddEllipse (14 14)
s2=Shapes.AddEllipse (14 14)
s3=Shapes.AddEllipse (14 14)
LDShapes .SetShapeEvent (s1)
LDShapes .SetShapeEvent (s2)
LDShapes .SetShapeEvent (s3)
LDShapes.ShapeEvent =see
ssh=s1
LDShapes.BrushColour (ssh "red")
GraphicsWindow.MouseDown =mdd
LDShapes.move(s1 30 30)
LDShapes.move(s2 60 30)
LDShapes.move (s3 90 30)
GraphicsWindow.PenWidth =1

GraphicsWindow.KeyDown =kkk

Sub kkk
  If GraphicsWindow.LastKey="F1" Then
    x1= Shapes.GetLeft (s1)+7
    y1= Shapes.GetTop (s1)+7
    x2= Shapes.GetLeft (s2)+7
    y2= Shapes.GetTop (s2)+7
    x3= Shapes.GetLeft (s3)+7
    y3= Shapes.GetTop (s3)+7
    drawcc()
  EndIf 
EndSub 

Sub mdd
  LDShapes.move (ssh GraphicsWindow.MouseX-7 GraphicsWindow.MouseY-7 )
EndSub 

Sub see
  ls= LDShapes.LastEventShape 
  lt= LDShapes.LastEventType 
  If lt="MouseDown" Then
    ssh=ls
    LDShapes.BrushColour (s1 "orange")
    LDShapes.BrushColour (s2 "orange")
    LDShapes.BrushColour (s3 "orange")
    LDShapes.BrushColour (ssh "red")
  EndIf
  
EndSub 
Sub drawcc
  GraphicsWindow.Title ="Circ"
  If x1 = x2 Then
    temp = x2
    x2 = x3
    x3 = temp
    temp = y2
    y2 = y3
    y3 = temp
  EndIf
  'Same goes for these points
  If x2 = x3 Then
    temp = x1
    x1 = x3
    x3 = temp
    temp = y1
    y1 = y3
    y3 = temp
  EndIf
  
  'ma and mb are the slopes of the lines for by x1,y1 to x2,y2
  'and x2,y2 to x3,y3 (respectively)
  ma = (y2-y1)/(x2-x1)
  mb = (y3-y2)/(x3-x2)
  
  If mb - ma = 0.0 Then
    'If all three points are on the same line, can't draw circle
    GraphicsWindow.Title ="Points are coincident, no circle exists!"
  Else
    'Local constants:
    pi2 =2*Math.Pi 
    stepSize = pi2/128.0
    
    'Find center X coord using this formula
    cX = ( (ma*mb*(y1-y3)) + (mb*(x1+x2)) - (ma*(x2+x3)) ) / (2 * (mb-ma))
    
    
    'Find center Y coord using this formula
    cY = (-1.0/ma) * (cX-(x1+x2)/2.0) + ((y1+y2)/2.0)
    
    radius = Math.SquareRoot ( (cX-x1)*(cX-x1) + (cY-y1)*(cY-y1) )
    
    oy=cy
    ox=radius +cx
    For i = stepSize To pi2 Step stepSize
      nX = math.Cos(i)*radius + cX
      nY = math.Sin(i)*radius + cY
      '#g,"Goto ";nX;" ";nY
      GraphicsWindow.DrawLine(ox oy nx ny)
      ox=nx
      oy=ny
    EndFor  
  endif
endsub
