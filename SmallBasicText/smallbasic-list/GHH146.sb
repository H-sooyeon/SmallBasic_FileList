

'TRIANGELdemo

'[1] 452 - pause after first triangle draw

   '[A1] 788 - pause after Aim1

   '[A2] 801  - pause after Aim2

   '[A3]  814 - pause after Aim3

'[2] 885 - pause after drawing aim points just prior to drawing aim triangel

'[3] 900 - pause after drawing Aim Triangle

'[4] 955 - pause adter moving aim points

'[5] 980 - pause after drawing new triangle





FirstAlter=2

SecondAlter=3

ThirdAlter=1



InSizerFirst=3

InSizerSecond=1

InsizerThird=2



EndSizerFirst=1

EndSizerSecond=0

EndSizerThird=0



'OBTUSE

'SelectTriangle="LOS12>23"

'SelectTriangle="LOS12<23"

'SelectTriangle="ROS13>23"

'SelectTriangle="ROS13<23"

'SelectTriangle="CH"

'SelectTriangle="CL"

'SelectTriangle="CL12>23"

'SelectTriangle="CL12<23"'ACUTE

'SelectTriangle="LAS13>23"

'SelectTriangle="LAS13<23"

'SelectTriangle="RAS12>13"

'SelectTriangle="RAS12<13"

'SelectTriangle="CAL12>23"

'SelectTriangle="CAL12<23"



'RAS -- Right Acute

'CAL -- Centered Acute



'SelectTriangle="E"



Swiftness=10



EndAlter=0

AlterRate=10

'DON'T RESET

AlterRate=AlterRate*(.01)

AlterRateOne=0

AlterRateOne=AlterRateOne*(.01)

AlterRateTwo=0

AlterRateTwo=AlterRateTwo*(.01)

e=15

e=e*(.01)

'DON'T RESET

eOne=0

eOne=eOne*(.01)

eTwo=0

eTwo=eTwo*(.01)



ColorOne="Cyan"

ColorTwo="Yellow"

ColorThree="Green"



Loops=1000

            StopLoop=2

            PausePoint=0



'Select Sequence of Point Alteration

  'FirstAlter

  'Second Alter

  'ThirdAlter



'Select Sequence of Inside Resizing

  'InsizerFirst

  'InsizerSecond

  'Insizer'Third



'Select Sequence of Endcycle Resizing

  'EndSizerFirst

  'EndSizerSecond

  'EndSizerThird



'Select Percentage of Alteration

  'AlterRate



'Select Precision of Equilibirum Percentege

  'e



'Don't Change the Following!

  'StopLoop

  'PausePoint'



'END CALIBRATION

'=================================================



'TRIANGEL Aimer

'All Rights Reserved

'Copywrite 2015

'Roger Jacques





'LINE NUMBERS

'Open Textbox @ 118

'ManualTriangle @ 186

'Random @ 206

'Preset Definitions @ 219

'Presets @ 297

'First Calculations @ 477

'Start Program @ 524

'Open Graphics Window @ 555

'Draw Triangle @ 576

'MidEdge Definitions @ 624

'Obtuse Selectors @ 658(removed)

'Acute Selectors @ 792(removed)

'Aim Point Definitions @ 916

'Aim Edge Definitions @ 986 

'Aim Midpoints @ 1005

'Line/Length Definitions @ 1039

'Draw Aim Triangle @ 1078

'AlterPoints @ 1129

'Redefine Points @ 1184

'Redraw Triangle @ 1193

'Internal Resizing @ 1244

'CATCH @ 1326

'Final Resize @ 1360

'End Program @1450

'==Subs===============

'Alter Subs @ 1473

'EndSizer One @ 1523

'EndSizer Two @ 1614

'EndSizer Three @ 1713

'FirstHeader @ 1808

'MidHeader @ 1887

'LasHeader @ 2080

'TextOne @ 2204

'TextTwo @ 2222

'TextThree @ 2246

'TextFour @ 2265

'TextFive @ 2284

'TextSix @ 2302

'====START!====================================

'OPEN TEXTBOX

LineOne:

TextWindow.Title = "TRIANGELS"

TextWindow.Left = 10

TextWindow.Top = 10

TextWindow.BackgroundColor = "Black"

TextWindow.ForegroundColor = "White"



TextWindow.WriteLine("             TRIANGELS")

TextWindow.WriteLine("")

TextWindow.WriteLine("NOTE:  Some irregular triangles take 100 ")

TextWindow.WriteLine("(or more) iterations to achieve equilibrium.")

TextWindow.WriteLine("")

TextWindow.WriteLine("Close this program at any time by tapping")

TextWindow.WriteLine("the 'x' in this window's upper right corner.")

TextWindow.WriteLine("")

TextWindow.WriteLine("Start with [1]")

TextWindow.WriteLine("")

TextWindow.WriteLine("[1] Demo [2] New Triangle [3] Random Runs [4] Preset [5] End  ")

TextWindow.WriteLine("")

TextWindow.Write("Select by [#]: ")

SelectMode=TextWindow.Read()



If SelectMode = 1 Then  

  TextWindow.Clear()

  Runs=2

  Turtle.Speed=10

  SelectTriangle="LAS13<23"

EndIf



If SelectMode = 2 Then

TextWindow.Clear()

Runs=2

Turtle.Speed=10

SelectTriangle=2

EndIf



If SelectMode = 3 Then

  TextWindow.Clear()

TextWindow.WriteLine("A given triangle might take many iterations to normalize.")

TextWindow.WriteLine("")

TextWindow.WriteLine("Tap 'x' in upper right corner to exit.")

TextWindow.WriteLine("")

TextWindow.Write("Number of triangles to run: ")

Runs=TextWindow.Read()

SelectTriangle = 3 

Turtle.Speed=10

EndIf

TextWindow.WriteLine("")

If SelectMode = 4 Then

TextWindow.Clear()

Runs=2

Turtle.Speed=10

SelectTriangle=4

EndIf





If SelectMode = 5 Then

Program.End()

EndIf



'START TRIANGLE SELECTION



For Run = 1 to Runs

R=0

  If Run = Runs Then

    TextWindow.Clear()

    Goto LineOne

  EndIf

  

  

'MANUAL



If SelectTriangle=(2) Then  

  

  TextWindow.WriteLine("Graphics screen is 800 pixels wide, 600 high.")

  TextWindow.WriteLine("")  

  TextWindow.WriteLine("'X' = # of Pixels from Left Edge.")

  TextWindow.WriteLine("'Y' = # of Pixels from Top.")

  TextWindow.WriteLine(" ")

TextWindow.Write("Point1X? ")

Point1X = TextWindow.Read()

TextWindow.Write("Point1Y? ")

Point1Y = TextWindow.Read()

TextWindow.Write("Point2X? ")

Point2X = TextWindow.Read()

TextWindow.Write("Point2Y? ")

Point2Y= TextWindow.Read()

TextWindow.Write("Point3X? ")

Point3X = TextWindow.Read()

TextWindow.Write("Point3Y? ")

Point3Y= TextWindow.Read()



EndIf



'RANDOM



If SelectTriangle=(3) Then

  

Point1X=(Math.GetRandomNumber(400)+200)

Point1Y=(Math.GetRandomNumber(400)+100)

Point2X=(Math.GetRandomNumber(400)+200)

Point2Y=(Math.GetRandomNumber(400)+100)

Point3X=(Math.GetRandomNumber(400)+200)

Point3Y=(Math.GetRandomNumber(400)+100)



EndIf



If SelectTriangle=(4) Then

  

't-------------



'TextWindow.WriteLine("Select a Preset Triangle by [#]")

'TextWindow.WriteLine(" ")



TextWindow.WriteLine("              PRESET TRIANGLES")

TextWindow.WriteLine("")

TextWindow.WriteLine("NOTE:  EP*P* means the edge between those two points.")

TextWindow.WriteLine("")

TextWindow.WriteLine("OBTUSE")

TextWindow.WriteLine("  [1] LOS12>23  Left Obtuse EP1P2 > EP2P3")

TextWindow.WriteLine("  [2] LOS12<23  Left Obtuse EP1P2 < EP2P3")

TextWindow.WriteLine("  [3] ROS13>23  Right Obtuse EP1P3 > EP2P3")

TextWindow.WriteLine("  [4] ROS13<23  Right Obtuse EP1P3 < EP2P3")

TextWindow.WriteLine("  [5] CH  Raised Centered Apex  Equal Sides")

TextWindow.WriteLine("  [6] CL  Lowered Centered Apex Equal Sides")

TextWindow.WriteLine("  [7] CL12>23  Centered/Lowered EP1P2 > EP2P3")

TextWindow.WriteLine("  [8] CL12<23  Centered/Lowered EP1P@ < EP2P3")

TextWindow.WriteLine("ACUTE")

TextWindow.WriteLine("  [9] LAS13>23  Left Acute EP1P3 > EP2P3")

TextWindow.WriteLine(" [10] LAS13<23  Left Acute EP1P3 < EP2P3")

TextWindow.WriteLine(" [11] RAS12>13  Right Acute EP1P2 > EP1P3")

TextWindow.WriteLine(" [12] RAS12<13  Right Acute EP1P2 < EP1P3")

TextWindow.WriteLine(" [13] CAL12>23  Centered Acute EP1P2 > EP2P3")

TextWindow.WriteLine(" [14] CAL12<23  Centered Acute EP1P2 < EP2P3")

TextWindow.WriteLine(" ")

TextWindow.WriteLine(" ")

TextWindow.Write("Select a Preset Triangle by [#]   ")

Preset = TextWindow.Read()



If Preset=1 Then

  SelectTriangle="LOS12>23"

EndIf

If Preset=2 Then

SelectTriangle="LOS12<23"

Endif

If Preset=3 Then

SelectTriangle="ROS13>23"

Endif

If Preset=4 Then

SelectTriangle="ROS13<23"

Endif

If Preset=5 Then

SelectTriangle="CH"

EndIf 

If Preset=6 Then

SelectTriangle="CL"

EndIf

If Preset=7 Then

SelectTriangle="CL12>23"

Endif

If Preset=8 Then

SelectTriangle="CL12<23"'

Endif

If Preset=9 Then

SelectTriangle="LAS13>23"

Endif

If Preset=10 Then

SelectTriangle="LAS13<23"

EndIf

If Preset=11 Then

SelectTriangle="RAS12>13"

Endif

If Preset=12 Then

SelectTriangle="RAS12<13"

Endif

If Preset=13 Then

SelectTriangle="CAL12>23"

Endif

If Preset=14 Then

SelectTriangle="CAL12<23"

EndIf

EndIf



't-------------



'PRESET



If SelectTriangle="E" Then



'Regular

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500





'LEFT OBTUSE

ElseIf SelectTriangle="LOS12>23" Then



'Left Obtuse E12 > E23

Point1X=250

Point1Y=500

Point2X=150

Point2Y=100

Point3X=650

Point3Y=500





ElseIf SelectTriangle="LOS12<23" Then



'Left Obtuse 12 < E23

Point1X=250

Point1Y=500

Point2X=200

Point2Y=300

Point3X=550

Point3Y=500



'RIGHT OBTUSE

ElseIf SelectTriangle="ROS13<23" Then

  

'Right Obtuse E12 < E23

Point1X=250

Point1Y=500

Point2X=550

Point2Y=200

Point3X=450

Point3Y=500





ElseIf SelectTriangle="ROS13>23" Then



'Right Obtuse E13 > E23

Point1X=250

Point1Y=500

Point2X=550

Point2Y=400

Point3X=450

Point3Y=500



'CENTERED OBTUSE

ElseIf SelectTriangle="CH" Then

  

'Centered High

Point1X=300

Point1Y=500

Point2X=400

Point2Y=50

Point3X=550

Point3Y=500



ElseIf SelectTriangle="CL" Then



'Centered Low

Point1X=150

Point1Y=500

Point2X=400

Point2Y=450

Point3X=650

Point3Y=500



ElseIf SelectTriangle="CL12>23" Then



'Centered Low E12 > E23

Point1X=150

Point1Y=500

Point2X=500

Point2Y=450

Point3X=650

Point3Y=500



ElseIf SelectTriangle="CL12<23" Then



'Centered Low E12 < E23

Point1X=150

Point1Y=500

Point2X=300

Point2Y=450

Point3X=650

Point3Y=500



'========End OBTUSE  TRIANGLES==================



'========Start ACUTE  TRIANGLES==================





ElseIf SelectTriangle="E" Then



'Regular

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500



ElseIf SelectTriangle="LAS13>23" Then



'Left Acute 13>23

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=600

Point3Y=400



ElseIf SelectTriangle="LAS13<23" Then



'Left Acute 13<23

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=450

Point3Y=450



ElseIf SelectTriangle="RAS12>13" Then



'Right Acute 12>23

Point1X=300

Point1Y=450

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500



ElseIf SelectTriangle="RAS12<13" Then



'Right Acute 12<13

Point1X=200

Point1Y=400

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500





ElseIf SelectTriangle="CAL12>23" Then



'Right Acute 12>23

Point1X=150

Point1Y=500

Point2X=450

Point2Y=150

Point3X=650

Point3Y=500



ElseIf SelectTriangle="CAL12<23" Then



'Right Acute 12<23 

Point1X=150

Point1Y=500

Point2X=350

Point2Y=200

Point3X=650

Point3Y=500



EndIf





'END TRIANGLE SELECTION





'CALIBRATE ORIGINAL Points, Edges & Centroid



EP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

 EdgeP1P2=Math.SquareRoot(EP1P2)

EdgeP1P2int=(Math.Floor(EdgeP1P2))

EP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

 EdgeP1P3=Math.SquareRoot(EP1P3)

EdgeP1P3int=(Math.Floor(EdgeP1P3))

EP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

 EdgeP2P3=Math.SquareRoot(EP2P3)

EdgeP2P3int=(Math.Floor(EdgeP1P3))



'Start Perimeter

PerimeterBase = EdgeP1P2 + EdgeP1P3 + EdgeP2P3

PerimeterBaseint = (Math.Floor(PerimeterBase))



'Start Edges

StartEdgeP1P2 = EdgeP1P2

StartEdgeP1P2Int=Math.Floor(StartEdgeP1P2)

StartEdgeP1P3 = EdgeP1P3

StartEdgeP1P3Int=Math.Floor(StartEdgeP1P3)

StartEdgeP2P3 = EdgeP2P3

StartEdgeP2P3Int=Math.Floor(StartEdgeP2P3)



'Start Points

StartPoint1X=Point1X

StartPoint1Xint=Math.Floor(Point1X)

StartPoint1Y=Point1Y

StartPoint1Yint=Math.Floor(Point1Y)

StartPoint2X=Point2X

StartPoint2Xint=Math.Floor(Point2X)

StartPoint2Y=Point2Y

StartPoint2Yint=Math.Floor(Point2Y)

StartPoint3X=Point3X

StartPoint3Xint=Math.Floor(Point3X)

StartPoint3Y=Point3Y

StartPoint3Yint=Math.Floor(Point3Y)





'Start Centroid

StartCentroidPX = ((Point1X+Point2X+Point3X)/3)

StartCentroidPXint = (Math.Floor(StartCentroidPX))

StartCentroidPY = ((Point1Y+Point2Y+Point3Y)/3)

StartCentroidPYint = (Math.Floor(StartCentroidPY))



'END CALIBRATE ORIGINAL Points, Edges & Centroid



'==========START PROGRAM============

LoopMarker=1

ReLoop:

For Loop = LoopMarker To Loops

  LoopShapeNumber=LoopShapeNumber+1

  If Loop=1 Then

    StartTime = (Clock.ElapsedMilliseconds)

    StartLoopTime  = StartTime

  EndIf

  

  StartLoopTime = (Clock.ElapsedMilliseconds)

  ElapsedTime = EndLoopTime-StartTime

  ElapsedTimeint = (Math.Floor(ElapsedTime))

  ElapsedLoopTime = EndLoopTime-StartLoopTime

  ElapsedLoopTimeint = (Math.Floor(ElapsedLoopTime))





'CALIBRATE START-LOOP EDGES



EP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

EdgeP1P2=Math.SquareRoot(EP1P2)

EdgeP1P2int=(Math.Floor(EdgeP1P2))

EP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

EdgeP1P3=Math.SquareRoot(EP1P3)

EdgeP1P3int=(Math.Floor(EdgeP1P3))

EP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

EdgeP2P3=Math.SquareRoot(EP2P3)

EdgeP2P3int=(Math.Floor(EdgeP1P3))

Perimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3

Perimeterint = (Math.Floor(PerimeterBase))





'DEFINE GRAPHICS WINDOW



GraphicsWindow.Show()

GraphicsWindow.Clear()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TRIANGEL Demo"

GraphicsWindow.FontSize=3

Turtle.Speed = 10





If Loop=1 Then

  Speed=9

TextOne()

Else

  Speed=10

EndIF



GraphicsWindow.BrushColor="Cyan"

Shapes.AddTriangle(Point1X, Point1Y, Point2X, Point2Y, Point3X, Point3Y)



GraphicsWindow.PenColor="Black"

GraphicsWindow.PenWidth=8

If Loop=1 And Run=1 Then

Turtle.Speed=9

Else

Turtle.Speed=10

Endif

FirstHeader()

Turtle.PenDown()

Turtle.X=(Point1X)

Turtle.Y=(Point1y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)

GraphicsWindow.PenColor="Black"

GraphicsWindow.PenWidth=3





'[1] Pause after First Triangle Draw

If Loop=1 And Run=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

Endif



Turtle.PenUp()

Turtle.Speed=10



'GraphicsWindow.Clear()

Shapes.HideShape(ShapeTRIANGELOne)



If Loop=1 And Run=1 Then

  Speed=10

TextTwo()

Else

  Speed=10

EndIF



'====FIRST HEADER=====

FirstHeader()

'====================



'Start MidEdge Definitions



Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.PenUp()

Turtle.MoveTo(Point2X, Point2Y)

Turtle.Turn(180)

Turtle.Move((EdgeP1P2/2))

  MidEP1P2X=(Turtle.X)

  MidEP1P2Y=(Turtle.Y)

MidEP1P2Xint=Math.Floor(MidEP1P2X)

MidEP1P2Yint=Math.Floor(MidEP1P2Y)



Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(180)

Turtle.Move((EdgeP1P3/2))

  MidEP1P3X=(Turtle.X)

  MidEP1P3Y=(Turtle.Y)

MidEP1P3Xint=Math.Floor(MidEP1P3X)

MidEP1P3Yint=Math.Floor(MidEP1P3Y)



Turtle.X=(Point2X)

Turtle.Y=(Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(180)

Turtle.Move((EdgeP2P3/2))

  MidEP2P3X=(Turtle.X)

  MidEP2P3Y=(Turtle.Y)

MidEP2P3Xint=Math.Floor(MidEP2P3X)

MidEP1P2Yint=Math.Floor(MidEP2P3Y)

Turtle.PenDown()

'Change speed after midpoints'

Turtle.Speed=10



'End MidEdge Definitions





'Start Aim Point Definitions



Turtle.PenUp()

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y) 

Turtle.PenDown()



If Loop=1 And Run=1 Then

Turtle.Speed=9

GraphicsWindow.Clear()



GraphicsWindow.BrushColor="Cyan"

Shapes.AddTriangle(Point1X, Point1Y, Point2X, Point2Y, Point3X, Point3Y)



Else

Turtle.Speed=10

EndIf



' (1)23



Turtle.X=(Point2X)

Turtle.Y=(Point2y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(-120)

Turtle.Move(EdgeP2P3)

AimPointLeft1X=Turtle.X

AimPointLeft1Y=Turtle.Y

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(120)

Turtle.Move(EdgeP2P3)

AimPointRight1X=Turtle.X

AimPointRight1Y=Turtle.Y

Turtle.MoveTo(Point2X, Point2Y)



'[A1] Stop at P1 Aim

'TextWindow.Pause()



'1(2)3



Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(-120)

Turtle.Move(EdgeP1P3)

AimPointLeft2X=Turtle.X

AimPointLeft2Y=Turtle.Y

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(120)

Turtle.Move(EdgeP1P3)

AimPointRight2X=Turtle.X

AimPointRight2Y=Turtle.Y

Turtle.MoveTo(Point1X, Point1Y)



'[A2] Stop at P2 Aim

'TextWindow.Pause()



'12(3)

  

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.Turn(-120)

Turtle.Move(EdgeP1P2)

AimPointLeft3X=Turtle.X

AimPointLeft3Y=Turtle.Y

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.Turn(120)

Turtle.Move(EdgeP1P2)

AimPointRight3X=Turtle.X

AimPointRight3Y=Turtle.Y

Turtle.MoveTo(Point1X, Point1Y)



AimHeader()



'Start TargetPoint Edge Definitions

If  Loop=1 And Run=1 Then

Turtle.MoveTo(Point1X, Point1Y)

't--------

TextWindow.Pause()

TextWindow.Clear()

Shapes.HideShape(ShapeTriangelTwo1)

Shapes.HideShape(ShapeTriangelTwo2)

Shapes.HideShape(ShapeTriangelTwo3)



TextThreeX()



Endif



Turtle.Speed=9

GraphicsWindow.PenColor="Yellow"

'Turtle.MoveTo(AimPoint1X, AimPoint1Y)

Turtle.X=AimPointLeft1X

Turtle.Y=AimPointLeft1Y

Turtle.MoveTo(Point1X, Point1Y)

Turtle.Turn(180)

GraphicsWindow.PenWidth="15"

GraphicsWindow.PenColor="Purple"

Turtle.Move((EdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

TargetLeft1X=Turtle.X

TargetLeft1Y=Turtle.Y



GraphicsWindow.PenWidth="3"

GraphicsWindow.PenColor="Yellow"

Turtle.X=AimPointRight1X

Turtle.Y=AimPointRight1Y

Turtle.MoveTo(Point1X, Point1Y)

Turtle.Turn(180)

GraphicsWindow.PenWidth="15"

GraphicsWindow.PenColor="Purple"

Turtle.Move((EdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

TargetRight1X=Turtle.X

TargetRight1Y=Turtle.Y

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)



GraphicsWindow.PenWidth="3"

GraphicsWindow.PenColor="Yellow"

'Turtle.X=AimPointLeft2X

'Turtle.Y=AimPointLeft2Y

Turtle.MoveTo(Point2X, Point2Y)

Turtle.Turn(180)

GraphicsWindow.PenWidth="15"

GraphicsWindow.PenColor="Purple"

Turtle.Move((EdgeP1P3*AlterRate)*((EdgeP1P2+EdgeP2P3)/Perimeter))

TargetLeft2X=Turtle.X

TargetLeft2Y=Turtle.Y



GraphicsWindow.PenWidth="3"

GraphicsWindow.PenColor="Yellow"

Turtle.X=AimPointRight2X

Turtle.Y=AimPointRight2Y

Turtle.MoveTo(Point2X, Point2Y)

Turtle.Turn(180)

GraphicsWindow.PenWidth="15"

GraphicsWindow.PenColor="Purple"

Turtle.Move((EdgeP1P3*AlterRate)*((EdgeP1P2+EdgeP2P3)/Perimeter))

TargetRight2X=Turtle.X

TargetRight2Y=Turtle.Y



GraphicsWindow.PenWidth="3"

GraphicsWindow.PenColor="Yellow"

Turtle.X=AimPointLeft3X

Turtle.Y=AimPointLeft3Y

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(180)

GraphicsWindow.PenWidth="15"

GraphicsWindow.PenColor="Purple"

Turtle.Move((EdgeP1P2*AlterRate)*((EdgeP1P3+EdgeP2P3)/Perimeter))

TargetLeft3X=Turtle.X

TargetLeft3Y=Turtle.Y



GraphicsWindow.PenWidth="3"

GraphicsWindow.PenColor="Yellow""

Turtle.X=AimPointRight3X

Turtle.Y=AimPointRight3Y

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(180)

GraphicsWindow.PenWidth="15"

GraphicsWindow.PenColor="Purple"

Turtle.Move((EdgeP1P2*AlterRate)*((EdgeP1P3+EdgeP2P3)/Perimeter))

TargetRight3X=Turtle.X

TargetRight3Y=Turtle.Y



'Start Target Edge Definitions



TLeftEP1P2=((TargetLeft1X-Point1X)*(TargetLeft1X-Point1X))+((TargetLeft2Y-Point2Y)*(TargetLeft2Y-Point2Y))

TargetLeftEP1P2=Math.SquareRoot(TLeftEP1P2)

TRightEP1P2=((TargetRight1X-Point1X)*(TargetRight1X-Point1X))+((TargetRight2Y-Point2Y)*(TargetRight2Y-Point2Y))

TargetRightEP1P2=Math.SquareRoot(TRightEP1P2)



LeftEP1P3=((AimPointLeft1X-StartCentroidPX)*(AimPointLeft1X-StartCentroidPX))+((AimPointLeft3Y-StartCentroidPY)*(AimPointLeft3Y-StartCentroidPY))

AimLeftEP1P3=Math.SquareRoot(LeftEP1P3)

RightEP1P3=((AimPointRight1X-StartCentroidPX)*(AimPointRight1X-StartCentroidPX))+((AimPointRight3Y-StartCentroidPY)*(AimPointRight3Y-StartCentroidPY))

AimRightEP1P3=Math.SquareRoot(RightEP1P3)



TLeftEP1P3=((TargetLeft1X-Point1X)*(TargetLeft1X-Point1X))+((TargetLeft3Y-Point3Y)*(TargetLeft3Y-Point3Y))

TargetLeftEP1P3=Math.SquareRoot(TLeftEP1P3)

TRightEP1P3=((TargetRight1X-Point1X)*(TargetRight1X-Point1X))+((TargetRight3Y-Point3Y)*(TargetRight3Y-Point3Y))

TargetRightEP1P3=Math.SquareRoot(TRightEP1P3)





LeftEP2P3=((AimPointLeft2X-StartCentroidPX)*(AimPointLeft2X-StartCentroidPX))+((AimPointLeft3Y-StartCentroidPY)*(AimPointLeft3Y-StartCentroidPY))

AimLeftEP2P3=Math.SquareRoot(LeftEP2P3)

RightEP2P3=((AimPointRight2X-StartCentroidPX)*(AimPointRight2X-StartCentroidPX))+((AimPointRight3Y-StartCentroidPY)*(AimPointRight3Y-StartCentroidPY))

AimRightEP2P3=Math.SquareRoot(RightEP2P3)



TLeftEP2P3=((TargetLeft2X-Point2X)*(TargetLeft2X-Point2X))+((TargetLeft3Y-Point3Y)*(TargetLeft3Y-Point3Y))

TargetLeftEP2P3=Math.SquareRoot(TLeftEP2P3)

TRightEP2P3=((TargetRight2X-Point2X)*(TargetRight2X-Point2X))+((TargetRight3Y-Point3Y)*(TargetRight3Y-Point3Y))

TargetLeftEP2P3=Math.SquareRoot(TLeftEP2P3)





If (((TLeftEP1P2)+(TLeftEP2P3))/3) > (EdgeP1P3) then

AimPoint2X=TargetLeft2X

AimPoint2Y=TargetLeft2Y

else

AimPoint2X=TargetRight2X

AimPoint2Y=TargetRight2Y

EndIf



If (((TLeftEP1P2)+(TLeftEP1P3))/3) > (EdgeP2P3) then

AimPoint1X=TargetLeft1X

AimPoint1Y=TargetLeft1Y

else

AimPoint1X=TargetRight1X

AimPoint1Y=TargetRight1Y

EndIf



If (((TLeftEP1P3)+(TLeftEP2P3))/3) > (EdgeP1P2) then

AimPoint3X=TargetLeft3X

AimPoint3Y=TargetLeft3Y

else

AimPoint3X=TargetRight3X

AimPoint3Y=TargetRight3Y

EndIf



'End Aim Point Definitions





''Start Aim Edge Definitions

Turtle.PenUp()

AimEP1P2=((AimPoint2X-AimPoint1X)*(AimPoint2X-AimPoint1X))+((AimPoint2Y-AimPoint1Y)*(AimPoint2Y-AimPoint1Y))

AimEdgeP1P2=Math.SquareRoot(AimEP1P2)

AimEdgeP1P2int=(Math.Floor(AimEdgeP1P2))



AimEP1P3=((AimPoint3X-AimPoint1X)*(AimPoint3X-AimPoint1X))+((AimPoint3Y-AimPoint1Y)*(AimPoint3Y-AimPoint1Y))

AimEdgeP1P3=Math.SquareRoot(AimEP1P3)

AimEdgeP1P3int=(Math.Floor(AimEdgeP1P3))



AimEP2P3=((AimPoint3X-AimPoint2X)*(AimPoint3X-AimPoint2X))+((AimPoint3Y-AimPoint2Y)*(AimPoint3Y-AimPoint2Y))

AimEdgeP2P3=Math.SquareRoot(AimEP2P3)

AimEdgeP2P3int=(Math.Floor(AimEdgeP1P3))



AimPerimeter = AimEdgeP1P2 + AimEdgeP1P3 + AimEdgeP2P3

AimPerimeterint = (Math.Floor(AimPerimeter))



'End Aim Edge Definitions



'Start Aim Edge Midpoint Definitions

Turtle.Speed=10

Turtle.X=(AimPoint1X)

Turtle.Y=(AimPoint1Y)

Turtle.MoveTo(AimPoint2X, AimPoint2Y)

Turtle.Turn(180)

Turtle.Move((AimEdgeP1P2/2))

  MidAimEP1P2X=(Turtle.X)

  MidAimEP1P2Y=(Turtle.Y)

MidAimEP1P2Xint=Math.Floor(MidAimEP1P2X)

MidAimEP1P2Yint=Math.Floor(MidAimEP1P2Y)



Turtle.X=(AimPoint1X)

Turtle.Y=(AimPoint1Y)

Turtle.MoveTo(AimPoint3X, AimPoint3Y)

Turtle.Turn(180)

Turtle.Move((AimEdgeP1P3/2))

  MidAimEP1P2X=(Turtle.X)

  MidAimEP1P2Y=(Turtle.Y)

MidAimEP1P2Xint=Math.Floor(MidAimEP1P2X)

MidAimEP1P2Yint=Math.Floor(MidAimEP1P2Y)



Turtle.X=(AimPoint2X)

Turtle.Y=(AimPoint2Y)

Turtle.MoveTo(AimPoint3X, AimPoint3Y)

Turtle.Turn(180)

Turtle.Move((AimEdgeP2P3/2))

  MidAimEP2P3X=(Turtle.X)

  MidAimEP2P3Y=(Turtle.Y)

MidAimEP2P3Xint=Math.Floor(MidAimEP2P3X)

MidAimEP1P2Yint=Math.Floor(MidAimEP2P3Y)

Turtle.PenDown()

'End Aim Edge MidPoint Definitions



'Start Line/Length Definitions



LineEdgeP1P2=((Point2X-AimPoint1X)*(Point2X-AimPoint1X))+((Point2Y-AimPoint1Y)*(Point2Y-AimPoint1Y))

LineP1P2=Math.SquareRoot(LineedgeP1P2)

LineP1P2int=(Math.Floor(LineP1P2))



LineEdgeP1P3=((Point3X-AimPoint1X)*(Point3X-AimPoint1X))+((Point3Y-AimPoint1Y)*(Point3Y-AimPoint1Y))

LineP1P3=Math.SquareRoot(LineEdgeP1P3)

LineP1P3int=(Math.Floor(LineP1P3))



LineEdgeP2P3=((Point3X-AimPoint2X)*(Point3X-AimPoint2X))+((Point3Y-AimPoint2Y)*(Point3Y-AimPoint2Y))

LineP2P3=Math.SquareRoot(LineEdgeP2P3)

LineP2P3int=(Math.Floor(LineP1P3))



Length = LineP1P2 + LineP1P3 + LineP2P3

Lengthint = (Math.Floor(Length))



'End Line/Length Definitions



'[2] Pause after Defining Aim Points and Defining Midlonts/Lengths

If  Loop=1 And Run=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

EndIf

Turtle.Speed=10

Shapes.HideShape(ShapeTRIANGELTwo1)

Shapes.HideShape(ShapeTRIANGELTwo2)







If Loop=1 And Run=1Then

  Speed=10

Shapes.HideShape(ShapeTRIANGELThreeX1)

Shapes.HideShape(ShapeTRIANGELThreeX2)



GraphicsWindow.Clear()

TargetHeader()

TextThree()

Else 

  Speed=10

EndIf





'====DRAW AIM TRIANGLE==========

GraphicsWindow.PenColor="Purple"

GraphicsWindow.PenWidth=8

Turtle.Speed=10

Turtle.X=(AimPoint1X)

Turtle.Y=(AimPoint1y)

Turtle.MoveTo(AimPoint2X, AimPoint2Y)

Turtle.MoveTo(AimPoint3X, AimPoint3Y)

Turtle.MoveTo(AimPoint1X, AimPoint1Y)

Program.Delay(2000)

GraphicsWindow.PenWidth=3



'[3] Pause After Drawing Aim Triangle

If  Loop=1 And Run=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

EndIf

'GraphicsWindow.Clear()

Shapes.HideShape(ShapeTRIANGELThree)



If Loop=1 And Run=1 Then

TextFour()

EndIF



'MidHeader

GraphicsWindow.Clear()

'MidHeader()



GraphicsWindow.PenColor=ColorOne

GraphicsWindow.PenWidth=8

Turtle.Speed=10

Turtle.X=(Point1X)

Turtle.Y=(Point1y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)

GraphicsWindow.PenColor="Black"

GraphicsWindow.PenWidth=3





'========================



'==ALTERPOINT SEQUENCE===

Turtle.Speed=9

If FirstAlter=1 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterOne()

EndIf



If FirstAlter=2 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterTwo()

EndIf



If FirstAlter=3 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterThree()

EndIf



If SecondAlter=1 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterOne()

EndIf



If SecondAlter=2 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterTwo()

EndIf



If SecondAlter=3 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterThree()

EndIf



If ThirdAlter=1 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterOne()

EndIf



If ThirdAlter=2 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterTwo()

EndIf



If ThirdAlter=3 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterThree()

EndIf



'[4] Pause after Aim Triangle Draw



'END ALTERPOINT SEQUENCES



If Loop=1 And Run=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

'EndIF



'REDEFINE POINTS



Point1X=NEWPoint1X 

Point1Y=NEWPoint1Y

Point2X=NEWPoint2X

Point2Y=NEWPoint2Y

Point3X=NEWPoint3X

Point3Y=NEWPoint3Y



'REDRAW TRIANGLE

GraphicsWindow.Clear()

GraphicsWindow.PenColor="Blue"

GraphicsWindow.PenWidth=8

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)



InterimHeader()

TextFive()

TextWindow.Pause()

TextWindow.Clear()



TextWindow.WriteLine("Elapsed Seconds After Loop " + Loop + " " + ElapsedLoopTime)



Else

  'LoopTime[Loop]=ElapsedLoopTime

  

ElapsedLoopTime=StartTime-EndLoopTime

ElapsedLoopTime=(Math.Abs(ElapsedLoopTime/1000))

ElapsedLoopTimeint = (Math.Floor(ElapsedLoopTime))

  TextWindow.WriteLine("Elapsed Seconds After Loop " + Loop + " " + ElapsedLoopTime) 

  'TextWindow.Pause()

  

ArcP1X[Loop]=Point1X

ArcP1Y[Loop]=Point1Y

ArcP2X[Loop]=Point2X

ArcP2Y[Loop]=Point2Y

ArcP3X[Loop]=Point3X

ArcP3Y[Loop]=Point3Y



  LastHeader()

  GraphicsWindow.PenColor="Blue"

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)

EndIF



Turtle.PenUp()



'=========START RESIZER ZONE=========



NEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

NewEdgeP1P2=Math.SquareRoot(NEP1P2)

NewEdgeP1P2int=(Math.Floor(NewEdgeP1P2))

NEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

NewEdgeP1P3=Math.SquareRoot(NEP1P3)

NewEdgeP1P3int=(Math.Floor(NewEdgeP1P3))

NEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

NewEdgeP2P3=Math.SquareRoot(NEP2P3)

NewEdgeP2P3int=(Math.Floor(NewEdgeP1P3))

NewPerimeter = NewEdgeP1P2+NewEdgeP1P3+NewEdgeP2P3



'=======START INTERNAL RESIZING============



IF InSizerFirst=1 Then

  R=0

  EndSizerOne()

  MidHeader()

EndIf

IF InSizerFirst=2 Then

  R=0

  EndSizerTwo()

  LastHeader()

EndIf

IF InSizerFirst=3 Then

  R=0

  EndSizerThree()

  LastHeader()

EndIf



If InSizerSecond=1 Then

  R=0

  EndSizerOne()

  LastHeader()

EndIf

If InSizerSecond=2 Then

  R=0

  EndSizerTwo()

  LastHeader()

EndIf

If InSizerSecond=3 Then

  EndSizerThree()

  LastHeader()

EndIf



If InsizerThird=1 Then

  R=0

  EndSizerOne()

  LastHeader()

EndIf

If InsizerThird=2 Then

  R=0

  EndSizerTwo()

  LastHeader()

EndIf

If InsizerThird=3 Then

  R=0

  EndSizerThree()

  LastHeader()

EndIf



'=======END RESIZING=======



'===START RE-CENTROID======

NextCentroidPX = ((Point1X+Point2X+Point3X)/3)

NextCentroidPXint = (Math.Floor(NextCentroidPX))

NextCentroidPY = ((Point1Y+Point2Y+Point3Y)/3)

NextCentroidPYint = (Math.Floor(NextCentroidPY))



AlignPX = StartCentroidPX - NextCentroidPX

AlignPY = StartCentroidPY - NextCentroidPY



Turtle.MoveTo((Point1X+AlignPX), (Point1Y+AlignPY))

Point1X = Turtle.X

Point1Y = Turtle.Y

Turtle.MoveTo((Point2X+AlignPX), (Point2Y+AlignPY))

Point2X = Turtle.X

Point2Y = Turtle.Y

Turtle.MoveTo((Point3X+AlignPX), (Point3Y+AlignPY))

Point3X = Turtle.X

Point3Y = Turtle.Y



NextCentroidPX = ((Point1X+Point2X+Point3X)/3)

NextCentroidPXint = (Math.Floor(NextCentroidPX))

NextCentroidPY = ((Point1Y+Point2Y+Point3Y)/3)

NextCentroidPYint = (Math.Floor(NextCentroidPY))



'===END RECENTROID======



'=========================

'Temp -- DON'T CHANGE!!

IF StopLoop=2 THEN

'Temp



'==CATCH EQUAL EDGES=======



AA=EdgeP1P2

BB=EdgeP2P3

CC=EdgeP1P3



IF ((AA+(AA*e))>=BB and (AA-(AA*e)) <=BB) And ((BB+(BB*e))>=AA and (BB-(BB*e)) <=AA)  AND ((AA+(AA*e))>=CC and (AA-(AA*e)) <=CC) And ((CC+(CC*e))>=AA and (CC-(CC*e)) <=AA) AND ((CC+(CC*e))>=BB and (CC-(CC*e)) <=BB) And ((CC+(CC*e))>=BB and (CC-(CC*e)) <=BB)  THEN

  

               If R=1 Then

               GraphicsWindow.Clear()

               

GraphicsWindow.PenColor=ColorOne

Turtle.PenDown()               

Turtle.X=(StartPoint1X)

Turtle.Y=(StartPoint1Y)

Turtle.MoveTo(StartPoint2X, StartPoint2Y)

Turtle.MoveTo(StartPoint3X, StartPoint3Y)

Turtle.MoveTo(StartPoint1X, StartPoint1Y)

't===============

'The Arc



GraphicsWindow.PenColor="White"

Turtle.MoveTo(StartPoint1X, StartPoint1Y)



For Arc = 2 to Loop

  GraphicsWindow.PenColor="Black"

Turtle.MoveTo(ArcP1X[Arc], ArcP1Y[Arc])

EndFor

Turtle.MoveTo(Point1X, Point1Y)





GraphicsWindow.PenColor="White"

Turtle.MoveTo(StartPoint2X, StartPoint2Y)

For Arc = 2 to Loop

  GraphicsWindow.PenColor="Black"

Turtle.MoveTo(ArcP2X[Arc], ArcP2Y[Arc])

EndFor

Turtle.MoveTo(Point2X, Point2Y)



GraphicsWindow.PenColor="White"

Turtle.MoveTo(StartPoint3X, StartPoint3Y)

For Arc = 2 to Loop

  GraphicsWindow.PenColor="Black"

Turtle.MoveTo(ArcP3X[Arc], ArcP3Y[Arc])

EndFor

Turtle.MoveTo(Point3X, Point3Y)



't===============

GraphicsWindow.PenColor="Black"

Turtle.PenDown()               

Turtle.X=(Point1X)

Turtle.Y=(Point1y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)



LastHeader()

Shapes.HideShape(TriangelFive1)

Shapes.HideShape(TriangelFive2)

TextSix()

TextWindow.WriteLine("!!!!!")

't==================

If AlterRateOne > 0 And EndAlter = 0 Then

  EndAlter=1

  AlterRate=AlterRateOne

  e=eOne

  TextWindow.WriteLine(AlterRate + " " + e)

  TextWindow.Pause()

  goto ReLoop

ElseIf AlterRateTwo > 0 And EndAlter <> 2Then

  EndAlter=2

  AlterRate=AlterRateTwo

  e=eTwo

  TextWindow.WriteLine(AlterRate + " " + e)

  Goto ReLoop

EndIF









't==================

               TextWindow.Pause()

               Goto LineRun

               EndIf



'======FINAL RESIZE========  



If EndSizerFirst=1 Then 

EndSizerOne() 

 LastHeader()



If EndSizerSecond = 0 Then

      'TextWindow.Pause()

      Goto LineRun

      EndIf

EndIF



If EndSizerFirst=2 Then 

EndsizerTwo()

LastHeader()



      If EndSizerSecond = 0 Then

      'TextWindow.Pause()

      Goto LineRun

      EndIf

EndIf



If EndSizerFirst=3 Then 

EndSizerThree()

LastHeader()



      If EndSizerSecond = 0 Then

      'TextWindow.Pause()

      Goto LineRun   

      EndIf

EndIf



If EndSizerSecond=1 Then 

EndSizerOne()

LastHeader()



     If EndSizerThird = 0 Then

     'TextWindow.Pause()

     Goto LineRun  

     EndIf

EndIf



If EndSizerSecond=2 Then 

EndSizerTwo()

LastHeader()



     If EndSizerThird = 0 Then

     'TextWindow.Pause()

     Goto LineRun    

     EndIf

EndIf



If EndSizerSecond=3 Then 

EndSizerThree()

LastHeader()



     If EndSizerThird = 0 Then

     'TextWindow.Pause()

     Goto LineRun   

     EndIf

EndIf



If EndSizerThird=1 Then 

EndsizerOne()

LastHeader()

         

     'TextWindow.Pause()

     Goto LineRun

   

EndIf



If EndSizerThird=2 Then 

EndSizerTwo()

LastHeader()

'

         

     'TextWindow.Pause()

     Goto LineRun   

EndIf



If EndSizerThird=3 Then 

EndSizerThree()

         LastHeader()

         

     'TextWindow.Pause()

     Goto LineRun

   

EndIf



'======END  RESIZER ZONE========

't---



TextSix()



't---

ENDIF

ENDIF 





'RECORD END LOOP  MOMENT



EndLoopTime = (Clock.ElapsedMilliseconds)





ENDFOR



'TERMINATE LOOPS and START NEXT RUN

LineRun:



ENDFOR



'==========END PROGRAM============

'==================================

'==========SUBROUTINES=============



'START ALTERPOINTS SUBROUTINE



Sub AlterOne

Turtle.MoveTo(Point1X, Point1Y)

Turtle.Turn(180)

GraphicsWindow.PenColor=ColorThree

GraphicsWindow.PenWidth="15"

Turtle.Move((AimEdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

  NEWPoint1X=Turtle.X

  Point1Xint=(Math.Floor(NEWPoint1X))

  NEWPoint1Y=Turtle.Y

  NEWPoint1Yint=(Math.Floor(NEWPoint1Y))

GraphicsWindow.PenColor=ColorTwo

GraphicsWindow.PenWidth="3"  

EndSub



Sub AlterTwo

Turtle.MoveTo(AimPoint2X, AimPoint2Y) 

Turtle.MoveTo(Point2X, Point2Y) 

Turtle.Turn(180)

GraphicsWindow.PenColor=ColorThree

GraphicsWindow.PenWidth="15"

Turtle.Move((AimEdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

  NEWPoint2X=Turtle.X

  Point2Xint=(Math.Floor(NEWPoint2X))

  NEWPoint2Y=Turtle.Y

  NEWPoint2Yint=(Math.Floor(NEWPoint2Y))

GraphicsWindow.PenColor=ColorTwo

GraphicsWindow.PenWidth="3"  

EndSub



Sub AlterThree

Turtle.MoveTo(AimPoint3X, AimPoint3Y) 

Turtle.MoveTo(Point3X, Point3Y) 

Turtle.Turn(180) 

GraphicsWindow.PenColor=ColorThree

GraphicsWindow.PenWidth="15"

Turtle.Move((AimEdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

  NEWPoint3X=Turtle.X

  Point3Xint=(Math.Floor(NEWPoint3X))

  NEWPoint3Y=Turtle.Y

  NEWPoint3Yint=(Math.Floor(NEWPoint1Y))

GraphicsWindow.PenColor=ColorTwo

GraphicsWindow.PenWidth="3"  

EndSub



'END ALTER POINTS SUBROUTINE



'START ENDSIZER- ONE SUBROUTINE

 

Sub EndSizerOne 

  

If R=0 Then

 

Point1X = NewPoint1X

Point1Y = NewPoint1Y

Point2X = NewPoint2X

Point2Y = NewPoint2Y

Point3X = NewPoint3X

Point3Y = NewPoint3Y



EdgeP1P2 = NewEdgeP1P2

EdgeP1P3 = NewEdgeP1P3

EdgeP2P3 = NewEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIf



If R = 1 Then

  

Point1X = LastPoint1X

Point1Y = LastPoint1Y

Point2X = LastPoint2X

Point2Y = LastPoint2Y

Point3X = LastPoint3X

Point3Y = LastPoint3Y



EdgeP1P2 = LastEdgeP1P2

EdgeP1P3 = LastEdgeP1P3

EdgeP2P3 = LastEdgeP2P3



NewPerimeter = LastPerimeter



EndIF



'====Redefine Resizer==============

Resizer = PerimeterBase - Perimeter

'=============================



  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.Move(Resizer*(NEWEdgeP1P2/Perimeter))

Point2X=Turtle.X

Point2Y=Turtle.Y

  

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point3X, Point3Y)

  Turtle.Move(Resizer*(NEWEdgeP1P3/Perimeter))

Point3X=Turtle.X

Point3Y=Turtle.Y



LastPoint1X=Point1X

LastPoint1Xint=Math.Floor(LastPoint1X)

LastPoint1Y=Point1Y

LastPoint1Yint=Math.Floor(LastPoint1Y)

LastPoint2X=Point2X

LastPoint2Xint=Math.Floor(LastPoint2X)

LastPoint2Y=Point2Y

LastPoint2Yint=Math.Floor(LastPoint2Y)

LastPoint3X=Point3X

LastPoint3Xint=Math.Floor(LastPoint3X)

LastPoint3Y=Point3Y

LastPoint3Yint=Math.Floor(LastPoint3Y)



GraphicsWindow.Clear()

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



LastEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

LastEdgeP1P2=Math.SquareRoot(LastEP1P2)

LastEdgeP1P2int=(Math.Floor(LastEdgeP1P2))

LastEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

LastEdgeP1P3=Math.SquareRoot(LastEP1P3)

LastEdgeP1P3int=(Math.Floor(LastEdgeP1P3))

LastEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

LastEdgeP2P3=Math.SquareRoot(LastEP2P3)

LastEdgeP2P3int=(Math.Floor(LastEdgeP1P3))

LastPerimeter = LastEdgeP1P2+LastEdgeP1P3+LastEdgeP2P3

LastPerimeterInt = (Math.Floor(LastPerimeter))



Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



R=1

EndSub



'END SIZER-ONE SUBROUTINE



'START SIZER- TWO SUBROUTINE



Sub EndSizerTwo

 

If R=0 Then

 

Point1X = NewPoint1X

Point1Y = NewPoint1Y

Point2X = NewPoint2X

Point2Y = NewPoint2Y

Point3X = NewPoint3X

Point3Y = NewPoint3Y



EdgeP1P2 = NewEdgeP1P2

EdgeP1P3 = NewEdgeP1P3

EdgeP2P3 = NewEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIf



If R = 1 Then



Point1X = LastPoint1X

Point1Y = LastPoint1Y

Point2X = LastPoint2X

Point2Y = LastPoint2Y

Point3X = LastPoint3X

Point3Y = LastPoint3Y



EdgeP1P2 = LastEdgeP1P2

EdgeP1P3 = LastEdgeP1P3

EdgeP2P3 = LastEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIF 



'====Redefine Resizer=================

Resizer = PerimeterBase - NewPerimeter

'================================

  

  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.Move(Resizer*(NEWEdgeP1P2/Perimeter))

Point1X=Turtle.X

Point1Y=Turtle.Y



  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.MoveTo(Point3X, Point3Y)

  Turtle.Move(Resizer*(NEWEdgeP1P3/Perimeter))

Point3X=Turtle.X

Point3Y=Turtle.Y



LastPoint1X=Point1X

LastPoint1Xint=Math.Floor(LastPoint1X)

LastPoint1Y=Point1Y

LastPoint1Yint=Math.Floor(LastPoint1Y)

LastPoint2X=Point2X

LastPoint2Xint=Math.Floor(LastPoint2X)

LastPoint2Y=Point2Y

LastPoint2Yint=Math.Floor(LastPoint2Y)

LastPoint3X=Point3X

LastPoint3Xint=Math.Floor(LastPoint3X)

LastPoint3Y=Point3Y

LastPoint3Yint=Math.Floor(LastPoint3Y)





GraphicsWindow.Clear()

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



LastEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

LastEdgeP1P2=Math.SquareRoot(LastEP1P2)

LastEdgeP1P2int=(Math.Floor(LastEdgeP1P2))

LastEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

LastEdgeP1P3=Math.SquareRoot(LastEP1P3)

LastEdgeP1P3int=(Math.Floor(LastEdgeP1P3))

LastEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

LastEdgeP2P3=Math.SquareRoot(LastEP2P3)

LastEdgeP2P3int=(Math.Floor(LastEdgeP1P3))

LastPerimeter = LastEdgeP1P2+LastEdgeP1P3+LastEdgeP2P3

LastPerimeterInt = (Math.Floor(LastPerimeter))





Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



R=1

EndSub



'END SIZER-TWO SUBROUTINE



'START SIZER- THREE SUBROUTINE



Sub EndSizerThree

  

If R=0 Then

 

Point1X = NewPoint1X

Point1Y = NewPoint1Y

Point2X = NewPoint2X

Point2Y = NewPoint2Y

Point3X = NewPoint3X

Point3Y = NewPoint3Y



EdgeP1P2 = NewEdgeP1P2

EdgeP1P3 = NewEdgeP1P3

EdgeP2P3 = NewEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



'=====Redefine Resizer================

Resizer = PerimeterBase - NewPerimeter

'================================



EndIf



If R = 1 Then



Point1X = LastPoint1X

Point1Y = LastPoint1Y

Point2X = LastPoint2X

Point2Y = LastPoint2Y

Point3X = LastPoint3X

Point3Y = LastPoint3Y



EdgeP1P2 = LastEdgeP1P2

EdgeP1P3 = LastEdgeP1P3

EdgeP2P3 = LastEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIf

  

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.Move(Resizer*(NEWEdgeP1P2/Perimeter))

Point2X=Turtle.X

Point2Y=Turtle.Y

  

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point3X, Point3Y)

  Turtle.Move(Resizer*(NEWEdgeP1P3/Perimeter))

Point3X=Turtle.X

Point3Y=Turtle.Y



LastPoint1X=Point1X

LastPoint1Xint=Math.Floor(LastPoint1X)

LastPoint1Y=Point1Y

LastPoint1Yint=Math.Floor(LastPoint1Y)

LastPoint2X=Point2X

LastPoint2Xint=Math.Floor(LastPoint2X)

LastPoint2Y=Point2Y

LastPoint2Yint=Math.Floor(LastPoint2Y)

LastPoint3X=Point3X

LastPoint3Xint=Math.Floor(LastPoint3X)

LastPoint3Y=Point3Y

LastPoint3Yint=Math.Floor(LastPoint3Y)



GraphicsWindow.Clear()

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



LastEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

LastEdgeP1P2=Math.SquareRoot(LastEP1P2)

LastEdgeP1P2int=(Math.Floor(LastEdgeP1P2))

LastEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

LastEdgeP1P3=Math.SquareRoot(LastEP1P3)

LastEdgeP1P3int=(Math.Floor(LastEdgeP1P3))

LastEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

LastEdgeP2P3=Math.SquareRoot(LastEP2P3)

LastEdgeP2P3int=(Math.Floor(LastEdgeP1P3))

LastPerimeter = LastEdgeP1P2+LastEdgeP1P3+LastEdgeP2P3

LastPerimeterInt = (Math.Floor(LastPerimeter))



Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



R=1

EndSub



'END SIZER-THREE SUBROUTINE



'=======HEADER SUBROUTINES=====



'START FIRSTHEADER SUBROUTINE



Sub FirstHeader

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TRIANGELS"

GraphicsWindow.FontSize=15

GraphicsWindow.BrushColor="Black"

Turtle.Speed = Swiftness



If ClearHeader <> 1 Then

  

  'Row One

ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



FirstLabel="Initial Variables"

ShapeFirstLabel=Shapes.AddText(FirstLabel)

Shapes.Move(ShapeFirstLabel, 30, 1)

Shapes.SetText(ShapeFirstLabel, FirstLabel)



't=====================================



'Row TWO



E12="E12"

ShapeE12=Shapes.AddText(E12)

  Shapes.Move(ShapeE12, 10, 20)

  Shapes.SetText(ShapeE12, E12)



E13="E13"

ShapeE13=Shapes.AddText(E13)

  Shapes.Move(ShapeE13, 50, 20)

  Shapes.SetText(ShapeP1P3, E13)

  

E23="E23"

ShapeE23=Shapes.AddText(E23)

  Shapes.Move(ShapeE23, 100, 20)

  Shapes.SetText(ShapeE23, E23)



PER="PERIM"

ShapePER=Shapes.AddText(PER)

  Shapes.Move(ShapePER, 150, 20)

  Shapes.SetText(ShapePER, PER)   

 

P1X="P1X" 

ShapeP1X=Shapes.AddText(P1X)

  Shapes.Move(ShapeP1X, 225, 20)

  Shapes.SetText(ShapeP1X, P1X)



P1Y="P1Y"

ShapeP1Y=Shapes.AddText(P1Y)

  Shapes.Move(ShapeP1Y, 260, 20)

  Shapes.SetText(ShapeP1Y, P1Y)

  

P2X="P2X"  

ShapeP2X=Shapes.AddText(P2X)

  Shapes.Move(ShapeP2X, 325, 20)

  Shapes.SetText(ShapeP2X, P2X)

  

P2Y="P2Y"  

ShapeP2Y=Shapes.AddText(P2Y)

  Shapes.Move(ShapeP2Y, 360, 20)

  Shapes.SetText(ShapeP2Y, P2Y)



P3X="P3X"

ShapeP3X=Shapes.AddText(P3X)

  Shapes.Move(ShapeP3X, 425, 20)

  Shapes.SetText(ShapeP3X, P3X)

 

P3Y="P3Y" 

ShapeP3Y=Shapes.AddText(P3Y)

  Shapes.Move(ShapeP3Y, 460, 20)

  Shapes.SetText(ShapeP3Y, P3Y)

  

'Row Three

GraphicsWindow.BrushColor="Cyan"

ShapeP1P2=Shapes.AddText(EdgeP1P2int)

  Shapes.Move(ShapeP1P2, 10, 40)

  Shapes.SetText(ShapeP1P2, EdgeP1P2int)

  

ShapeP1P3=Shapes.AddText(EdgeP1P3int)

  Shapes.Move(ShapeP1P3, 50, 40)

  Shapes.SetText(ShapeP1P3, EdgeP1P3int)



ShapeP2P3=Shapes.AddText(EdgeP2P3int)

  Shapes.Move(ShapeP2P3, 100, 40)

  Shapes.SetText(ShapeP2P3, EdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 40)

  Shapes.SetText(ShapeEquals, Equals)



Perimeter=EdgeP1P2+EdgeP1P3+EdgeP2P3

Perimeterint=(Math.Floor(Perimeter))

ShapePerimeter=Shapes.AddText(Perimeterint)

  Shapes.Move(ShapePerimeter, 150, 40)

  Shapes.SetText(ShapePerimeter, Perimeterint)   

  

ShapeStartP1X=Shapes.AddText(StartPoint1Xint)

  Shapes.Move(ShapeStartP1X, 225, 40)

  Shapes.SetText(ShapeStartP1X, StartPoint1Xint)

  

ShapeStartP1Y=Shapes.AddText(StartPoint1Yint)

  Shapes.Move(ShapeStartP1Y, 260, 40)

  Shapes.SetText(ShapeStartP1Y, StartPoint1Yint)

  

ShapeStartP2X=Shapes.AddText(StartPoint2Xint)

  Shapes.Move(ShapeStartP2X, 325, 40)

  Shapes.SetText(ShapeStartP2X, StartPoint2Xint)



ShapeStartP2Y=Shapes.AddText(StartPoint2Yint)

  Shapes.Move(ShapeStartP2Y, 360, 40)

  Shapes.SetText(ShapeStartP2Y, StartPoint2Yint)

  

ShapeStartP3X=Shapes.AddText(StartPoint3Xint)

  Shapes.Move(ShapeStartP3X, 425, 40)

  Shapes.SetText(ShapeStartP3X, StartPoint3Xint)

  

ShapeStartP3Y=Shapes.AddText(StartPoint3Yint)

  Shapes.Move(ShapeStartP3Y, 460, 40)

  Shapes.SetText(ShapeStartP3Y, StartPoint3Yint)

  

EndIf



EndSub



'END FIRSTHEADER SUBROUTINE





'==========================

'START AIMHEADER SUBROUTINE



Sub AimHeader

  

ClearHeader=1



GraphicsWindow.BrushColor="Black"

ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



AimLabel="IDEAL Apex Points"

ShapeAimLabel=Shapes.AddText(AimLabel)

Shapes.Move(ShapeAimLabel, 30, 1)

Shapes.SetText(ShapeAimLabel, AimLabel)



If Loop>1 Then

ShapeTime=Shapes.AddText(ElapsedTimeint)

Shapes.Move(ShapeTime, 200, 1)

Shapes.SetText(ShapeTime, ElapsedTimeint)

EndIf



'ROW TWO==========

 

P1X="P1X" 

ShapeP1X=Shapes.AddText(P1X)

  Shapes.Move(ShapeP1X, 225, 20)

  Shapes.SetText(ShapeP1X, P1X)



P1Y="P1Y"

ShapeP1Y=Shapes.AddText(P1Y)

  Shapes.Move(ShapeP1Y, 260, 20)

  Shapes.SetText(ShapeP1Y, P1Y)

  

P2X="P2X"  

ShapeP2X=Shapes.AddText(P2X)

  Shapes.Move(ShapeP2X, 325, 20)

  Shapes.SetText(ShapeP2X, P2X)

  

P2Y="P2Y"  

ShapeP2Y=Shapes.AddText(P2Y)

  Shapes.Move(ShapeP2Y, 360, 20)

  Shapes.SetText(ShapeP2Y, P2Y)



P3X="P3X"

ShapeP3X=Shapes.AddText(P3X)

  Shapes.Move(ShapeP3X, 425, 20)

  Shapes.SetText(ShapeP3X, P3X)

 

P3Y="P3Y" 

ShapeP3Y=Shapes.AddText(P3Y)

  Shapes.Move(ShapeP3Y, 460, 20)

  Shapes.SetText(ShapeP3Y, P3Y)

  

  

  'ROW THREE========

  

'225 40 1X  



AimPointLeft1Xint=Math.Floor(AimPointLeft1X)

ShapeAimL1X=Shapes.AddText(AimPointLeft1Xint)

  Shapes.Move(ShapeAimL1X, 225, 40)

  Shapes.SetText(ShapeAimL1X, AimPointLeft1Xint)

  

'260 40 1Y  

AimPointLeft1Yint=Math.Floor(AimPointLeft1Y)

ShapeAimL1Y=Shapes.AddText(AimPointLeft1Yint)

  Shapes.Move(ShapeAimL1Y, 260, 40)

  Shapes.SetText(ShapeAimL1Y, AimPointLeft1Yint)



'325 40 2X

AimPointLeft2Xint=Math.Floor(AimPointLeft2X)

ShapeAimL2X=Shapes.AddText(AimPointLeft2Xint)

  Shapes.Move(ShapeAimL2X, 325, 40)

  Shapes.SetText(ShapeAimL2X, AimPointLeft2Xint)





'360 40 2Y

AimPointLeft2Yint=Math.Floor(AimPointLeft2Y)

ShapeAimL2Y=Shapes.AddText(AimPointLeft2Yint)

  Shapes.Move(ShapeAimL2Y, 360, 40)

  Shapes.SetText(ShapeAimL2Y, AimPointLeft2Yint)



'425 40 3X

AimPointLeft3Xint=Math.Floor(AimPointLeft3X)

ShapeAimL3X=Shapes.AddText(AimPointLeft3Xint)

  Shapes.Move(ShapeAimL3X, 425, 40)

  Shapes.SetText(ShapeAimL3X, AimPointLeft3Xint)



'460 40 3Y

AimPointLeft3Yint=Math.Floor(AimPointLeft3Y)

ShapeAimL3Y=Shapes.AddText(AimPointLeft3Yint)

  Shapes.Move(ShapeAimL3Y, 460, 40)

  Shapes.SetText(ShapeAimL3Y, AimPointLeft3Yint)



'=====================



AimPointRight1Xint=Math.Floor(AimPointRight1X)

ShapeAimR1X=Shapes.AddText(AimPointRight1Xint)

  Shapes.Move(ShapeAimR1X, 225, 60)

  Shapes.SetText(ShapeAimR1X, AimPointRight1Xint)

  

AimPointRight1Yint=Math.Floor(AimPointRight1Y)

ShapeAimR1Y=Shapes.AddText(AimPointRight1Yint)

  Shapes.Move(ShapeAimR1Y, 260, 60)

  Shapes.SetText(ShapeAimR1Y, AimPointRight1Yint)



AimPointRight2Xint=Math.Floor(AimPointRight2X)

ShapeAimR2X=Shapes.AddText(AimPointRight2Xint)

  Shapes.Move(ShapeAimR2X, 325, 60)

  Shapes.SetText(ShapeAimR2X, AimPointRight2Xint)



AimPointRight2Yint=Math.Floor(AimPointRight2Y)

ShapeAimR2Y=Shapes.AddText(AimPointRight2Yint)

  Shapes.Move(ShapeAimR2Y, 360, 60)

  Shapes.SetText(ShapeAimR2Y, AimPointRight2Yint)



AimPointRight3Xint=Math.Floor(AimPointRight3X)

ShapeAimR3X=Shapes.AddText(AimPointRight3Xint)

  Shapes.Move(ShapeAimR3X, 425, 60)

  Shapes.SetText(ShapeAimR3X, AimPointRight3Xint)



'460 40 3Y

AimPointRight3Yint=Math.Floor(AimPointRight3Y)

ShapeAimR3Y=Shapes.AddText(AimPointRight3Yint)

  Shapes.Move(ShapeAimR3Y, 460, 60)

  Shapes.SetText(ShapeAimR3Y, AimPointRight3Yint)



  

ENDSUB





'END AIMHEADER SUBROUTINE

'========================



'START TARGETHEADER SUBROUTINE



Sub TargetHeader

  

ClearHeader=1



GraphicsWindow.BrushColor="Black"



ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



TargetLabel="TARGET Points"

ShapeTargetLabel=Shapes.AddText(TargetLabel)

Shapes.Move(ShapeTargetLabel, 30, 1)

Shapes.SetText(ShapeTargetLabel, TargetLabel)



If Loop>1 Then

  

ShapeTime=Shapes.AddText(ElapsedTimeint)

Shapes.Move(ShapeTime, 200, 1)

Shapes.SetText(ShapeTime, ElapsedTimeint)

EndIf



'ROW TWO==========

 

P1X="P1X" 

ShapeP1X=Shapes.AddText(P1X)

  Shapes.Move(ShapeP1X, 220, 20)

  Shapes.SetText(ShapeP1X, P1X)



P1Y="P1Y"

ShapeP1Y=Shapes.AddText(P1Y)

  Shapes.Move(ShapeP1Y, 265, 20)

  Shapes.SetText(ShapeP1Y, P1Y)

  

P2X="P2X"  

ShapeP2X=Shapes.AddText(P2X)

  Shapes.Move(ShapeP2X, 320, 20)

  Shapes.SetText(ShapeP2X, P2X)

  

P2Y="P2Y"  

ShapeP2Y=Shapes.AddText(P2Y)

  Shapes.Move(ShapeP2Y, 365, 20)

  Shapes.SetText(ShapeP2Y, P2Y)



P3X="P3X"

ShapeP3X=Shapes.AddText(P3X)

  Shapes.Move(ShapeP3X, 420, 20)

  Shapes.SetText(ShapeP3X, P3X)

 

P3Y="P3Y" 

ShapeP3Y=Shapes.AddText(P3Y)

  Shapes.Move(ShapeP3Y, 465, 20)

  Shapes.SetText(ShapeP3Y, P3Y)

  

  

  'ROW THREE========

  

'225 40 1X  

TargetLeftP1Xint=Math.Floor(TargetLeft1X)

ShapeTargetL1X=Shapes.AddText(TargetLeftP1Xint)

  Shapes.Move(ShapeTargetL1X, 220, 40)

  Shapes.SetText(ShapeTargetL1X, TargetLeftP1Xint)

  

'260 40 1Y  

TargetLeftP1Yint=Math.Floor(TargetLeft1Y)

ShapeTargetL1Y=Shapes.AddText(TargetLeftP1Yint)

  Shapes.Move(ShapeTargetL1Y, 265, 40)

  Shapes.SetText(ShapeTargetL1Y, TargetLeftP1Yint)



'325 40 2X

TargetLeftP2Xint=Math.Floor(TargetLeft2X)

ShapeTargetL2X=Shapes.AddText(TargetLeftP2Xint)

  Shapes.Move(ShapeTargetL2X, 320, 40)

  Shapes.SetText(ShapeTargetL2X, TargetLeftP2Xint)



'360 40 2Y

TargetLeftP2Yint=Math.Floor(TargetLeft2Y)

ShapeTargetL2Y=Shapes.AddText(TargetLeftP2Yint)

  Shapes.Move(ShapeTargetL2Y, 365, 40)

  Shapes.SetText(ShapeTargetL2Y, TargetLeftP2Yint)



'425 40 3X

TargetLeftP3Xint=Math.Floor(TargetLeft3X)

ShapeTargetL3X=Shapes.AddText(TargetLeftP3Xint)

  Shapes.Move(ShapeTargetL3X, 420, 40)

  Shapes.SetText(ShapeTargetL3X, TargetLeftP3Xint)



'460 40 3Y

TargetLeftP3Yint=Math.Floor(TargetLeft3Y)

ShapeTargetL3Y=Shapes.AddText(TargetLeftP3Yint)

  Shapes.Move(ShapeTargetL3Y, 465, 40)

  Shapes.SetText(ShapeTargetL3Y, TargetLeftP3Yint)



'=====================

 

'225 40 1X  

TargetRightP1Xint=Math.Floor(TargetRight1X)

ShapeTargetR1X=Shapes.AddText(TargetRightP1Xint)

  Shapes.Move(ShapeTargetR1X, 220, 60)

  Shapes.SetText(ShapeTargetR1X, TargetRightP1Xint)

  

'260 40 1Y  

TargetRightP1Yint=Math.Floor(TargetRight1Y)

ShapeTargetR1Y=Shapes.AddText(TargetRightP1Yint)

  Shapes.Move(ShapeTargetR1Y, 265, 60)

  Shapes.SetText(ShapeTargetR1Y, TargetRightP1Yint)



'325 40 2X

TargetRightP2Xint=Math.Floor(TargetRight2X)

ShapeTargetR2X=Shapes.AddText(TargetRightP2Xint)

  Shapes.Move(ShapeTargetR2X, 320, 60)

  Shapes.SetText(ShapeTargetR2X, TargetRightP2Xint)



'360 40 2Y

TargetRightP2Yint=Math.Floor(TargetRight2Y)

ShapeTargetR2Y=Shapes.AddText(TargetrightP2Yint)

  Shapes.Move(ShapeTargetR2Y, 365, 60)

  Shapes.SetText(ShapeTargetR2Y, TargetRightP2Yint)



'425 40 3X

TargetRightP3Xint=Math.Floor(TargetRight3X)

ShapeTargetR3X=Shapes.AddText(TargetRightP3Xint)

  Shapes.Move(ShapeTargetR3X, 420, 60)

  Shapes.SetText(ShapeTargetR3X, TargetRightP3Xint)



'460 40 3Y

TargetRightP3Yint=Math.Floor(TargetRight3Y)

ShapeTargetR3Y=Shapes.AddText(TargetRightP3Yint)

  Shapes.Move(ShapeTargetR3Y, 465, 60)

  Shapes.SetText(ShapeTargetR3Y, TargetRightP3Yint)





ENDSUB





'END TARGETHEADER SUBROUTINE

'============================

'============================



Sub InterimHeader

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "INTERIM"

GraphicsWindow.FontSize=15

GraphicsWindow.BrushColor="Black"

Turtle.Speed = Swiftness

  

  'Row One

ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



InterimLabel="INTERIM Triangle"

ShapeInterimLabel=Shapes.AddText(InterimLabel)

Shapes.Move(ShapeInterimLabel, 30, 1)

Shapes.SetText(ShapeInterimLabel, InterimLabel)



EndLooptime=Clock.ElapsedMilliseconds

ElapsedLoopTime=StartTime-EndLoopTime

ElapsedLoopTime=(Math.Abs(ElapsedLoopTime/1000))

ElapsedLoopTimeint = (Math.Floor(ElapsedLoopTime))

ShapeLoopTime=Shapes.AddText(ElapsedLoopTimeInt)

Shapes.Move(ShapeLoopTime, 250, 1)

Shapes.SetText(ShapeLoopTime, ElapsedLoopTime)



InterimTimeLabel="Elapsed Time (seconds)"

ShapeInterimTimeLabel=Shapes.AddText(InterimTimeLabel)

Shapes.Move(ShapeInterimTimeLabel, 400, 1)

Shapes.SetText(ShapeInterimTimeLabel, InterimTimeLabel)

'TextWindow.WriteLine("LoopTime" + ElapsedLoopTime)



't=====================================



'Row TWO



E12="E12"

ShapeE12=Shapes.AddText(E12)

  Shapes.Move(ShapeE12, 10, 20)

  Shapes.SetText(ShapeE12, E12)



E13="E13"

ShapeE13=Shapes.AddText(E13)

  Shapes.Move(ShapeE13, 50, 20)

  Shapes.SetText(ShapeP1P3, E13)

  

E23="E23"

ShapeE23=Shapes.AddText(E23)

  Shapes.Move(ShapeE23, 100, 20)

  Shapes.SetText(ShapeE23, E23)



PER="PERIM"

ShapePER=Shapes.AddText(PER)

  Shapes.Move(ShapePER, 150, 20)

  Shapes.SetText(ShapePER, PER)   

 

P1X="P1X" 

ShapeP1X=Shapes.AddText(P1X)

  Shapes.Move(ShapeP1X, 225, 20)

  Shapes.SetText(ShapeP1X, P1X)



P1Y="P1Y"

ShapeP1Y=Shapes.AddText(P1Y)

  Shapes.Move(ShapeP1Y, 260, 20)

  Shapes.SetText(ShapeP1Y, P1Y)

  

P2X="P2X"  

ShapeP2X=Shapes.AddText(P2X)

  Shapes.Move(ShapeP2X, 325, 20)

  Shapes.SetText(ShapeP2X, P2X)

  

P2Y="P2Y"  

ShapeP2Y=Shapes.AddText(P2Y)

  Shapes.Move(ShapeP2Y, 360, 20)

  Shapes.SetText(ShapeP2Y, P2Y)



P3X="P3X"

ShapeP3X=Shapes.AddText(P3X)

  Shapes.Move(ShapeP3X, 425, 20)

  Shapes.SetText(ShapeP3X, P3X)

 

P3Y="P3Y" 

ShapeP3Y=Shapes.AddText(P3Y)

  Shapes.Move(ShapeP3Y, 460, 20)

  Shapes.SetText(ShapeP3Y, P3Y)

  

  '=======================  

  'Row Three

  

IEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

IEdgeP1P2=Math.SquareRoot(IEP1P2)

IEdgeP1P2int=(Math.Floor(IEdgeP1P2))

IEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

IEdgeP1P3=Math.SquareRoot(IEP1P3)

IEdgeP1P3int=(Math.Floor(IEdgeP1P3))

IEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

IEdgeP2P3=Math.SquareRoot(IEP2P3)

IEdgeP2P3int=(Math.Floor(IEdgeP1P3))

IPerimeter = IEdgeP1P2+IEdgeP1P3+IEdgeP2P3

 

GraphicsWindow.BrushColor="Purple"

ShapeIP1P2=Shapes.AddText(IEdgeP1P2int)

  Shapes.Move(ShapeIP1P2, 10, 40)

  Shapes.SetText(ShapeIP1P2, IEdgeP1P2int)

  

ShapeIP1P3=Shapes.AddText(IEdgeP1P3int)

  Shapes.Move(ShapeIP1P3, 50, 40)

  Shapes.SetText(ShapeIP1P3, IEdgeP1P3int)



ShapeIP2P3=Shapes.AddText(IEdgeP2P3int)

  Shapes.Move(ShapeIP2P3, 100, 40)

  Shapes.SetText(ShapeIP2P3, IEdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 40)

  Shapes.SetText(ShapeEquals, Equals)



IPerimeter=IEdgeP1P2+IEdgeP1P3+IEdgeP2P3

IPerimeterint=(Math.Floor(IPerimeter))

ShapeIPerimeter=Shapes.AddText(IPerimeterint)

  Shapes.Move(ShapeIPerimeter, 150, 40)

  Shapes.SetText(ShapeIPerimeter, IPerimeterint)   



'==============



IPoint1Xint=math.Floor(Point1X)

ShapeIP1X=Shapes.AddText(IPoint1Xint)

  Shapes.Move(ShapeIP1X, 225, 40)

  Shapes.SetText(ShapeIP1X, IPoint1Xint)

 

IPoint1Yint=Math.Floor(Point1Y) 

ShapeIP1Y=Shapes.AddText(IPoint1Yint)

  Shapes.Move(ShapeIP1Y, 260, 40)

  Shapes.SetText(ShapeIP1Y, IPoint1Yint)



IPoint2Xint=Math.Floor(Point2X)

ShapeIP2X=Shapes.AddText(IPoint2Xint)

  Shapes.Move(ShapeIP2X, 325, 40)

  Shapes.SetText(ShapeIP2X, IPoint2Xint)



IPoint2Yint=Math.Floor(Point2Y)

ShapeIP2Y=Shapes.AddText(IPoint2Yint)

  Shapes.Move(ShapeIP2Y, 360, 40)

  Shapes.SetText(ShapeIP2Y, IPoint2Yint)



IPoint3Xint=Math.Floor(Point3X)

ShapeIP3X=Shapes.AddText(IPoint3Xint)

  Shapes.Move(ShapeIP3X, 425, 40)

  Shapes.SetText(ShapeIP3X, IPoint3Xint)



IPoint3Yint=Math.Floor(Point3Y)

ShapeIP3Y=Shapes.AddText(IPoint3Yint)

  Shapes.Move(ShapeIP3Y, 460, 40)

  Shapes.SetText(ShapeIP3Y, IPoint3Yint)

  



EndSub





'============================

'============================



'START MIDHEADER SUBROUTINE



Sub MidHeader

  

ClearHeader=1



     'GraphicsWindow.Clear()



ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



SecondLabel="Interim Variables"

ShapeSecondLabel=Shapes.AddText(SecondLabel)

Shapes.Move(ShapeSecondLabel, 30, 1)

Shapes.SetText(ShapeSecondLabel, SecondLabel)



If Loop>1 Then

ShapeTime=Shapes.AddText(ElapsedTimeint)

Shapes.Move(ShapeTime, 200, 1)

Shapes.SetText(ShapeTime, ElapsedTimeint)

EndIf



'ROW TWO==========







E12="E12"

ShapeE12=Shapes.AddText(E12)

  Shapes.Move(ShapeE12, 10, 20)

  Shapes.SetText(ShapeE12, E12)



E13="E13"

ShapeE13=Shapes.AddText(E13)

  Shapes.Move(ShapeE13, 50, 20)

  Shapes.SetText(ShapeP1P3, E13)

  

E23="E23"

ShapeE23=Shapes.AddText(E23)

  Shapes.Move(ShapeE23, 100, 20)

  Shapes.SetText(ShapeE23, E23)



PER="PERIM"

ShapePER=Shapes.AddText(PER)

  Shapes.Move(ShapePER, 150, 20)

  Shapes.SetText(ShapePER, PER)   

 

P1X="P1X" 

ShapeP1X=Shapes.AddText(P1X)

  Shapes.Move(ShapeP1X, 225, 20)

  Shapes.SetText(ShapeP1X, P1X)



P1Y="P1Y"

ShapeP1Y=Shapes.AddText(P1Y)

  Shapes.Move(ShapeP1Y, 260, 20)

  Shapes.SetText(ShapeP1Y, P1Y)

  

P2X="P2X"  

ShapeP2X=Shapes.AddText(P2X)

  Shapes.Move(ShapeP2X, 325, 20)

  Shapes.SetText(ShapeP2X, P2X)

  

P2Y="P2Y"  

ShapeP2Y=Shapes.AddText(P2Y)

  Shapes.Move(ShapeP2Y, 360, 20)

  Shapes.SetText(ShapeP2Y, P2Y)



P3X="P3X"

ShapeP3X=Shapes.AddText(P3X)

  Shapes.Move(ShapeP3X, 425, 20)

  Shapes.SetText(ShapeP3X, P3X)

 

P3Y="P3Y" 

ShapeP3Y=Shapes.AddText(P3Y)

  Shapes.Move(ShapeP3Y, 460, 20)

  Shapes.SetText(ShapeP3Y, P3Y)

  

  

'ROW THREE========

ShapeStartP1P2=Shapes.AddText(StartEdgeP1P2int)

  Shapes.Move(ShapeStartP1P2, 10, 40)

  Shapes.SetText(ShapeStartP1P2, StartEdgeP1P2int)

  

ShapeStartP1P3=Shapes.AddText(StartEdgeP1P3int)

  Shapes.Move(ShapeStartP1P3, 50, 40)

  Shapes.SetText(ShapeStartP1P3, StartEdgeP1P3int)



ShapeStartP2P3=Shapes.AddText(StartEdgeP2P3int)

  Shapes.Move(ShapeStartP2P3, 100, 40)

  Shapes.SetText(ShapeStartP2P3, StartEdgeP2P3int)



Equals="="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 40)

  Shapes.SetText(ShapeEquals, Equals)



ShapePerimeterBase=Shapes.AddText(PerimeterBaseint)

  Shapes.Move(ShapePerimeterBase, 150, 40)

  Shapes.SetText(ShapePerimeterBase, PerimeterBaseint)   





StartPoint1Xint=Math.Floor(StartPoint1X)

ShapeStartP1X=Shapes.AddText(StartPoint1Xint)

  Shapes.Move(ShapeStartP1X, 225, 40)

  Shapes.SetText(ShapeStartP1X, StartPoint1Xint)

  

StartPoint1Yint=Math.Floor(StartPoint1Y)

ShapeStartP1Y=Shapes.AddText(StartPoint1Yint)

  Shapes.Move(ShapeStartP1Y, 260, 40)

  Shapes.SetText(ShapeStartP1Y, StartPoint1Yint)

  

StartPoint2Xint=Math.Floor(StartPoint2X)

ShapeStartP2X=Shapes.AddText(StartPoint2Xint)

  Shapes.Move(ShapeStartP2X, 325, 40)

  Shapes.SetText(ShapeStartP2X, StartPoint2Xint)



StartPoint2Yint=Math.Floor(StartPoint2Y)

ShapeStartP2Y=Shapes.AddText(StartPoint2Yint)

  Shapes.Move(ShapeStartP2Y, 360, 40)

  Shapes.SetText(ShapeStartP1X, StartPoint2Yint)

  

StartPoint3Xint=Math.Floor(StartPoint3X)

ShapeStartP3X=Shapes.AddText(StartPoint3Xint)

  Shapes.Move(ShapeStartP3X, 425, 40)

  Shapes.SetText(ShapeStartP3X, StartPoint3Xint)

  

StartPoint3Yint=Math.Floor(StartPoint3Y)

ShapeStartP3Y=Shapes.AddText(StartPoint3Yint)

Shapes.Move(ShapeStartP3Y, 460, 40)

Shapes.SetText(ShapeStartP3Y, StartPoint3Yint)

  

  

'Include Aimer Shape Definitions



  AimShapeP1P2=Shapes.AddText(AimEdgeP1P2int)

  Shapes.Move(AimShapeP1P2, 10, 60)

  Shapes.SetText(AimShapeP1P2, AimEdgeP1P2int)

  

  AimShapeP1P3=Shapes.AddText(AimEdgeP1P3int)

  Shapes.Move(AimShapeP1P3, 50, 60)

  Shapes.SetText(AimShapeP1P3, AimEdgeP1P3int)



  AimShapeP2P3=Shapes.AddText(AimEdgeP2P3int)

  Shapes.Move(AimShapeP2P3, 100, 60)

  Shapes.SetText(AimShapeP2P3, AimEdgeP2P3int)



Equals="="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 60)

  Shapes.SetText(ShapeEquals, Equals)

  

  AimShapePerimeter=Shapes.AddText(AimPerimeterint)

  Shapes.Move(AimShapePerimeter, 150, 60)

  Shapes.SetText(AimShapePerimeter, AimPerimeterint)  

  

  

AimPoint1Xint=Math.Floor(AimPoint1X)

AimShapeP1X=Shapes.AddText(AimPoint1Xint)

  Shapes.Move(AimShapeP1X, 225, 60)

  Shapes.SetText(AimShapeP1X, AimPoint1Xint)

  

AimPoint1Yint=Math.Floor(AimPoint1Y)

AimShapeP1Y=Shapes.AddText(AimPoint1Yint)

  Shapes.Move(AimShapeP1Y, 260, 60)

  Shapes.SetText(AimShapeP1Y, AimPoint1Yint)

  

AimPoint2Xint=Math.Floor(AimPoint2X)

AimShapeP2X=Shapes.AddText(AimPoint2Xint)

  Shapes.Move(AimShapeP2X, 325, 60)

  Shapes.SetText(AimShapeP2X, AimPoint2Xint)



AimPoint2Yint=Math.Floor(AimPoint2Y)

AimShapeP2Y=Shapes.AddText(AimPoint2Yint)

  Shapes.Move(AimShapeP2Y, 360, 60)

  Shapes.SetText(AimShapeP1X, AimPoint2Yint)

  

AimPoint3Xint=Math.Floor(AimPoint3X)

AimShapeP3X=Shapes.AddText(AimPoint3Xint)

  Shapes.Move(AimShapeP3X, 425, 60)

  Shapes.SetText(AimShapeP3X, AimPoint3Xint)

  

AimPoint3Yint=Math.Floor(AimPoint3Y)

AimShapeP3Y=Shapes.AddText(AimPoint3Yint)

  Shapes.Move(AimShapeP3Y, 460, 60)

  Shapes.SetText(AimShapeP3Y, AimPoint3Yint)

  

'End Include Aimer Definitions

  

'Start Include Line/Length Definitions

  

ShapeLineP1P2=Shapes.AddText(LineP1P2int)

  Shapes.Move(ShapeLineP1P2, 10, 80)

  Shapes.SetText(ShapeLineP1P2, LineP1P2int)

 

ShapeLineP1P3=Shapes.AddText(LineP1P3int)

  Shapes.Move(ShapeLineP1P3, 50, 80)

  Shapes.SetText(ShapeLineP1P3, LineP1P3int)



ShapeLineP2P3=Shapes.AddText(LineP2P3int)

  Shapes.Move(ShapeLineP2P3, 100, 80)

  Shapes.SetText(ShapeLineP2P3, LineP2P3int)



Equals="="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 80)

  Shapes.SetText(ShapeEquals, Equals)



ShapeLength=Shapes.AddText(Length)

  Shapes.Move(ShapeLength, 150, 80)

  Shapes.SetText(ShapeLength, Lengthint)  

   

'End Include Line/Length Definitions

   

'=====CONTINUE SHAPE POINTS==============

  

Point1Xint=Math.Floor(Point1X)

ShapeP1X=Shapes.AddText(Point1Xint)

  Shapes.Move(ShapeP1X, 225, 80)

  Shapes.SetText(ShapeP1X, Point1Xint)

  

Point1Yint=Math.Floor(Point1Y)

ShapeP1Y=Shapes.AddText(Point1Yint)

  Shapes.Move(ShapeP1Y, 260, 80)

  Shapes.SetText(ShapeP1Y, Point1Yint)

  

Point2Xint=Math.Floor(Point2X)

ShapeP2X=Shapes.AddText(Point2Xint)

  Shapes.Move(ShapeP2X, 325, 80)

  Shapes.SetText(ShapeP2X, Point2Xint)



Point2Yint=Math.Floor(Point2Y)

ShapeP2Y=Shapes.AddText(Point2Yint)

  Shapes.Move(ShapeP2Y, 360, 80)

  Shapes.SetText(ShapeP1X, Point2Yint)

  

Point3Xint=Math.Floor(Point3X)

ShapeP3X=Shapes.AddText(Point3Xint)

  Shapes.Move(ShapeP3X, 425, 80)

  Shapes.SetText(ShapeP3X, Point3Xint)

  

Point3Yint=Math.Floor(Point3Y)

ShapeP3Y=Shapes.AddText(Point3Yint)

  Shapes.Move(ShapeP3Y, 460, 80)

  Shapes.SetText(ShapeP3Y, Point3Yint)

  

ENDSUB



'======END SUB MIDHEADER=============



'======START LASTHEADER==============

Sub LastHeader

  

ClearHeader=1

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TRIANGELS"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



  

'Row One

ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



LastLabel="RESOLVED Point Variables"

ShapeLastLabel=Shapes.AddText(LastLabel)

Shapes.Move(ShapeLastLabel, 30, 1)

Shapes.SetText(ShapeLastLabel, LastLabel)



ShapeTime=Shapes.AddText(ElapsedTimeint)

Shapes.Move(ShapeTime, 300, 1)

Shapes.SetText(ShapeTime, ElapsedTimeint/1000)



TimeLabel="Elapsed Time (seconds)"

ShapeTimeLabel=Shapes.AddText(TimeLabel)

Shapes.Move(ShapeTimeLabel,400, 1)

Shapes.SetText(ShapeTimeLabel, TimeLabel)



'Row Two

ShapeStartP1P2=Shapes.AddText(StartEdgeP1P2int)

  Shapes.Move(ShapeStartP1P2, 10, 20)

  Shapes.SetText(ShapeStartP1P2, StartEdgeP1P2int)

  

ShapeStartP1P3=Shapes.AddText(StartEdgeP1P3int)

  Shapes.Move(ShapeStartP1P3, 50, 20)

  Shapes.SetText(ShapeStartP1P3, StartEdgeP1P3int)



ShapeStartP2P3=Shapes.AddText(StartEdgeP2P3int)

  Shapes.Move(ShapeStartP2P3, 100, 20)

  Shapes.SetText(ShapeStartP2P3, StartEdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 20)

  Shapes.SetText(ShapeEquals, Equals)



ShapePerimeterBase=Shapes.AddText(PerimeterBaseint)

  Shapes.Move(ShapePerimeterBase, 150, 20)

  Shapes.SetText(ShapePerimeterBase, PerimeterBaseint)   

  

ShapeStartP1X=Shapes.AddText(StartPoint1Xint)

  Shapes.Move(ShapeStartP1X, 225, 20)

  Shapes.SetText(ShapeStartP1X, StartPoint1Xint)

  

ShapeStartP1Y=Shapes.AddText(StartPoint1Yint)

  Shapes.Move(ShapeStartP1Y, 260, 20)

  Shapes.SetText(ShapeStartP1Y, StartPoint1Yint)

  

ShapeStartP2X=Shapes.AddText(StartPoint2Xint)

  Shapes.Move(ShapeStartP2X, 325, 20)

  Shapes.SetText(ShapeStartP2X, StartPoint2Xint)



ShapeStartP2Y=Shapes.AddText(StartPoint2Yint)

  Shapes.Move(ShapeStartP2Y, 360, 20)

  Shapes.SetText(ShapeStartP2Y, StartPoint2Yint)

  

ShapeStartP3X=Shapes.AddText(StartPoint3Xint)

  Shapes.Move(ShapeStartP3X, 425, 20)

  Shapes.SetText(ShapeStartP3X, StartPoint3Xint)

  

ShapeStartP3Y=Shapes.AddText(StartPoint3Yint)

  Shapes.Move(ShapeStartP3Y, 460, 20)

  Shapes.SetText(ShapeStartP3Y, StartPoint3Yint)

  

'Row Three

ShapeLastP1P2=Shapes.AddText(LastEdgeP1P2int)

  Shapes.Move(ShapeLastP1P2, 10, 40)

  Shapes.SetText(ShapeLastP1P2, LastEdgeP1P2int)

  

ShapeLastP1P3=Shapes.AddText(LastEdgeP1P3int)

  Shapes.Move(ShapeLastP1P3, 50, 40)

  Shapes.SetText(ShapeLastP1P3, LastEdgeP1P3int)



ShapeP2P3=Shapes.AddText(LastEdgeP2P3int)

  Shapes.Move(ShapeP2P3, 100, 40)

  Shapes.SetText(ShapeP2P3, EdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 40)

  Shapes.SetText(ShapeEquals, Equals)



ShapeLastPerimeter=Shapes.AddText(LastPerimeterint)

  Shapes.Move(ShapeLastPerimeter, 150, 40)

  Shapes.SetText(ShapeLastPerimeter, LastPerimeterint)

  

ShapeLastP1X=Shapes.AddText(LastPoint1Xint)

  Shapes.Move(ShapeLastP1X, 225, 40)

  Shapes.SetText(ShapeLastP1X, LastPoint1Xint)

  

ShapeLastP1Y=Shapes.AddText(LastPoint1Yint)

  Shapes.Move(ShapeLastP1Y, 260, 40)

  Shapes.SetText(ShapeLastP1Y, LastPoint1Yint)

  

ShapeLastP2X=Shapes.AddText(LastPoint2Xint)

  Shapes.Move(ShapeLastP2X, 325, 40)

  Shapes.SetText(ShapeLastP2X, LastPoint2Xint)



ShapeLastP2Y=Shapes.AddText(LastPoint2Yint)

  Shapes.Move(ShapeLastP2Y, 360, 40)

  Shapes.SetText(ShapeLastP2Y, LastPoint2Yint)

  

ShapeLastP3X=Shapes.AddText(LastPoint3Xint)

  Shapes.Move(ShapeLastP3X, 425, 40)

  Shapes.SetText(ShapeLastP3X, LastPoint3Xint)

  

ShapeLastP3Y=Shapes.AddText(LastPoint3Yint)

  Shapes.Move(ShapeLastP3Y, 460, 40)

  Shapes.SetText(ShapeLastP3Y, LastPoint3Yint)



EndSub



Sub TextOne

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextOne"

GraphicsWindow.BrushColor="Black"

GraphicsWindow.FontSize=20

Turtle.Speed = Swiftness



TRIANGELOne="Start with any irregular triangle.  [Tap a key whenever the program halts.]"

ShapeTRIANGELOne=Shapes.AddText(TRIANGELOne)

  Shapes.Move(ShapeTRIANGELOne, 20, 540)

  Shapes.SetText(ShapeTRIANGELOne, TRIANGELOne)

  

EndSub



Sub TextTwo

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextTwo"

GraphicsWindow.FontSize=20

GraphicsWindow.BrushColor="Black"

Turtle.Speed = Swiftness





TRIANGELTwo1="Calculate the position each point would assume if it were the apex of an"

ShapeTRIANGELTwo1=Shapes.AddText(TRIANGELTwo1)

  Shapes.Move(ShapeTRIANGELTwo1, 20, 500)

  Shapes.SetText(ShapeTRIANGELTwo1, TRIANGELTwo1)

  

TRIANGELTwo2="Equilateral Triangle erected from the base of the other two points. [Tap]"

ShapeTRIANGELTwo2=Shapes.AddText(TRIANGELTwo2)

  Shapes.Move(ShapeTRIANGELTwo2, 20, 520)

  Shapes.SetText(ShapeTRIANGELTwo2, TRIANGELTwo2)

  TextWindow.Pause()

  

TRIANGELTwo3="(Note that each base projects two apexes in opposite directions. [Tap])"

ShapeTRIANGELTwo3=Shapes.AddText(TRIANGELTwo3)

  Shapes.Move(ShapeTRIANGELTwo3, 20, 540)

  Shapes.SetText(ShapeTRIANGELTwo3, TRIANGELTwo3)

  TextWindow.Pause()

   

EndSub

 

Sub TextThreeX

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextThreeX"

GraphicsWindow.FontSize=20

GraphicsWindow.PenColor="Black"

Turtle.Speed = Swiftness



TRIANGELThreeX1="Now compute shifts of the actual points some percentage of"

ShapeTRIANGELThreeX1=Shapes.AddText(TRIANGELThreeX1)

  Shapes.Move(ShapeTRIANGELThreeX1, 20, 520)

  Shapes.SetText(ShapeTRIANGELThreeX1, TRIANGELThreeX1)

  

  

  TRIANGELThreeX2="the distance from their current positions to these hypothetical apexes."

ShapeTRIANGELThreeX2=Shapes.AddText(TRIANGELThreeX2)

  Shapes.Move(ShapeTRIANGELThreeX2, 20, 540)

  Shapes.SetText(ShapeTRIANGELThreeX2, TRIANGELThreeX2)

  'TextWindow.Pause() 



EndSub



 

Sub TextThree

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextThree"

GraphicsWindow.FontSize=20

GraphicsWindow.PenColor="Black"

Turtle.Speed = Swiftness



TRIANGELThree="This projects an imaginary triangle that can target point/edge equilibirum."

ShapeTRIANGELThree=Shapes.AddText(TRIANGELThree)

  Shapes.Move(ShapeTRIANGELThree, 20, 540)

  Shapes.SetText(ShapeTRIANGELThree, TRIANGELThree)

  'TextWindow.Pause()

  

EndSub



Sub TextFour

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextFour"

GraphicsWindow.FontSize=20

GraphicsWindow.PenColor="Black"

Turtle.Speed = Swiftness



TRIANGELFour1="Next step the three points toward this potential equilibrium..."

ShapeTRIANGELFour1=Shapes.AddText(TRIANGELFour1)

  Shapes.Move(ShapeTRIANGELFour1, 20, 520)

  Shapes.SetText(ShapeTRIANGELFour1, TRIANGELFour1)

  TextWindow.Pause()

 

TRIANGELFour2="(Each point subjectively slides alone without central oversight.)"

ShapeTRIANGELFour2=Shapes.AddText(TRIANGELFour2)

  Shapes.Move(ShapeTRIANGELFour2, 20, 540)

  Shapes.SetText(ShapeTRIANGELFour2, TRIANGELFour2)

  TextWindow.Pause()





EndSub



Sub TextFive

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextFive"

GraphicsWindow.FontSize=20

GraphicsWindow.PenColor="Black"

Turtle.Speed = Swiftness



TRIANGELFive1="This creates an interim triangle one step nearer to objective perfection."

ShapeTRIANGELFive1=Shapes.AddText(TRIANGELFive1)

  Shapes.Move(ShapeTRIANGELFive1, 20, 520)

  Shapes.SetText(ShapeTRIANGELFive1, TRIANGELFive1)

  'TextWindow.Pause()

  

TRIANGELFive2="Repeat the process..."

ShapeTRIANGELFive2=Shapes.AddText(TRIANGELFive2)

  Shapes.Move(ShapeTRIANGELFive2, 20, 540)

  Shapes.SetText(ShapeTRIANGELFive2, TRIANGELFive2)

  'TextWindow.Pause()



EndSub



Sub TextSix

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextSix"

GraphicsWindow.FontSize=20

GraphicsWindow.PenColor="Black"

Turtle.Speed = Swiftness



TRIANGELSix1="...until the triangle is nearly equilateral.  Calibrating the approximation "

ShapeTRIANGELSix1=Shapes.AddText(TRIANGELSix1)

  Shapes.Move(ShapeTRIANGELSix1, 20, 520)

  Shapes.SetText(ShapeTRIANGELSix1, TRIANGELSix1)

 

If SelectMode=3 Then

   

TRIANGELSix3="is the subject of a subsequent program.  [Tap a key for next random triangle.]"

ShapeTRIANGELSix3=Shapes.AddText(TRIANGELSix3)

  Shapes.Move(ShapeTRIANGELSix3, 20, 540)

  Shapes.SetText(ShapeTRIANGELSix3, TRIANGELSix3)      

 

Else

  

TRIANGELSix2="is the subject of a subsequent program.  [Tap a key to return to Start Menu.]"

ShapeTRIANGELSix2=Shapes.AddText(TRIANGELSix2)

  Shapes.Move(ShapeTRIANGELSix2, 20, 540)

  Shapes.SetText(ShapeTRIANGELSix2, TRIANGELSix2)  

  

Endif

EndSub





'======END LASTHEADER=================

'=====================================

'========END SUBROUTINES==============










