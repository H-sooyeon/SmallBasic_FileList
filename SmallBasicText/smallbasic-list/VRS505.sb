'3D environment

'observer can move forward, back, shift left or right, and turn.

'based on original code by Path_DRC

'user can add rectangles at any x,y,z location

'Zeven Provincien April 2010



GraphicsWindow.BackgroundColor="Black"

GraphicsWindow.Height = 600

GraphicsWindow.Width = 800

GraphicsWindow.Show()



GraphicsWindow.KeyDown = ReadKey



'Information frame on left

infoFrameWidth = 200

grFrameWidth = GraphicsWindow.Width - infoFrameWidth

GraphicsWindow.BrushColor = "Gainsboro"

GraphicsWindow.FillRectangle(0,0,infoFrameWidth,grFrameWidth)



'text in Info Frame

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(48,1,"Adventurer's Name")

GraphicsWindow.DrawText(48,80,"Map Coordinates:")

GraphicsWindow.DrawText(5,220,"Forward = Up Arrow")

GraphicsWindow.DrawText(5,240,"Back = Down Arrow")

GraphicsWindow.DrawText(5,260,"Strafe left = Left Arrow")

GraphicsWindow.DrawText(5,280,"Strafe right = Right Arrow")

GraphicsWindow.DrawText(5,320,"Turn left/right = A / D")

GraphicsWindow.DrawText(5,340,"End program = Esc")



'draw box around Maze-View window on the right

GraphicsWindow.PenColor = "White"

GraphicsWindow.PenWidth = 4

GraphicsWindow.DrawRectangle(infoFrameWidth,0,grFrameWidth,grFrameWidth)

 

noObjects = 4

 

'Setup object's coordinates

z1[1] = 101

z2[1] = 101

x1[1] = -11

y1[1] = 11

x2[1] = 11

y2[1] = -11

zc[1] = (z1[1] + z2[1]) / 2

xc[1] = (x1[1] + x2[1]) / 2



z1[2] = 201

z2[2] = 201

x1[2] = -11

y1[2] = 11

x2[2] = 11

y2[2] = -11

zc[2] = (z1[2] + z2[2]) / 2

xc[2] = (x1[2] + x2[2]) / 2



z1[3] = 301

z2[3] = 321

x1[3] = 1

y1[3] = 11

x2[3] = 1

y2[3] = -11

zc[3] = (z1[3] + z2[3]) / 2

xc[3] = (x1[3] + x2[3]) / 2



z1[4] = 1

z2[4] = 1

x1[4] = 51

y1[4] = 11

x2[4] = 71

y2[4] = 1

zc[4] = (z1[4] + z2[4]) / 2

xc[4] = (x1[4] + x2[4]) / 2



CameraAngle = 0

cameraX = 0

cameraY = 0

cameraZ = 0



deltaAngle = Math.Pi/90



Main:



  'erase walls from Maze-View window

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.PenWidth = 2

  GraphicsWindow.FillRectangle(infoFrameWidth,0,grFrameWidth,GraphicsWindow.Width)

  GraphicsWindow.PenColor = "White"

  'draw box around Maze-View window on the right

  GraphicsWindow.PenColor = "White"

  GraphicsWindow.PenWidth = 4

  GraphicsWindow.DrawRectangle(infoFrameWidth,0,grFrameWidth,grFrameWidth)

  

  For i = 1 to noObjects

    

    x1tmp[i] = (x1[i] - cameraX) * Math.Cos(CameraAngle) - (z1[i] - cameraZ) * Math.Sin(CameraAngle)

    z1tmp[i] = (z1[i] - cameraZ) * Math.Cos(CameraAngle) + (x1[i] - cameraX) * Math.Sin(CameraAngle)

    x2tmp[i] = (x2[i] - cameraX) * Math.Cos(CameraAngle) - (z2[i] - cameraZ) * Math.Sin(CameraAngle)

    z2tmp[i] = (z2[i] - cameraZ) * Math.Cos(CameraAngle) + (x2[i] - cameraX) * Math.Sin(CameraAngle)

    

    left_X[i] = grFrameWidth * (x1tmp[i] / z1tmp[i] + 0.5)

    right_X[i] = grFrameWidth * (x2tmp[i] / z2tmp[i] + 0.5)

    

    'Y

    topLeft_Y[i] = grFrameWidth * (y1[i] / z1tmp[i] + 0.5)

    topRight_Y[i] = grFrameWidth * (y1[i] / z2tmp[i] + 0.5)

    bottomRight_Y[i] = grFrameWidth * (y2[i] / z2tmp[i] + 0.5)

    bottomLeft_Y[i] = grFrameWidth * (y2[i] / z1tmp[i] + 0.5)

    

    'Draw maze

    If (left_X[i]*right_X[i]) > 0 then 'this condition avoids some extraneous line draws

      IsObjectinFront()

      If (objectinFront) then 'only draw objects in front of observer

        GraphicsWindow.PenWidth = 2

        GraphicsWindow.DrawLine(left_X[i] + infoFrameWidth, topLeft_Y[i], right_X[i] + infoFrameWidth, topRight_Y[i])

        GraphicsWindow.DrawLine(right_X[i] + infoFrameWidth, topRight_Y[i], right_X[i] + infoFrameWidth, bottomRight_Y[i])

        GraphicsWindow.DrawLine(right_X[i] + infoFrameWidth, bottomRight_Y[i], left_X[i] + infoFrameWidth, bottomLeft_Y[i])

        GraphicsWindow.DrawLine(left_X[i] + infoFrameWidth, bottomLeft_Y[i], left_X[i] + infoFrameWidth, topLeft_Y[i])

      EndIf

    EndIf

    

    'for debugging

    TextWindow.WriteLine("")

    TextWindow.Write("Z1 " + i + ": ")

    TextWindow.WriteLine(z1[i])

    TextWindow.Write("Z2 " + i + ": ")

    TextWindow.WriteLine(z2[i])

    

    TextWindow.Write("B1 L1 X1 " + i + ": ")

    TextWindow.WriteLine(left_X[i])

    TextWindow.Write("B1 L1 X2 " + i + ": ")

    TextWindow.WriteLine(right_X[i])

    TextWindow.Write("B1 L1 Y1 " + i + ": ")

    TextWindow.WriteLine(topLeft_Y[i])

    TextWindow.Write("B1 L1 Y2 " + i + ": ")

    TextWindow.WriteLine(topRight_Y[i])

  

  Endfor



  TextWindow.Write("Camera X : ")

  TextWindow.WriteLine(cameraX)

  TextWindow.Write("Camera Y : ")

  TextWindow.WriteLine(cameraY)

  TextWindow.Write("Camera Z : ")

  TextWindow.WriteLine(cameraZ)

  TextWindow.Write("Camera Angle : ")

  TextWindow.WriteLine(Math.GetDegrees(CameraAngle))

  

  TextWindow.WriteLine(key)

  TextWindow.WriteLine("**********")



  unassignedkeypress:

  keyisupdated = "False"

  key = ""

  

  While (keyisupdated = "False")

  EndWhile

  

  If key = "Up" Then 'move forward

    cameraZ = cameraZ + 10 * Math.Cos(CameraAngle)

    cameraX = cameraX + 10 * Math.Sin(CameraAngle)

    

  ElseIf key = "Down" Then 'move backward

    cameraZ = cameraZ - 10 * Math.Cos(CameraAngle)

    cameraX = cameraX - 10 * Math.Sin(CameraAngle)

    

  ElseIf key = "Left" Then 'strafe left

    cameraZ = cameraZ + 10 * Math.Sin(CameraAngle)

    cameraX = cameraX - 10 * Math.Cos(CameraAngle) 

    

  ElseIf key = "Right" Then 'strafe right

    cameraZ = cameraZ - 10 * Math.Sin(CameraAngle)

    cameraX = cameraX + 10 * Math.Cos(CameraAngle) 

    

  ElseIf key = "A" Then 'turn left

    CameraAngle = CameraAngle - deltaAngle

    

  ElseIf key = "D" Then 'turn right

      CameraAngle = CameraAngle + deltaAngle



  ElseIf key = "Escape" Then

    Program.End()

    

  Else

    Goto unassignedkeypress

  EndIf

  

Goto Main



Sub ReadKey

    key = GraphicsWindow.LastKey

    keyisupdated = "True"

  EndSub



'determine if object is in front of observer

'method is to take a forward step and evaluate whether distance decreased between object and observer

Sub IsObjectinFront

  stepx = 10 * Math.Sin(CameraAngle)

  stepz = 10 * Math.Cos(CameraAngle)  

  dist1 = Math.Squareroot(Math.Power((xc[i]-cameraX),2) + Math.Power((zc[i]-cameraZ),2))

  dist2 = Math.Squareroot(Math.Power((xc[i]-(cameraX + stepx)),2) + Math.Power((zc[i]-(cameraZ + stepz)),2))

  deltaObjVector = dist2 - dist1

  

  If deltaObjVector < 0 then

    objectinFront = "true"

  Else

    objectinFront = "false"

  EndIf



EndSub

  


