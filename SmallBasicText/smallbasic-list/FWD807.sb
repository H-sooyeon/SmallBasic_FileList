' Draw Cube 0.1
' Copyright (c) 2013 Nonki Takahshi.  All rights reserved.
'
' History
'  0.1 2013-08-03 Created.
'
UNDEFINED = "N/A"
gw = 640
gh = 480
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
GraphicsWindow.Title = "Draw Cube 0.1"
'GraphicsWindow.BackgroundColor = "Gray"
param="x=0;y=0;z=100;color=#EE7700;edge=100;"
DrawCube()
param="x=100;y=0;z=0;color=#00CC00;edge=100;"
DrawCube()
param="x=0;y=100;z=0;color=#00CCCC;edge=100;"
DrawCube()
Sub Conv3Dto2D
  x = gw / 2 - Math.SquareRoot(1 / 2) * param["x"]
  x = x + Math.SquareRoot(1 / 2) * param["y"]
  y = gh / 2 + Math.SquareRoot(1 / 6) * param["x"]
  y = y + Math.SquareRoot(1 / 6) * param["y"]
  y = y - Math.SquareRoot(2 / 3) * param["z"]
EndSub
Sub DrawCube
  Conv3Dto2D()
  edge = Math.SquareRoot(2 / 3) * param["edge"]
  x1 = x
  y1 = y
  sColor = param["color"]
  color[2] = sColor
  color[3] = sColor
  Color_RGBtoHSL()
  savedLightness = rLightness
  rLightness = Math.Min(savedLightness * 1.2, 1)
  Color_HSLtoRGB()
  color[1] = sColor
  color[6] = sColor
  rLightness = Math.Max(savedLightness * 0.8, 0)
  Color_HSLtoRGB()
  color[4] = sColor
  color[5] = sColor
  For a = 0 To 360 Step 60
    _a = Math.GetRadians(a)
    x2 = x - edge * Math.Sin(_a)
    y2 = y - edge * Math.Cos(_a)
    If 0 < a Then
      GraphicsWindow.BrushColor = color[a / 60]
      GraphicsWindow.FillTriangle(x1, y1, x2, y2, x3, y3)
    EndIf
    x3 = x2
    y3 = y2
  EndFor
EndSub
Sub Color_HSLtoRGB
  ' Color | Convert HSL to RGB
  ' param rHue - [0, 360) or UNDEFINED
  ' param rLightness - [0, 1]
  ' param rSaturation - [0, 1]
  ' return sColor - "#rrggbb"
  If rLightness <= 0.5 Then
    rN2 = rLightness * (1 + rSaturation)
  Else
    rN2 = rLightness + rSaturation - rLightness * rSaturation
  EndIf
  rN1 = 2 * rLightness - rN2
  If rSaturation = 0 Then
    iR = Math.Round(rLightness * 255)
    iG = Math.Round(rLightness * 255)
    iB = Math.Round(rLightness * 255)
  Else
    rH = rHue + 120
    Color_Value()
    iR = iValue
    rH = rHue
    Color_Value()
    iG = iValue
    rH = rHue - 120
    Color_Value()
    iB = iValue
  EndIf
  sColor = GraphicsWindow.GetColorFromRGB(iR, iG, iB)
EndSub
Sub Color_Value
  ' Color | Function value
  ' param rN1, rN2
  ' param rH - [-120, 480)
  ' return iValue - 0..255
  If rH >= 360 Then
    rH = rH - 360
  EndIF
  If rH < 0 Then
    rH = rH + 360
  EndIF 
  If rH < 60 Then
    rV = rN1 + (rN2 - rN1) * rH / 60
  ElseIf rH < 180 Then
    rV = rN2
  ElseIf rH < 240 Then
    rV = rN1 + (rN2 - rN1) * (240 - rH) / 60
  Else
    rV = rN1
  EndIf
  iValue = Math.Round(rV * 255)
EndSub
Sub Color_RGBtoGray
  ' Color | Convert RGB to Gray
  ' param sColor - "#rrggbb"
  ' return rBrightness - (0, 1)
  ' return sGray - "#rrggbb"
  sR = Text.GetSubText(sColor, 2, 2)
  sG = Text.GetSubText(sColor, 4, 2)
  sB = Text.GetSubText(sColor, 6, 2)
  sHex = sR
  Math_Hex2Dec()
  iR = iDec
  sHex = sG
  Math_Hex2Dec()
  iG = iDec
  sHex = sB
  Math_Hex2Dec()
  iB = iDec
  iMin = Math.Min(Math.Min(iR, iG), iB)
  iLevel = iMin + Math.Round(((iR - iMin) * 2 + (iG - iMin) * 4 + (iB - iMin) * 1 ) / 7)
  rBrightness = Math.Round(iLevel / 255 * 10000) / 10000
  sGray = GraphicsWindow.GetColorFromRGB(iLevel, iLevel, iLevel)
EndSub
Sub Color_RGBtoHSL
  ' Color | Convert RGB to HSL
  ' param sColor - "#rrggbb"
  ' return rHue - [0, 360) or UNDEFINED
  ' return rLightness - (0, 1)
  ' return rSaturation - (0, 1)
  sR = Text.GetSubText(sColor, 2, 2)
  sG = Text.GetSubText(sColor, 4, 2)
  sB = Text.GetSubText(sColor, 6, 2)
  sHex = sR
  Math_Hex2Dec()
  ' rR = iDec / 255 ' occurs Math.Max() bug
  rR = Math.Round(iDec / 255 * 10000) / 10000
  sHex = sG
  Math_Hex2Dec()
  ' rG = iDec / 255 ' occurs Math.Max() bug
  rG = Math.Round(iDec / 255 * 10000) / 10000
  sHex = sB
  Math_Hex2Dec()
  ' rB = iDec / 255 ' occurs Math.Max() bug
  rB = Math.Round(iDec / 255 * 10000) / 10000
  rMax = Math.Max(rR, rG)
  rMax = Math.Max(rMax, rB)
  rMin = Math.Min(rR, rG)
  rMin = Math.Min(rMin, rB)
  rLightness = (rMax + rMin) / 2
  If rMax = rMin Then ' rR = rG = rB
    rSaturation = 0
    rHue = UNDEFINED
  Else
    If rLightness <= 0.5 Then
      rSaturation = (rMax - rMin) / (rMax + rMin)
    Else
      rSaturation = (rMax - rMin) / (2 - rMax - rMin)
    EndIf
    rRC = (rMax - rR) / (rMax - rMin)
    rGC = (rMax - rG) / (rMax - rMin)
    rBC = (rMax - rB) / (rMax - rMin)
    If rR = rMax Then     ' between Yellow and Magenta
      rHue = rBC - rGC
    ElseIf rG = rMax Then ' between Cyan and Yellow
      rHue = 2 + rRC - rBC
    ElseIf rB = rMax Then ' between Magenta and Cyan
      rHue = 4 + rGC - rRC
    Else
      TextWindow.WriteLine("Error:")
      TextWindow.WriteLine("rMax=" + rMax)
      TextWindow.WriteLine("rR=" + rR + ",sR=" + sR)
      TextWindow.WriteLine("rG=" + rG + ",sG=" + sG)
      TextWindow.WriteLine("rB=" + rB + ",sB=" + sB)
    EndIf
    rHue = rHue * 60
    If rHue < 0 Then
      rHue = rHue + 360
    EndIf
  EndIf
EndSub
Sub Color_GrayFromLightness
  ' Color | Gray from lightness
  ' param rLightness - 0..255
  ' return sGray - "#rrggbb"
  iGray = Math.Round(rLightness * 255)
  sGray = GraphicsWindow.GetColorFromRGB(iGray, iGray, iGray)
EndSub
Sub Math_Hex2Dec
  ' Math | Convert hexadecimal to decimal
  ' param sHex
  ' return iDec
  iDec = 0
  iLen = Text.GetLength(sHex)
  For iPtr = 1 To iLen
    iDec = iDec * 16 + Text.GetIndexOf("0123456789ABCDEF", Text.GetSubText(sHex, iPtr, 1)) - 1
  EndFor
EndSub
