'Hanoi Tower Game
'controls: J, K, L (lift or place disks), R (reset, not working)

GraphicsWindow.BackgroundColor="Black"
GraphicsWindow.BrushColor="White"
GraphicsWindow.KeyDown=OnKeyDown
Set()

While ("True")
  If (keydown) Then
    keydown = "False"
    HandleKeyDown()
  EndIf
  Program.Delay(20)
ENdWhile

Sub Set
  GraphicsWindow.Hide()
  TextWindow.Show()
  TextWindow.Clear()
  'set number of disks to 0 before user defines it
  n=0
  'check if user input is positive and an integer
  While n < 1 Or Math.Remainder(n, 1) <> 0
    TextWindow.WriteLine("Number of disks: ")
    n=TextWindow.ReadNumber()
    If n < 1 Or Math.Remainder(n, 1) <> 0 Then
      TextWindow.WriteLine("Really?")
    EndIf
  EndWhile
  GraphicsWindow.Show()
  'change graphics window position so that it doesn't stays over the
  'text window, where useful info is shown
  GraphicsWindow.Left=Desktop.Width/2
  'set window size to fit number of disks (disks have height=20,
  'width=20 times it's value, with 10 of space between them
  'and around the window)
  GraphicsWindow.Width=60*n+40
  GraphicsWindow.Height=30*n+10
  'set number of disks present in each rod
  an=n
  bn=0
  cn=0
  'set each disk value in rod "a"
  For i = 1 To n
    a[i]=n-i+1
  EndFor
  'set "lifting" var, states if the user is actually lifting a piece or not
  l="false"
  'set number of moves
  m=0
  Render()
EndSub

Sub Render
  'clears the window and draws each rod
  GraphicsWindow.Clear()
  GraphicsWindow.FillRectangle(10+10*n-5, 5, 10, 30*n+5)
  GraphicsWindow.FillRectangle(20+20*n+10*n-5, 5, 10, 30*n+5)
  GraphicsWindow.FillRectangle(30+40*n+10*n-5, 5, 10, 30*n+5)
  'for each rod, check if it's not empty and draw each piece with a
  'for loop from 1 to number of disks in this rod
  If an > 0 Then
    For i = 1 To an
      GraphicsWindow.FillRectangle(10+10*(n-a[i]), 10+(30*n)-30*i, 20*a[i], 20)
    EndFor
  EndIf
  If bn > 0 Then
    For i = 1 To bn
      GraphicsWindow.FillRectangle(20+20*n+10*(n-b[i]), 10+(30*n)-30*i, 20*b[i], 20)
    EndFor
  EndIf
  If cn > 0 Then
    For i = 1 To cn
      GraphicsWindow.FillRectangle(30+40*n+10*(n-c[i]), 10+(30*n)-30*i, 20*c[i], 20)
    EndFor
  EndIf
EndSub

Sub OnKeyDown
  keydown = "True"
EndSub

Sub HandleKeyDown
  'THIS IS WHERE I NEED HELP! in the set subroutine, the program just
  'crashes. after making some debug commands, I found out that it
  'breaks because of the graphicswindow.show() command
  'this should restart the game
  If GraphicsWindow.LastKey="R" Then
    Set()
  EndIf
  'check if game has not ended yet
  If cn <> n Then
    'check actions for each key. if the user hasn't lifted a piece
    'yet and the key corresponds to a non-empty rod, it sets l to
    'true. ln is the value of the lifted disk. lfr means "lifted from
    'rod". if the user is lifting a disk, it checks if the rod is the
    'same from where it was lifted, then it checks if the rod is
    'empty or has a bigger disk value in the lask disk
    If GraphicsWindow.LastKey="J" Then
      If l = "false" And an <> 0 Then
        l="true"
        ln=a[an]
        lfr="a"
      Else
        If a[an] > ln Or an = 0 Then
          If lfr = "a" Then
            l="false"
          ElseIf lfr = "b" Then
            an=an+1
            a[an]=ln
            bn=bn-1
            l="false"
            Check()
          ElseIf lfr = "c" Then
            an=an+1
            a[an]=ln
            cn=cn-1
            l="false"
            Check()
          EndIf
        Else
          l="false"
        EndIf
      EndIf
    ElseIf GraphicsWindow.LastKey="K" Then
      If l = "false" And bn <> 0 Then
        l="true"
        ln=b[bn]
        lfr="b"
      Else
        If b[bn] > ln Or bn = 0 Then
          If lfr = "a" Then
            bn=bn+1
            b[bn]=ln
            an=an-1
            l="false"
            Check()
          ElseIf lfr = "b" Then
            l="false"
          ElseIf lfr = "c" Then
            bn=bn+1
            b[bn]=ln
            cn=cn-1
            l="false"
            Check()
          EndIf
        Else
          l="false"
        EndIf
      EndIf
    ElseIf GraphicsWindow.LastKey="L" Then
      If l = "false" And cn <> 0 Then
        l="true"
        ln=c[cn]
        lfr="c"
      Else
        If c[cn] > ln Or cn = 0 Then
          If lfr = "a" Then
            cn=cn+1
            c[cn]=ln
            an=an-1
            l="false"
            Check()
          ElseIf lfr = "b" Then
            cn=cn+1
            c[cn]=ln
            bn=bn-1
            l="false"
            Check()
          ElseIf lfr = "c" Then
            l="false"
          EndIf
        Else
          l="false"
        EndIf
      EndIf
    EndIf
    Render()
  Else
    End()
  EndIf
EndSub

'prevents the user from moving a piece after the game has ended
Sub End
  TextWindow.WriteLine("Game's over, kid! Press " + Text.GetCharacter(34) + "R" + Text.GetCharacter(34) + ".")
EndSub

'sets m as m+1, checks if game has ended, and then checks if the user has solved in a perfect number of moves.
Sub Check
  m=m+1
  TextWindow.Clear()
  If cn = n And m = Math.Power(2, n)-1 Then
    TextWindow.WriteLine("Congratulations, you solved the game with a perfect number of moves (" + m + ")!")
  ElseIf cn = n Then
    TextWindow.WriteLine("Congratulations, you solved the game with " + m + " moves! Try solving with a perfect number of moves (" + (Math.Power(2, n)-1) + ").")
  Else
    TextWindow.WriteLine("Moves=" + m + "/" + (Math.Power(2, n)-1) + ".")
  EndIf
EndSub
    
