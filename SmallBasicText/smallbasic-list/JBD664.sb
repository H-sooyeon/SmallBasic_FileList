GraphicsWindow.Title="Rollcoaster

init()

partsposition()



While "True"

  Up_slope()

  M=2

  down_curve()

  return()

  M=3

  down_curve()

  return()

EndWhile



Sub return

  drad=0

  ds=0

  reposition()

  For i=1 To 15

    deg[i]=_deg[i]+drad   '   up slope 

    reposition()

  EndFor

  For L=1 To Array.GetItemCount(shape) 

    If shape[L]["func"]="rect" Or shape[L]["func"]="ell" Then 

      Shapes.Move(shp[L],Shapes.GetLeft(shp[L])-PM[M]*2*shape[L]["x"]*s-PM[M]*shape[L]["width"]*s+PM[M]*dL,Shapes.Gettop(shp[L]))

    ElseIf shape[L]["func"]="tri" Then 

      Shapes.Move(shp[L],Shapes.GetLeft(shp[L])-PM[M]*2*shape[L]["x"]*s-PM[M]*(shape[L]["x1"]+shape[L]["x3"])*s+PM[M]*dL,Shapes.Gettop(shp[L]))

    EndIf

  EndFor

  partsposition()

EndSub



Sub Down_curve

  For K=1 To Array.GetItemCount(LN[M])-1

    Shapes.Move(ell[0],Shapes.GetLeft(LN[M][K])+3,Shapes.Gettop(LN[M][K])+3)  '  on th slope

    _ddx=Shapes.GetLeft(LN[M][K+1])-Shapes.GetLeft(LN[M][K])

    _ddy=Shapes.Gettop(LN[M][K+1])-Shapes.GetTop(LN[M][K])

    If _ddy<-0.1 Then

      drad=Math.ArcTan(_ddx/(_ddy+0.00000001))+PM[M]*math.pi/2

    ElseIf _ddy>0.1 Then 

      drad=Math.ArcTan(_ddx/(_ddy+0.00000001))-PM[M]*math.pi/2

    EndIf

    dS=Math.GetDegrees(drad)

    For i=1 To 15

      If M=3 and i=2 Then 

        dS=dS+180

      EndIf   

      deg[i]=_deg[i]+drad   '   up slope 

      reposition()

    EndFor

    Program.Delay(10)

  EndFor

EndSub



Sub Up_slope

  _ddx=(_pre2x-Shapes.GetLeft(ell[0]))/20

  _ddy=(_pre2y-Shapes.GetTop(ell[0]))/20

  drad= Math.pi/2+Math.ArcTan(_ddx/_ddy)

  dS=Math.GetDegrees(drad)

  For k=1 To 20

    Shapes.Move(ell[0],Shapes.GetLeft(ell[0])+_ddx,Shapes.Gettop(ell[0])+_ddy)

    For i=1 To 15 

      If k=1 Then 

        deg[i]=_deg[i]+drad 

      EndIf

      reposition()

    EndFor

    Program.Delay(100)

  EndFor

EndSub



Sub reposition

  c["x"]= shapes.GetLeft(ell[0])+4

  c["y"]= shapes.Gettop(ell[0])+2

  Shapes.Move(ell[i],c["x"]-DR[i]*Math.Sin(deg[i])-4,c["y"]-DR[i]*Math.cos(deg[i])-2)

  elx=shapes.GetLeft(ell[i])

  ely=shapes.Gettop(ell[i])

  If shape[i]["func"]="rect" Or shape[i]["func"]="ell" Then 

    Shapes.Move(SHP[i],elx +4 - shape[i]["width"]/2*s,ely+2 - shape[i]["height"]/2*s)

  ElseIf shape[i]["func"]="tri" Then

    Shapes.Move(SHP[i],elx +4- (shape[i]["x1"]+shape[i]["x3"])/2*s ,ely+2-(shape[i]["y1"]+shape[i]["y2"])/2*s)

  EndIf

  Shapes.Rotate(SHP[i],-ds)

EndSub



Sub partsposition

  c["x"]= shapes.GetLeft(SHP[1])  

  c["y"]= shapes.Gettop(SHP[5])+shape[5]["height"]*s+6

  GraphicsWindow.PenColor="Yellow"

  GraphicsWindow.PenWidth=4

  shapes.Remove(ell[0])

  ell[0]=Shapes.AddEllipse(8,8)

  Shapes.Move(ell[0], c["x"]-4, c["y"]-4)

  shapes.SetOpacity(ell[0],0)

  For j=1 To 15  '<---

    If shape[J]["func"]="rect" Or shape[J]["func"]="ell" Then 

      dx=c["x"]-(Shapes.GetLeft(SHP[j])+shape[j]["width"]/2*s)

      dy=c["y"]-(Shapes.Gettop(SHP[j])+shape[j]["height"]/2*s)

    ElseIf shape[J]["func"]="tri" Then 

      dx=c["x"]-( Shapes.GetLeft(SHP[j])+ (shape[j]["x1"]+shape[j]["x3"])/2*s )

      dy=c["y"]-( Shapes.Gettop(SHP[j]) + (shape[j]["y1"]+shape[j]["y2"])/2*s )

    EndIf

    ell[j]=Shapes.AddEllipse(8,4)

    Shapes.Move(ell[j], c["x"]-4-dx, c["y"]-2-dy)

    Shapes.SetOpacity(ell[j],0)

    DR[j]=Math.SquareRoot(dx*dx+dy*dy)  '  length 

    _deg[j]=math.ArcTan(dx/(dy+0.000000000001))'  angle

  EndFor

  Program.Delay(1000)

EndSub



Sub init

  GraphicsWindow.Top=10

  GraphicsWindow.Left=10

  GraphicsWindow.Width=1300

  GraphicsWindow.Height=650

  bb=LDShapes.BrushGradient("1=cyan;2=darkblue" "V")

  ldGraphicsWindow.BackgroundBrush(bb)

  

  _var1="start=-15;end=14;x0=750;ddx=42;ddy=10;DR=80;dy=200;PM=1;ds=7.5"

  _var2="start=-10;end=14.2;x0=780;ddx=55;ddy=10;DR=40;dy=450;PM=-1;ds=5"

  M=1

  var=_var2

  prex[1]=var["x0"]-var["end"]*var["ddx"]

  prey[1]=var["DR"]*Math.Sin(var["end"]/var["ds"]*3.14)+var["dy"]+var["end"]*var["ddy"]

  var=_var1

  prex[2]=var["x0"]+(var["start"]-0.1)*var["ddx"]

  prey[2]=var["DR"]*Math.Sin((var["start"]-0.1)/var["ds"]*3.14)+var["dy"]+var["ddy"]*(var["start"]-0.1)

  _pre2x=prex[2]

  _pre2y=prey[2]

  

  GraphicsWindow.penColor="#00A497"

  GraphicsWindow.PenWidth=12

  LN[1][1]= Shapes.AddLine(prex[1],prey[1],prex[2],prey[2])  '  slope

  M=2

  curve()  'rear

  add_shapes()

  var=_var2

  M=3

  prex[3]=var["x0"]-var["start"]*var["ddx"]

  prey[3]=var["DR"]*Math.Sin(var["start"]/var["ds"]*3.14)+var["dy"]+var["start"]*var["ddy"]

  curve()  'front

  

  PM="2=1;3=-1"

EndSub



Sub curve

  NN=0

  MM=0

  opp=0

  For x=var["start"] To  var["end"] Step 0.1

    NN=NN+1

    GraphicsWindow.penColor=LDColours.HSLtoRGB(30+x*3 1 .65)

    GraphicsWindow.PenWidth=8

    y=var["DR"]*Math.Sin(x/var["ds"]*3.14)

    pp=var["x0"]+var["PM"]*X*var["ddx"]

    _wd=pp-prex[M]

    _ht=y+var["dy"]+var["ddy"]*X-prey[M]

    LN[M][NN]= Shapes.AddLine(0 0 _wd _ht)

    Shapes.Move(LN[M][NN] prex[M],prey[M])

    

    If Math.Remainder(x,1)=0 Then 

      GraphicsWindow.penColor=LDColours.HSLtoRGB(0 0 x/50)

      GraphicsWindow.PenWidth=6

      MM=MM+1

      If opp=0 Then 

        opp=pp-40

      EndIf

      LN2[M][MM]= Shapes.AddLine(pp y+var["dy"]+var["ddy"]*X,opp 650)

      opp=pp

    EndIf

    prex[M]=pp

    prey[M]=y+var["dy"]+var["ddy"]*X

  EndFor

EndSub



Sub add_shapes

  data()

  s=0.5

  shx=prex[1] '  

  shy=prey[1] 

  For i=1 To Array.GetItemCount(shape) 

    GraphicsWindow.PenWidth = shape[i]["pw"]

    GraphicsWindow.BrushColor = shape[i]["bc"] 

    GraphicsWindow.penColor = shape[i]["pc"] 

    If shape[i]["func"]="ell" Then 

      shp[i] = Shapes.AddEllipse(shape[i]["width"]*s, shape[i]["height"]*s) 

    ElseIf shape[i]["func"]="rect" Then 

      shp[i] = Shapes.AddRectangle(shape[i]["width"]*s, shape[i]["height"]*s) 

    ElseIf shape[i]["func"]="tri" Then 

      shp[i] = Shapes.Addtriangle(shape[i]["x1"]*s, shape[i]["y1"]*s,shape[i]["x2"]*s, shape[i]["y2"]*s,shape[i]["x3"]*s, shape[i]["y3"]*s) 

    EndIf

    Shapes.Animate(shp[i], shape[i]["x"]*s+shX, shape[i]["y"]*s+shY-60, 1000) '  45,60 

    shapes.Rotate(shp[i],shape[i]["angle"])

  EndFor

EndSub



Sub data

  shape[1] = "func=rect;x=21;y=56;width=118;height=58;bc=#D7003A;pw=0;"

  shape[2] = "func=tri;x=139;y=56;x1=0;y1=0;x2=0;y2=58;x3=54;y3=29;bc=#D7003A;pw=0;"

  shape[3] = "func=rect;x=0;y=92;width=22;height=17;bc=#884898;pw=0;"

  shape[4] = "func=ell;x=104;y=98;width=24;height=24;bc=#FFEA00;pc=#000000;pw=2;" '  Right tire

  shape[5] = "func=ell;x=37;y=98;width=24;height=24;bc=#FFEA00;pc=#000000;pw=2;" ' Left tire

  shape[6] = "func=ell;x=108;y=0;width=11;height=31;bc=#F6BFBC;pw=0;"

  shape[7] = "func=ell;x=106;y=26;width=14;height=44;bc=#3EB370;pw=0;"

  shape[8] = "func=ell;x=105;y=44;width=9;height=1;bc=#6A5ACD;pc=#000000;pw=2;"

  shape[9] = "func=ell;x=217;y=21;width=0;height=1;bc=#6A5ACD;pc=#000000;pw=2;"

  shape[10] = "func=rect;x=115;y=37;width=16;height=7;angle=337;bc=#2A83A2;pw=0;"

  shape[11] = "func=ell;x=63;y=6;width=11;height=31;bc=#F6BFBC;pw=0;"

  shape[12] = "func=ell;x=62;y=32;width=14;height=44;bc=#3EB370;pw=0;"

  shape[13] = "func=rect;x=69;y=43;width=18;height=8;angle=337;bc=#2A83A2;pw=0;"

  shape[14] = "func=ell;x=144;y=73;width=19;height=12;bc=#F3F3F2;pw=0;"

  shape[15] = "func=ell;x=109;y=26;width=98;height=0;bc=#6A5ACD;pc=#000000;pw=2;"

  dL=(shape[1]["width"]+shape[2]["x3"]+shape[3]["width"])/2

EndSub




