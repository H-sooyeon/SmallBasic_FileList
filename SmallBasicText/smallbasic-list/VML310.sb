'==========================================================
' KALEIDOSCOPE
'==========================================================
gw = 800 'Window size
numBits = 15 'Number of bits in kaleidoscope
size = 40 'Size of bits - radius equivalent

Initialise()
While ("True")
  moveMasterBit()
  updateBits()
  Program.Delay(50)
EndWhile

'==========================================================
' SUBROUTINES
'==========================================================

Sub Initialise
  gh = gw
  GraphicsWindow.CanResize = "False"
  GraphicsWindow.Top = 0
  GraphicsWindow.Left = (Desktop.Width-gw)/2
  GraphicsWindow.Title = "Kaleidoscope"
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.PenWidth = 1
  Mouse.HideCursor()
  
  'Create the bit shapes and the position/velocity of the master bit
  For i = 1 To numBits
    GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()
    For j = 1 To 8
      'bit[i][j] = Shapes.AddEllipse(2*size,2*size)
      'bit[i][j] = Shapes.AddRectangle(2*size,2*size)
      bit[i][j] = Shapes.AddTriangle(0,0,2*size,0,2*size,2*size)
      Shapes.SetOpacity(bit[i][j],25)
    EndFor
    bitX[i] = Math.GetRandomNumber(gw)
    bitY[i] = Math.GetRandomNumber(gh)
    bitU[i] = 1+Math.GetRandomNumber(100)/50
    bitV[i] = 1+Math.GetRandomNumber(100)/50
    rotation[i] = 3+Math.GetRandomNumber(10)
    If (Math.Remainder(rotation[i],2) = 0) Then
      rotation[i] = -rotation[i]
    EndIf
  EndFor
  
  'Dividing lines
  GraphicsWindow.PenColor = "LightGray"
  GraphicsWindow.DrawLine(0,gh/2,gw,gh/2)
  GraphicsWindow.DrawLine(gw/2,0,gw/2,gh)
  GraphicsWindow.DrawLine(0,0,gw,gh)
  GraphicsWindow.DrawLine(gw,0,0,gh)
  
  'Create the lens
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.PenWidth = gw/2+20
  GraphicsWindow.BrushColor = "#30000000"
  lens = Shapes.AddEllipse(gw*2,gh*2)
  Shapes.Move(lens,-gw/2,-gh/2)
EndSub

Sub moveMasterBit 'Just a simple move and rotate of the master bit
  For i = 1 To numBits
    bitX[i] = bitX[i]+bitU[i]
    bitY[i] = bitY[i]+bitV[i]
    angle[i] = angle[i]+rotation[i]
    
    If (bitX[i] < size) Then
      bitX[i] = size
      bitU[i] = -bitU[i]
    ElseIf (bitX[i] > gw-size) Then
      bitX[i] = gw-size
      bitU[i] = -bitU[i]
    EndIf
    If (bitY[i] < size) Then
      bitY[i] = size
      bitV[i] = -bitV[i]
    ElseIf (bitY[i] > gh-size) Then
      bitY[i] = gh-size
      bitV[i] = -bitV[i]
    EndIf
  EndFor
EndSub

Sub updateBits 'Including the 8 reflections
  For i = 1 To numBits
    Shapes.Move(bit[i][1],bitX[i]-size,bitY[i]-size)
    Shapes.Move(bit[i][2],bitY[i]-size,bitX[i]-size)
    Shapes.Move(bit[i][3],gw-bitX[i]-size,bitY[i]-size)
    Shapes.Move(bit[i][4],gw-bitY[i]-size,bitX[i]-size)
    Shapes.Move(bit[i][5],bitX[i]-size,gh-bitY[i]-size)
    Shapes.Move(bit[i][6],bitY[i]-size,gh-bitX[i]-size)
    Shapes.Move(bit[i][7],gw-bitX[i]-size,gh-bitY[i]-size)
    Shapes.Move(bit[i][8],gw-bitY[i]-size,gh-bitX[i]-size)
    
    Shapes.Rotate(bit[i][1],angle[i])
    Shapes.Rotate(bit[i][2],-angle[i]+180)
    Shapes.Rotate(bit[i][3],-angle[i]+270)
    Shapes.Rotate(bit[i][4],angle[i]+90)
    Shapes.Rotate(bit[i][5],-angle[i]+90)
    Shapes.Rotate(bit[i][6],angle[i]+270)
    Shapes.Rotate(bit[i][7],angle[i]+180)
    Shapes.Rotate(bit[i][8],-angle[i])
  EndFor
EndSub
    
