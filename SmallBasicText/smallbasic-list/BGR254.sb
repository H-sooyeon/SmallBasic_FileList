' Flag of United Kingdom

' Copyright Â© 2017 Nonki Takahashi.  The MIT License.

' Last update 2017-10-20



GraphicsWindow.Title = "Flag of United Kingdom"

SB_Workaround()

Init()

' initialize error shapes

Shapes_Init()

name = "UK"

scale = gw / 480

Group_Add()



Sub Init

  gw = 598

  gh = gw / 2

  GraphicsWindow.Width = gw

  GraphicsWindow.Height = gh

  angle = 0

EndSub



Sub Group_Add

  ' Group | add shapes to a group

  ' param name - group name

  ' param shX, shY, origin of shape array

  ' param scale - scale of group

  ' param shape[] - shape array

  ' param nGroup - number of group

  ' return nGroup - updated number of group

  ' return group - group array

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  nGroup = nGroup + 1

  grp = ""

  grp["name"] = name

  grp["x"] = shX

  grp["y"] = shY

  grp["angle"] = 0

  grp["dir"] = 1

  Shapes_CalcWidthAndHeight()

  grp["width"] = shWidth

  grp["cx"] = shWidth / 2

  grp["height"] = shHeight

  s = scale

  grp["scale"] = s

  For i = 1 To Array.GetItemCount(shape)

    shp = shape[i]

    GraphicsWindow.PenWidth = shp["pw"] * s

    If shp["pw"] > 0 Then

      GraphicsWindow.PenColor = shp["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then

      GraphicsWindow.BrushColor = shp["bc"]

    EndIf

    If Text.IsSubText("text|btn", shp["func"]) Then

      If silverlight Then

        fs = Math.Floor(shp["fs"] * 0.9)

      Else

        fs = shp["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shp["fn"]

      If shp["fb"] = "False" Then

        GraphicsWindow.FontBold = "False"

      Else

        GraphicsWindow.FontBold = "True"

      EndIf

    EndIf

    If shp["func"] = "rect" Then

      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "ell" Then

      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "tri" Then

      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)

    ElseIf shp["func"] = "line" Then

      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)

    ElseIf shp["func"] = "text" Then

      shp["obj"] = Shapes.AddText(shp["text"])

    EndIf

    x = shp["x"]

    y = shp["y"]

    shp["rx"] = x

    shp["ry"] = y

    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then

      alpha = Math.GetRadians(shp["angle"])

      SB_RotateWorkaround()

      shp["wx"] = x

      shp["wy"] = y

    EndIf

    If shp["func"] = "btn" Then

      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)

    Else

      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then

      Shapes.Rotate(shp["obj"], shp["angle"])

    EndIf

    shape[i] = shp

  EndFor

  grp["shape"] = shape

  group[nGroup] = grp

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub



Sub SB_RotateWorkaround

  ' Small Basic | Rotate workaround for Silverlight

  ' param shp - current shape

  ' param x, y - original coordinate

  ' param alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shp["func"] = "tri" Then

    x1 = -Math.Floor(shp["x3"] / 2)

    y1 = -Math.Floor(shp["y3"] / 2)

  ElseIf shp["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

EndSub



Sub SB_Workaround

  ' Small Basic | Workaround for Silverlight

  ' returns silverlight - "True" if in remote

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

    msWait = 300

  Else

    silverlight = "False"

  EndIf

EndSub



Sub Shapes_CalcWidthAndHeight

  ' Shapes | Calculate total width and height of shapes

  ' param shape[] - shape array

  ' return shWidth, shHeight - total size of shapes

  For i = i To Array.GetItemCount(shape)

    shp = shape[i]

    If shp["func"] = "tri" Or shp["func"] = "line" Then

      xmin = shp["x1"]

      xmax = shp["x1"]

      ymin = shp["y1"]

      ymax = shp["y1"]

      If shp["x2"] < xmin Then

        xmin = shp["x2"]

      EndIf

      If xmax < shp["x2"] Then

        xmax = shp["x2"]

      EndIf

      If shp["y2"] < ymin Then

        ymin = shp["y2"]

      EndIf

      If ymax < shp["y2"] Then

        ymax = shp["y2"]

      EndIf

      If shp["func"] = "tri" Then

        If shp["x3"] < xmin Then

          xmin = shp["x3"]

        EndIf

        If xmax < shp["x3"] Then

          xmax = shp["x3"]

        EndIf

        If shp["y3"] < ymin Then

          ymin = shp["y3"]

        EndIf

        If ymax < shp["y3"] Then

          ymax = shp["y3"]

        EndIf

      EndIf

      shp["width"] = xmax - xmin

      shp["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shp["x"] + shp["width"]

      shHeight = shp["y"] + shp["height"]

    Else

      If shWidth < shp["x"] + shp["width"] Then

        shWidth = shp["x"] + shp["width"]

      EndIf

      If shHeight < shp["y"] + shp["height"] Then

        shHeight = shp["y"] + shp["height"]

      EndIf

    EndIf

    shape[i] = shp

  EndFor

EndSub



Sub Shapes_Init 

  ' Shapes | Initialize shapes data 

  ' return shX, shY - current position of shapes 

  ' return shape - array of shapes 

  shX = 0  ' x offset 

  shY = 0  ' y offset 

  shape = "" 

  shape[1] = "pw=0;bc=#CF142B;func=rect;width=480;height=240;x=0;y=0;" 

  shape[2] = "pw=0;bc=#FFF;func=tri;x1=222.11;y1=0;x2=0;y2=111.05;x3=444.22;y3=111.05;x=35.77;y=128.94;" 

  shape[3] = "pw=0;bc=#FFF;func=tri;x1=222.11;y1=0;x2=0;y2=111.05;x3=444.22;y3=111.05;x=0;y=0;angle=180;" 

  shape[4] = "pw=0;bc=#FFF;func=tri;x1=111.05;y1=0;x2=0;y2=222.11;x3=222.11;y3=222.11;x=0;y=17.88;angle=90;" 

  shape[5] = "pw=0;bc=#FFF;func=tri;x1=111.05;y1=0;x2=0;y2=222.11;x3=222.11;y3=222.11;x=257.88;y=0;angle=-90;" 

  shape[6] = "pw=0;bc=#00247D;func=tri;x1=186.33;y1=0;x2=0;y2=93.16;x3=372.66;y3=93.16;x=53.66;y=146.83;" 

  shape[7] = "pw=0;bc=#00247D;func=tri;x1=186.33;y1=0;x2=0;y2=93.16;x3=372.66;y3=93.16;x=53.66;y=0;angle=180;" 

  shape[8] = "pw=0;bc=#00247D;func=tri;x1=93.16;y1=0;x2=0;y2=186.33;x3=186.33;y3=186.33;x=0;y=26.83;angle=90;" 

  shape[9] = "pw=0;bc=#00247D;func=tri;x1=93.16;y1=0;x2=0;y2=186.33;x3=186.33;y3=186.33;x=293.66;y=26.83;angle=-90;" 

  shape[10] = "pw=0;bc=#FFF;func=rect;width=480;height=80;x=0;y=80;" 

  shape[11] = "pw=0;bc=#FFF;func=rect;width=80;height=240;x=200;y=0;" 

  shape[12] = "pw=0;bc=#CF142B;func=rect;width=480;height=48;x=0;y=96;" 

  shape[13] = "pw=0;bc=#CF142B;func=rect;width=48;height=240;x=216;y=0;" 

EndSub


