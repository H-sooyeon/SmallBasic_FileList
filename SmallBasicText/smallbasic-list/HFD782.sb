'###########################
'#'Game made by Christian Dia (aid)'#
''#version 0.1'                                            #
'###########################

''''''''''''''''''''''''''''''''''''''''''''''''''Configurations''''''''''''''''''''''''''''''''''''''''''''''''''''''''

GraphicsWindow.Title = "Escape The Building by aid"
GraphicsWindow.BackgroundColor = "BLACK"
GraphicsWindow.KeyDown = KDown
GraphicsWindow.KeyUp = kUp
Controls.ButtonClicked = btnCon
GraphicsWindow.PenWidth = 0
GraphicsWindow.CanResize = "false"
GraphicsWindow.Height = 500
GraphicsWindow.Width = 500
GraphicsWindow.FontName = "Neuropol"
GraphicsWindow.FontSize = 70
GraphicsWindow.BrushColor = "White"

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Variables'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''Composite Variables'''''''''''''''''

'''''''''''''''''''''''''''''''''''''''File Paths''''''''''''''''''''''''''''''''''''''
'jpg'
gImgP = Program.Directory + "/Images/ground.jpg"
g2ImgP = Program.Directory + "/Images/ground2.jpg"
g3ImgP = Program.Directory + "/Images/ground3.jpg"
g4ImgP = Program.Directory + "/Images/ground4.jpg"
wImgP = Program.Directory + "/Images/wall.jpg"
w2ImgP = Program.Directory + "/Images/wall2.jpg"
w3ImgP = Program.Directory + "/Images/wall3.jpg"
w4ImgP = Program.Directory + "/Images/wall4.jpg"
spawnPointImgP = Program.Directory + "/Images/spawnPoint.jpg"
endPointImgP = Program.Directory + "/Images/endPoint.jpg"
teleportImgP = Program.Directory + "/Images/teleport.jpg"
lavaImgP = Program.Directory + "/Images/lava.jpg"
gateImgP = Program.Directory + "/Images/gate.jpg"
iceImgP = Program.Directory + "/Images/ice.jpg"
waterImgP = Program.Directory + "/Images/water.jpg"
boatIndImgP = Program.Directory + "/Images/boatInd.jpg"
mudImgP = Program.Directory + "/Images/mud.jpg"
'png'
char1ImgP = Program.Directory + "/Images/char1.png"
char2ImgP = Program.Directory + "/Images/char2.png"
char3ImgP = Program.Directory + "/Images/char3.png"
char4ImgP = Program.Directory + "/Images/char4.png"
coinImgP = Program.Directory + "/Images/coin.png"
keyImgP = Program.Directory + "/Images/key.png"
spikeImgP = Program.Directory + "/Images/spike.png"
spike2ImgP = Program.Directory + "/Images/spike2.png"
backGroundImgP = Program.Directory + "/Images/Background.png"
webImgP = Program.Directory + "/Images/web.png"
heartImgP = Program.Directory + "/Images/heart.png"
boatImgP = Program.Directory + "/Images/boat.png"
carImgP = Program.Directory + "/Images/car.png"
cactusImgP = Program.Directory + "/Images/cactus.jpg"
rail1ImgP = Program.Directory + "/Images/rail1.png"
rail2ImgP = Program.Directory + "/Images/rail2.png"
zombieImgP = Program.Directory + "/Images/zombie.png"
zombie2ImgP = Program.Directory + "/Images/zombie2.png"
zombie3ImgP = Program.Directory + "/Images/zombie3.png"
'file'
saveDataP = Program.Directory + "/Data/data.txt"
mapDataP = Program.Directory + "/Data/map.txt"
'SoundFx'
buttonFxP = Program.Directory + "/Sounds/buttonFX.mp3"
walk1P = Program.Directory + "/Sounds/walk1.wav"
walk2P = Program.Directory + "/Sounds/walk2.wav"
coinFxP = Program.Directory + "/Sounds/coin.mp3"
deadFxP = Program.Directory + "/Sounds/death.mp3"
bgmP = Program.Directory + "/Sounds/bgM.mp3"
teleportFxP = Program.Directory + "/Sounds/teleport.mp3"
finishedFxP = Program.Directory + "/Sounds/complete.mp3"
heartFxP = Program.Directory + "/Sounds/heart.wav"
unlockedFxP = Program.Directory + "/Sounds/unlocked.mp3"

''''''''''''''''''''Game''''''''''''''''''''''''

story = "You are trapped on the highest floor of a mysterious building! Your Goal is figure out how to get to the lowest floor and escape the building, Collect All required coins and hearts!, Survive! , and GoodLuck"
loadedGame = "false"
version = "1..0"
loadingIntro = "false"
loadingTimer = 100
gameStarted = "true"
createdGame = "false"
menuDone = "false"
paused = "false"
indTimer = 1
indLimit = 1000000
coins = 0
fps = 8
'MusicLoop'
bgMLimit = 0
bgMLimitSav = 3000

'''''''''''''''''''Map''''''''''''''''''''''

coinsLimit = 0
maxLevel = 21
removeLock = "false"
addedGraphLG = "false"
hasKey = "false"
animateSpeed = 200
onWeb = "false"
curWallImg = wImgP
curGroundImg = gImgP
boxSize = 20
'vehicles'
onBoatBol = "false"
onCarBol = "false"
onRailBol = "false"
enemies = 0

''''''''''''''Character''''''''''''''''

speedSv = 0.25 'Speed backup'
speedTw = 0.50 'Speed tweak' (running)'
speed = 1 'currentSpeed'
friction = 0.9
offSetX = 10
offSetY = 10
lastDir = 0
walking = "false"
curLives = 0
'Used for rail'
lastDirUd = 0
lastDirLr = 0
saveCurTileTime = 0
'For walk fx'
t1Limit = 30
t1Count = 0
t1On = "false"

''''''''''''enemy'''''''''''''

enemyFront = "false"

''''''''''Saved Variables'''''''''''''''

'Save variable'
curLevel = 1
lives = 3
type = 0
bgmInt = 0
fxInt = 0

'Create Game'
cRmainMenu()

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Main Game Loop'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

While gameStarted = "true"
  
  loopBgm()
  If menuDone = "true" Then
    If createdGame = "false" Then
      createGame()
      createdGame = "true"
    EndIf
    
    If paused = "false" Then
      operateChar()
      operateEnemy()
      Program.Delay(fps)
    EndIf
  EndIf
  
EndWhile

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Game Subroutines(functions)''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'Reset all variables for new level'
Sub resetVariables
  GraphicsWindow.PenWidth = 0
  gameStarted = "true"
  createdGame = "false"
  menuDone = "false"
  color = "Yellow"
  paused = "false"
  indTimer = 1
  removeLock = "false"
  addedGraphLG = "false"
  coins = 0
  coinsLimit = 0
  hasKey = "false"
  onBoatBol = "false"
  walking = "false"
  onWeb = "false"
  curLives = 0
  onCarBol = "false"
  onRailBol = "false"
  lastDirUd = 0
  lastDirLr = 0
  t1Limit = 30
  t1Count = 0
  t1On = "false"
  saveCurTileTime = 0
  loadedGame = "false"
  loadingIntro = "false"
  enemies = 0
  enemyFront = "false"
EndSub

'reset saved data'
Sub resetGame
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 1, 0)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 2, 0)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 3, 0)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 4, 0)
EndSub

'save game with notification
Sub saveGame
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 1, curLevel)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 2, lives)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 3, 1)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 4, type)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 5, bgmInt)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 6, fxInt)
  GraphicsWindow.ShowMessage("Press Ok to Continue", "GAME SAVED!")
EndSub

'save game without notification'
Sub saveGame2
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 1, curLevel)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 2, lives)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 3, 1)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 4, type)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 5, bgmInt)
' The following line could be harmful and has been automatically commented.
'   File.WriteLine(saveDataP, 6, fxInt)
EndSub

'load the saved Game
Sub loadGame
  resetVariables()
' The following line could be harmful and has been automatically commented.
'   If File.ReadLine(saveDataP, 3) = 1 Then
' The following line could be harmful and has been automatically commented.
'   curLevel = File.ReadLine(saveDataP, 1)
' The following line could be harmful and has been automatically commented.
'   lives = File.ReadLine(saveDataP, 2)
' The following line could be harmful and has been automatically commented.
'   type = File.ReadLine(saveDataP, 4)
' The following line could be harmful and has been automatically commented.
'   bgmInt = File.ReadLine(saveDataP, 5)
' The following line could be harmful and has been automatically commented.
'   fxInt = File.ReadLine(saveDataP, 6)
  GraphicsWindow.Clear()
  menuDone = "true"
  EndIf
EndSub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Menu Subroutines(functions)''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'Create Menu'
Sub cRmainMenu
  Shapes.AddImage(backGroundImgP)
  GraphicsWindow.BrushColor = "Yellow"
  GraphicsWindow.FontSize = 28
  titleMM = Shapes.AddText("Escape The Building")
  Shapes.Move(titleMM,60,100)
  GraphicsWindow.FontSize = "8"
  verTxt = Shapes.AddText("v " + version)
  Shapes.Move(verTxt, 425,135)
  GraphicsWindow.FontSize = 15
  GraphicsWindow.BrushColor = "BLACK"
  newG = Controls.AddButton("NEW GAME", 165,190)
  loadG = Controls.AddButton("LOAD GAME", 165,240)
  instructions = Controls.AddButton("INSTRUCTIONS", 165,290)
  options = Controls.AddButton("OPTIONS", 165, 340)
  Controls.SetSize(newG, 180,40)
  Controls.SetSize(loadG, 180,40)
  Controls.SetSize(instructions, 180,40)
  Controls.SetSize(options, 180,40)
  GraphicsWindow.FontSize = 9
  GraphicsWindow.BrushColor = "Yellow"
  creatorMM = Shapes.AddText("By: Christian Dia")
  Shapes.Move(creatorMM,10,480)
EndSub

'Add a warning menu if there is a saved file'
Sub newGWarn
  GraphicsWindow.BrushColor = "gray"
  shade = Shapes.AddRectangle(500,500)
  Shapes.SetOpacity(shade, 50)
  'center menu g'
  GraphicsWindow.PenWidth = 3
  bg = Shapes.AddRectangle(250,200)
  Shapes.Move(bg, 130,150)
  GraphicsWindow.BrushColor = "WHITE"
  GraphicsWindow.FontSize = 20
  txtWarn = Shapes.AddText("OVERWRITE")
  txtWarn2 = Shapes.AddText("SAVED FILE?")
  Shapes.Move(txtWarn,175,180)
  Shapes.Move(txtWarn2,173,210)
  GraphicsWindow.FontSize = 12
  GraphicsWindow.BrushColor = "Black"
  yesBtnW = Controls.AddButton("YES", 212, 250)
  Controls.SetSize(yesBtnW, 90,25)
  noBtnW = Controls.AddButton("NO", 212, 290)
  Controls.SetSize(noBtnW, 90,25)
  GraphicsWindow.PenWidth = 0
EndSub

'Remove Warning Menu'
Sub removeWarnM
  Shapes.Remove(shade)
  Shapes.Remove(bg)
  Shapes.Remove(txtWarn)
  Shapes.Remove(txtWarn2)
  Controls.Remove(yesBtnW)
  Controls.Remove(noBtnW)
EndSub

'Add floor indicator'
Sub loadFloorInd
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FontSize = 25
  txtInd = Shapes.AddText("FLOOR: " + (maxLevel-curLevel))
  Shapes.Move(txtInd, 170,230)
  While indTimer < indLimit
    indTimer = indTimer + 1
    If indTimer = indLimit Then
       Shapes.Remove(txtInd)
    EndIf
  EndWhile
EndSub

'choose your character menu'
Sub chooseCharM
  Shapes.AddImage(backGroundImgP)
  GraphicsWindow.FontSize = 25
  GraphicsWindow.BrushColor = "Yellow"
  chooseCM = Shapes.AddText("Choose Your Character")
  Shapes.Move(chooseCM,55,100)
  GraphicsWindow.FontSize = 12
  'Char1'
  imgCC = Shapes.AddImage(char1ImgP)
  Shapes.Zoom(imgCC, 3.3,3)
  Shapes.Move(imgCC,90,240)
  'Char2'
  imgCC = Shapes.AddImage(char2ImgP)
  Shapes.Zoom(imgCC, 3.3,3)
  Shapes.Move(imgCC,190,240)
  'Char3'
  imgCC = Shapes.AddImage(char3ImgP)
  Shapes.Zoom(imgCC, 3.3,3)
  Shapes.Move(imgCC,290,240)
  'Char4'
  imgCC = Shapes.AddImage(char4ImgP)
  Shapes.Zoom(imgCC, 3.3,3)
  Shapes.Move(imgCC,390,240)
  
  GraphicsWindow.BrushColor = "BLACK"
  For i = 1 To 4
    select[i] = Controls.AddButton("SELECT", 100*i-40, 320)
    Controls.SetSize(select[i], 80,30)
  EndFor
  
  back = Controls.AddButton("BACK", 20,460)
EndSub

'Options Menu'
Sub optionsMenu
  Shapes.AddImage(backGroundImgP)
  GraphicsWindow.FontSize = 30
  GraphicsWindow.BrushColor = "Yellow"
  opmTxt[0] = Shapes.AddText("Options")
  Shapes.Move(opmTxt[0],180,100)
  GraphicsWindow.FontSize = 15
  opmTxt[1] = Shapes.AddText("Music: ")
  Shapes.Move(opmTxt[1],100,210)
  opmTxt[2] = Shapes.AddText("Sound Fx: ")
  Shapes.Move(opmTxt[2],100,260)
  If bgmInt = 0 Then
    opmTxt[3] = Shapes.AddText("ON")
  Else
    opmTxt[3] = Shapes.AddText("OFF")
  EndIf
  Shapes.Move(opmTxt[3],180,210)
  If fxInt = 0 Then
    opmTxt[4] = Shapes.AddText("ON")
  Else
    opmTxt[4] = Shapes.AddText("OFF")
  EndIf
  Shapes.Move(opmTxt[4],220,260)
  GraphicsWindow.BrushColor = "BLACK"
  GraphicsWindow.FontSize = 12
  If bgmInt = 0 Then
    bgmBtn = Controls.AddButton("OFF", 225,206)
  Else
    bgmBtn = Controls.AddButton("ON", 225,206)
  EndIf
   If fxInt = 0 Then
    fxBtn = Controls.AddButton("OFF", 265,255)
  Else
    fxBtn = Controls.AddButton("ON", 265,255)
  EndIf
  back = Controls.AddButton("BACK", 20,460)
EndSub

'Add InstructionsMenu'
Sub addInsMenu
  Shapes.AddImage(backGroundImgP)
  GraphicsWindow.FontSize = 25
  GraphicsWindow.BrushColor = "Yellow"
  insTxt[0] = Shapes.AddText("Instructions")
  Shapes.Move(insTxt[0],150,100)
  GraphicsWindow.FontSize = 12
  insTxt[1] = Shapes.AddText("+ Press WASD or Arrow Keys to Move.")
  Shapes.Move(insTxt[1],100,180)
  insTxt[2] = Shapes.AddText("+ Press Space to interact with things")
  Shapes.Move(insTxt[2],100,340)
  insTxt[3] = Shapes.AddText("+ Press Shift to Run.")
  Shapes.Move(insTxt[3],100,220)
  insTxt[4] = Shapes.AddText("+ Collect All Coins and Hearts on current floor.")
  Shapes.Move(insTxt[4],100,260)
  insTxt[5] = Shapes.AddText("+ Escape on this Mysterious Building.")
  Shapes.Move(insTxt[5],100,300)
  GraphicsWindow.BrushColor = "BLACK"
  back = Controls.AddButton("BACK", 20,460)
  storyBtnM = Controls.AddButton("STORY", 410 ,460)
EndSub

'Pause menu'
Sub addPauseMenu
  'shade background'
  GraphicsWindow.BrushColor = "gray"
  shade = Shapes.AddRectangle(500,500)
  Shapes.SetOpacity(shade, 50)
  'center menu g'
  GraphicsWindow.PenWidth = 3
  bg = Shapes.AddRectangle(250,200)
  Shapes.Move(bg, 130,150)
  GraphicsWindow.BrushColor = "WHITE"
  GraphicsWindow.FontSize = 25
  txtPause = Shapes.AddText("PAUSED")
  Shapes.Move(txtPause,185,180)
  GraphicsWindow.FontSize = 12
  GraphicsWindow.BrushColor = "Black"
  resumeBtn = Controls.AddButton("RESUME", 212, 230)
  Controls.SetSize(resumeBtn, 90,25)
  menuBtn = Controls.AddButton("MENU", 212, 290)
  Controls.SetSize(menuBtn, 90, 25)
  saveBtn = Controls.AddButton("SAVE", 212, 260)
  Controls.SetSize(saveBtn, 90, 25)
  GraphicsWindow.PenWidth = 0
EndSub

'Remove PM'
Sub removePauseMenu
  Shapes.Remove(shade)
  Shapes.Remove(bg)
  Shapes.Remove(txtPause)
  Controls.Remove(resumeBtn)
  Controls.Remove(menuBtn)
  Controls.Remove(saveBtn)
EndSub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Music & SoundFx Subroutines(Functions)'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'Background Music'
Sub loopBgm
  If bgmInt = 0 Then
  If bgMLimit >= 0 Then
    bgMLimit = bgMLimit -1
  Else
    Sound.Stop(bgmP)
    Sound.Play(bgmP)
    bgMLimit = bgMLimitSav
  EndIf
 Else
   Sound.Stop(bgmP)
   bgMLimit = 0
 EndIf
EndSub

Sub playBtnFx
  If fxInt = 0 Then
  Sound.Stop(buttonFxP)
  Sound.Play(buttonFxP)
  EndIf
EndSub

Sub playCoinFx
  If fxInt = 0 Then
  Sound.Stop(coinFxP)
  Sound.Play(coinFxP)
  EndIf
EndSub

Sub playHeartFx
  If fxInt = 0 Then
  Sound.Stop(heartFxP)
  Sound.Play(heartFxP)
EndIf
EndSub

Sub playTeleportFx
  If fxInt = 0 Then
  Sound.Stop(teleportFxP)
  Sound.Play(teleportFxP)
  EndIf
EndSub

Sub playCompleteFx
  If fxInt = 0 Then
  Sound.Stop(finishedFxP)
  Sound.Play(finishedFxP)
  EndIf
EndSub

Sub playDeathFx
  If fxInt = 0 Then
  Sound.Stop(deadFxP)
  Sound.Play(deadFxP)
  EndIf
EndSub

Sub playUnlockFx
  If fxInt = 0 Then
  Sound.Stop(unlockedFxP)
  Sound.Play(unlockedFxP)
  EndIf
EndSub

Sub playWalkFx
  If fxInt = 0 Then
  rand1 = Math.GetRandomNumber(2)
  If onBoatBol = "true" Then
    'onboatFx'
  ElseIf onCarBol = "true" Then
    'carFx'
  Else
  If rand1 = 2 Then
    Sound.Stop(walk1P)
    Sound.Play(walk1P)
  Else
    Sound.Stop(walk2P)
    Sound.Play(walk2P)
  EndIf
EndIf
EndIf
EndSub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Controls (button, keyboard)''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'Keyboard Event'
Sub KDown
  lastK = GraphicsWindow.LastKey
  KB[lastK] = "true"
EndSub

Sub KUp
  lastK = GraphicsWindow.LastKey
  KB[lastK] = "false"
EndSub
  
'Button Event'
Sub btnCon
  playBtnFx()
  If Controls.LastClickedButton = newG Then
' The following line could be harmful and has been automatically commented.
'     If File.ReadLine(saveDataP, 3) = 1 Then
      newGWarn()
     Else
    curLevel = 1
    GraphicsWindow.Clear()
    chooseCharM()
    EndIf
  EndIf
  
  If Controls.LastClickedButton = back Then
    GraphicsWindow.Clear()
    cRmainMenu()
  EndIf
  
  If Controls.LastClickedButton = menuBtn Then
    GraphicsWindow.Clear()
    resetVariables()
    loadingIntro = "false"
    createdGame = "false"
    menuDone = "false"
    loadedGame = "false"
    cRmainMenu()
  EndIf
  
  If Controls.LastClickedButton = instructions Then
    GraphicsWindow.Clear()
    addInsMenu()
  EndIf
  
  If Controls.LastClickedButton = select[1] Then
    type = 0
    GraphicsWindow.Clear()
    menuDone = "true"
  ElseIf Controls.LastClickedButton = select[2] Then
    type = 1
    GraphicsWindow.Clear()
    menuDone = "true"
  ElseIf Controls.LastClickedButton = select[3] Then
    type = 2
    GraphicsWindow.Clear()
    menuDone = "true"
  ElseIf Controls.LastClickedButton = select[4] Then
    type = 3
    GraphicsWindow.Clear()
    menuDone = "true"
  EndIf
  
  If Controls.LastClickedButton = resumeBtn Then
    paused = "false"
    removePauseMenu()
  EndIf
  
  If Controls.LastClickedButton = loadG Then
' The following line could be harmful and has been automatically commented.
'     If File.ReadLine(saveDataP, 2) = 0 Then
      GraphicsWindow.ShowMessage("No Saved Game", "ERROR!")
    Else
      loadGame()
    EndIf
  EndIf
  
  If Controls.LastClickedButton = saveBtn Then
    saveGame()
  EndIf
  
  If Controls.LastClickedButton = yesBtnW Then
    resetGame()
    curLevel = 1
    GraphicsWindow.Clear()
    chooseCharM()
  EndIf
  
  If Controls.LastClickedButton = noBtnW Then
    removeWarnM()
  EndIf
  
  If Controls.LastClickedButton = storyBtnM Then
    GraphicsWindow.ShowMessage(story, "Story")
  EndIf
  
   If Controls.LastClickedButton = options Then
    optionsMenu()
  EndIf
  
  If Controls.LastClickedButton = bgmBtn Then
    GraphicsWindow.Clear()
    If bgmInt = 0 Then
      bgmInt = 1
    Else
      bgmInt = 0
    EndIf
    optionsMenu()
  EndIf
  
  If Controls.LastClickedButton = fxBtn Then
    GraphicsWindow.Clear()
    If fxInt = 0 Then
      fxInt = 1
    Else
      fxInt = 0
    EndIf
    optionsMenu()
  EndIf
  
  
EndSub

'Create the default game (floor)'
Sub createGame
  addMap()
  addChar()
  OnGameM()
  loadFloorInd()
  If curLevel = 1 Then
    GraphicsWindow.ShowMessage(story, "Story")
  EndIf
  loadedGame = "true"
EndSub

'Game menu'
Sub OnGameM
  GraphicsWindow.FontSize = 9
  GraphicsWindow.BrushColor = "White"
  livesTxtGM = Shapes.AddText("Lives: " + lives)
  Shapes.Move(livesTxtGM, 38,3)
  floorTxtGM = Shapes.AddText("FLOOR: " + (maxLevel-curLevel))
  Shapes.Move(floorTxtGM, 214,3)
  coinGraphM = Shapes.AddImage(coinImgP)
  Shapes.Move(coinGraphM, 380,1)
  coinsTxtGM = Shapes.AddText("Coins: " + coins + "/" + coinsLimit)
  Shapes.Move(coinsTxtGM, 400,3)
  heartGraph = Shapes.AddImage(heartImgP)
  Shapes.Move(heartGraph, 15,1)
EndSub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Map Subroutine(function)'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Create Map :) Tile Based Map (More easier to determine values :P)'
'hard to code, no hitTestPoint and hitTestObject function :((('
'Todo: Think and create more maps'

Sub addMap
  mapXL = 25
  mapYL = 25
  
  offSet = (curLevel-1)*26
  
  If curLevel <= 5 Then
    curGroundImg = gImgP
    curWallImg = wImgP
  ElseIf curLevel <= 10 Then
    curGroundImg = g2ImgP
    curWallImg = w2ImgP
  ElseIf curLevel <= 15 Then
    curGroundImg = g3ImgP
    curWallImg = w3ImgP
  ElseIf curLevel <= 10 Then
    curGroundImg = g4ImgP
    curWallImg = w4ImgP
  EndIf
   
' The following line could be harmful and has been automatically commented.
'     map[1] =  File.ReadLine(mapDataP, 1+offSet)
' The following line could be harmful and has been automatically commented.
'     map[2] =  File.ReadLine(mapDataP, 2+offSet)
' The following line could be harmful and has been automatically commented.
'     map[3] =  File.ReadLine(mapDataP, 3+offSet)
' The following line could be harmful and has been automatically commented.
'     map[4] =  File.ReadLine(mapDataP, 4+offSet)
' The following line could be harmful and has been automatically commented.
'     map[5] =  File.ReadLine(mapDataP, 5+offSet)
' The following line could be harmful and has been automatically commented.
'     map[6] =  File.ReadLine(mapDataP, 6+offSet)
' The following line could be harmful and has been automatically commented.
'     map[7] =  File.ReadLine(mapDataP, 7+offSet)
' The following line could be harmful and has been automatically commented.
'     map[8] =  File.ReadLine(mapDataP, 8+offSet)
' The following line could be harmful and has been automatically commented.
'     map[9] =  File.ReadLine(mapDataP, 9+offSet)
' The following line could be harmful and has been automatically commented.
'     map[10] = File.ReadLine(mapDataP, 10+offSet)
' The following line could be harmful and has been automatically commented.
'     map[11] = File.ReadLine(mapDataP, 11+offSet)
' The following line could be harmful and has been automatically commented.
'     map[12] = File.ReadLine(mapDataP, 12+offSet)
' The following line could be harmful and has been automatically commented.
'     map[13] = File.ReadLine(mapDataP, 13+offSet)
' The following line could be harmful and has been automatically commented.
'     map[14] = File.ReadLine(mapDataP, 14+offSet)
' The following line could be harmful and has been automatically commented.
'     map[15] = File.ReadLine(mapDataP, 15+offSet)
' The following line could be harmful and has been automatically commented.
'     map[16] = File.ReadLine(mapDataP, 16+offSet)
' The following line could be harmful and has been automatically commented.
'     map[17] = File.ReadLine(mapDataP, 17+offSet)
' The following line could be harmful and has been automatically commented.
'     map[18] = File.ReadLine(mapDataP, 18+offSet)
' The following line could be harmful and has been automatically commented.
'     map[19] = File.ReadLine(mapDataP, 19+offSet)
' The following line could be harmful and has been automatically commented.
'     map[20] = File.ReadLine(mapDataP, 20+offSet)
' The following line could be harmful and has been automatically commented.
'     map[21] = File.ReadLine(mapDataP, 21+offSet)
' The following line could be harmful and has been automatically commented.
'     map[22] = File.ReadLine(mapDataP, 22+offSet)
' The following line could be harmful and has been automatically commented.
'     map[23] = File.ReadLine(mapDataP, 23+offSet)
' The following line could be harmful and has been automatically commented.
'     map[24] = File.ReadLine(mapDataP, 24+offSet)
' The following line could be harmful and has been automatically commented.
'     map[25] = File.ReadLine(mapDataP, 25+offSet)

  For y = 0 To mapYL
    curRow = map[y]
    For x = 0 To mapXL
    
      curTile["walkable"] = Text.GetSubText(curRow, x, 1)
      curTile["gridX"] = x
      curTile["gridY"] = y
  
      curMap[x][y] = curTile
      
    EndFor
  EndFor

  For y = 0 To mapYL
    For x = 0 To mapXL
      If curMap[x][y]["walkable"] = 0 Then
        imgGraph = curWallImg
        
      ElseIF curMap[x][y]["walkable"] = 1 Then
        imgGraph = curGroundImg
        
      ElseIf curMap[x][y]["walkable"] = 2 Then
        spawnX = x
        spawnY = y
        imgGraph = spawnPointImgP
        
      ElseIf curMap[x][y]["walkable"] = 3 Then
        finishX = x
        finishY = y
        imgGraph = endPointImgP
        
      ElseIF curMap[x][y]["walkable"] = 4 Then
        imgGraph = iceImgP
        
      ElseIF curMap[x][y]["walkable"] = 5 Then
        imgGraph = lavaImgP
       
      ElseIF curMap[x][y]["walkable"] = 6 Then
        teleportX2 = x
        teleportY2 = y
        imgGraph = teleportImgP
        
      ElseIF curMap[x][y]["walkable"] = 7 Then
        teleportX1 = x
        teleportY1 = y
        imgGraph = teleportImgP
        
      ElseIf curMap[x][y]["walkable"] = 8 Then
        imgGraph = curGroundImg
        
      ElseIf curMap[x][y]["walkable"] = 9 Then
        imgGraph = curGroundImg
        
      ElseIf curMap[x][y]["walkable"] = "a" Then
        imgGraph = curGroundImg
        
      ElseIf curMap[x][y]["walkable"] = "b" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "c" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "d" Then
        imgGraph = gateImgP
        lockedTileX = x
        lockedTileY = y
        
      ElseIF curMap[x][y]["walkable"] = "e" Then
        imgGraph = curGroundImg
        coinsLimit = coinsLimit + 1
        
      ElseIF curMap[x][y]["walkable"] = "f" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "g" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "h" Then
        imgGraph = boatIndImgP
        
      ElseIF curMap[x][y]["walkable"] = "i" Then
        imgGraph = boatIndImgP
        
      ElseIF curMap[x][y]["walkable"] = "j" Then
        imgGraph = waterImgP
        
      ElseIF curMap[x][y]["walkable"] = "k" Then
        imgGraph = waterImgP
        
      ElseIF curMap[x][y]["walkable"] = "l" Then
        imgGraph = waterImgP
        coinsLimit = coinsLimit + 1
        
      ElseIF curMap[x][y]["walkable"] = "m" Then
        imgGraph = waterImgP
        
      ElseIF curMap[x][y]["walkable"] = "n" Then
        imgGraph = mudImgP
        
      ElseIF curMap[x][y]["walkable"] = "o" Then
        imgGraph = boatIndImgP
        
      ElseIF curMap[x][y]["walkable"] = "p" Then
        imgGraph = mudImgP
        coinsLimit = coinsLimit + 1
        
      ElseIF curMap[x][y]["walkable"] = "q" Then
        imgGraph = mudImgP
        
      ElseIF curMap[x][y]["walkable"] = "r" Then
        imgGraph = mudImgP
        
      ElseIF curMap[x][y]["walkable"] = "s" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "t" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "u" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "v" Then
        'imgGraph = curGroundImg'
      
      ElseIF curMap[x][y]["walkable"] = "w" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "x" Then
        'imgGraph = curGroundImg'
        
      ElseIF curMap[x][y]["walkable"] = "y" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "z" Then
        'imgGraph = curGroundImg'
        
      ElseIF curMap[x][y]["walkable"] = "+" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "-" Then
        'imgGraph = curGroundImg'
        
      ElseIF curMap[x][y]["walkable"] = "=" Then
        imgGraph = cactusImgP
        
      ElseIF curMap[x][y]["walkable"] = "A" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "B" Then
        imgGraph = curGroundImg
        
      ElseIF curMap[x][y]["walkable"] = "C" Then
        imgGraph = curGroundImg
      
      EndIf
      
      rectangle = Shapes.AddImage(imgGraph)
      boxes[x][y] = rectangle
      Shapes.Animate(rectangle, (x-1) * boxSize, (y-1) * boxSize, animateSpeed)
      
      'Design'
      'Spike Up'
      If curMap[x][y]["walkable"] = 8 Then
        spikeGraph = Shapes.AddImage(spikeImgP)
        Shapes.Animate(spikeGraph, (x-1) * boxSize, (y-1) * boxSize, animateSpeed)
      EndIf
      
      'Spike Down'
      If curMap[x][y]["walkable"] = 9 Then
        spikeGraph = Shapes.AddImage(spikeImgP)
        Shapes.Rotate(spikeGraph, 180)
        Shapes.Animate(spikeGraph, (x-1) * boxSize, (y-1) * boxSize, animateSpeed)
      EndIf
      
      'Spike Left'
       If curMap[x][y]["walkable"] = "a" Then
         spikeGraph = Shapes.AddImage(spikeImgP)
        Shapes.Rotate(spikeGraph, -90)
        Shapes.Animate(spikeGraph, (x-1) * boxSize, (y-1) * boxSize, animateSpeed)
      EndIf
      
      'Spike Right'
       If curMap[x][y]["walkable"] = "b" Then
        spikeGraph = Shapes.AddImage(spikeImgP)
        Shapes.Rotate(spikeGraph, 90)
        Shapes.Animate(spikeGraph, (x-1) * boxSize, (y-1) * boxSize, animateSpeed)
      EndIf
      
      'Key'
       If curMap[x][y]["walkable"] = "c" Then
        keyGraph = Shapes.AddImage(keyImgP)
        Shapes.Animate(keyGraph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
       'Coin'
       If curMap[x][y]["walkable"] = "e" Then
        coinGraph = Shapes.AddImage(coinImgP)
        Shapes.Animate(coinGraph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'web'
      If curMap[x][y]["walkable"] = "f" Then
        webGraph = Shapes.AddImage(webImgP)
        Shapes.Animate(webGraph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'heart'
      If curMap[x][y]["walkable"] = "g" Then
        heartGraph = Shapes.AddImage(heartImgP)
        Shapes.Animate(heartGraph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'boat'
       If curMap[x][y]["walkable"] = "h" Then
        boatGraph = Shapes.AddImage(boatImgP)
        Shapes.Animate(boatGraph, ((x-1) * boxSize)+3, ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'spikeW'
        If curMap[x][y]["walkable"] = "k" Then
          spike2Graph = Shapes.AddImage(spike2ImgP)
          Shapes.Animate(spike2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'coinW'
       If curMap[x][y]["walkable"] = "l" Then
        coin2Graph = Shapes.AddImage(coinImgP)
        Shapes.Animate(coin2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'heartW'
      If curMap[x][y]["walkable"] = "m" Then
        heart2Graph = Shapes.AddImage(heartImgP)
        Shapes.Animate(heart2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'car'
      If curMap[x][y]["walkable"] = "o" Then
        carGraph = Shapes.AddImage(carImgP)
        Shapes.Animate(carGraph, ((x-1) * boxSize)+3, ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'coinD'
       If curMap[x][y]["walkable"] = "p" Then
        coin3Graph = Shapes.AddImage(coinImgP)
        Shapes.Animate(coin3Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'spikeD'
       If curMap[x][y]["walkable"] = "q" Then
        spike3Graph = Shapes.AddImage(spike2ImgP)
        Shapes.Animate(spike3Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'heartD'
       If curMap[x][y]["walkable"] = "r" Then
        heart3Graph = Shapes.AddImage(heartImgP)
        Shapes.Animate(heart3Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'railUd'
       If curMap[x][y]["walkable"] = "s" Then
        railGraph = Shapes.AddImage(rail1ImgP)
        Shapes.Animate(railGraph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'railLR'
       If curMap[x][y]["walkable"] = "t" Then
         railGraph = Shapes.AddImage(rail1ImgP)
         Shapes.Rotate(railGraph, -90)
         Shapes.Animate(railGraph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
       'railDL'
       If curMap[x][y]["walkable"] = "u" Then
         rail2Graph = Shapes.AddImage(rail2ImgP)
         Shapes.Rotate(rail2Graph, -180)
         Shapes.Animate(rail2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
      EndIf
      
      'railRU'
       If curMap[x][y]["walkable"] = "v" Then
         'No need to code this'
       EndIf
       
       'RailDR'
       If curMap[x][y]["walkable"] = "w" Then
         rail2Graph = Shapes.AddImage(rail2ImgP)
         Shapes.Rotate(rail2Graph, -90)
         Shapes.Animate(rail2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
       EndIf
       
        'RailLU'
        If curMap[x][y]["walkable"] = "x" Then
         'No need to code this'
       EndIf
       
        'Rail UL'
        If curMap[x][y]["walkable"] = "y" Then
         rail2Graph = Shapes.AddImage(rail2ImgP)
         Shapes.Rotate(rail2Graph, 90)
         Shapes.Animate(rail2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
       EndIf
       
       'Rail RD'
        If curMap[x][y]["walkable"] = "z" Then
         'No need to code this'
       EndIf
       
       'Rail UR'
        If curMap[x][y]["walkable"] = "+" Then
         rail2Graph = Shapes.AddImage(rail2ImgP)
         Shapes.Rotate(rail2Graph, 0)
         Shapes.Animate(rail2Graph, ((x-1) * boxSize), ((y-1) * boxSize), animateSpeed)
       EndIf
       
       'Rail LD'
        If curMap[x][y]["walkable"] = "-" Then
         'No need to code this'
       EndIf
       
       'Zombie'
       If curMap[x][y]["walkable"] = "A" Then
         enemyImg[enemies] = Shapes.AddImage(zombieImgP)
         enemyX[enemies] = ((x-1) * boxSize)+10
         enemyY[enemies] = ((y-1) * boxSize)+10
         enemyVelX[enemies] = 0
         enemyVelY[enemies] = 0
         enemyMaxSpeed[enemies] = 1
         enemyDirX[enemies] = Math.GetRandomNumber(2)
         enemyDirY[enemies] = Math.GetRandomNumber(2)
         enemySpeed[enemies] = 0.025
         enemyType[enemies] = 0
         Shapes.Animate(enemyImg[enemies],enemyX[enemies]-10,enemyY[enemies]-10, animateSpeed)
         enemies = enemies + 1
       EndIf
       
       'Fast Zombie'
       If curMap[x][y]["walkable"] = "B" Then
         enemyImg[enemies] = Shapes.AddImage(zombie2ImgP)
         enemyX[enemies] = ((x-1) * boxSize)+10
         enemyY[enemies] = ((y-1) * boxSize)+10
         enemyVelX[enemies] = 0
         enemyVelY[enemies] = 0
         enemyMaxSpeed[enemies] = 1
         enemyDirX[enemies] = Math.GetRandomNumber(2)
         enemyDirY[enemies] = Math.GetRandomNumber(2)
         enemySpeed[enemies] = 0.05
         enemyType[enemies] = 1
         Shapes.Animate(enemyImg[enemies],enemyX[enemies]-10,enemyY[enemies]-10, animateSpeed)
         enemies = enemies + 1
       EndIf
       
        'Fast Zombie'
       If curMap[x][y]["walkable"] = "C" Then
         enemyImg[enemies] = Shapes.AddImage(zombie3ImgP)
         enemyX[enemies] = ((x-1) * boxSize)+10
         enemyY[enemies] = ((y-1) * boxSize)+10
         enemyVelX[enemies] = 0
         enemyVelY[enemies] = 0
         enemyMaxSpeed[enemies] = 1
         enemyDirX[enemies] = Math.GetRandomNumber(2)
         enemyDirY[enemies] = Math.GetRandomNumber(2)
         enemySpeed[enemies] = 0.075
         enemyType[enemies] = 2
         Shapes.Animate(enemyImg[enemies],enemyX[enemies]-10,enemyY[enemies]-10, animateSpeed)
         enemies = enemies + 1
       EndIf
      
     EndFor
   EndFor
EndSub

'Reset KeyBoard Function'
Sub resetKeyBoard
  KB["Space"] = "false"
  KB["Up"] = "false"
  KB["Down"] = "false"
  KB["Left"] = "false"
  KB["Right"] = "false"
  KB["W"] = "false"
  KB["A"] = "false"
  KB["S"] = "false"
  KB["D"] = "false"
  KB["RightShift"] = "false"
  KB["LeftShift"] = "false"
EndSub


'Restart Level Function'
Sub restartLevel
  resetVariables()
  resetKeyBoard()
  gameStarted = "false"
  GraphicsWindow.Clear()
   addMap()
   addChar()
   loadFloorInd()
   OnGameM()
   gameStarted = "true"
EndSub

'Next Level Function'
Sub nextLevel
   resetVariables()
   resetKeyBoard()
   menuDone = "true"
   createdGame = "true"
   gameStarted = "false"
   curLevel = curLevel + 1
   GraphicsWindow.Clear()
   addMap()
   addChar()
   loadFloorInd()
   OnGameM()
   gameStarted = "true"
 EndSub
 
 
 ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Character Subroutines(functions)''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
'Create char function'
Sub addChar
  If type = 0 Then
    img = Shapes.AddImage(char1ImgP)
  ElseIf type = 1 Then
    img = Shapes.AddImage(char2ImgP)
  ElseIf type = 2 Then
    img = Shapes.AddImage(char3ImgP)
  ElseIf type = 3 Then
    img = Shapes.AddImage(char4ImgP)
  EndIf
  char["img"] = img
  char["x"] = (spawnX*boxSize)-17
  char["Y"] = (spawnY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  char["angle"] = 0
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
EndSub

'Operatechar function'
Sub operateChar
  
   '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Keyboard & Character Control'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  
  'set char current tile'
  charCurTileX = Math.Floor( char["x"] / boxSize ) + 1
  charCurTileY = Math.Floor( char["Y"] / boxSize ) + 1
  
  'set char overtile(set tile moreAdvanced to char)' 
  charOtX = Math.Floor( ( char["x"] + char["velX"] ) / boxSize ) + 1
  charOtY = Math.Floor( ( char["Y"] + char["velY"] ) / boxSize ) + 1
  
  'Apply velocity'
  char["x"] = char["x"] + char["velX"]
  char["Y"] = char["Y"] + char["velY"]

  Shapes.Move(char["img"], char["x"] - offSetX, char["Y"] - offSetY)
  
  'apply friction'
  char["velX"] = char["velX"] * friction
  char["velY"] = char["velY"] * friction
  
  'KeyboardEvent Function operateChar'
  If KB["W"] = "true" Or KB["Up"] = "true" Then
    char["velY"] = char["velY"] - speed
    char["angle"] = 180
    lastDir = 1
    lastDirUd = 0
  EndIf
  If KB["A"] = "true" Or KB["Left"] = "true" Then
    char["velX"] = char["velX"] - speed
    char["angle"] = 90
    lastDir = 2
    lastDirLr = 0
  EndIf
  If KB["S"] = "true" Or KB["Down"] = "true" Then
    char["velY"] = char["velY"] + speed
    char["angle"] = 0
    lastDir = 3
    lastDirUd = 1
  EndIf
  If KB["D"] = "true" Or KB["Right"] = "true" Then
    char["velX"] = char["velX"] + speed
    char["angle"] = -90
    lastDir = 4
    lastDirLr = 1
  EndIf
  If KB["P"] = "true" Then
    If loadedGame = "true" Then
      If paused = "false" Then
        paused = "true
        addPauseMenu()
      EndIf
    EndIf
  EndIf
  
  'handle speed and walkspeedFx'
  If KB["RightShift"] = "true" Or KB["LeftShift"] = "true" Then
    If curMap[charCurTileX][charCurTileY]["walkable"] = "f" Then
      char["maxSpeed"] = 0.2
    ElseIf onCarBol = "true" Then
      char["maxSpeed"] = 4
      
    ElseIf onBoatBol = "true" Then
      char["maxSpeed"] = 1
      
    ElseIf curMap[charCurTileX][charCurTileY]["walkable"] = "n" Then
      char["maxSpeed"] = 0.05
      t1Limit = 40
    Else
      char["maxSpeed"] = 2
      t1Limit = 20
    EndIf
    
    ElseIf curMap[charCurTileX][charCurTileY]["walkable"] = "f" Then
      char["maxSpeed"] = 0.2
      
    ElseIf onBoatBol = "true" Then
      char["maxSpeed"] = 0.5
      
    ElseIf onCarBol = "true" Then
      char["maxSpeed"] = 3
      
    ElseIf curMap[charCurTileX][charCurTileY]["walkable"] = "n" Then
      char["maxSpeed"] = 0.025
      t1Limit = 50
    Else
    char["maxSpeed"] = 1
    t1Limit = 30
  EndIf
  If KB["Space"] = "true" Then
    If onBoatBol = "true" Then
      saveX = charCurTileX
      saveY = charCurTileY
      goOutBoat()
      onBoatBol = "false"
    EndIf
    If onCarBol = "true" Then
      saveX = charCurTileX
      saveY = charCurTileY
      goOutCar()
      onCarBol = "false"
    EndIf
  EndIf
  
  'handle char maxSpeed'
  If char["velX"] > char["maxSpeed"] Then
    char["velX"] = char["maxSpeed"]
  EndIf
  If char["velY"] > char["maxSpeed"] Then
    char["velY"] = char["maxSpeed"]
  EndIf
  If char["velX"] < (-1 * char["maxSpeed"]) Then
    char["velX"] = (-1 * char["maxSpeed"])
  EndIf
  If char["velY"] < (-1 * char["maxSpeed"]) Then
    char["velY"] = (-1 * char["maxSpeed"])
  EndIf
  
  'char angle'
  Shapes.Rotate(img, char["angle"])
  
 
 '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Mixed''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
  'Block walls if around char is walls and Gates as well as boats'
  If onBoatBol = "false" Then
    If curMap[charOtX][charCurTileY]["walkable"] = 0 Then
      char["velX"] = char["velX"] * -1
    EndIf
    If curMap[charCurTileX][charOtY]["walkable"] = 0 Then
      char["velY"] = char["velY"] * -1
    EndIf
  Else
    blockedWTiles[0] = 0
    blockedWTiles[1] = 1
    blockedWTiles[2] = 2
    blockedWTiles[3] = 3
    blockedWTiles[4] = 4
    blockedWTiles[5] = 5
    blockedWTiles[6] = 6
    blockedWTiles[7] = 7
    blockedWTiles[8] = 8
    blockedWTiles[9] = 9
    blockedWTiles[10] = "a"
    blockedWTiles[11] = "b"
    blockedWTiles[12] = "c"
    blockedWTiles[13] = "d"
    blockedWTiles[14] = "e"
    blockedWTiles[15] = "f"
    blockedWTiles[16] = "g"
    For blT = 0 To 16
      If curMap[charOtX][charCurTileY]["walkable"] = blT Then
        char["velX"] = char["velX"] * -1
      EndIf
      If curMap[charCurTileX][charOtY]["walkable"] = blT Then
        char["velY"] = char["velY"] * -1
      EndIf
    EndFor
  EndIf
  
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Ground(no vehicle)'''''''''''''''''''''''''''''''''''''''''''''''''''''
   
   'Apply keyGet'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "c" Then
     If removeLock = "false" Then
       Shapes.Remove(keyGraph)
       playUnlockFx()
       removeLock = "true"
       hasKey = "true"
     EndIf
   EndIf
   
   'Apply coin get'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "e" Then
     imgGraph = curGroundImg
     newT = Shapes.AddImage(imgGraph)
     Shapes.Move(newT, ((charCurTileX-1)*boxSize), ((charCurTileY-1)*boxSize))
     saveX = charCurTileX
     saveY = charCurTileY
     addCoin()
     curMap[charCurTileX][charCurTileY]["walkable"] = "1"
   EndIf
   
   'Apply heart get'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "g" Then
     imgGraph = curGroundImg
     newT = Shapes.AddImage(imgGraph)
     Shapes.Move(newT, ((charCurTileX-1)*boxSize), ((charCurTileY-1)*boxSize))
     saveX = charCurTileX
     saveY = charCurTileY
     addHeart()
     curLives = curLives + 1
     curMap[charCurTileX][charCurTileY]["walkable"] = "1"
   EndIf
  
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Vehicles''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''[Car]''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  
  If onCarBol = "true" Then 
    If curMap[charOtX][charCurTileY]["walkable"] = 6 Or curMap[charOtX][charCurTileY]["walkable"] = 7 Then
      char["velX"] = char["velX"] * -1
    EndIf
    If curMap[charOtX][charCurTileY]["walkable"] = 6 Or curMap[charOtX][charCurTileY]["walkable"] = 7 Then
      char["velY"] = char["velY"] * -1
    EndIf
  EndIf
  
  'apply onCar'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "o" Then
     If KB["Space"] = "true" Then
     saveX = charCurTileX
     saveY = charCurTileY
     onCar()
     onCarBol = "true"
     curMap[charCurTileX][charCurTileY]["walkable"] = "i"
     KB["Space"] = "false"
     EndIf
   EndIf
   
    
   'Apply coinDirt get'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "p" Then
     If onCarBol = "true" Then
     imgGraph = mudImgP
     newT = Shapes.AddImage(imgGraph)
     Shapes.Move(newT, ((charCurTileX-1)*boxSize), ((charCurTileY-1)*boxSize))
     saveX = charCurTileX
     saveY = charCurTileY
     addCoinDirt()
     curMap[charCurTileX][charCurTileY]["walkable"] = "n"
     EndIf
   EndIf
   
   'Apply heartDirt get'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "r" Then
     If onCarBol = "true" Then
     imgGraph = mudImgP
     newT = Shapes.AddImage(imgGraph)
     Shapes.Move(newT, ((charCurTileX-1)*boxSize), ((charCurTileY-1)*boxSize))
     saveX = charCurTileX
     saveY = charCurTileY
     addHeartDirt()
     curLives = curLives + 1
     curMap[charCurTileX][charCurTileY]["walkable"] = "n"
     EndIf
   EndIf
  
  
  'gotonext lvl if char is on end'
  If curMap[charCurTileX][charCurTileY]["walkable"] = 3 Then
    If coins = coinsLimit Then
      playCompleteFx()
      GraphicsWindow.ShowMessage("You escaped floor: " + (maxLevel-curLevel), "Level Complete!")
      nextLevel()
      saveGame2()
    EndIf
  EndIf
 
  'apply friction to block'
  If curMap[charCurTileX][charCurTileY]["walkable"] = 4 Then
    friction = 1
  ElseIf curMap[charCurTileX][charCurTileY]["walkable"] = "u" Or curMap[charCurTileX][charCurTileY]["walkable"] = "v" Or curMap[charCurTileX][charCurTileY]["walkable"] = "w" Or curMap[charCurTileX][charCurTileY]["walkable"] = "x" Or curMap[charCurTileX][charCurTileY]["walkable"] = "w" Or curMap[charCurTileX][charCurTileY]["walkable"] = "y" Or curMap[charCurTileX][charCurTileY]["walkable"] = "w" Or curMap[charCurTileX][charCurTileY]["walkable"] = "z" Or curMap[charCurTileX][charCurTileY]["walkable"] = "+" Or curMap[charCurTileX][charCurTileY]["walkable"] = "-" Then
    friction = 0
  ElseIf curMap[charCurTileX][charCurTileY]["walkable"] = "f" Then
    friction = 0.01
  Else
    friction = 0.9
  EndIf
  
   ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Boat'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
   
   'apply onboat'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "h" Then
     If KB["Space"] = "true" Then
     saveX = charCurTileX
     saveY = charCurTileY
     onBoat()
     curMap[charCurTileX][charCurTileY]["walkable"] = "i"
     KB["Space"] = "false"
     EndIf
   EndIf
   
   'Apply coinWater get'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "l" Then
     If onBoatBol = "true" Then
     imgGraph = waterImgP
     newT = Shapes.AddImage(imgGraph)
     Shapes.Move(newT, ((charCurTileX-1)*boxSize), ((charCurTileY-1)*boxSize))
     saveX = charCurTileX
     saveY = charCurTileY
     addCoinWater()
     curMap[charCurTileX][charCurTileY]["walkable"] = "j"
     Else 
     dieChar()
     EndIf
   EndIf
   
   'Apply heartWater get'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "m" Then
     If onBoatBol = "true" Then
     imgGraph = waterImgP
     newT = Shapes.AddImage(imgGraph)
     Shapes.Move(newT, ((charCurTileX-1)*boxSize), ((charCurTileY-1)*boxSize))
     saveX = charCurTileX
     saveY = charCurTileY
     addHeartWater()
     curMap[charCurTileX][charCurTileY]["walkable"] = "j"
     curLives = curLives + 1
     Else
     dieChar()
     EndIf
   EndIf
   
   '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Rail''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
   
   'Rotate Char'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "s" Then
     If lastDirUd = 0 Then
       char["velY"] = char["velY"] - speed
       char["angle"] = 180
     ElseIf lastDirUd = 1 Then
       char["velY"] = char["velY"] + speed
       char["angle"] = 0
     EndIf
   EndIf
   
   If curMap[charCurTileX][charCurTileY]["walkable"] = "t" Then
     If lastDirLr = 0 Then
       char["velX"] = char["velX"] - speed
       char["angle"] = 90
     ElseIf lastDirLr = 1 Then
       char["velX"] = char["velX"] + speed
       char["angle"] = -90
     EndIf
   EndIf
   
    'DL Raill && LU Rail'
    If curMap[charCurTileX][charCurTileY]["walkable"] = "u" Then
       char["velX"] = char["velX"] - speed*10
       char["angle"] = 90
       char["velY"] = char["velY"] + speed
       char["angle"] = 180
       lastDirLr = 0
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol[0] = "true"
     EndIf
     
     If curMap[charCurTileX][charCurTileY]["walkable"] = "v" Then
       char["velX"] = char["velX"] - speed/2
       char["angle"] = 90
       char["velY"] = char["velY"] - speed
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol2[0] = "true" 
       char["angle"] = 180
       lastDirUd = 0
     EndIf
     
     If saveCurTileBol[0] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "v"
         saveCurTileTime = 0
         saveCurTileBol[0] = "false"
       EndIf
     EndIf
     
     If saveCurTileBol2[0] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "u"
         saveCurTileTime = 0
         saveCurTileBol2[0] = "false"
       EndIf
     EndIf
     
     'Rail DR && Rail LU'
     If curMap[charCurTileX][charCurTileY]["walkable"] = "w" Then
       char["velX"] = char["velX"] + speed*8
       char["angle"] = 90
       char["velY"] = char["velY"] + speed*4
       char["angle"] = 180
       lastDirLr = 1
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol[1] = "true"
     EndIf
     
     If curMap[charCurTileX][charCurTileY]["walkable"] = "x" Then
       char["velX"] = char["velX"] - speed*2.2
       char["angle"] = 90
       char["velY"] = char["velY"] - speed*2
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol2[1] = "true" 
       char["angle"] = 180
       lastDirUd = 0
     EndIf
     
     If saveCurTileBol[1] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "x"
         saveCurTileTime = 0
         saveCurTileBol[1] = "false"
       EndIf
     EndIf
     
     If saveCurTileBol2[1] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "w"
         saveCurTileTime = 0
         saveCurTileBol2[1] = "false"
       EndIf
     EndIf
     
     'Rail UL && Rail RD'
     If curMap[charCurTileX][charCurTileY]["walkable"] = "y" Then
       char["velX"] = char["velX"] - speed*8
       char["angle"] = 90
       char["velY"] = char["velY"] - speed*2
       char["angle"] = 180
       lastDirLr = 0
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol[2] = "true"
     EndIf
     
     If curMap[charCurTileX][charCurTileY]["walkable"] = "z" Then
       char["velX"] = char["velX"] + speed
       char["angle"] = 90
       char["velY"] = char["velY"] + speed
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol2[2] = "true" 
       char["angle"] = 180
       lastDirUd = 1
     EndIf
     
     If saveCurTileBol[2] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "z"
         saveCurTileTime = 0
         saveCurTileBol[2] = "false"
       EndIf
     EndIf
     
     If saveCurTileBol2[2] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "y"
         saveCurTileTime = 0
         saveCurTileBol2[2] = "false"
       EndIf
     EndIf
    
     'Rail UR&& Rail LD'
     If curMap[charCurTileX][charCurTileY]["walkable"] = "+" Then
       char["velX"] = char["velX"] + speed*8
       char["angle"] = 90
       char["velY"] = char["velY"] - speed
       char["angle"] = 180
       lastDirLr = 1
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol[3] = "true"
     EndIf
     
     If curMap[charCurTileX][charCurTileY]["walkable"] = "-" Then
       char["velX"] = char["velX"] - speed
       char["angle"] = 90
       char["velY"] = char["velY"] + speed
       saveCurTileX = charCurTileX
       saveCurTileY = charCurTileY
       saveCurTileBol2[3] = "true" 
       char["angle"] = 180
       lastDirUd = 1
     EndIf
     
     If saveCurTileBol[3] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "-"
         saveCurTileTime = 0
         saveCurTileBol[3] = "false"
       EndIf
     EndIf
     
     If saveCurTileBol2[3] = "true" Then
       saveCurTileTime = saveCurTileTime + 1
       If saveCurTileTime >= 25 Then
         curMap[saveCurTileX][saveCurTileY]["walkable"] = "+"
         saveCurTileTime = 0
         saveCurTileBol2[3] = "false"
       EndIf
     EndIf
  
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Damages'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  
   'lava'
   If curMap[charCurTileX][charCurTileY]["walkable"] = 5 Then
     dieChar()
   EndIf
   
   'spikes'
   If curMap[charCurTileX][charCurTileY]["walkable"] = 8 Or curMap[charCurTileX][charCurTileY]["walkable"] = 9 Or curMap[charCurTileX][charCurTileY]["walkable"] = "a" Or curMap[charCurTileX][charCurTileY]["walkable"] = "b" Then
     dieChar()
   EndIf
   
   'Cactus'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "=" Then
     dieChar()
   EndIf
   
   ''''''''''''''''Water'''''''''''''''''
   
   'apply damage on water if not on boat'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "j" Then
     If onBoatBol = "false" Then
       dieChar()
     EndIf
   EndIf
   
   'apply damage on spike(water)'
   If curMap[charCurTileX][charCurTileY]["walkable"] = "k" Then
     dieChar()
   EndIf
   
   '''''''''''''Dirt''''''''''''
   
    'Apply damage on spike(dirt)
   If curMap[charCurTileX][charCurTileY]["walkable"] = "q" Then
     dieChar()
   EndIf
   
  '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Others''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
   
  'Gate remove'
  If removeLock = "false" Then
    If curMap[charOtX][charCurTileY]["walkable"] = "d" Then
      char["velX"] = char["velX"] * -1
    EndIf
    If curMap[charCurTileX][charOtY]["walkable"] = "d" Then
      char["velY"] = char["velY"] * -1
    EndIf
  Else
  If addedGraphLG = "false" Then
      imgGraph = curGroundImg
      newT = Shapes.AddImage(imgGraph)
      Shapes.Move(newT, (lockedTileX-1)*boxSize, (lockedTileY-1)*boxSize)
      addedGraphLG = "true"
      saveX = charCurTileX
      saveY = charCurTileY
      gotoFrontChar()
    EndIf
  EndIf
  
  'Teleportation'
  If curMap[charCurTileX][charCurTileY]["walkable"] = 6 Then
    If KB["SPACE"] = "true" Then
    char["x"] = (teleportX1*boxSize)-18
    char["y"] = teleportY1*boxSize-8
    playTeleportFx()
    KB["SPACE"] = "false"
    EndIf
  EndIf
  If curMap[charCurTileX][charCurTileY]["walkable"] = 7 Then
    IF KB["SPACE"] = "true" Then
    char["x"] = (teleportX2*boxSize)-18
    char["y"] = teleportY2*boxSize-8
    playTeleportFx()
    KB["SPACE"] = "false"
     EndIf
  EndIf
  
  'Blocks char of going further the map'
  If charOtY > mapYL Then
    char["velY"] = char["velY"] * -1
  EndIf
  If charOtY < 1 Then
    char["velY"] = char["velY"] * -1
  EndIf
  If charOtX > mapXL Then
    char["velX"] = char["velX"] * -1
  EndIf
  If charOtX < 1 Then
    char["velX"] = char["velX"] * -1
  EndIf
  
  'handle soundFx'
  If KB["W"] = "true" Or KB["Up"] = "true" Or KB["A"] = "true" Or KB["Left"] = "true" Or KB["S"] = "true" Or KB["Down"] = "true" Or KB["D"] = "true" Or KB["Right"] = "true" Then
    If onBoatBol = "false" Then
    If t1Count <= t1Limit Then
      t1Count = t1Count + 1
    Else
      t1Count = 0
      playWalkFx()
    EndIf
    EndIf
  EndIf
  
EndSub

'''''''''''''''''''''''''''''''''''''''''Character Subroutines(functions)'''''''''''''''''''''''''''''''''''''''

'Make char die'
Sub dieChar
  resetKeyBoard()
  If lives > 0 Then
    lives = lives - 1
    lives = lives - curLives 'Remove current lives that the user had'
    playDeathFx()
    GraphicsWindow.ShowMessage("Lives: " + lives, "You Died")
    restartLevel()
    menuDone = "true"
    createdGame = "true"
  Else
    'gameOver'
    GraphicsWindow.ShowMessage("Press Ok to Continue" + lives, "Game Over!")
  EndIf
EndSub

''''''''''''''''''''''''''''''''Ground'''''''''''''''''''''''''''''

'Add coin function tweak'
Sub addCoin
  Shapes.Remove(img)
  playCoinFx()
   If type = 0 Then
    img = Shapes.AddImage(char1ImgP)
  ElseIf type = 1 Then
    img = Shapes.AddImage(char2ImgP)
  ElseIf type = 2 Then
    img = Shapes.AddImage(char3ImgP)
  ElseIf type = 3 Then
    img = Shapes.AddImage(char4ImgP)
  EndIf
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  coins = coins + 1
  Shapes.SetText(coinsTxtGM, "Coins: " + coins + "/" + coinsLimit)
  enemyFront = "false"
EndSub

'addHeart function tweak'
Sub addHeart
  Shapes.Remove(img)
  playHeartFx()
   If type = 0 Then
    img = Shapes.AddImage(char1ImgP)
  ElseIf type = 1 Then
    img = Shapes.AddImage(char2ImgP)
  ElseIf type = 2 Then
    img = Shapes.AddImage(char3ImgP)
  ElseIf type = 3 Then
    img = Shapes.AddImage(char4ImgP)
  EndIf
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  lives = lives + 1
  Shapes.SetText(livesTxtGM, "Lives: " + lives)
  enemyFront = "false"
EndSub

''''''''''''''''''''''''''''''''''''''''''''Water(Boat)''''''''''''''''''''''''''''''''''''''''''''''''''''''

'Add coin on water function tweak'
Sub addCoinWater
  Shapes.Remove(img)
  playCoinFx()
  boatGraph = boatImgP
  img = Shapes.AddImage(boatGraph) 
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  coins = coins + 1
  Shapes.SetText(coinsTxtGM, "Coins: " + coins + "/" + coinsLimit)
EndSub

'Add heart on water function tweak'
Sub addHeartWater
  Shapes.Remove(img)
  playHeartFx()
  boatGraph = boatImgP
  img = Shapes.AddImage(boatGraph) 
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  lives = lives + 1
  Shapes.SetText(livesTxtGM, "Lives: " + lives)
EndSub

'go in Boat function tweak'
Sub onBoat
  Shapes.Remove(img)
  Shapes.Remove(boatGraph)
  boatGraph = boatImgP
  img = Shapes.AddImage(boatGraph)
  char["img"] = img
  char["x"] = (saveX*boxSize)-14.5
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 0.5
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  onBoatBol = "true"
EndSub

'GoOutBoat function tweak'
Sub goOutBoat
  KB["SPACE"] = "false"
  Shapes.Remove(img)
  boatGraph = Shapes.AddImage(boatImgP)
  Shapes.Move(boatGraph,((saveX-1)*boxSize)+3,((saveY-1)*boxSize))
  curMap[saveX][saveY]["walkable"] = "h"
  If type = 0 Then
    img = Shapes.AddImage(char1ImgP)
  ElseIf type = 1 Then
    img = Shapes.AddImage(char2ImgP)
  ElseIf type = 2 Then
    img = Shapes.AddImage(char3ImgP)
  ElseIf type = 3 Then
    img = Shapes.AddImage(char4ImgP)
  EndIf
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 0.5
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  onBoatBol = "false"
EndSub

'''''''''''''''''''''''''''''''''''''''''Dirt(Car)'''''''''''''''''''''''''''''''''''''''''''

'add Coin on Dirt function tweak'
Sub addCoinDirt
  Shapes.Remove(img)
  playCoinFx()
  carGraph = carImgP
  img = Shapes.AddImage(carGraph) 
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  coins = coins + 1
  Shapes.SetText(coinsTxtGM, "Coins: " + coins + "/" + coinsLimit)
EndSub

'add lives on dirt function tweak'
Sub addHeartDirt
  Shapes.Remove(img)
  playHeartFx()
  carGraph = carImgP
  img = Shapes.AddImage(carGraph) 
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  lives = lives + 1
  Shapes.SetText(livesTxtGM, "Lives: " + lives)
EndSub

'go on car function tweak'
Sub onCar
  Shapes.Remove(img)
  Shapes.Remove(carGraph)
  carGraph = carImgP
  img = Shapes.AddImage(carGraph)
  char["img"] = img
  char["x"] = (saveX*boxSize)-14.5
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 3
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  onCarBol = "true"
EndSub

'Go out car function tweak'
Sub goOutCar
  KB["SPACE"] = "false"
  Shapes.Remove(img)
  carGraph = Shapes.AddImage(carImgP)
  Shapes.Move(carGraph,((saveX-1)*boxSize)+3,((saveY-1)*boxSize))
  curMap[saveX][saveY]["walkable"] = "o"
  If type = 0 Then
    img = Shapes.AddImage(char1ImgP)
  ElseIf type = 1 Then
    img = Shapes.AddImage(char2ImgP)
  ElseIf type = 2 Then
    img = Shapes.AddImage(char3ImgP)
  ElseIf type = 3 Then
    img = Shapes.AddImage(char4ImgP)
  EndIf
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 0.5
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
  onCarBol = "false"
EndSub

'''''''''''''''''''''''''''''''''Others''''''''''''''''''''''''''''''''''''''''''

'Go to Front Char Function Tweak'
Sub gotoFrontChar
   Shapes.Remove(img)
    If type = 0 Then
    img = Shapes.AddImage(char1ImgP)
  ElseIf type = 1 Then
    img = Shapes.AddImage(char2ImgP)
  ElseIf type = 2 Then
    img = Shapes.AddImage(char3ImgP)
  ElseIf type = 3 Then
    img = Shapes.AddImage(char4ImgP)
  EndIf
  char["img"] = img
  char["x"] = (saveX*boxSize)-13
  char["Y"] = (saveY*boxSize)-8
  char["maxSpeed"] = 1
  char["velX"] = 0
  char["velY"] = 0
  rotateChar()
  Shapes.Rotate(img, char["angle"])
  Shapes.Move(img, char["x"] - offSetX, char["Y"] - offSetY)
EndSub

'RotateChar Function'
Sub rotateChar
  If lastDir = 1 Then
    char["angle"] = 180
  ElseIf lastDir = 2 Then
    char["angle"] = 90
  ElseIf lastDir = 3 Then
    char["angle"] = 0
  Else
    char["angle"] = -90
  EndIf
  
  Shapes.Rotate(img, char["angle"])
EndSub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''Enemy Subroutine(function)''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub operateEnemy
  'Goto front enemy'
  If enemyFront = "false" Then
    For m = 0 To enemies-1
      Shapes.Remove(enemyImg[m])
      If enemyType[m] = 0 Then
        enemyImg[m] = Shapes.AddImage(zombieImgP)
      ElseIf enemyType[m] = 1 Then
        enemyImg[m] = Shapes.AddImage(zombie2ImgP)
      ElseIf enemyType[m] = 2 Then
        enemyImg[m] = Shapes.AddImage(zombie3ImgP)
      EndIf
      Shapes.Move(enemyImg[m], enemyX[m]-10, enemyY[m]-10)
    EndFor
    enemyFront = "true"
  EndIf
  
  For m = 0 To enemies-1
    'enemy config'
    enemyCurTileX[m] = Math.Floor(enemyX[m]/boxSize)+1
    enemyCurTileY[m] = Math.Floor(enemyY[m]/boxSize)+1
    enemyOtTileX[m] = Math.Floor((enemyX[m]+enemyVelX[m])/boxSize)+1
    enemyOtTileY[m] = Math.Floor((enemyY[m]+enemyVelY[m])/boxSize)+1
    
     'Enemy'
   If curMap[enemyCurTileX[m]][enemyCurTileY[m]] = curMap[charCurTileX][charCurTileY] Then
      dieChar()
   EndIf
  
    If curMap[enemyOtTileX[m]][enemyCurTileY[m]]["walkable"] = 0 Then
      enemyVelY[m] = enemyVelY[m] *-1
      enemyDirY[m] = Math.GetRandomNumber(3)
    EndIf
    
    If curMap[enemyCurTileX[m]][enemyOtTileY[m]]["walkable"] = 0 Then
      enemyVelX[m] = enemyVelX[m] *-1
      enemyDirX[m] = Math.GetRandomNumber(3)
    EndIf
   
    'apply enemy velocity'
    enemyX[m] = enemyX[m] + enemyVelX[m]
    enemyY[m] = enemyY[m] + enemyVelY[m]
    
    Shapes.Move(enemyImg[m], enemyX[m]-10, enemyY[m]-10)
    
    'apply enemy friction'
    enemyVelX[m] = enemyVelX[m] * 0.9
    enemyVelY[m] = enemyVelY[m] * 0.9
    
    'limit enemy speed'
    If enemyVelX[m] >= enemyMaxSpeed[m] Then
      enemyVelX[m] = enemyMaxSpeed[m]
    EndIf
    
    If enemyVelY[m] >= enemyMaxSpeed[m] Then
      enemyVelY[m] = enemyMaxSpeed[m]
    EndIf
    
    If enemyVelX[m] <= (-1 * enemyMaxSpeed[m]) Then
      enemyVelX[m] = (-1 * enemyMaxSpeed[m])
    EndIf
    
    If enemyVelY[m] <= (-1 * enemyMaxSpeed[m]) Then
      enemyVelY[m] = (-1 * enemyMaxSpeed[m])
    EndIf
    
    'Move Enemy'
     If enemyDirX[m] = 1 Then
       enemyVelX[m] = enemyVelX[m] - enemySpeed[m]
       Shapes.Rotate(enemyImg[m], -90)
    EndIf
    
    If enemyDirX[m] = 2 Then
      enemyVelX[m] = enemyVelX[m] + enemySpeed[m]
      Shapes.Rotate(enemyImg[m], 90)
    EndIf
    
    If enemyDirY[m] = 1 Then
      enemyVelY[m] = enemyVelY[m] - enemySpeed[m]
      Shapes.Rotate(enemyImg[m], 0)
    EndIf
    
    If enemyDirY[m] = 2 Then
      enemyVelY[m] = enemyVelY[m] + enemySpeed[m]
      Shapes.Rotate(enemyImg[m], 180)
    EndIf
    
    If enemyDirX[m] = 3 Then
      randDir = Math.GetRandomNumber(2)
      If randDir = 1 Then
         enemyDirX[m] = Math.GetRandomNumber(3)
       Else
         enemyDirY[m] = Math.GetRandomNumber(3)
      EndIf
    EndIf
    
  EndFor
  

EndSub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''End of Program''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
