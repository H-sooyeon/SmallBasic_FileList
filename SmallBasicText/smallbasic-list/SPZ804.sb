'ballImage = ImageList.LoadImage(Program.Directory+"\football2.png")

ballImage = ImageList.LoadImage("http://7w7sng.bay.livefilestore.com/y1poWHL4LwqfopDrEL0ojbThwMz0IcO7mpnl5CcTiQCYQ8nQEnU1P1-2uqhaqGwtxrE2sIL5l91tBncLsdR1ObfODg5mihqfuoO/football2.png?psid=1")

ball = Shapes.AddImage(ballImage)

radius = ImageList.GetHeightOfImage(ballImage)/2

gradient = Math.ArcTan(0.5) ' The 0.5 is Y/X for the slope i.e. 1 in 2 gradient (Try 0.01 to 100 for this)

grav = 10

accX = grav*Math.Sin(gradient)*Math.Cos(gradient)

accY = grav*Math.Sin(gradient)*Math.Sin(gradient)

posX = radius

posY = 100+radius*Math.Tan(gradient)-radius/Math.Cos(gradient) ' Pedantic starting position just touching left wall

velX = 0

velY = 0

dt = 0.1 'A short timestep with a short Program.Delay in the main loop gives a smoother motion as long as the update is completed

rotate = 0

pi = Math.Pi

gw = GraphicsWindow.Width

gh = GraphicsWindow.Height

GraphicsWindow.FillTriangle(0,100,0,10*gh,10*gw*Math.Cos(gradient),100+10*gw*Math.Sin(gradient)) ' A big triangle off the screen



While("True")

  velX = velX+accX*dt/2

  velY = velY+accY*dt/2

  posX = posX+velX*dt

  posY = posY+velY*dt

  If (posX < radius Or posX > gw-radius Or posY > gh-radius Or posY < radius) Then ' Bounce on any bounday

    velX = -velX

    velY = -velY

    'Update position to make sure we don't draw past the boundary - This is a second dummy timestep - but looks ok since a collision does take a little time

    posX = posX+velX*dt

    posY = posY+velY*dt

  EndIf

  speed = Math.SquareRoot(velX*velX+velY*velY)*velX/Math.Abs(velX) 'speed signed by direction to reverse spin when we go backwards

  rotate = rotate + speed*dt/radius*180/pi

  Shapes.Move(ball,posX-radius,posY-radius)

  Shapes.Rotate(ball,rotate)

  Program.Delay(100*dt)

EndWhile


