' Paracanthurus

' Version 0.3

' Copyright Â© 2016-2019 Nonki Takahashi.  The MIT License.

' 2016-08-06 1:57:23 Shapes generated by Shapes 2.2b.

' Last update 2019-03-11

' Program ID RPX460-0



GraphicsWindow.Title = "Paracanthurus"

SB_Workaround()

gw = 598

gh = 428

GraphicsWindow.Width = gw

GraphicsWindow.Height = gh

GraphicsWindow.BackgroundColor = "#041E53"

' initialize shapes

Shapes_Init()

' add shapes

scale = 1

angle = 0

iMin = 1

iMax = Array.GetItemCount(shape)

Shapes_Add()

While "True"

  Program.Delay(3000)

  Shapes.HideShape(shape[16]["obj"])

  Program.Delay(100)

  Shapes.ShowShape(shape[16]["obj"])

EndWhile



Sub Shapes_Init

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 100 ' x offset

  shY = 135 ' y offset

  shape = ""

  shape[1] = "func=ell;x=27;y=0;width=339;height=172;bc=#000000;pw=0;"

  shape[2] = "func=ell;x=25;y=2;width=324;height=170;bc=#0A4ED6;pw=0;"

  shape[3] = "func=ell;x=55;y=22;width=301;height=105;angle=6;bc=#000000;pw=0;"

  shape[4] = "func=ell;x=58;y=44;width=64;height=64;bc=#0A4ED6;pw=0;"

  shape[5] = "func=tri;x=108;y=73;x1=20;y1=0;x2=0;y2=73;x3=40;y3=73;angle=112;bc=#0A4ED6;pw=0;"

  shape[6] = "func=ell;x=105;y=47;width=141;height=75;angle=8;bc=#000000;pw=0;"

  shape[7] = "func=ell;x=120;y=53;width=135;height=54;angle=7;bc=#0A4ED6;pw=0;"

  shape[8] = "func=tri;x=314;y=7;x1=36;y1=0;x2=0;y2=165;x3=73;y3=165;angle=271;bc=#000000;pw=0;"

  shape[9] = "func=tri;x=349;y=31;x1=26;y1=0;x2=0;y2=117;x3=52;y3=117;angle=271;bc=#F3FF0A;pw=0;"

  shape[10] = "func=tri;x=99;y=68;x1=23;y1=0;x2=0;y2=58;x3=46;y3=58;angle=51;bc=#F3FF0A;pw=0;"

  shape[11] = "func=tri;x=96;y=71;x1=21;y1=0;x2=0;y2=52;x3=42;y3=52;angle=52;bc=#000000;pw=0;"

  shape[12] = "func=tri;x=94;y=75;x1=18;y1=0;x2=0;y2=45;x3=37;y3=45;angle=52;bc=#0A4ED6;pw=0;"

  shape[13] = "func=ell;x=52;y=72;width=55;height=55;bc=#000000;pw=0;"

  shape[14] = "func=ell;x=45;y=68;width=59;height=58;bc=#0A4ED6;pw=0;"

  shape[15] = "func=ell;x=49;y=50;width=32;height=32;bc=#80A9F9;pc=#000000;pw=4;"

  shape[16] = "func=ell;x=56;y=57;width=18;height=18;bc=#000000;pw=0;"

  shape[17] = "func=tri;x=0;y=93;x1=31;y1=0;x2=0;y2=26;x3=63;y3=26;angle=254;bc=#0A4ED6;pw=0;"

  shape[18] = "func=tri;x=4;y=74;x1=25;y1=0;x2=0;y2=37;x3=51;y3=37;angle=239;bc=#0A4ED6;pw=0;"

  shape[19] = "func=tri;x=17;y=97;x1=2;y1=0;x2=0;y2=10;x3=5;y3=10;angle=108;bc=#F3FF0A;pw=0;"

  shape[20] = "func=tri;x=19;y=100;x1=2;y1=0;x2=0;y2=10;x3=5;y3=10;angle=36;bc=#F3FF0A;pw=0;"

EndSub



Sub Math_CartesianToPolar

  ' Math | convert cartesian coodinate to polar coordinate

  ' param x, y - cartesian coordinate

  ' return r, a - polar coordinate

  r = Math.SquareRoot(x * x + y * y)

  If x = 0 And y > 0 Then

    a = 90 ' [degree]

  ElseIf x = 0 And y < 0 Then

    a = -90

  ElseIf x = 0 Then

    a = 0

  Else

    a = Math.ArcTan(y / x) * 180 / Math.Pi

  EndIf

  If x < 0 Then

    a = a + 180

  ElseIf x > 0 And y < 0 Then

    a = a + 360

  EndIf

EndSub



Sub SB_RotateWorkaround

  ' Small Basic | Rotate workaround for Silverlight

  ' param shp - current shape

  ' param x, y - original coordinate

  ' param alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shp["func"] = "tri" Then

    x1 = -Math.Floor(shp["x3"] / 2)

    y1 = -Math.Floor(shp["y3"] / 2)

  ElseIf shp["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

EndSub



Sub SB_Workaround

  ' Small Basic | Workaround for Silverlight

  ' returns silverlight - "True" if in remote

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

    msWait = 300

  Else

    silverlight = "False"

  EndIf

EndSub



Sub Shapes_Add

  ' Shapes | add shapes as shapes data

  ' param iMin, iMax - shape indices to add

  ' param shape - array of shapes

  ' param scale - 1 if same scale

  ' return shWidth, shHeight - total size of shapes

  ' return shAngle - current angle of shapes

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  Shapes_CalcWidthAndHeight()

  s = scale

  For i = iMin To iMax

    shp = shape[i]

    GraphicsWindow.PenWidth = shp["pw"] * s

    If shp["pw"] > 0 Then

      GraphicsWindow.PenColor = shp["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then

      GraphicsWindow.BrushColor = shp["bc"]

    EndIf

    If shp["func"] = "rect" Then

      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "ell" Then

      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "tri" Then

      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)

    ElseIf shp["func"] = "line" Then

      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)

    ElseIf shp["func"] = "text" Then

      If silverlight Then

        fs = Math.Floor(shp["fs"] * 0.9)

      Else

        fs = shp["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shp["fn"]

      shp["obj"] = Shapes.AddText(shp["text"])

    EndIf

    x = shp["x"]

    y = shp["y"]

    shp["rx"] = x

    shp["ry"] = y

    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then

      alpha = Math.GetRadians(shp["angle"])

      SB_RotateWorkaround()

      shp["wx"] = x

      shp["wy"] = y

    EndIf

    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then

      Shapes.Rotate(shp["obj"], shp["angle"])

    EndIf

    shape[i] = shp

  EndFor

  shAngle = 0

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub



Sub Shapes_CalcWidthAndHeight

  ' Shapes | Calculate total width and height of shapes

  ' param iMin, iMax - shape indices to add

  ' return shWidth, shHeight - total size of shapes

  For i = iMin To iMax

    shp = shape[i]

    If shp["func"] = "tri" Or shp["func"] = "line" Then

      xmin = shp["x1"]

      xmax = shp["x1"]

      ymin = shp["y1"]

      ymax = shp["y1"]

      If shp["x2"] < xmin Then

        xmin = shp["x2"]

      EndIf

      If xmax < shp["x2"] Then

        xmax = shp["x2"]

      EndIf

      If shp["y2"] < ymin Then

        ymin = shp["y2"]

      EndIf

      If ymax < shp["y2"] Then

        ymax = shp["y2"]

      EndIf

      If shp["func"] = "tri" Then

        If shp["x3"] < xmin Then

          xmin = shp["x3"]

        EndIf

        If xmax < shp["x3"] Then

          xmax = shp["x3"]

        EndIf

        If shp["y3"] < ymin Then

          ymin = shp["y3"]

        EndIf

        If ymax < shp["y3"] Then

          ymax = shp["y3"]

        EndIf

      EndIf

      shp["width"] = xmax - xmin

      shp["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shp["x"] + shp["width"]

      shHeight = shp["y"] + shp["height"]

    Else

      If shWidth < shp["x"] + shp["width"] Then

        shWidth = shp["x"] + shp["width"]

      EndIf

      If shHeight < shp["y"] + shp["height"] Then

        shHeight = shp["y"] + shp["height"]

      EndIf

    EndIf

    shape[i] = shp

  EndFor

EndSub


