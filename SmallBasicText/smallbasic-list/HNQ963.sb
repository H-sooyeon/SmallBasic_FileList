'Define a circle, it's size, position and speed
circleRadius = 50
xPosition = circleRadius
yPosition = circleRadius
xSpeed = 50
ySpeed = 0
ball = Shapes.AddEllipse(circleRadius * 2,circleRadius * 2)
'Set up a timer to tick once for every frame of animation
Timer.Interval = 33   '33 = 30 frames per second
Timer.Tick = onTimerTick

'Set up events so you can drag the ball around
GraphicsWindow.MouseMove = onMouseMove
GraphicsWindow.MouseDown = onMouseDown

'Put a suiting title on the window
GraphicsWindow.Title = "Ball Bounce Example - Drag and Release to 'Throw' the ball"


'--------------------------------------------------------------------------------------------------------------
'onTimerTick   - This is what happens every frame
'--------------------------------------------------------------------------------------------------------------
Sub onTimerTick
  
  'Call the subroutine that updates the ball for this frame
  Update()
  
  'Now Draw the frame
  Redraw()
  
EndSub

'--------------------------------------------------------------------------------------------------------------
'Update   - Updates everything to the next frame of animation
'--------------------------------------------------------------------------------------------------------------
Sub Update
  
  'Move the position of the ball by it's speed
  '-------------------------------------------------
  xPosition = xPosition + xSpeed
  yPosition = yPosition + ySpeed
  
  
  'Check for a bounce against any of the 4 sides of the window
  '-----------------------------------------------------------------------
  
  'first figure out where the sides are
  rightSide = GraphicsWindow.Width - circleRadius
  leftSide = circleRadius
  bottomSide = GraphicsWindow.Height - circleRadius
  topSide = circleRadius
  
  'then bounce if we need to
  If xPosition > rightSide then     'right side
    xPosition = rightSide - circleRadius
    xSpeed = -xSpeed
  EndIf
  If xPosition < leftSide then    'left side
    xPosition = leftSide
    xSpeed = -xSpeed
  EndIf
  If yPosition > bottomSide then    'bottom
    yPosition = bottomSide
    ySpeed = -ySpeed
  EndIf
  If yPosition < topSide then    'top
    yPosition = topSide
    ySpeed = -ySpeed
  EndIf
  
  
  'Gravity  (increases the speed in the down direction to make it fall)
  '-------------------------------------------------------------------------------
  ySpeed = ySpeed + 2
  
  
  'Friction (make the overall speed 95% of it's current speed)
  '---------------------------------------------------------------------
  xSpeed = xSpeed * .95
  ySpeed = ySpeed * .95
  
  
  'Hooking - Advanced Friction (when the ball has so little energy it gets "caught" and can no longer move)
  '-----------------------------------------------------------------------------------------------------------------------------
  If Math.Abs(xSpeed) < .1 then     'Math.Abs() is a simple math function to make negative numbers positive
    xSpeed = 0                                'we're checking to see if the movement ( backwards (negative) or forward (positive) )
  EndIf                                         'is less than .1.  If it is, just stop the movement all together.
  If Math.Abs(ySpeed) < .1 then
    ySpeed = 0
  EndIf
  
  
  
EndSub



'--------------------------------------------------------------------------------------------------------------
'Redraw     - Clears the GraphicsWindow and Draws the Ball
'--------------------------------------------------------------------------------------------------------------
Sub Redraw
  
  'GraphicsWindow.Clear()
  
  'Draw the ball - centering it on the xPosition/yPosition
  circleSize = circleRadius * 2
  GraphicsWindow.DrawEllipse(xPosition-circleRadius, yPosition-circleRadius, circleSize, circleSize)
  Shapes.Move(ball, xPosition-circleRadius, yPosition-circleRadius)
EndSub



'--------------------------------------------------------------------------------------------------------------
'onMouseDown    - The mouse button was pressed
'--------------------------------------------------------------------------------------------------------------
Sub onMouseDown
  
  'save the position of the mouse in variables
  xOld = GraphicsWindow.MouseX
  yOld = GraphicsWindow.MouseY
  
  'move the ball to where the mouse is
  xPosition = xOld
  yPosition = yOld
  
EndSub 



'--------------------------------------------------------------------------------------------------------------
'onMouseMove    - The mouse was moved
'--------------------------------------------------------------------------------------------------------------
Sub onMouseMove
  
  'see if the button is down.  If it is, then we're dragging the ball
  If Mouse.IsLeftButtonDown Then
    
    'save the position of the mouse in variables
    x = GraphicsWindow.MouseX
    y = GraphicsWindow.MouseY
    
    'find out how far the mouse moved since the last time we we're here
    'this will be the new speed of the ball
    xSpeed = x - xOld
    ySpeed = y - yOld
    
    'move the ball to where the mouse is
    xPosition = x
    yPosition = y
    
    'this mouse position is old, save where it is so we can figure out 
    'the speed next time we're here
    xOld = x
    yOld = y

  EndIf

EndSub 
  
  
 
