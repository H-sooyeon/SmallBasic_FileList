' Tokyo 2020 Games Emblem
' Copyright Â© 2018 Nonki Takahashi.  The MIT License.
' Program ID WRR030-1

GraphicsWindow.Title = "TOKYO 2020 GAMES"
Init()
Turtle.PenUp()
Turtle.X = gw / 2
Turtle.Y = gh / 2
Turtle.Turn(180 - a / 2)
Turtle.Move(r)
Turtle.Turn(90 - a / 2)
' draw a regular icositetragon (24-gon)
Turtle.PenDown()
nEdge = 24
MoveArc()
Turtle.PenUp()
' draw 45 regular dodecagons (12-gons)
For k = 1 To 3
  ' #1
  Turtle.Turn(a - a2)
  DrawDodecagon()
  type = 3
  angle = 30 + (k - 1) * 120
  AddRectangle()
  ' #2
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 2
  angle = -45 + (k - 1) * 120
  AddRectangle()
  ' #3
  Turtle.Turn(180 - a2)
  MoveToOpposite()
  Turtle.Turn(a2)
  Turtle.Move(e)
  Turtle.Turn(-a2)
  DrawDodecagon()
  type = 2
  angle = 45 + (k - 1) * 120
  AddRectangle()
  ' #4
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 3
  angle = -30 + (k - 1) * 120
  AddRectangle()
  ' #5
  Turtle.Turn(180 - a2)
  MoveToOpposite()
  Turtle.Turn(a2)
  nEdge = 1
  MoveArc()
  Turtle.Turn(a - 90)
  DrawDodecagon()
  type = 1
  angle = 30 + (k - 1) * 120
  AddRectangle()
  ' #6
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 2
  angle = 45 + (k - 1) * 120
  AddRectangle()
  ' #7
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 3
  angle = -30 + (k - 1) * 120
  AddRectangle()
  For j = 1 To 2
    Turtle.Turn(180 - a2)
    MoveToOpposite()
  EndFor
  ' #8
  Turtle.Move(-e2)
  Turtle.Turn(a2)
  DrawDodecagon()
  type = 1
  angle = 60 + (k - 1) * 120
  AddRectangle()
  ' #9
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 2
  angle = 75 + (k - 1) * 120
  AddRectangle()
  ' #10
  Turtle.Turn(180 - a2)
  MoveToOpposite()
  Turtle.Turn(-a2)
  Turtle.Move(e2)
  Turtle.Turn(90 - a)
  nEdge = 2
  MoveArc()
  Turtle.Turn(a - 90)
  DrawDodecagon()
  type = 1
  angle = 60 + (k - 1) * 120
  AddRectangle()
  ' #11
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 2
  angle = 75 + (k - 1) * 120
  AddRectangle()
  ' #12-14
  Turtle.Turn(180 - a2)
  MoveToOpposite()
  Turtle.Turn(90 - a)
  nEdge = 3
  MoveArc()
  Turtle.Turn(90 - a2)
  For j = 1 To 3
    DrawDodecagon()
    type = 1
    angle = 90 + (j - 1) * -30 + (k - 1) * 120
    AddRectangle()
    Turtle.Turn(a2)
    Turtle.Move(e2)
    Turtle.Turn(-2 * a2)
  EndFor
  ' #15
  Turtle.Turn(2 * a2)
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
  DrawDodecagon()
  type = 2
  angle = 45 + (k - 1) * 120
  AddRectangle()
  ' to next position
  Turtle.Turn(180 - a2)
  MoveToOpposite()
  Turtle.Turn(180 - a2)
  For j = 1 To 3
    Turtle.Turn(a2)
    Turtle.Move(e2)
  EndFor
  Turtle.Turn(90)
  nEdge = 1
  MoveArc()
  Program.Delay(1000)
EndFor
ClearBackground()
Turtle.Hide()
Program.Delay(2000)
index = Array.GetAllIndices(pi)
np = Array.GetItemCount(pi)
While "True"
  For i = 1 To np
    d = pi[index[i]]
    x = px[d] - w[pt[d]] / 2
    y = py[d] - h[pt[d]] / 2
    Shapes.Animate(o[index[i]], x, y, 10000)
  EndFor
  Program.Delay(12000)
  For i = 1 To np
    d = pi[index[i]]
    x = cx[index[i]] - w[pt[d]] / 2
    y = cy[index[i]] - h[pt[d]] / 2
    Shapes.Animate(o[index[i]], x, y, 10000)
  EndFor
  Program.Delay(12000)
EndWhile

Sub AddRectangle
  ' param type - 1..3
  ' param angle
  ' param n - index of the center
  GraphicsWindow.PenWidth = 0
  o[n] = Shapes.AddRectangle(w[type], h[type])
  Shapes.Move(o[n], cx[n] - w[type] / 2, cy[n] - h[type] / 2)
  Shapes.Rotate(o[n], angle)
  Shapes.SetOpacity(o[n], 80)
  GraphicsWindow.PenWidth = 1
EndSub

Sub ClearBackground
  nLines = 24 + 45 * 12
  For i = 1 To nLines
    Shapes.Remove("_turtleLine" + i)
  EndFor
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillRectangle(0, 0, gw, gh)
  For i = 1 To n
    Shapes.SetOpacity(o[i], 100)
  EndFor
EndSub

Sub DrawDodecagon
  ' draw a regular 12-gon
  Turtle.PenDown()
  For i = 1 To 12
    If i = 1 Then
      n = n + 1
      cx[n] = Turtle.X
      cy[n] = Turtle.Y
    EndIf
    If i = 7 Then
      cx[n] = (cx[n] + Turtle.X) / 2
      cy[n] = (cy[n] + Turtle.Y) / 2
    EndIf
    Turtle.Turn(a2)
    If n = 1 Then
      _i = Math.Remainder(Turtle.Angle + 90, 360) / 30
      vx[_i] = Turtle.X
      vy[_i] = Turtle.Y
    EndIf
    Turtle.Move(e2)
  EndFor
  Turtle.PenUp()
  GraphicsWindow.DrawText(cx[n] - 7, cy[n] - 6, n)
  If n = 1 Then
    w[1] = vx[9] - vx[4]
    h[1] = vy[3] - vy[4]
    _w = vx[9] - vx[5]
    _h = vy[9] - vy[5]
    w[2] = Math.SquareRoot(_w * _w + _h * _h) 
    _w = vx[5] - vx[3]
    _h = vy[3] - vy[5]
    h[2] = Math.SquareRoot(_w * _w + _h * _h)
    w[3] = vx[8] - vx[5]
    h[3] = vy[2] - vy[5]
  EndIf
EndSub

Sub Init
  gw = 600
  gh = 600
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.Top = 4
  GraphicsWindow.PenColor = "Gray"
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.BrushColor = "#012063"
  Turtle.Speed = 10
  n = 0
  ' calculate parameters for icositetragon (24-gon)
  a = 360 / 24
  r = 250
  _a = Math.GetRadians(a)
  e = 2 * r * Math.Sin(_a / 2)
  ' calculate parameters for dodecagon (12-gon)
  a2 = 360 / 12
  _a2 = Math.GetRadians(a2)
  r2 = e / 2 / Math.Cos(_a2 / 2)
  e2 = 2 * r2 * Math.Sin(_a2 / 2)
  px = "1=243.48;2=267.36;3=299.99;4=332.63;5=356.51;6=180.44;"
  px = px + "7=210.84;8=267.36;9=332.63;10=389.15;11=419.55;"
  px = px + "12=147.80;13=210.84;14=299.99;15=389.15;16=452.19;"
  px = px + "17=92.91;18=147.80;19=243.48;20=356.51;21=452.19;"
  px = px + "22=507.08;23=92.91;24=180.44;25=299.99;26=419.55;"
  px = px + "27=507.08;28=60.88;29=125.54;30=236.96;31=363.03;"
  px = px + "32=474.45;33=539.11;34=93.51;35=182.06;36=417.93;"
  px = px + "37=506.48;38=92.91;39=150.03;40=449.96;41=507.08;"
  px = px + "42=149.43;43=450.56;44=180.44;45=419.55;"
  py = "1=523.97;2=500.08;3=491.34;4=500.08;5=523.97;6=507.08;"
  py = py + "7=467.45;8=434.82;9=434.82;10=467.453;11=507.08;"
  py = py + "12=450.56;13=402.19;14=378.30;15=402.19;16=450.56;"
  py = py + "17=419.55;18=385.29;19=345.67;20=345.67;21=385.29;"
  py = py + "22=419.55;23=354.29;24=328.77;25=313.03;26=328.77;"
  py = py + "27=354.29;28=299.99;29=297.77;30=296.14;31=296.14;"
  py = py + "32=297.77;33=299.99;34=243.480;35=265.14;36=265.14;"
  py = py + "37=243.48;38=180.44;39=210.84;40=210.84;41=180.44;"
  py = py + "42=147.80;43=147.80;44=92.91;45=92.91;"
  pi = "1=15;2=10;3=7;4=40;8=2;9=37;13=41;14=1;15=43;"
  pi = pi + "16=13;17=8;18=19;19=14;21=36;22=29;23=31;24=26;"
  pi = pi + "25=25;26=35;28=30;29=5;30=24;"
  pi = pi + "31=32;32=20;33=34;34=39;38=38;39=42;43=4;44=3;45=9;"
  pt = "1=1;2=1;3=1;4=1;5=1;6=1;7=2;8=2;9=2;10=2;11=1;12=2;13=3;"
  pt = pt + "14=3;15=3;"
  pt = pt + "16=2;17=1;18=3;19=2;20=2;21=3;22=1;23=2;24=2;25=1;"
  pt = pt + "26=2;27=2;28=1;29=3;30=1;"
  pt = pt + "31=1;32=3;33=1;34=2;35=2;36=2;37=2;38=1;39=3;40=3;"
  pt = pt + "41=1;42=2;43=2;44=1;45=1;"
EndSub

Sub MoveArc
  ' param nEdge
  If 0 < nEdge Then
    For i = 1 To nEdge
      Turtle.Turn(a)
      Turtle.Move(e)
    EndFor
  Else
    For i = -1 To nEdge Step -1
      Turtle.Move(-e)
      Turtle.Turn(-a)
    EndFor
  EndIf
EndSub  

Sub MoveToOpposite
  For i = 1 To 6
    Turtle.Turn(a2)
    Turtle.Move(e2)
  EndFor
EndSub
