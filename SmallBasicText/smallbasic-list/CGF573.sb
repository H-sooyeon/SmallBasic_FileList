' Pictionary - Korean
' Version 0.92
' Copyright Â© 2017-2019 Nonki Takahashi.  The MIT License.
' Last update 2019-04-20

GraphicsWindow.Title = "Pictionary"
SB_Workaround()
Init()
' initialize caption shapes
Shapes_Init_Caption()
scale = 1
iMin = 1
iMax = Array.GetItemCount(shape)
Shapes_Add()
' initialize flag shapes
Shapes_Init_Flag()
iMax = Array.GetItemCount(shape)
Shapes_Add()
' rotate shapes
x = 72
y = 48
Math_CartesianToPolar()
angle = a - 90
iMin = 10
iMax = 18
cx = gw / 2 - shX
cy = gh / 2 - shY
Shapes_Rotate()
angle = 90 - a
iMin = 19
iMax = 27
cx = gw / 2 - shX
cy = gh / 2 - shY
Shapes_Rotate()

Sub Init
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = "LightGray"
EndSub

Sub Shapes_Init_Caption
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 412 ' x offset
  shY = 358 ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;text=Korean;fn=Trebuchet MS;fs=50;fb=True;pw=0;bc=Black;"
EndSub

Sub Shapes_Init_Flag
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 119 ' x offset
  shY = 94  ' y offset
  shape = ""
  shape[1] = "pw=0;bc=#003478;func=rect;width=180;height=240;x=0;y=0;"
  shape[2] = "pw=0;bc=#C60C30;func=rect;width=180;height=240;x=180;y=0;"
  shape[3] = "pw=0;bc=#003478;func=tri;x1=180;y1=0;x2=0;y2=120;x3=360;y3=120;x=0;y=120;width=360;height=120;"
  shape[4] = "pw=0;bc=#C60C30;func=tri;x1=180;y1=0;x2=0;y2=120;x3=360;y3=120;x=0;y=0;angle=180;width=360;height=120;"
  shape[5] = "pw=0;bc=#FFF;func=rect;width=360;height=60;x=0;y=0;angle=180;"
  shape[6] = "pw=0;bc=#FFF;func=rect;width=360;height=60;x=0;y=180;angle=180;"
  shape[7] = "pw=0;bc=#FFF;func=rect;width=120;height=240;x=0;y=0;angle=180;"
  shape[8] = "pw=0;bc=#FFF;func=rect;width=120;height=240;x=240;y=0;angle=180;"
  shape[9] = "pw=30;pc=#FFF;bc=Transparent;func=ell;width=180;height=180;x=90;y=30;angle=180;"
  shape[10] = "pw=0;bc=#C60C30;func=ell;width=60;height=60;x=150;y=60;angle=180;"
  shape[11] = "pw=0;bc=#003478;func=ell;width=60;height=60;x=150;y=120;angle=180;"
  shape[12] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=-10;angle=180;"
  shape[13] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=5;angle=180;"
  shape[14] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=20;angle=180;"
  shape[15] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=210;angle=180;"
  shape[16] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=225;angle=180;"
  shape[17] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=240;angle=180;"
  shape[18] = "pw=0;bc=#FFF;func=rect;width=5;height=45;x=177.5;y=207.5;angle=180;"
  shape[19] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=-10;angle=180;"
  shape[20] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=5;angle=180;"
  shape[21] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=20;angle=180;"
  shape[22] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=210;angle=180;"
  shape[23] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=225;angle=180;"
  shape[24] = "pw=0;bc=#000;func=rect;width=60;height=10;x=150;y=240;angle=180;"
  shape[25] = "pw=0;bc=#FFF;func=rect;width=5;height=15;x=177.5;y=-12.5;angle=180;"
  shape[26] = "pw=0;bc=#FFF;func=rect;width=5;height=15;x=177.5;y=17.5;angle=180;"
  shape[27] = "pw=0;bc=#FFF;func=rect;width=5;height=15;x=177.5;y=222.5;angle=180;"
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
