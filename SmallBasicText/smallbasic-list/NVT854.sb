' Aircraft
' Version 0.1
' 2015-07-02 16:05:14 Shapes generated by Shapes 2.1b.
'
title = "Aircraft 0.1"
SB_Workaround()
gw = 598
gh = 428
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
GraphicsWindow.BackgroundColor = "SkyBlue"
GraphicsWindow.BrushColor = "Gray"
GraphicsWindow.FillRectangle(0, 300, gw, gh - 300)
GraphicsWindow.BrushColor = "White"
titleObj = Shapes.AddText(title)
Shapes.Move(titleObj, 10, gh - 20)
' initialize shapes
Shapes_Init()
' add shapes
scale = 1 / 2
angle = 0
iMin = 1
iMax = 70
Shapes_Add()
t = 0
x = shX
y = shY
cx = x + 223 + 15
cy = y + 145 + 15
aircraftMin = 1
aircraftMax = 70
While t < 41
  GraphicsWindow.Title = t
  MovePropeller()
  If 9 < t And t < 18 Then 
    y = y - 0.2
    cy = cy - 0.2
  EndIf
  If 2 < t And t < 39 Then
    x = x - 2
    cx = cx - 2
    iMin = aircraftMin
    iMax = aircraftMax
    Shapes_Move()
  EndIf
  If 7 < t And t < 8 Then
    angle = angle + 0.1
    iMin = aircraftMin
    iMax = aircraftMax
    Shapes_Rotate()
  EndIf
  If t = 18 Then
    y = 20
    x = gw
    cx = x + 223 + 15
    cy = y + 145 + 15
    angle = 0
    iMin = aircraftMin
    iMax = aircraftMax
    Shapes_Rotate()
    Shapes_Move()
    GraphicsWindow.BrushColor = "SkyBlue"
    GraphicsWindow.FillRectangle(0, 300, gw, gh - 300)
  EndIf
  If t = 22 Then
    aircraftMin = 11
    dx[1] = shX
    dy[1] = shY
  EndIf
  If t = 24 Then
    aircraftMin = 21
    dx[2] = shX
    dy[2] = shY
  EndIf
  If t = 26 Then
    aircraftMin = 31
    dx[3] = shX
    dy[3] = shY
  EndIf
  If t = 28 Then
    aircraftMin = 41
    dx[4] = shX
    dy[4] = shY
  EndIf
  If t = 30 Then
    aircraftMin = 51
    dx[5] = shX
    dy[5] = shY
  EndIf
  If 22 < t Then
    Stack.PushValue("local", x)
    Stack.PushValue("local", y)
    For iDiver = 1 To 5
      If 0 < dx[iDiver] Then
        iMin = (iDiver - 1) * 10 + 1
        iMax = (iDiver - 1) * 10 + 10
        dx[iDiver] = dx[iDiver] + 2
        dy[iDiver] = dy[iDiver] + 1
        x = dx[iDiver]
        y = dy[iDiver]
        Shapes_Move()
      EndIf
    EndFor
    y = Stack.PopValue("local")
    x = Stack.PopValue("local")
  EndIf
  t = t + 0.05
  Program.Delay(50)
EndWhile
colorDiver = "1=#0080FF;2=#00CC00;3=#FFFF00;4=#FF8000;5=#FF0000;"
For iDiver = 1 To 5
  iMin = 71 + (iDiver - 1) * 10
  iMax = 80 + (iDiver - 1) * 10
  CopyDiver()
  ChangeColor()
  Shapes_Add()
EndFor
While t < 100
  GraphicsWindow.Title = t
  t = t + 0.05
  Program.Delay(50)
EndWhile
Sub CopyDiver
  If 1 < iDiver Then
    For iShape = 71 To 80
      shape[iShape + (iDiver - 1) * 10] = shape[iShape]
    EndFor
  EndIf
EndSub
Sub ChangeColor
  For iShape = iMin To iMax
    If iShape <> (78 + (iDiver - 1) * 10) Then
      shape[iShape]["bc"] = colorDiver[iDiver]
    EndIf
  EndFor
EndSub
Sub MovePropeller
  rt = Math.Remainder(t, 0.3)
  If rt < 0.15 Then
    Shapes.SetOpacity(shape[64]["obj"], 50)
    Shapes.SetOpacity(shape[65]["obj"], 50)
  Else
    Shapes.SetOpacity(shape[64]["obj"], 100)
    Shapes.SetOpacity(shape[65]["obj"], 100)
  EndIf
EndSub
Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 400 ' x offset
  shY = 215 ' y offset
  shape = ""
  shape[1] = "func=rect;x=181;y=95;width=33;height=15;angle=346;bc=#0080FF;pw=0;"
  shape[2] = "func=rect;x=162;y=107;width=26;height=5;angle=311;bc=#0080FF;pw=0;"
  shape[3] = "func=rect;x=172;y=110;width=26;height=5;angle=311;bc=#0080FF;pw=0;"
  shape[4] = "func=rect;x=144;y=115;width=26;height=5;angle=9;bc=#0080FF;pw=0;"
  shape[5] = "func=rect;x=156;y=113;width=26;height=5;angle=29;bc=#0080FF;pw=0;"
  shape[6] = "func=rect;x=181;y=90;width=26;height=5;angle=9;bc=#0080FF;pw=0;"
  shape[7] = "func=rect;x=225;y=98;width=26;height=5;angle=9;bc=#0080FF;pw=0;"
  shape[8] = "func=ell;x=211;y=83;width=21;height=21;bc=#FFFFFF;pw=0;"
  shape[9] = "func=rect;x=162;y=84;width=26;height=5;angle=26;bc=#0080FF;pw=0;"
  shape[10] = "func=rect;x=247;y=96;width=26;height=5;angle=339;bc=#0080FF;pw=0;"
  shape[11] = "func=rect;x=181;y=95;width=33;height=15;angle=346;bc=#00CC00;pw=0;"
  shape[12] = "func=rect;x=162;y=107;width=26;height=5;angle=311;bc=#00CC00;pw=0;"
  shape[13] = "func=rect;x=172;y=110;width=26;height=5;angle=311;bc=#00CC00;pw=0;"
  shape[14] = "func=rect;x=144;y=115;width=26;height=5;angle=9;bc=#00CC00;pw=0;"
  shape[15] = "func=rect;x=156;y=113;width=26;height=5;angle=29;bc=#00CC00;pw=0;"
  shape[16] = "func=rect;x=181;y=90;width=26;height=5;angle=9;bc=#00CC00;pw=0;"
  shape[17] = "func=rect;x=225;y=98;width=26;height=5;angle=9;bc=#00CC00;pw=0;"
  shape[18] = "func=ell;x=211;y=83;width=21;height=21;bc=#FFFFFF;pw=0;"
  shape[19] = "func=rect;x=162;y=84;width=26;height=5;angle=26;bc=#00CC00;pw=0;"
  shape[20] = "func=rect;x=247;y=96;width=26;height=5;angle=339;bc=#00CC00;pw=0;"
  shape[21] = "func=rect;x=181;y=95;width=33;height=15;angle=346;bc=#FFFF00;pw=0;"
  shape[22] = "func=rect;x=162;y=107;width=26;height=5;angle=311;bc=#FFFF00;pw=0;"
  shape[23] = "func=rect;x=172;y=110;width=26;height=5;angle=311;bc=#FFFF00;pw=0;"
  shape[24] = "func=rect;x=144;y=115;width=26;height=5;angle=9;bc=#FFFF00;pw=0;"
  shape[25] = "func=rect;x=156;y=113;width=26;height=5;angle=29;bc=#FFFF00;pw=0;"
  shape[26] = "func=rect;x=181;y=90;width=26;height=5;angle=9;bc=#FFFF00;pw=0;"
  shape[27] = "func=rect;x=225;y=98;width=26;height=5;angle=9;bc=#FFFF00;pw=0;"
  shape[28] = "func=ell;x=211;y=83;width=21;height=21;bc=#FFFFFF;pw=0;"
  shape[29] = "func=rect;x=162;y=84;width=26;height=5;angle=26;bc=#FFFF00;pw=0;"
  shape[30] = "func=rect;x=247;y=96;width=26;height=5;angle=339;bc=#FFFF00;pw=0;"
  shape[31] = "func=rect;x=181;y=95;width=33;height=15;angle=346;bc=#FF8000;pw=0;"
  shape[32] = "func=rect;x=162;y=107;width=26;height=5;angle=311;bc=#FF8000;pw=0;"
  shape[33] = "func=rect;x=172;y=110;width=26;height=5;angle=311;bc=#FF8000;pw=0;"
  shape[34] = "func=rect;x=144;y=115;width=26;height=5;angle=9;bc=#FF8000;pw=0;"
  shape[35] = "func=rect;x=156;y=113;width=26;height=5;angle=29;bc=#FF8000;pw=0;"
  shape[36] = "func=rect;x=181;y=90;width=26;height=5;angle=9;bc=#FF8000;pw=0;"
  shape[37] = "func=rect;x=225;y=98;width=26;height=5;angle=9;bc=#FF8000;pw=0;"
  shape[38] = "func=ell;x=211;y=83;width=21;height=21;bc=#FFFFFF;pw=0;"
  shape[39] = "func=rect;x=162;y=84;width=26;height=5;angle=26;bc=#FF8000;pw=0;"
  shape[40] = "func=rect;x=247;y=96;width=26;height=5;angle=339;bc=#FF8000;pw=0;"
  shape[41] = "func=rect;x=181;y=95;width=33;height=15;angle=346;bc=#FF0000;pw=0;"
  shape[42] = "func=rect;x=162;y=107;width=26;height=5;angle=311;bc=#FF0000;pw=0;"
  shape[43] = "func=rect;x=172;y=110;width=26;height=5;angle=311;bc=#FF0000;pw=0;"
  shape[44] = "func=rect;x=144;y=115;width=26;height=5;angle=9;bc=#FF0000;pw=0;"
  shape[45] = "func=rect;x=156;y=113;width=26;height=5;angle=29;bc=#FF0000;pw=0;"
  shape[46] = "func=rect;x=181;y=90;width=26;height=5;angle=9;bc=#FF0000;pw=0;"
  shape[47] = "func=rect;x=225;y=98;width=26;height=5;angle=9;bc=#FF0000;pw=0;"
  shape[48] = "func=ell;x=211;y=83;width=21;height=21;bc=#FFFFFF;pw=0;"
  shape[49] = "func=rect;x=162;y=84;width=26;height=5;angle=26;bc=#FF0000;pw=0;"
  shape[50] = "func=rect;x=247;y=96;width=26;height=5;angle=339;bc=#FF0000;pw=0;"
  shape[51] = "func=tri;x=214;y=116;x1=6;y1=0;x2=0;y2=49;x3=12;y3=49;angle=137;bc=#FFFFFF;pw=0;"
  shape[52] = "func=tri;x=48;y=115;x1=6;y1=0;x2=0;y2=49;x3=12;y3=49;angle=220;bc=#FFFFFF;pw=0;"
  shape[53] = "func=ell;x=84;y=55;width=215;height=78;bc=#FFFFFF;pw=0;"
  shape[54] = "func=rect;x=54;y=86;width=164;height=47;bc=#FFFFFF;pw=0;"
  shape[55] = "func=ell;x=6;y=86;width=95;height=46;bc=#FFFFFF;pw=0;"
  shape[56] = "func=tri;x=286;y=13;x1=33;y1=0;x2=0;y2=122;x3=67;y3=122;angle=76;bc=#FFFFFF;pw=0;"
  shape[57] = "func=tri;x=326;y=1;x1=23;y1=0;x2=0;y2=59;x3=47;y3=59;bc=#FFFFFF;pw=0;"
  shape[58] = "func=rect;x=349;y=0;width=29;height=60;bc=#FFFFFF;pw=0;"
  shape[59] = "func=rect;x=142;y=59;width=90;height=28;bc=#FFFFFF;pw=0;"
  shape[60] = "func=ell;x=140;y=47;width=128;height=19;bc=#FFFFFF;pc=#999999;pw=1;"
  shape[61] = "func=ell;x=163;y=67;width=24;height=25;bc=#000000;pw=0;"
  shape[62] = "func=ell;x=250;y=67;width=24;height=25;bc=#000000;pw=0;"
  shape[63] = "func=ell;x=207;y=67;width=24;height=25;bc=#000000;pw=0;"
  shape[64] = "func=ell;x=0;y=61;width=9;height=44;bc=#939393;pw=0;"
  shape[65] = "func=ell;x=0;y=113;width=9;height=44;bc=#939393;pw=0;"
  shape[66] = "func=ell;x=22;y=145;width=30;height=30;bc=#939393;pc=#000000;pw=8;"
  shape[67] = "func=ell;x=223;y=145;width=30;height=30;bc=#939393;pc=#000000;pw=8;"
  shape[68] = "func=tri;x=79;y=65;x1=38;y1=0;x2=0;y2=22;x3=77;y3=22;bc=#000000;pw=0;"
  shape[69] = "func=rect;x=117;y=65;width=20;height=22;bc=#000000;pw=0;"
  shape[70] = "func=rect;x=134;y=65;width=23;height=28;bc=#FFFFFF;pw=0;"
  shape[71] = "func=rect;x=35;y=30;width=33;height=15;angle=269;bc=#FF0000;pw=0;"
  shape[72] = "func=rect;x=50;y=59;width=26;height=5;angle=237;bc=#FF0000;pw=0;"
  shape[73] = "func=rect;x=27;y=59;width=26;height=5;angle=298;bc=#FF0000;pw=0;"
  shape[74] = "func=rect;x=63;y=81;width=26;height=5;angle=243;bc=#FF0000;pw=0;"
  shape[75] = "func=rect;x=16;y=82;width=26;height=5;angle=295;bc=#FF0000;pw=0;"
  shape[76] = "func=rect;x=0;y=6;width=26;height=5;angle=35;bc=#FF0000;pw=0;"
  shape[77] = "func=rect;x=55;y=18;width=26;height=5;angle=333;bc=#FF0000;pw=0;"
  shape[78] = "func=ell;x=41;y=0;width=21;height=21;bc=#FFFFFF;pw=0;"
  shape[79] = "func=rect;x=21;y=18;width=26;height=5;angle=26;bc=#FF0000;pw=0;"
  shape[80] = "func=rect;x=74;y=4;width=26;height=5;angle=316;bc=#FF0000;pw=0;"
EndSub
Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub
Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub
Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub
Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
