' Pictionary - Spanish
' Copyright Â© 2017 Nonki Takahashi.  The MIT License.
' Last update 2017-06-02

' 2017-06-02 14:42:52 Shapes generated by Shapes 2.3b.

GraphicsWindow.Title = "Pictionary"
SB_Workaround()
gw = 598
gh = 428
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
' initialize shapes
Shapes_Init()
' add shapes
scale = 1
angle = 0
iMin = 1
iMax = 154
Shapes_Add()
Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 119 ' x offset
  shY = 94 ' y offset
  shape = ""
  shape[1] = "func=rect;x=0;y=0;width=360;height=240;bc=#C60B1E;pw=0;"
  shape[2] = "func=rect;x=0;y=60;width=360;height=120;bc=#FFC400;pw=0;"
  shape[3] = "func=rect;x=147;y=130;width=19;height=5;angle=343;bc=#A9091A;pw=0;"
  shape[4] = "func=rect;x=74;y=129;width=19;height=5;angle=20;bc=#A9091A;pw=0;"
  shape[5] = "func=tri;x=159;y=141;x1=3;y1=0;x2=0;y2=10;x3=6;y3=10;angle=199;bc=#A9091A;pw=0;"
  shape[6] = "func=tri;x=75;y=140;x1=3;y1=0;x2=0;y2=10;x3=6;y3=10;angle=158;bc=#A9091A;pw=0;"
  shape[7] = "func=rect;x=81;y=115;width=7;height=39;bc=#CCCCCC;pc=#666666;pw=1;"
  shape[8] = "func=rect;x=152;y=114;width=7;height=39;bc=#CCCCCC;pc=#666666;pw=1;"
  shape[9] = "func=rect;x=157;y=124;width=11;height=5;angle=20;bc=#C60B1E;pw=0;"
  shape[10] = "func=rect;x=143;y=124;width=18;height=5;angle=351;bc=#C60B1E;pw=0;"
  shape[11] = "func=rect;x=74;y=125;width=16;height=5;angle=347;bc=#C60B1E;pw=0;"
  shape[12] = "func=rect;x=88;y=124;width=12;height=5;angle=8;bc=#C60B1E;pw=0;"
  shape[13] = "func=rect;x=75;y=136;width=19;height=5;angle=333;bc=#C60B1E;pw=0;"
  shape[14] = "func=rect;x=147;y=138;width=19;height=4;angle=29;bc=#C60B1E;pw=0;"
  shape[15] = "func=rect;x=149;y=109;width=13;height=4;bc=#E9B816;pc=#666666;pw=1;"
  shape[16] = "func=rect;x=78;y=109;width=12;height=4;bc=#E9B816;pc=#666666;pw=1;"
  shape[17] = "func=rect;x=150;y=155;width=12;height=5;bc=#E9B816;pc=#666666;pw=1;"
  shape[18] = "func=rect;x=78;y=156;width=12;height=5;bc=#E9B816;pc=#666666;pw=1;"
  shape[19] = "func=rect;x=79;y=153;width=10;height=4;bc=#E9B816;pc=#666666;pw=1;"
  shape[20] = "func=rect;x=151;y=152;width=10;height=4;bc=#E9B816;pc=#666666;pw=1;"
  shape[21] = "func=rect;x=151;y=112;width=9;height=4;bc=#E9B816;pc=#666666;pw=1;"
  shape[22] = "func=rect;x=80;y=112;width=9;height=4;bc=#E9B816;pc=#666666;pw=1;"
  shape[23] = "func=rect;x=95;y=108;width=26;height=27;bc=#C60B1E;pc=#666666;pw=1;"
  shape[24] = "func=rect;x=119;y=108;width=26;height=27;bc=#CCCCCC;pc=#666666;pw=1;"
  shape[25] = "func=ell;x=100;y=151;width=41;height=15;bc=#CCCCCC;pc=#666666;pw=1;"
  shape[26] = "func=ell;x=150;y=104;width=10;height=4;bc=#A9091A;pw=0;"
  shape[27] = "func=ell;x=79;y=103;width=10;height=4;bc=#A9091A;pw=0;"
  shape[28] = "func=rect;x=104;y=99;width=33;height=6;bc=#E9B816;pc=#666666;pw=1;"
  shape[29] = "func=ell;x=96;y=143;width=25;height=20;bc=#E9B816;pc=#666666;pw=1;"
  shape[30] = "func=ell;x=120;y=142;width=25;height=20;bc=#C60B1E;pc=#666666;pw=1;"
  shape[31] = "func=rect;x=120;y=135;width=24;height=19;bc=#C60B1E;pw=0;"
  shape[32] = "func=rect;x=96;y=135;width=24;height=19;bc=#E9B816;pw=0;"
  shape[33] = "func=text;x=269;y=260;text=Spanish;fs=50;fn=Trebuchet MS;fb=False;fi=False;bc=Black;"
  shape[34] = "func=ell;x=96;y=89;width=48;height=11;bc=#A9091A;pw=0;"
  shape[35] = "func=ell;x=108;y=103;width=24;height=5;bc=#A9091A;pw=0;"
  shape[36] = "func=ell;x=93;y=84;width=12;height=14;bc=#00FFC400;pc=#E9B816;pw=1;"
  shape[37] = "func=ell;x=104;y=80;width=16;height=17;bc=#00FFC400;pc=#E9B816;pw=1;"
  shape[38] = "func=ell;x=119;y=81;width=16;height=16;bc=#00FFC400;pc=#E9B816;pw=1;"
  shape[39] = "func=ell;x=132;y=84;width=12;height=14;bc=#00FFC400;pc=#E9B816;pw=1;"
  shape[40] = "func=line;x=96;y=135;x1=0;y1=0;x2=0;y2=21;pc=#666666;pw=1;"
  shape[41] = "func=line;x=144;y=134;x1=0;y1=0;x2=0;y2=21;pc=#666666;pw=1;"
  shape[42] = "func=line;x=120;y=135;x1=0;y1=0;x2=0;y2=21;pc=#666666;pw=1;"
  shape[43] = "func=rect;x=106;y=135;width=4;height=28;bc=#C60B1E;pw=0;"
  shape[44] = "func=rect;x=113;y=135;width=4;height=25;bc=#C60B1E;pw=0;"
  shape[45] = "func=line;x=123;y=138;x1=0;y1=0;x2=18;y2=0;pc=#E9B816;pw=1;"
  shape[46] = "func=line;x=123;y=137;x1=0;y1=0;x2=1;y2=15;pc=#E9B816;pw=1;"
  shape[47] = "func=line;x=141;y=138;x1=0;y1=0;x2=0;y2=14;pc=#E9B816;pw=1;"
  shape[48] = "func=line;x=126;y=138;x1=14;y1=0;x2=0;y2=17;pc=#E9B816;pw=1;"
  shape[49] = "func=line;x=122;y=138;x1=0;y1=0;x2=17;y2=15;pc=#E9B816;pw=1;"
  shape[50] = "func=line;x=123;y=153;x1=2;y1=1;x2=0;y2=0;pc=#E9B816;pw=1;"
  shape[51] = "func=line;x=138;y=151;x1=3;y1=0;x2=0;y2=3;pc=#E9B816;pw=1;"
  shape[52] = "func=line;x=125;y=154;x1=0;y1=0;x2=8;y2=4;pc=#E9B816;pw=1;"
  shape[53] = "func=line;x=133;y=155;x1=0;y1=3;x2=5;y2=0;pc=#E9B816;pw=1;"
  shape[54] = "func=line;x=132;y=136;x1=0;y1=0;x2=1;y2=21;pc=#E9B816;pw=1;"
  shape[55] = "func=line;x=122;y=147;x1=0;y1=0;x2=18;y2=0;pc=#E9B816;pw=1;"
  shape[56] = "func=ell;x=127;y=145;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[57] = "func=ell;x=135;y=145;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[58] = "func=ell;x=131;y=150;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[59] = "func=ell;x=131;y=141;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[60] = "func=ell;x=135;y=141;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[61] = "func=ell;x=127;y=141;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[62] = "func=ell;x=127;y=150;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[63] = "func=ell;x=135;y=150;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[64] = "func=ell;x=128;y=153;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[65] = "func=ell;x=134;y=153;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[66] = "func=ell;x=134;y=136;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[67] = "func=ell;x=128;y=136;width=4;height=4;bc=#C60B1E;pc=#E9B816;pw=1;"
  shape[68] = "func=ell;x=131;y=145;width=5;height=5;bc=#0BC630;pc=#E9B816;pw=1;"
  shape[69] = "func=rect;x=111;y=100;width=4;height=3;bc=#0BC630;pc=#E9B816;pw=1;"
  shape[70] = "func=rect;x=126;y=100;width=4;height=3;bc=#0BC630;pc=#E9B816;pw=1;"
  shape[71] = "func=rect;x=118;y=91;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[72] = "func=rect;x=118;y=96;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[73] = "func=rect;x=116;y=94;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[74] = "func=rect;x=120;y=94;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[75] = "func=rect;x=104;y=92;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[76] = "func=rect;x=109;y=94;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[77] = "func=rect;x=128;y=94;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[78] = "func=rect;x=132;y=93;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[79] = "func=rect;x=138;y=94;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[80] = "func=rect;x=101;y=95;width=3;height=3;angle=47;bc=#FFC400;pc=#E9B816;pw=1;"
  shape[81] = "func=ell;x=112;y=123;width=16;height=20;bc=#C60B1E;pc=#666666;pw=1;"
  shape[82] = "func=ell;x=114;y=126;width=12;height=14;bc=#1961B8;pc=#666666;pw=1;"
  shape[83] = "func=rect;x=117;y=86;width=5;height=5;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[84] = "func=ell;x=103;y=87;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[85] = "func=ell;x=132;y=87;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[86] = "func=ell;x=117;y=82;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[87] = "func=ell;x=141;y=92;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[88] = "func=ell;x=95;y=92;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[89] = "func=ell;x=93;y=89;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[90] = "func=ell;x=142;y=88;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[91] = "func=ell;x=132;y=84;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[92] = "func=ell;x=102;y=84;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[93] = "func=ell;x=141;y=84;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[94] = "func=ell;x=94;y=85;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[95] = "func=ell;x=137;y=82;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[96] = "func=ell;x=98;y=82;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[97] = "func=ell;x=103;y=81;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[98] = "func=ell;x=130;y=81;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[99] = "func=ell;x=108;y=79;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[100] = "func=ell;x=113;y=79;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[101] = "func=ell;x=126;y=79;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[102] = "func=ell;x=122;y=79;width=4;height=4;bc=#CCCCCC;pc=#C89E13;pw=1;"
  shape[103] = "func=rect;x=117;y=75;width=6;height=6;angle=44;bc=#1961B8;pc=#C89E13;pw=1;"
  shape[104] = "func=rect;x=118;y=71;width=3;height=4;angle=48;bc=#FFC400;pc=#C89E13;pw=1;"
  shape[105] = "func=line;x=117;y=128;x1=0;y1=0;x2=0;y2=7;pc=#E9B816;pw=1;"
  shape[106] = "func=line;x=122;y=128;x1=0;y1=0;x2=0;y2=7;pc=#E9B816;pw=1;"
  shape[107] = "func=line;x=114;y=132;x1=0;y1=0;x2=4;y2=0;pc=#E9B816;pw=1;"
  shape[108] = "func=line;x=121;y=131;x1=0;y1=1;x2=3;y2=0;pc=#E9B816;pw=1;"
  shape[109] = "func=line;x=118;y=135;x1=0;y1=0;x2=4;y2=0;pc=#E9B816;pw=1;"
  shape[110] = "func=line;x=120;y=132;x1=0;y1=0;x2=0;y2=6;pc=#E9B816;pw=1;"
  shape[111] = "func=line;x=113;y=162;x1=0;y1=0;x2=8;y2=1;pc=#089123;pw=1;"
  shape[112] = "func=line;x=120;y=162;x1=0;y1=1;x2=8;y2=0;pc=#089123;pw=1;"
  shape[113] = "func=ell;x=118;y=157;width=5;height=6;bc=#C60B1E;pc=#E9B816;pw=2;"
  shape[114] = "func=rect;x=100;y=115;width=13;height=6;bc=#A3810F;pw=0;"
  shape[115] = "func=rect;x=102;y=121;width=10;height=10;bc=#C89E13;pw=0;"
  shape[116] = "func=rect;x=99;y=127;width=15;height=5;bc=#A3810F;pw=0;"
  shape[117] = "func=rect;x=102;y=120;width=3;height=6;bc=#1961B8;pc=#666666;pw=1;"
  shape[118] = "func=rect;x=108;y=120;width=3;height=6;bc=#1961B8;pc=#666666;pw=1;"
  shape[119] = "func=rect;x=105;y=126;width=3;height=6;bc=#1961B8;pc=#666666;pw=1;"
  shape[120] = "func=rect;x=101;y=114;width=3;height=5;bc=#FFC400;pc=#666666;pw=1;"
  shape[121] = "func=rect;x=105;y=114;width=3;height=5;bc=#FFC400;pc=#666666;pw=1;"
  shape[122] = "func=rect;x=109;y=114;width=3;height=5;bc=#FFC400;pc=#666666;pw=1;"
  shape[123] = "func=rect;x=104;y=110;width=5;height=3;bc=#A3810F;pw=0;"
  shape[124] = "func=rect;x=101;y=111;width=3;height=3;bc=#A3810F;pw=0;"
  shape[125] = "func=rect;x=110;y=111;width=3;height=3;bc=#A3810F;pw=0;"
  shape[126] = "func=rect;x=81;y=105;width=7;height=4;bc=#A3810F;pw=0;"
  shape[127] = "func=rect;x=152;y=105;width=7;height=4;bc=#A3810F;pw=0;"
  shape[128] = "func=rect;x=99;y=135;width=4;height=25;bc=#C60B1E;pw=0;"
  shape[129] = "func=rect;x=121;y=114;width=13;height=3;angle=34;bc=#666666;pw=0;"
  shape[130] = "func=rect;x=126;y=119;width=10;height=4;angle=340;bc=#666666;pw=0;"
  shape[131] = "func=rect;x=127;y=119;width=13;height=6;angle=59;bc=#666666;pw=0;"
  shape[132] = "func=rect;x=131;y=111;width=6;height=9;bc=#666666;pw=0;"
  shape[133] = "func=rect;x=135;y=127;width=4;height=6;bc=#666666;pw=0;"
  shape[134] = "func=rect;x=130;y=124;width=3;height=8;angle=41;bc=#666666;pw=0;"
  shape[135] = "func=rect;x=139;y=111;width=2;height=18;bc=#666666;pw=0;"
  shape[136] = "func=rect;x=130;y=112;width=6;height=2;bc=#FFA8C1;pw=0;"
  shape[137] = "func=rect;x=130;y=115;width=6;height=2;bc=#FFA8C1;pw=0;"
  shape[138] = "func=rect;x=133;y=111;width=3;height=14;bc=#FFA8C1;pw=0;"
  shape[139] = "func=rect;x=136;y=125;width=2;height=8;bc=#FFA8C1;pw=0;"
  shape[140] = "func=rect;x=131;y=124;width=2;height=8;angle=52;bc=#FFA8C1;pw=0;"
  shape[141] = "func=rect;x=128;y=118;width=2;height=6;angle=60;bc=#FFA8C1;pw=0;"
  shape[142] = "func=rect;x=126;y=110;width=2;height=10;angle=321;bc=#FFA8C1;pw=0;"
  shape[143] = "func=rect;x=130;y=121;width=10;height=4;angle=37;bc=#FFA8C1;pw=0;"
  shape[144] = "func=line;x=140;y=112;x1=0;y1=0;x2=1;y2=6;pc=#FFA8C1;pw=1;"
  shape[145] = "func=line;x=140;y=118;x1=0;y1=0;x2=2;y2=8;pc=#FFA8C1;pw=1;"
  shape[146] = "func=line;x=140;y=126;x1=2;y1=0;x2=0;y2=3;pc=#FFA8C1;pw=1;"
  shape[147] = "func=line;x=138;y=124;x1=2;y1=5;x2=0;y2=0;pc=#FFA8C1;pw=1;"
  shape[148] = "func=line;x=126;y=110;x1=0;y1=0;x2=5;y2=5;pc=#C60B1E;pw=1;"
  shape[149] = "func=rect;x=76;y=160;width=16;height=6;bc=#CCCCCC;pc=#666666;pw=1;"
  shape[150] = "func=rect;x=148;y=159;width=16;height=6;bc=#CCCCCC;pc=#666666;pw=1;"
  shape[151] = "func=line;x=77;y=161;x1=0;y1=0;x2=14;y2=0;pc=#1961B8;pw=1;"
  shape[152] = "func=line;x=149;y=159;x1=0;y1=0;x2=14;y2=1;pc=#1961B8;pw=1;"
  shape[153] = "func=line;x=76;y=163;x1=0;y1=0;x2=15;y2=1;pc=#1961B8;pw=1;"
  shape[154] = "func=line;x=148;y=162;x1=0;y1=0;x2=15;y2=1;pc=#1961B8;pw=1;"
EndSub
Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub
Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub
Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub
Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
