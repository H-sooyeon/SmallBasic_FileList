' ****************************************************************************
' *================  Buget-Programm =========================*
' *---------------------------------------------------------------------------------------------*
' * Autor und Idee: Dietmar Lichtenstein                                                                          
' * Stand: 28.11.2016 
' * Teile: Kontostand, Berechung, Budgetdatei in einemScript
' ****************************************************************************
'  Das Programm besteht aus vier Teilen
'  All = allgemeingültige Teile, Fenstersteuerung
'  Knt = Konteneingabe
'  Ber = Berechnung
'  Dat = Budgetdatei Update
'  --- Eingabe Datei
Input  = Program.Directory + "\Budgetwerte.txt"
'  --- Ausgabe Datei
Output = Program.Directory + "\Budgetwerte.txt"
'------------------------------------------------------------------------------
' All   Copyright Ausschrift
'------------------------------------------------------------------------------
Sub Copyright
  Font_Ta14()
  GraphicsWindow.BrushColor = "black"
  GraphicsWindow.DrawText(10,975,"© Dietmar Lichtenstein 12.07.2017")  
EndSub
'------------------------------------------------------------------------------
' All   Variablen Definitionen
'------------------------------------------------------------------------------
Sub Definitionen
EndSub
' --- Buttontexte
ButTxt[1] = ""
ButTxt[2] = "null" ' -- weiter,  Änderung, Löschung je nach Fenster
ButTxt[3] = "Speichern"
ButTxt[4] = "Hilfe"
ButTxt[5] = "ausblenden"
ButTxt[6] = "Knt"
ButTxt[7] = "Ber"
ButTxt[8] = "Dat"
' --- Fenster Kopfzeilen
Kopfzeile["Button6"] = "Kontostand"
Kopfzeile["Button7"] = "Berechnung"
Kopfzeile["Button8"] = "Budgetdatei"
' --- Fensterfarben
Farbe["start"]["back"] = "#ffd700"
Farbe["start"]["font"] = "#000000"
Farbe["Button6"]["back"] = "#eec591"
Farbe["Button6"]["font"] = "#8b5a2b"
Farbe["Button7"]["back"] = "#87ceff"
Farbe["Button7"]["font"] = "#3a5fcd"
Farbe["Button8"]["back"] = "#c1ffc1"
Farbe["Button8"]["font"] = "#228b22"
' --- Position der Kontentexte am Screen
KonTextePos[1] = -9
KonTextePos[2] = -31
KonTextePos[3] = -21
KonTextePos[4] = -15
KonTextePos[5] = -9
KonTextePos[6] = 14
' --- Kontentexte
KonTexte[1] = "aktu.Kontostand:"
KonTexte[2] = "Berechnungsdatum:"
KonTexte[3] = "mit/ohne Planung:"
KonTexte[4] = "Mindestguthaben:"
KonTexte[5] = "alter Kontostand:"
KonTexte[6] = "letztes Datum:"
' --- Position der Kontenwerte in der Datei ( mit =)
KontenSubstr[1] = 17
KontenSubstr[2] = 12
KontenSubstr[3] = 18
KontenSubstr[4] = 9
' --- Länge der Textbox am Screen
KonSize[1] = 96
KonSize[2] = 118
KonSize[3] = 53
KonSize[4] = 96
' --- Fehlerspeicher  der Textboxen
KonFehler[1] = 0
KonFehler[2] = 0
KonFehler[3] = 0
KonFehler[4] = 0
KonFehler[5] = 0
KonFehler[6] = 0
' --- Update-Marker
Update[1] = 0
Update[2] = 0
Update[3] = 0
Update[4] = 0
Update[5] = 0
Update[6] = 0
' --- Ergebnisfelder Budgetdatei
DatErgeb[1] = ""
DatErgeb[2] = ""
DatErgeb[3] = ""
DatErgeb[4] = ""
DatErgeb[5] = ""
DatErgeb[6] = ""
' --- Länge der Ergebnisfelder Budgetdatei
DatLaeng[1] = "25"
DatLaeng[2] = "1"
DatLaeng[3] = "5"
DatLaeng[4] = "2"
DatLaeng[5] = "1"
DatLaeng[6] = "8"
' --- Startkonten ohne Textteil  
Beginner[1] = ""
Beginner[2] = ""
Beginner[3] = ""
Beginner[4] = ""
' --- Position der Kategorietexte am Screen
KatTextePos[1] = 49
KatTextePos[2] = 12
KatTextePos[3] = 52
KatTextePos[4] = 70
KatTextePos[5] = 33
KatTextePos[6] = 72
' --- Steuerarray Planung  
MitOhne["h"] = "true"
MitOhne["s"] = "true"
MitOhne["p"] = "false"
' --- Kategorietexte
KatTexte[1] = "Kategorie:"
KatTexte[2] = "Soll/Hab/Plan:"
KatTexte[3] = "Fälligkeit:"
KatTexte[4] = "Turnus:"
KatTexte[5] = "Korr.Fälligk:"
KatTexte[6] = "Betrag:"
' --- Länge der Textbox am Screen
KatSize[1] = 278
KatSize[2] = 22
KatSize[3] = 65
KatSize[4] = 33
KatSize[5] = 22
KatSize[6] = 96
' --- Position der Hilfetexte  
HorHilf = 381 ' -- horizontaler (x) Beginn der Hilfetexte
VerHilf = 390 ' -- vertikaler   (y)  Beginn der Hilfetexte 420
' --- neue Kategorie
NeuKategor = "-----neue Kategorie------;s;30.12;12;0;0.00"
LeerKategor = "                         " ' --- 25 Leerstellen
' --- Vorgabewerte wenn keine Datei vorhanden
StartWerteVorgabe[1] = "Mindestguthaben=1000.00"
StartWerteVorgabe[2] = "Kontostand=1000.00"
StartWerteVorgabe[3] = "Berechnungsdatum=" + Clock.Date
StartWerteVorgabe[4] = "Planung=mit"
StartWerteVorgabe[5] = "Gehalt Vater             ;h;99.01;01;2;2000.00"
StartWerteVorgabe[6] = "Energie                  ;s;13.01;01;3;64.00"
StartWerteVorgabe[7] = "Rundfunk/Fernsehen       ;s;15.03;03;3;52.50"
StartWerteVorgabe[8] = "Provider                 ;s;11.03;06;0;50.00"
StartWerteVorgabe[9] = "Versicherung             ;s;20.07;12;0;240.00"
StartWerteVorgabe[10] ="Urlaub                   ;p;30.12;12;0;1600.00"
' --- Kalenderdaten  
Monat[1][1] = 31
Monat[2][1] = 28
Monat[3][1] = 31
Monat[4][1] = 30
Monat[5][1] = 31
Monat[6][1] = 30
Monat[7][1] = 31
Monat[8][1] = 31
Monat[9][1] = 30
Monat[10][1] = 31
Monat[11][1] = 30
Monat[12][1] = 31
' --- Spaltenposition Berechnung
Spalt[1] = 18   ' -- Kategorie  = linker Rand
Spalt[2] = 265  ' -- Soll/Haben
Spalt[3] = 309  ' -- Betrag
Spalt[4] = 418  ' -- Fälligkeit
Spalt[5] = 480  ' -- akt.Fälligkeit
Spalt[6] = 567  ' -- Turnus
Spalt[7] = 636  ' -- Anzahl
Spalt[8] = 698  ' -- Gesamt Betrag
Spalt[9] = 810  ' -- Hinweise
Spalt[10] = 982 ' -- rechter Rand
' --- Spaltenposition Budgetdatei
SpaltD[1] = 18   ' -- Kategorie  = linker Rand
SpaltD[2] = 218  ' -- Änderung
SpaltD[3] = 298  ' -- Löschung
SpaltD[4] = 378  ' -- rechter Rand
' --- Brechnung Kopftexte
Kopf[1] = "Kategorie"  
Kopf[2] = "S/H"
Kopf[3] = "Betrag"
Kopf[4] = "Fälligk."
Kopf[5] = "akt.Fäll."
Kopf[6] = "Turnus"
Kopf[7] = "Anzahl"
Kopf[8] = "Ges.Betrag"
Kopf[9] = "Hinweise"
' --- Budgetdatei Kopftexte
KopfD[1] = "Kategorie"  
KopfD[2] = "Aktion"
KopfD[3] = "Aktion"
' --- Hintergrundfarben Kategorie
BackColorKat["s"] = "#ffb5c5"
BackColorKat["h"] = "#00ff7f"
BackColorKat["p"] = "#63b8ff"
' --- Turnus
Turnus["01"] = "   Monat"
Turnus["03"] = "  Quartal"
Turnus["06"] = " Halbjahr"
Turnus["12"] = "    Jahr"
' --- Hintergrundfarbe Fälligkeit
BackColorFal["01"] = "#fffacd"
BackColorFal["03"] = "#ffec8b"
BackColorFal["06"] = "#ffd700"
BackColorFal["12"] = "#ffc125"
' --- Position der Kontenwerte
KontenSubstr[1] = 17
KontenSubstr[2] = 12
KontenSubstr[3] = 18
' --- aktuelles Datum
AktDatum = Clock.Date
AktJahr = Text.GetSubText(AktDatum,7,4)
AktMona = Text.GetSubText(AktDatum,4,2)
AktTag = Text.GetSubText(AktDatum,1,2)
' --- Wochentage für ewigen Kalender
Wochentage[0] = "So"
Wochentage[1] = "Mo"
Wochentage[2] = "Di"
Wochentage[3] = "Mi"
Wochentage[4] = "Do"
Wochentage[5] = "Fr"
Wochentage[6] = "Sa"
' --- Monatstabelle für ewigen Kalender
ewMonat[1] = 11
ewMonat[2] = 12
ewMonat[3] = 01
ewMonat[4] = 02
ewMonat[5] = 03
ewMonat[6] = 04
ewMonat[7] = 05
ewMonat[8] = 06
ewMonat[9] = 07
ewMonat[10] = 08
ewMonat[11] = 09
ewMonat[12] = 10
' --- Fällikeitsverschiebung
VerschTag["2Sa"] = -1
VerschTag["2So"] = -2
VerschTag["3Sa"] = 2
VerschTag["3So"] = 1
' --- Verschiebungstexte
VerschText["0"] = ""
VerschText["1"] = "Anzahl-1"
VerschText["2"] = "Fr <= Sa/So"
VerschText["3"] = "Sa/So => Mo"
' --- Update Texte und Farben
ArbText[0][1] = "keine Funktion"
ArbText[0][2] = "green"
ArbText[1][1] = "Änderung"
ArbText[1][2] = "blue"
ArbText[2][1] = "Löschung"
ArbText[2][2] = "red"
' --- Position und Länge der Kategoriewerte in der Datei
KatSub[1][1] = 1  ' Position
KatSub[1][2] = 25 ' Länge
KatSub[2][1] = 27
KatSub[2][2] = 1
KatSub[3][1] = 29
KatSub[3][2] = 5
KatSub[4][1] = 35
KatSub[4][2] = 2
KatSub[5][1] = 38
KatSub[5][2] = 1
KatSub[6][1] = 40
KatSub[6][2] = 10
' --- SohaOK
SohaOK[1] = "s"
SohaOK[2] = "h"
SohaOK[3] = "p"
SohaOK[4] = "S"
SohaOK[5] = "H"
SohaOK[6] = "P"
' --- TurnOK
TurnOK[1] = "01"
TurnOK[2] = "03"
TurnOK[3] = "06"
TurnOK[4] = "12"
' --- KfalOK
KfalOK[1] = "0"
KfalOK[2] = "1"
KfalOK[3] = "2"
KfalOK[4] = "3"
' --- Timerschalter
SpeichTime = "false"
SprungTime = "false"
' --- 1. Durchlauf Kontostand
Durchlauf = "true"
' --- Hilfetexte Kontostand
HilfTxt[0][1] = "aktueller Kontostand"
HilfTxt[0][2] = "Hier ist der aktuelle Kontostand zum Zeitpunkt des Berechnungsdatums"
HilfTxt[0][3] = "einzugeben."
HilfTxt[0][4] = "Ein negativer Kontostand kann nicht eingetragen werden"

HilfTxt[1][1] = "Berechnungsdatum"
HilfTxt[1][2] = "Das Tagesdatum wird vom Programm voreingestellt."
HilfTxt[1][3] = "Es kann auf jedes andere Jahresdatum umgestellt werden."
HilfTxt[1][4] = "Das Datum ist im Format TT.MM.JJJJ einzugeben."

HilfTxt[2][1] = "Planung mit / ohne"
HilfTxt[2][2] = "Hier kann man einstellen, ob die geplanten Ausgaben in die Berechnung"
HilfTxt[2][3] = "einbezogen werden sollen."
HilfTxt[2][4] = "Es dürfen nur die Begriffe 'mit' oder 'ohne' eingegeben werden"

HilfTxt[3][1] = "Mindestguthaben"
HilfTxt[3][2] = "Dieser Betrag sollte immer auf dem Konto vorhanden sein,"
HilfTxt[3][3] = "um Überziehungen zu vermeiden."

HilfTxt[4][1] = "alter Kontostand"
HilfTxt[4][2] = "Der zuletzt eingetragene und gespeicherte Kontostand"
HilfTxt[4][3] = "Die Differenz zeigt die Veränderung zur letzten Überprüfung"

HilfTxt[5][1] = "letztes Datum"
HilfTxt[5][2] = "Das zuletzt eingetragene und gespeicherte Datum"
HilfTxt[5][3] = "Es ist das letzte Datum der Überprüfung des Budgets"

HilfTxt[6][1] = "'weiter'  Button"
HilfTxt[6][2] = "Erst NACH Betätigung des Buttons werden die Buttons 'Ber' und 'Dat' freigegeben."

HilfTxt[7][1] = "'Speichern'  Button"
HilfTxt[7][2] = "Dieser Button speichert NUR den Kontostand - nicht die Budgetwerte."

HilfTxt[8][1] = "Ende"
HilfTxt[9][1] = "Ende"
' --- Hilfetexte Aktualisierung
HilfTxt[10][1] = "Kategorie"
HilfTxt[10][2] = "Der Kategoriename darf nicht mehrfach benutzt werden."
HilfTxt[10][3] = "Er kann aus max. 25 Zeichen bestehen"

HilfTxt[11][1] = "Soll / Haben / Planung Format = s / h / p"
HilfTxt[11][2] = "s = Soll (Ausgaben) h = Haben (Einnahmen) p = geplante Ausgaben"

HilfTxt[12][1] = "Fälligkeit Format = tt.mm"
HilfTxt[12][2] = "Die Fälligkeit gibt das Datum ( Tag-tt . Monat-mm ) der Zahlung an.
HilfTxt[12][3] = "tt und mm sind jeweils zweistellige Zahlen durch einen Punkt getrennt."
HilfTxt[12][4] = "tt = 99 ist der letzte Tag des jeweiligen Monats.(also nicht 30 / 31)"
HilfTxt[12][5] = "mm ist im Vierteljahr / Halbjahr der relative Monat im Zeitraum also:"
HilfTxt[12][6] = "mm = 01 bei monatlichen Zahlungen "
HilfTxt[12][7] = "mm = 01 / 02 / 03 bei vierteljährlichen Zahlungen (Mai = 02)"
HilfTxt[12][8] = "mm = 01 / 02 / 03 / 04 / 05 / 06 bei halbjährlichen Zahlungen (Okt.= 04)"
HilfTxt[12][9] = "mm = 01 bis 12 bei jährlichen Zahlungen

HilfTxt[13][1] = "Turnus Format = 01 / 03 / 06 / 12"
HilfTxt[13][2] = "Der Turnus gibt an in welchen Abständen die Zahlungen erfolgen"
HilfTxt[13][3] = "01 = monatlich"
HilfTxt[13][4] = "03 = vierteljährlich"
HilfTxt[13][5] = "06 = halbjährlich"
HilfTxt[13][6] = "12 = jährlich"

HilfTxt[14][1] = "Korrektur Fälligkeit Format = 0 / 1 / 2 / 3"
HilfTxt[14][2] = "0 = das jeweilige Fälligkeitsdatum wird nicht korrigiert"
HilfTxt[14][3] = "1 = die Anzahl der fälligen Monate wird um einen verringert"
HilfTxt[14][4] = "2 = Sa / So -Termine werden auf den vorherigen Freitag verschoben."
HilfTxt[14][5] = "3 = Sa / So -Termine werden auf den folgenden Montag verschoben."

HilfTxt[15][1] = "Betrag"
HilfTxt[15][2] = "Alle Zahlen sind im englischen Format also mit Punkt ( . ) einzugeben."
HilfTxt[15][3] = "Größte positive Zahl 99 999.99 (ohne Trennblank)"

HilfTxt[16][1] = "'Speichern'  Button"
HilfTxt[16][2] = "Dieser Button speichert den Kontostand und die Budgetwerte."

HilfTxt[17][1] = "Ende"
HilfTxt[18][1] = "Ende"
HilfTxt[19][1] = "Ende"

HilfTxt[20][1] = "Knt - Kontostand"
HilfTxt[20][2] = "In diesem Fenster wird der aktuelle Kontostand und das Datum eingetragen."
HilfTxt[20][3] = "Nur nach dem Button 'weiter' sind 'Ber' und 'Dat' aktiv."

HilfTxt[21][1] = "Ber - Berechnung"
HilfTxt[21][2] = "In diesem Fenster erfolgt die Berechnung des frei verfügbaren Betrags."
HilfTxt[21][3] = "Das Fenster startet mit einer kurzen Verzögerung."

HilfTxt[22][1] = "Dat - Budgetdatei"
HilfTxt[22][2] = "In diesem Fenster wird die Budgetdatei aktualisiert und geflegt."
HilfTxt[22][3] = "Es können bis zu 50 Budgetsätze angelegt werden."
HilfTxt[22][4] = "Das Fenster startet mit einer kurzen Verzögerung."

HilfTxt[23][1] = "Allgemeines - Tipps"
HilfTxt[23][2] = "Die drei Buttons können in beliebiger Reihenfolger genutzt werden."
HilfTxt[23][3] = "Prüfen Sie mit Kontostand 0.00 und Datum 01.01. das Verhältnis von Einnahmen
HilfTxt[23][4] = "und Ausgaben.

HilfTxt[24][1] = "Ende"
'------------------------------------------------------------------------------
' All   Initialisierung des Grafikfensters
'------------------------------------------------------------------------------
Sub Ini
EndSub
' --- Eingangpunkt vom Programm
GraphicsWindow.CanResize  = "true"
GraphicsWindow.Width = 1000 
GraphicsWindow.Height = 1000
GraphicsWindow.Left = 800  ' --  (Desktop.Width - 1024) / 2
GraphicsWindow.Top  = 5
GraphicsWindow.Title = "Meine Budgetberechnung"

Controls.ButtonClicked = ButtonAktion ' -- ButtonKlick Akttion
GraphicsWindow.MouseUp = MausUp       ' -- Mausklick Aktion

Timer.Interval = 100    ' -- 100 ms
Timer.Tick = Aller100ms ' -- Hier wird die Timer-Routine aktiviert
Timer.Pause()

ControlsSetzen()
Startseite()
DateiEinlesen()
' --- Das Fenster wartet auf eine Aktion
'******************************************************************************
' All   FENSTER Startseite  (gelbe Seite)
'******************************************************************************
Sub Startseite
   GraphicsWindow.BackgroundColor = Farbe["start"]["back"]
   Font_SiBI36()
   GraphicsWindow.BrushColor = Farbe["start"]["font"]
   GraphicsWindow.DrawText(20,4,"Mein Budget")
  
   Put_Text = "Ein Programm das berechnet, wie sich mein finanzieller Freiraum im Laufe des Jahres entwickelt."
   Font_TaB16()
   GraphicsWindow.BrushColor = "black"
   GraphicsWindow.DrawText(20,55,Put_Text)

   GraphicsWindow.PenColor = Farbe[Erg]["font"] 'Rahmenfarbe
   GraphicsWindow.DrawRectangle(2,2,GraphicsWindow.Width-4,GraphicsWindow.Height-4) 'Rahmen
   
   GraphicsWindow.DrawRectangle(273,88,424,284) 'Rahmen
   Bild = Program.Directory + "\Geld.jpg"
   GraphicsWindow.DrawResizedImage(Bild,275,90,420,280)
  
   Controls.ShowControl(Button[4])
   Copyright()
Endsub
'******************************************************************************
' All   Fenstersteuerung
'******************************************************************************
'------------------------------------------------------------------------------
' All   Controls setzen  und auf Hide schalten
'------------------------------------------------------------------------------
Sub ControlsSetzen
' ---  Positionen: 440, 580,  720,  860
   Font_TaB16()
' --- Buttons  Kopfleiste
   GraphicsWindow.BrushColor = "darkgreen"
   For i = 1 To 4
      Button[i] = Controls.AddButton(ButTxt[i],300+i*140,10)
      Controls.SetSize(Button[i],130,30)
      Controls.HideControl(Button[i])
   EndFor
' --- Hilfe ausblenden
   Button[5] = Controls.AddButton(ButTxt[5],860,VerHilf)
   Controls.SetSize(Button[5],130,30)
   Controls.HideControl(Button[5])
' --- Fenstersprung-Button
   GraphicsWindow.BrushColor = "black"
   For i = 6 To 10
      Button[i] = Controls.AddButton(ButTxt[i],260+(i-5)*60,10)
      Controls.SetSize(Button[i],40,30)
   EndFor
' --- Pseudo Button für Steuerung bei Konto    
   Controls.SetButtonCaption(Button[9],"---") ' -- erzeugen ButTxt[7]
   Controls.SetButtonCaption(Button[10],"---")  ' ButTxt[8]
   Controls.Move(Button[9],380,10) ' -- verschieben auf Originalposition
   Controls.Move(Button[10],440,10)
   Controls.HideControl(Button[9])  ' -- Hide schalten
   Controls.HideControl(Button[10])
' --- Textboxen initialisiern    
   For i=1 To 6
      Font_Cu18()
      GraphicsWindow.BrushColor = "black"
      TextBox[i] = Controls.AddTextBox(530,100+i*40) ' Textbox anlegen
      Controls.SetSize(TextBox[i],130,30) ' Textbox Größe
      Controls.HideControl(TextBox[i])
   EndFor 
EndSub
'------------------------------------------------------------------------------
' All   Welcher Button wurde geklickt ?
'------------------------------------------------------------------------------
Sub ButtonAktion
   Erg = Controls.LastClickedButton
   If Erg = Button[2] Then
      Aenderung() ' -- weiter,  Änderung, Löschung je nach Fenster
   ElseIf Erg = Button[3] Then
      Speichern() ' -- Speichern Konto / Budgetdatei
   ElseIf Erg = Button[4] Then
      Hilfe() ' -- Hilfe aktivieren
   ElseIf Erg = Button[5] Then
      HilfeLösch() ' -- Hilfe ausblenden
   ElseIf Erg = Button[6] Then
      Fenster = ButTxt[6] ' -- Fenstern Kontostand
      Kontostand()  
   ElseIf Erg = Button[7] Then ' -- Fenstern Berechnung
      Timer.Resume()
      TickZaehler = 0 ' -- zählt die 0,1 Sec
      SprungTime = "true"
   ElseIf Erg = Button[8] Then ' -- Fenstern Budgetdatei
      Timer.Resume()
      TickZaehler = 0 ' -- zählt die 0,1 Sec
      SprungTime = "true"
   EndIf
EndSub
 '------------------------------------------------------------------------------
' All   Basisfenster erstellen je nach Button
'------------------------------------------------------------------------------
Sub BasisFenster
   GraphicsWindow.BrushColor = Farbe[Erg]["back"]  ' Farbe[Erg]["back"]
   GraphicsWindow.FillRectangle(3,3,995,995) 'Gesamtfenster löschen
   GraphicsWindow.BackgroundColor = Farbe[Erg]["back"] 'Hintergrundfarbe
   FarbeLösch = Farbe[Erg]["back"] ' --- speichern für Löschfunktionen
   Fenster = Erg
   GraphicsWindow.BrushColor = Farbe[Erg]["font"] 'Fontfarbe
   GraphicsWindow.PenColor = Farbe[Erg]["font"] 'Rahmenfarbe
   GraphicsWindow.DrawRectangle(2,2,GraphicsWindow.Width-4,GraphicsWindow.Height-4) 'Rahmen
   Font_SiBI36()
   GraphicsWindow.DrawText(20,4,Kopfzeile[Erg])
   Font_Ta14()
   GraphicsWindow.DrawText(220,20,"gehe dann zu: ")
   Copyright()
EndSub
'------------------------------------------------------------------------------
' All   Timer für Speicherung
'------------------------------------------------------------------------------
Sub Aller100ms
   TickZaehler = TickZaehler + 1
   If SpeichTime Then
      If TickZaehler >= 10 Then
         Timer.Pause()
         SpeichTime = "false"
         GraphicsWindow.BrushColor = FarbeLösch  ' -- Löscht "Speicherung erfolgt"
         GraphicsWindow.FillRectangle(720,45,130,26)
         Controls.HideControl(Button[3])
      EndIf
   ElseIf SprungTime Then
      If TickZaehler >= 10 Then
         Timer.Pause()
         SprungTime = "false"
         If Erg = Button[8] Then   ' -- Fenstern Budgetdatei
            Budgetdatei()
         ElseIf Erg = Button[7] Then   ' -- Fenstern Berechnung  
            Berechnung()
         EndIf
      EndIf 
   EndIf    
EndSub
'------------------------------------------------------------------------------
' All   Button Speichern geklickt
'------------------------------------------------------------------------------ 
Sub Speichern
   If Fenster = "Button6" Then ' Kontostand
      KontenWrite()
   ElseIf Fenster = "Button8" Then ' Budgetdatei
' The following line could be harmful and has been automatically commented.
'       DelFile = File.DeleteFile(Output)
      If DelFile = "SUCCESS" Then
         KontenWrite()
         BudgetWrite()
' --- nach dem Speichern Budgetwerte neu listen
         BudgetMax() ' -- fügt eine neue Kategorie ein
         Bubblesort() ' -- Sortierung Kategoriedaten
         BudgetWerte = BubbleTmp
         DatTabelleKopf()
         DatBudgetListen() ' -- Datei auflisten        
      Else
         TextWindow.WriteLine("Budgetdatei - Löschfehler")
      EndIf  
   Else
   Endif
EndSub
'------------------------------------------------------------------------------
' All   Button Übernehmen,  Änderung, Löschung
'------------------------------------------------------------------------------
Sub Aenderung
   If Fenster = "Button6" Then
      KntPruef()
   ElseIf Fenster = "Button8" Then
      DatPruef()  
   EndIf
EndSub
'******************************************************************************
' Knt   FENSTER Kontostand (braune Seite)
'******************************************************************************
'------------------------------------------------------------------------------
' Knt   FENSTER -  Kontostand
'------------------------------------------------------------------------------
Sub Kontostand
   BasisFenster()
   Controls.ShowControl(Button[2]) 
   Font_TaB16()
   GraphicsWindow.BrushColor = "darkgreen"
   Controls.SetButtonCaption(Button[2],"weiter")
   Controls.HideControl(Button[3]) 
   Controls.ShowControl(Button[4])
   Controls.HideControl(Button[5])
   Controls.SetButtonCaption(Button[6],"*")
   Controls.SetButtonCaption(Button[7],ButTxt[7])
   Controls.SetButtonCaption(Button[8],ButTxt[8])
   Controls.HideControl(Button[7]) ' --  deaktivieren der Originalbutton
   Controls.HideControl(Button[8])
   Controls.ShowControl(Button[9]) ' -- aktiviren der Pseudobutton
   Controls.ShowControl(Button[10])
   For i=5 To 6
      Controls.HideControl(TextBox[i]) ' -- hier überzählige Textbox deaktiviern
   EndFor
   For i=1 To 6
' --- Textbox -Bezeichnung
      Font_TaB16()
      GraphicsWindow.BrushColor = "darkgreen"
      GraphicsWindow.DrawText(390+KonTextePos[i],102+i*40,KonTexte[i])
' --- Textbox aktivieren
      Controls.ShowControl(TextBox[i])
      Controls.SetSize(TextBox[i],KonSize[i],26) ' Textbox Größe
   EndFor
   ' --- Startwerte eintragen
   If Durchlauf Then  ' -- beim ersten Durchlauf wir die Eingabe auf 0.00 gesetzt
     Controls.SetTextBoxText(TextBox[1],"0.00")
     Durchlauf = "false"
   Else
     Controls.SetTextBoxText(TextBox[1],Beginner[1])
   EndIf  
   Controls.SetTextBoxText(TextBox[2],Clock.Date)
   Controls.SetTextBoxText(TextBox[3],Beginner[3])
   Controls.SetTextBoxText(TextBox[4],Beginner[4])
' --- Altwerte aus der Datei
   Font_Cu18()
   GraphicsWindow.FontBold = "True"
   GraphicsWindow.BrushColor = "black"
   Value = Text.GetSubText(StartWerte[2],KontenSubstr[2],10)*1
   GraphicsWindow.DrawText(530,102+5*40,Value)  
   GraphicsWindow.DrawText(530,102+6*40,Text.GetSubText(StartWerte[3],KontenSubstr[3],10))
 EndSub
'------------------------------------------------------------------------------
' Knt   Eingabe prüfen
'------------------------------------------------------------------------------
Sub KntPruef
   Update = "" ' --  Löschen Update-Merker
   
   Betrag = Controls.GetTextBoxText(TextBox[1])
   BoxNum = 1
   FehlerLösch()
   PruefBtr()
   Beginner[1] = Betrag
   Controls.SetTextBoxText(TextBox[1],Beginner[1])
   AnzeigFehler()
  
   BoxNum = 2
   FehlerLösch()
   Beginner[2] = Controls.GetTextBoxText(TextBox[2])
   DatumPruef()
   AnzeigFehler()
  
   BoxNum = 3
   FehlerLösch()
   Beginner[3] = Controls.GetTextBoxText(TextBox[3])
   PlanPruef()
   AnzeigFehler()
  
   Betrag = Controls.GetTextBoxText(TextBox[4])
   BoxNum = 4
   FehlerLösch()
   PruefBtr()
   Beginner[4] = Betrag
   Controls.SetTextBoxText(TextBox[4],Beginner[4])
   AnzeigFehler()
  
   If Array.ContainsValue(Update,1) Then
' --- Fehler in einem Feld 
   Else ' -- Felder fehlerfrei
      Controls.HideControl(Button[9]) ' -- Pseudobutton deaktiviern
      Controls.HideControl(Button[10])
      Controls.ShowControl(Button[7]) ' -- Originalbutton aktivieren
      Controls.ShowControl(Button[8])
      Controls.ShowControl(Button[3])
' --- Berechnung Differnz zum Vormonat
      BoxNum = 5
      FehlerLösch()     
      Font_TaB16()
      GraphicsWindow.BrushColor = "darkgreen"
      GraphicsWindow.DrawText(675,102+5*40,"Differenz: ")
      Value = Beginner[1] - Text.GetSubText(StartWerte[2],KontenSubstr[2],10)*1 
      Font_Cu18()
      GraphicsWindow.FontBold = "True"
      GraphicsWindow.BrushColor = "black"
      If Value < 0 Then
         GraphicsWindow.BrushColor = "red"
      Endif  
      GraphicsWindow.DrawText(780,102+5*40,Value)
   EndIf
EndSub
'******************************************************************************
' Ber   FENSTER  Berechnung (blaue Seite)
'******************************************************************************
'------------------------------------------------------------------------------
' Ber   FENSTER -  Berechnung
'------------------------------------------------------------------------------
Sub Berechnung
   BasisFenster()
   For i = 1 To 5
      Controls.HideControl(Button[i]) ' -- Buttons auf Hide 
   EndFor
   For i=1 To 6
      Controls.HideControl(TextBox[i]) ' Textboxen auf Hide
   EndFor
   Controls.SetButtonCaption(Button[6],ButTxt[6])
   Controls.SetButtonCaption(Button[7],"*")
   Controls.SetButtonCaption(Button[8],ButTxt[8])
' --- mit / ohne Steuerung
   MitOhne["p"] = "true"
   If Beginner[3] = "ohne" Then
      MitOhne["p"] = "false"
   EndIf 
' --- Beginn Tabellenaufbau 
   BerSortieren() 
   BerVorbereitung()
' --- Kopfzeile der Berechnung   
   Put_Text = "aktu.Kontostand: " + Beginner[1] + " €   am : " + Beginner[2] + "  Tag: " + VglTag + " im Jahr"
   Font_TaB16()
   GraphicsWindow.BrushColor = "black"
   GraphicsWindow.DrawText(420,45,Put_Text)
' --- Aufbau der Berechnungsabelle
   BerTabelleWerte()
' --- Fußzeile der Brechnung
   Put_Text = "verfügbarer Betrag : " + VerfuegBetrag + " €  bei einem Kontostand p. A:  " + Beginner[4] + " €"
   Font_SiBI36()
   GraphicsWindow.FontSize = 24
   GraphicsWindow.BrushColor = "black"
   If VerfuegBetrag < 0.00 Then
      GraphicsWindow.BrushColor = "red"
   Endif
   GraphicsWindow.DrawText(100,Ver+5,Put_Text) 
 EndSub
'------------------------------------------------------------------------------
' Ber   BudgetWerte nach Fälligkeit sortieren
'------------------------------------------------------------------------------
Sub BerSortieren
' --- Neukategorie entfernen
   BudgetMin()
' --- Fälligkeit und Turnus  für Sortierung umordnen
   BudgetSort = ""  ' Array Löschen
   BubbleTmp = ""   'Array Löschen
   For i = 1 To Array.GetItemCount(BudgetWerte)
      KatTmp = Text.GetSubText(BudgetWerte[i],1,25)
      FaellTmp = Text.Append(Text.GetSubText(BudgetWerte[i],32,2),Text.GetSubText(BudgetWerte[i],29,2))
      KatTmp = Text.Append(" ",KatTmp) '  --- nur so sind num. Kategorien möglich
      BudgetSort[i] = Text.GetSubText(BudgetWerte[i],35,2) + Text.Append(FaellTmp,KatTmp)
   EndFor
' --- Pilotdatei BudgetSort sortieren  
   BubbleTmp = BudgetSort
   Bubblesort() ' -- Sortierung der Pilotdatei
   BudgetSort = BubbleTmp
' --- Kategorie-Sätze schreiben in Reihenfolge der Pilotdatei
   z = 0
   For i = 1 To Array.GetItemCount(BudgetSort)
      SortValue = Text.GetSubText(BudgetSort[i],8,25)
      For j = 1 To Array.GetItemCount(BudgetWerte)
         If SortValue = Text.GetSubText(BudgetWerte[j],1,25) Then
            z = z + 1
            BubbleTmp[z] = BudgetWerte[j]
         EndIf  
      EndFor
   EndFor
   BudgetWerte = BubbleTmp
EndSub
'------------------------------------------------------------------------------
' Ber   Berechnung vorbereiten 
'------------------------------------------------------------------------------
Sub BerVorbereitung
' --- Budgetwerte in getrennte Arrays aufspalten
   For i=1 To Array.GetItemCount(BudgetWerte)
      B_Kat[i] = Text.GetSubText(BudgetWerte[i],1,25) ' Kategorie
      B_SHP[i] = Text.GetSubText(BudgetWerte[i],27,1) 'S/H/P
      B_Fal[i] = Text.GetSubText(BudgetWerte[i],29,5) 'Fälligkeit
      B_Tur[i] = Text.GetSubText(BudgetWerte[i],35,2) 'Turnus
      B_FKr[i] = Text.GetSubText(BudgetWerte[i],38,1) 'Fäll.Korrektur
         Betrag = "    " + Text.GetSubText(BudgetWerte[i],40,10) 'Betrag
      B_Btr[i] = Text.GetSubText(Betrag,Text.GetLength(Betrag)-7,8)   'Betrag ausrichten
   EndFor
' --- Auskunftsdatum aus Resultwerten
   StartJahr = Text.GetSubText(Beginner[2],7,4)
   StartMona = Text.GetSubText(Beginner[2],4,2)
   StartTag  = Text.GetSubText(Beginner[2],1,2)
' --- Basismonate berechnen
   BasisMona["01"] = StartMona - 1
   BasisMona["03"] = Math.Floor((StartMona - 1) / 3) * 3
   BasisMona["06"] = Math.Floor((StartMona - 1) / 6) * 6
   BasisMona["12"] = 0
' --- Restmonate berechnen
   RestMona["01"] = 12 - StartMona
   RestMona["03"] = Math.Floor((12 - StartMona) / 3)
   RestMona["06"] = Math.Floor((12 - StartMona) / 6)
   RestMona["12"] = 0
' --- Kalender aufbauen (Jahr muss bekannt sein)
   Kalender()
' -- Vergleichstag berechnen
   VglTag = Monat[StartMona+0][2] + StartTag  ' -- laufende Tag im Jahr = Prüftag
 EndSub
'------------------------------------------------------------------------------
' Ber   Tabellenzeilen Berechnung
'------------------------------------------------------------------------------
Sub BerTabelleWerte
' --- Kopfzeile der Tabelle  
   Ver = 70 ' -- horizontale Startposition
   GraphicsWindow.PenColor = "black"     ' -- Rahmen der Tabelle
   GraphicsWindow.PenWidth = 2
   Font_Ta14B()
   For j = 1 To 9
      BrtSpalte = Spalt[j+1]-Spalt[j] 
      GraphicsWindow.DrawRectangle(Spalt[j],Ver,BrtSpalte,18)  ' Kategorie-Rahmen
      GraphicsWindow.BrushColor = "#63b8ff"
      GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,16) ' Rahmenhintergrund
      GraphicsWindow.BrushColor = "black" ' Schriftfarbe
      GraphicsWindow.DrawText(Spalt[j]+5,Ver,Kopf[j])
   EndFor
   Ver = Ver +18 
' --- Inhalt der Tabelle  
   VerfuegBetrag = Beginner[4] * -1 + Beginner[1]
   For sa=1 To Array.GetItemCount(BudgetWerte)   ' Anzahl der Zeilen
      If MitOhne[B_SHP[sa]] Then  ' mit / ohne Steuerung
         For j = 1 To 9
            BrtSpalte = Spalt[j+1]-Spalt[j] 
            GraphicsWindow.DrawRectangle(Spalt[j],Ver,BrtSpalte,17)  ' Kategorie-Rahmen
            If j = 1 Then     ' === Kategorie
               GraphicsWindow.BrushColor = BackColorKat[B_SHP[sa]] ' je nach Soll/Haben/Plan 
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               Value = Text.Append(Text.GetSubText(100+sa,2,2),"  ")
               GraphicsWindow.DrawText(Spalt[j]+3,Ver,Text.Append(Value,B_Kat[sa]))
            ElseIf j = 2 Then   ' === Soll/Haben
               GraphicsWindow.BrushColor = BackColorKat[B_SHP[sa]] ' je nach Soll/Haben/Plan 
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+17,Ver,Text.ConvertToUpperCase(B_SHP[sa]))
            ElseIf j = 3 Then   ' === Betrag
               GraphicsWindow.BrushColor = BackColorKat[B_SHP[sa]] ' je nach Soll/Haben/Plan 
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               Font_Cu16B()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+15,Ver,B_Btr[sa])
            ElseIf j = 4 Then  ' ===Fälligkeit
               GraphicsWindow.BrushColor = "#bebebe"
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+12,Ver,B_Fal[sa]) 
            ElseIf j = 5 Then   ' === akt.Fälligkeit
               GraphicsWindow.BrushColor = "#bebebe"
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               FaelligTag = Text.GetSubText(B_Fal[sa],1,2)
               FaelligMon = Text.GetSubText(B_Fal[sa],4,2)
               Faelligkeit()
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+8,Ver,AblaufDat)
            ElseIf j = 6 Then   ' === Turnus
               GraphicsWindow.BrushColor = BackColorFal[B_Tur[sa]]     ' je nach Turnus
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+1,Ver,Turnus[B_Tur[sa]])
            ElseIf j = 7 Then   ' === Anzahl Monate
               GraphicsWindow.BrushColor = "#dbdbdb"
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               AnzahlMonate()
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+20,Ver,AnzahlDruck)
            ElseIf j = 8 Then  ' === Gesamtbetrag
               GraphicsWindow.BrushColor = "#dbdbdb"
               GraphicsWindow.FillRectangle(Spalt[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
' --- Druckaufbereitung Blank bei 0.00 bzw. Punkt ausrichten
               If ZeilenBetrag = 0.00 Then
                  ZeilenDruck = " "
               Else
                  ZeilenDruck = Text.Append("     ",ZeilenBetrag)
                  ZeilenDruck = Text.GetSubText(ZeilenDruck,Text.GetLength(ZeilenDruck)-8,9)
               EndIf
               Font_Cu16B()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               If ZeilenBetrag < 0.00 Then
                  GraphicsWindow.BrushColor = "red" ' Schriftfarbe
               EndIf
               GraphicsWindow.DrawText(Spalt[j]+3,Ver,ZeilenDruck)
               VerfuegBetrag = VerfuegBetrag + ZeilenBetrag  ' -- Summenbildung
            ElseIf j = 9 Then
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(Spalt[j]+8,Ver,VerschText[B_FKr[sa]]) 
            EndIf  '-- Ende Spaltennummer
         EndFor  ' -- Ende For j  = eine Zeile
         Ver = Ver + 17  ' -- auf Folgezeile weiter zählen
      Endif  ' -- mit/ohne Planung  
   EndFor  ' -- Ende For sa
 EndSub  ' -- Ende BerTabelleWerte
 '------------------------------------------------------------------------------
' Ber   aktuelle Fälligkeit berechnen
'------------------------------------------------------------------------------
Sub Faelligkeit
   B_Tag = FaelligTag ' Fälligkeitstag aus dem Datensatz (string)
   B_Mon = FaelligMon + BasisMona[B_Tur[sa]] ' Fälligkeitsmonat aus dem Datensatz + Basismonat ( num?)
   If FaelligTag = "99" Then ' bei letzter Tag des Monats - richtigen Wert einsetzen (string)
      B_Tag = Monat[B_Mon][1]
   EndIf
   If B_FKr[sa] <> "0" Then ' -- Datumsverschiebung liegt vor
      ewKalender() ' -- Sa,So Prüfung
' --- Abfrage Fälligkeitkorrektur
      If Array.ContainsIndex(VerschTag,B_FKr[sa]+TagName) Then ' Index = zB:  "2Sa"
         Versch = VerschTag[B_FKr[sa]+TagName]  ' wenn zutreffend:  vorzeichenbehafteter Wert
' --- Test auf zulässige Tageszahl je nach Monat
         TagTest = B_Tag
         TagTest = TagTest + Versch
         If (TagTest < 1) Or (TagTest > Monat[B_Mon][1]) Then
            Auskunft = TagTest  ' kann später wegfallen
            Anzeige = Text.Append("0",B_Tag)
         Else
            Anzeige = Text.Append("0",B_Tag + Versch)
         EndIf
         B_Tag = Text.GetSubText(Anzeige,Text.GetLength(Anzeige)-1,2) ' B_Tag umformen (string), Länge
      EndIf
   EndIf
' --- der 31.12. wird auf den 30.12 gesetzt damit am 31.12 die Berechnung stimmt    
   If B_Mon = 12 And B_Tag = 31 Then
      B_Tag = B_Tag -1
   EndIf     
' --- Fälligkeit als Tag im Jahr aus der Datei
   IstTag = B_Tag + Monat[B_Mon][2]
' --- Aufbau Inhalt der Spalte 'akt.Fäll.'
   AblaufDat = ""
   If VglTag <= IstTag Then
      ewKalender() ' -- Ausgabe in der Tabelle
' --- Vornullen bei 1-stelligen Monat
      B_Mon = Text.Append("",B_Mon) ' to String
      If Text.GetLength(B_Mon) = 1 Then
         B_Mon = Text.Append("0",B_Mon)
      EndIf
' --- Tag . Monat.  zusammenstellen zur Anzeige - Manipulation wegen des Punktes
      B_Dat = Text.Append(B_Tag,".")
      B_Dat = Text.Append(B_Dat,B_Mon)
      AblaufDat = Text.Append(B_Dat,". ") + TagName
   EndIf
EndSub
'------------------------------------------------------------------------------
' Ber   Anzahl Zahlungen bis Jahresende
'------------------------------------------------------------------------------
Sub AnzahlMonate
   AnzahlZahlungen = RestMona[B_Tur[sa]] '  Ausgangswert je nach Monat
   If VglTag <= IstTag Then  '  ------------- Vergleich auf Fälligkeit (num. Mon-Tag)   VglTag = Prüftag     IstTag aus der Datei
      AnzahlZahlungen = RestMona[B_Tur[sa]] + 1
   EndIf
' --- liegt eine Zahlungskorrektur for
   If B_FKr[sa] = 1 Then
      AnzahlZahlungen = AnzahlZahlungen - 1
   EndIf
' --- bei 0 Ausdruck auf Blank
   If AnzahlZahlungen <= 0 Then
      AnzahlZahlungen = 0
      AnzahlDruck = ""
   Else
      AnzahlDruck = AnzahlZahlungen
   EndIf  
' --- Multiplikation mit Wert je nach S/H/P
   Vorzeichen = -1
   If B_SHP[sa] = "h" Then
      Vorzeichen = 1
   EndIf
   ZeilenBetrag = AnzahlZahlungen * B_Btr[sa] * Vorzeichen
 EndSub
'------------------------------------------------------------------------------
' Ber   ewiger  Kalender
'------------------------------------------------------------------------------
Sub ewKalender
   ewd = B_Tag*1 ' Tagesdatum (sting)
   ewm = ewMonat[B_Mon] 'Monat lt. Tabelle (num)
   ewy = Text.GetSubText(StartJahr,3,2)*1
   If (B_Mon = 1) Or (B_Mon = 2) Then
      ewy = ewy-1
   EndIf
   ewc =  Text.GetSubText(StartJahr,1,2)*1
' --- Berechnung 
   ewmon1 = Math.Floor((2.6 * ewm)- 0.2)
   ewjar12 = Math.Floor(ewc / 4)
   ewjar34 = Math.Floor(ewy / 4)
   ewtag1 = ewd + Math.Floor((2.6 * ewm)- 0.2) + ewy + Math.Floor(ewy / 4) + Math.Floor(ewc / 4) - (2 * ewc)
   If ewtag1 < 0 Then
      ewtag1 = ewtag1 + 14
   EndIf
   TagName = Wochentage[Math.Remainder(ewtag1,7)]
EndSub 
'******************************************************************************
' Dat   FENSTER  Budgetdatei (grüne Seite)
'******************************************************************************
'------------------------------------------------------------------------------
' Dat   FENSTER -  Budgetdatei
'------------------------------------------------------------------------------
Sub Budgetdatei
   BasisFenster()
  
   Controls.HideControl(Button[1]) ' -- Buttons auf Hide 
   Controls.HideControl(Button[2]) 
   Controls.HideControl(Button[3])
   Controls.HideControl(Button[5])
   
   Controls.ShowControl(Button[4]) ' -- Buttons auf Show
 
   Controls.SetButtonCaption(Button[6],ButTxt[6])
   Controls.SetButtonCaption(Button[7],ButTxt[7])
   Controls.SetButtonCaption(Button[8],"*")
   
   For i=1 To 6
' --- Textbox -Bezeichnung
      Font_TaB16()
      GraphicsWindow.BrushColor = "darkgreen"
      GraphicsWindow.DrawText(390+KatTextePos[i],102+i*40,KatTexte[i])
' --- Textboxen setzen / aktivieren
      Font_Cu18()
      GraphicsWindow.BrushColor = "black"
      Controls.ShowControl(TextBox[i])
      Controls.SetSize(TextBox[i],KatSize[i],26) ' Textbox Größe
      Controls.SetTextBoxText(TextBox[i],"")
   EndFor
    
   BudgetMax()  ' -- Budgetwerte mit Neuzugang  auffüllen
   Bubblesort() ' -- Sortierung Kategoriedaten
   BudgetWerte = BubbleTmp
   DatTabelleKopf()
   DatBudgetListen() ' -- Budgetwerte-Array auflisten  
  
   For i=1 To 6
      Update[i] = 0 ' -- Update Fehlerkontrolle
   EndFor
EndSub
' wartet auf eine Aktion Mausklick (auch andere möglich)
'------------------------------------------------------------------------------
' Dat   Mausposition ermitteln und Aufgabe beginnen
'------------------------------------------------------------------------------
Sub MausUp
   If Fenster <> "Button8" Then
      Goto EndeMaus
   EndIf
   x = GraphicsWindow.MouseX
   y = GraphicsWindow.MouseY
' --- wenn des Mauszeiger außerhalb aktivem Bereich  
   If (x > 218 And x < 379) And (y > 89 And y < 937) Then  
      KategSpl = 0
' --- Zeile ermitteln
      y = y - 89
      If (y >= 0) And (y <= Array.GetItemCount(BudgetWerte)*17-2) Then
         KategZei = Math.Floor(y / 17) + 1
         Rahmen = Math.Remainder(y,17)
         If Rahmen > 15 Then
            Goto KeineAufg ' --- Klick außerhalb des Fensters
         EndIf
' --- Spalte ermitteln
         x = x -218
         If (x >= 0) And (x <= 2*80-2) Then
            KategSpl = Math.Floor(x / 80) + 1
            Rahmen = Math.Remainder(x,80)
            If Rahmen > 78 Then
               Goto KeineAufg ' --- Klick außerhalb des Fensters
            EndIf
         EndIf ' x-Werte
      EndIf ' y-Werte
 
      KeineAufg:
' --- Auswertung der Aufgabe
      If KategSpl <> 0 Then
         If KategZei = 1 And KategSpl = 2 And BudgetWerte[KategZei] = NeuKategor Then
           ' -- keine Bearbeitung der Löschung bei Neuzugang
         Else  
            KategorieWerte() ' -- Werte  eintragen (Löschen, Änderung)
         EndIf  
      EndIf
   Else    
' --- GraphicsWindow.ShowMessage("X-Hor:" + x + "  Y-Ver:" + Y,"Mausposition") 
   EndIf
EndeMaus:   
EndSub
'------------------------------------------------------------------------------
' Dat   Kategoriewerte in Textboxen eintragen
'------------------------------------------------------------------------------
Sub KategorieWerte
   Update = ""      ' -- Löschen Update-Merker
   ' --- Textboxen 2-6 mit Werten füllen
   For i=1 To 6
      Controls.SetTextBoxText(TextBox[i],Text.GetSubText(BudgetWerte[KategZei],KatSub[i][1],KatSub[i][2]))
      BoxNum = i
      FehlerLösch()
   EndFor
' --- Textbox 1 zunächst ohne Textbox anzeigen sondern als Text
   Controls.HideControl(TextBox[1])
   GraphicsWindow.BrushColor = FarbeLösch '"yellow" 'FarbeLösch
   GraphicsWindow.FillRectangle(531,143,287,26)  ' löscht den Bereich der TextBox 1
   Font_Cu18()
   GraphicsWindow.FontBold = "True"
   GraphicsWindow.BrushColor = "black"
   GraphicsWindow.DrawText(532,143,Text.GetSubText(BudgetWerte[KategZei],1,25))
' --- bei Neukategorie die Box aktivieren und löschen   
   If BudgetWerte[KategZei] = NeuKategor Then
      Controls.ShowControl(TextBox[1])
      Controls.SetTextBoxText(TextBox[1],"")
   EndIf 
' --- Button Show Löschen  / Ändern / Neuzugang
   Controls.HideControl(Button[3]) ' -- Speichern auf Hide
   Controls.ShowControl(Button[2])
   Font_TaB16()
   If KategSpl = 2 Then
      GraphicsWindow.PenColor = "red"                 ' -- Rahmenfarbe
      GraphicsWindow.DrawRectangle(579,9,132,32)      ' -- Rahmen um den Button
      Controls.SetButtonCaption(Button[2],"Löschung") ' -- Löschen
   Else  ' --  KategSpl = 1
      If BudgetWerte[KategZei] = NeuKategor Then
         GraphicsWindow.PenColor = "#ffd700"
         GraphicsWindow.DrawRectangle(579,9,132,32)
         Controls.SetButtonCaption(Button[2],"Neuzugang")  ' -- Neuzugang
      Else
         GraphicsWindow.PenColor = "blue"
         GraphicsWindow.DrawRectangle(579,9,132,32)
         Controls.SetButtonCaption(Button[2],"Änderung")   ' -- Änderung
      EndIf 
   EndIf
EndSub
' --- nach dieser Sub wartet das Programm auf  eine Aktion (Eingaben oder Button)
'------------------------------------------------------------------------------
' Dat   Budgetdatei Kopfzeile
'------------------------------------------------------------------------------
Sub DatTabelleKopf
   GraphicsWindow.BrushColor = FarbeLösch  ' Farbe[Erg]["back"]
   GraphicsWindow.FillRectangle(17,70,362,900) ' -- Tabellenbereich löschen
   Ver = 70 ' horizontale Startposition
   GraphicsWindow.PenColor = "black" ' Rahmen der Tabelle
   GraphicsWindow.PenWidth = 2
   Font_Ta14B()
   For j = 1 To 3
      BrtSpalte = SpaltD[j+1]-SpaltD[j] 
      GraphicsWindow.DrawRectangle(SpaltD[j],Ver,BrtSpalte,18)  ' Kategorie-Rahmen
      GraphicsWindow.BrushColor = "#63b8ff"
      GraphicsWindow.FillRectangle(SpaltD[j]+1,Ver+1,BrtSpalte-2,16) ' Rahmenhintergrund
      GraphicsWindow.BrushColor = "black" ' Schriftfarbe
      GraphicsWindow.DrawText(SpaltD[j]+5,Ver,KopfD[j])
   EndFor
   Ver = Ver +18 
EndSub
'------------------------------------------------------------------------------
' Dat   Budgetdatei auflisten
'------------------------------------------------------------------------------
Sub DatBudgetListen
   For sa=1 To Array.GetItemCount(BudgetWerte)   ' Anzahl der Zeilen
      For j = 1 To 3
         BrtSpalte = SpaltD[j+1]-SpaltD[j] 
         GraphicsWindow.DrawRectangle(SpaltD[j],Ver,BrtSpalte,17)  ' Kategorie-Rahmen
         If j = 1 Then     ' === Kategorie
            GraphicsWindow.BrushColor = BackColorKat[Text.GetSubText(BudgetWerte[sa],27,1)] ' je nach Soll/Haben/Plan
            If BudgetWerte[sa] = NeuKategor Then    ' neue Kategorie
               GraphicsWindow.BrushColor = "#fffacd"
            EndIf
            GraphicsWindow.FillRectangle(SpaltD[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
            Font_Ta14()
            GraphicsWindow.BrushColor = "black" ' Schriftfarbe
            Value = Text.Append(Text.GetSubText(100+sa,2,2),"  ")
            GraphicsWindow.DrawText(SpaltD[j]+3,Ver,Text.Append(Value,Text.GetSubText(BudgetWerte[sa],1,25)))
         ElseIf j = 2 Then
            GraphicsWindow.BrushColor = "#bfefff"
            If BudgetWerte[sa] = NeuKategor Then    ' neue Kategorie
               GraphicsWindow.BrushColor = "#fffacd"
            EndIf
            GraphicsWindow.FillRectangle(SpaltD[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
            Font_Ta14()
            If BudgetWerte[sa] = NeuKategor Then
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(SpaltD[j]+5,Ver,"Neuzugang")
            Else
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(SpaltD[j]+10,Ver,"Änderung")
            EndIf
         ElseIf j = 3 Then
            If BudgetWerte[sa] = NeuKategor Then
               GraphicsWindow.BrushColor = "silver"
               GraphicsWindow.FillRectangle(SpaltD[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
            Else
               GraphicsWindow.BrushColor = "#ffc0cb"
               GraphicsWindow.FillRectangle(SpaltD[j]+1,Ver+1,BrtSpalte-2,15) ' Rahmenhintergrund
               Font_Ta14()
               GraphicsWindow.BrushColor = "black" ' Schriftfarbe
               GraphicsWindow.DrawText(SpaltD[j]+10,Ver,"Löschung")
            EndIf
         EndIf
      EndFor
      Ver = Ver + 17    ' auf Folgezeile weiter zählen   
   EndFor
EndSub
'------------------------------------------------------------------------------
' Dat   Bearbeitung der Aktion
'------------------------------------------------------------------------------
Sub DatPruef
   If KategSpl = 2 Then
      DatLoeschung()
   Else  
      DatAenderung()
   EndIf
EndSub
'------------------------------------------------------------------------------
' Dat   Button Änderung / Neuzugang Kategorie
'------------------------------------------------------------------------------
Sub DatAenderung
' --- nur Neuzugänge müssen geprüft werden
   If BudgetWerte[KategZei] = NeuKategor Then
      DatErgeb[1] = Text.GetSubText(Controls.GetTextBoxText(TextBox[1]) + LeerKategor,1,DatLaeng[1])
      Controls.SetTextBoxText(TextBox[1],DatErgeb[1])
      BoxNum = 1
      FehlerLösch()
      PruefKat()
      AnzeigFehler()
   EndIf
   For i = 2 To 5
      DatErgeb[i] = Text.GetSubText(Controls.GetTextBoxText(TextBox[i])+"-----",1,DatLaeng[i])
      Controls.SetTextBoxText(TextBox[i],DatErgeb[i])
   EndFor
   
   BoxNum = 2
   FehlerLösch()
   PruefShp()
   AnzeigFehler()
   
   BoxNum = 3
   FehlerLösch()
   PruefFll()
   AnzeigFehler()
         
   BoxNum = 4
   FehlerLösch()      
   PruefTur()
   AnzeigFehler()
         
   BoxNum = 5
   FehlerLösch()
   PruefKfa()
   AnzeigFehler()

   DatErgeb[6] = Text.GetSubText(Controls.GetTextBoxText(TextBox[6]),1,DatLaeng[6])
   Betrag = DatErgeb[6]
   BoxNum = 6
   FehlerLösch()
   PruefBtr()
   DatErgeb[6] = Betrag
   Controls.SetTextBoxText(TextBox[6],DatErgeb[6])
   AnzeigFehler()
 
   If Array.ContainsValue(Update,1) Then
' --- Fehler in einem Feld - nicht speichern
   Else
      DatErgeb[1] = Text.GetSubText(Controls.GetTextBoxText(TextBox[1]) + LeerKategor,1,25)
      For j=2 To 6
         DatErgeb[j] = Controls.GetTextBoxText(TextBox[j])
      EndFor
      DatErgeb[2] = Text.ConvertToLowerCase(DatErgeb[2])  ' -- S/H/P Umformen in Kleinbuchstaben
      BudgetAktu = DatErgeb[1]+";"+DatErgeb[2]+";"+DatErgeb[3]+";"+DatErgeb[4]+";"+DatErgeb[5]+";"+DatErgeb[6]
      BudgetWerte[KategZei] = BudgetAktu  ' --- Eintragen in Budgetwerte
      DatRefresh() 
   EndIf     
EndSub
'------------------------------------------------------------------------------
' Dat   Button Löschen Kategorie
'------------------------------------------------------------------------------
Sub DatLoeschung
   BudgetWerte[KategZei] = NeuKategor
   BudgetMin() ' -- Löscht alle NeuKategorien
   DatRefresh()
EndSub   
'------------------------------------------------------------------------------
' Dat   Fenster resfresch nach Update
'------------------------------------------------------------------------------ 
Sub DatRefresh
   BudgetMax() ' -- fügt eine neue Kategorie ein
   Bubblesort() ' -- Sortierung Kategoriedaten
   BudgetWerte = BubbleTmp
   DatTabelleKopf()
   DatBudgetListen() ' -- Datei auflisten
   InputNeutral()
   Controls.ShowControl(Button[3]) ' -- Speichern auf Show
EndSub
' --- wartet auf eine Aktion Mausklick (auch andere möglich)
'------------------------------------------------------------------------------
' Dat   Boxen auf Leer setzen, Button deaktivieren
'------------------------------------------------------------------------------
Sub InputNeutral
   Controls.HideControl(Button[2]) ' -- Button deaktivieren
   GraphicsWindow.PenColor = FarbeLösch        ' -- Rahmenfarbe
   GraphicsWindow.DrawRectangle(579,9,132,32)  ' -- Rahmen um den Button löschen
   Controls.ShowControl(TextBox[1])
   KategSpl = 0 ' -- Spalten in der Tabelle auf Neutral
   For i=1 To 6 ' -- Textbox mit den Kategoriewerten füllen
      Controls.SetTextBoxText(TextBox[i],"") ' -- Textboxen auf leer
      BoxNum = i
      FehlerLösch()
   EndFor
EndSub
 '------------------------------------------------------------------------------
' Dat   Prüfung Kategorie
'------------------------------------------------------------------------------
Sub PruefKat
   KontoFehler = ""
' --- Prüfen auf Namensgleichheit
   For z = 1 To Array.GetItemCount(BudgetWerte)
      If DatErgeb[1] = Text.GetSubText(BudgetWerte[z],1,25) Then
         KontoFehler = "Kategorie = !"
         Goto KatFin
      EndIf
   EndFor
   If Text.GetSubText(DatErgeb[1],1,1) = " " Then
      KontoFehler = "keine Kategorie"
   Endif  
   KatFin:
EndSub
 '------------------------------------------------------------------------------
' Dat   Prüfung Soll / Haben / Planung
'------------------------------------------------------------------------------
Sub PruefShp
   KontoFehler = ""
   If Array.ContainsValue(SohaOK,DatErgeb[2]) <> "true" Then
      KontoFehler = "nur: s,h,p."
   EndIf
EndSub
'------------------------------------------------------------------------------
' Dat   Prüfung Fälligkeit
'------------------------------------------------------------------------------
Sub PruefFll
   KontoFehler = ""
   If Text.GetSubText(DatErgeb[3],3,1) <> "." Then
      KontoFehler = "Punktposition"
   EndIf  
   Value = Text.GetSubText(DatErgeb[3],4,2)*1 ' -- Monatsangebe
   If (Value < 1) Or (Value > 12) Then 
      KontoFehler = "Monatswert"
   EndIf 
   Value = Text.GetSubText(DatErgeb[3],1,2)*1 ' -- Tagangabe
   If (Value > 30) And (Value <> 99) Then 
      KontoFehler = "Tageswert"
   EndIf
   If Value = 0 Then 
      KontoFehler = "Tageswert"
   EndIf
   If Text.GetSubText(DatErgeb[3],4,2) > DatErgeb[4]Then  ' -- Monat muss <= Turnus sein
      KontoFehler = "Monat > Turnus"
   EndIf 
EndSub
'------------------------------------------------------------------------------
' Dat   Prüfung Turnus
'------------------------------------------------------------------------------
Sub PruefTur
   KontoFehler = ""
   DatErgeb[4] = Text.GetSubText(DatErgeb[4]+"--",1,2) ' muss 2-stellig sein
   If Array.ContainsValue(TurnOK,DatErgeb[4]) <> "true" Then
      KontoFehler = "nur: 01,03,06,12"
   EndIf
EndSub
'------------------------------------------------------------------------------
' Dat   Prüfung Korrektur Fälligkeit
'------------------------------------------------------------------------------
Sub PruefKfa
   KontoFehler = ""
   DatErgeb[5] = Text.GetSubText(DatErgeb[5],1,1) ' muss 1-stellig sein
   If Array.ContainsValue(KfalOK,DatErgeb[5]) <> "true" Then
      KontoFehler = "nur: 0, 1, 2, 3"
   EndIf
EndSub
'******************************************************************************
' All   Unterprogramme aller Art
'******************************************************************************
'------------------------------------------------------------------------------
' All   Button Hilfe geklickt
'------------------------------------------------------------------------------
Sub Hilfe
' --- Button aktivieren
   Controls.ShowControl(Button[5])
' --- Überschrift   
   Font_SiBI36()
   GraphicsWindow.FontSize = 30
   GraphicsWindow.BrushColor = "black"
' --- Ausgabe der Hilfstexte
   If Fenster = "Button6" Then
      HilfStart = 0
      GraphicsWindow.DrawText(HorHilf+10,VerHilf+5,"Ausfüllhilfe")
   ElseIf Fenster = "Button8" Then
      HilfStart = 10
      GraphicsWindow.DrawText(HorHilf+10,VerHilf+5,"Ausfüllhilfe")
   ElseIf Fenster = "" Then
      HilfStart = 20
      GraphicsWindow.DrawText(HorHilf+10,VerHilf+5,"Anleitung")  
   Else
   Endif
  
   Ver = VerHilf+22
   For i = HilfStart To Array.GetItemCount(HilfTxt)
      If HilfTxt[i][1] = "Ende" Then
         Goto HilfeEnde
      EndIf 
      Ver = Ver +18 
      Hor = HorHilf+10
      Font_Ta14B()
      GraphicsWindow.BrushColor = "black"  
      GraphicsWindow.DrawText(Hor,Ver,HilfTxt[i][1])
     
      For j = 2 To Array.GetItemCount(HilfTxt[i])
         Ver = Ver + 15 
         Hor = HorHilf+18  
         Font_Ta14()
         GraphicsWindow.BrushColor = "black"   '     "#6a5acd"
         GraphicsWindow.DrawText(Hor,Ver,HilfTxt[i][j])
      EndFor
      Ver = Ver +10
   EndFor
   HilfeEnde:
 EndSub
 '------------------------------------------------------------------------------
' All   Löschen Hilfsbereich
'------------------------------------------------------------------------------  
Sub HilfeLösch
   GraphicsWindow.BrushColor = FarbeLösch '   FarbeLösch
   If Fenster = "" Then
      GraphicsWindow.BrushColor = Farbe["start"]["back"]
   EndIf  
   GraphicsWindow.FillRectangle(HorHilf,VerHilf,616,997-VerHilf)
   Controls.HideControl(Button[5])  
EndSub
'------------------------------------------------------------------------------
' Ber   Initialisierung des Kalender
'------------------------------------------------------------------------------
Sub Kalender
' --- Korrektur Februar
   If Math.Remainder(StartJahr,4) = 0 Then
      Monat[2][1] = 29
   EndIf
' --- Erstellen Monatsarray
' --- Monat[i][1] = Tage im Monat i
' --- Monat[i][2] = Zähltag im Jahr  im Monat i  (Januar beginnt mit 0)
   Monat[1][2] = 0
' --- Monat[1][3] = Monat[1][1] + Monat[1][2]
   For i = 2 To 12
      Monat[i][2] = Monat[i-1][1] + Monat[i-1][2]
' --- Monat[i][3] = Monat[i][1] + Monat[i][2]
   EndFor 
EndSub
'------------------------------------------------------------------------------
' All   BudgetWerte minimieren
'------------------------------------------------------------------------------
Sub BudgetMin
   BubbleTmp = ""
   j = 0
   For i = 1 to Array.GetItemCount(BudgetWerte)
      If BudgetWerte[i] <> NeuKategor Then
         j = j + 1
         BubbleTmp[j] = BudgetWerte[i] 
      EndIf 
   EndFor
   BudgetWerte = BubbleTmp
EndSub
'------------------------------------------------------------------------------
' All   Sortierung Budgetwerte
'------------------------------------------------------------------------------
Sub Bubblesort
   ArrLaeng = Array.GetItemCount(BubbleTmp)
   For i=1 To ArrLaeng
      For j=1 To ArrLaeng-i
         CompA = BubbleTmp[j]
         CompB = BubbleTmp[j+1]
         Compare()
         If CompRes = 1 Then
            BubbTemp = BubbleTmp[j]
            BubbleTmp[j] = BubbleTmp[j+1]
            BubbleTmp[j+1] = BubbTemp
         EndIf
      EndFor
   EndFor
EndSub
'------------------------------------------------------------------------------
' All   Vergleich von Strings
'------------------------------------------------------------------------------
Sub Compare
' --- Vergleich: CompA  - CompB
' ---  Ergebnis: CompRes  -1 kleiner     0 gleich     1 größer
   CompA = Text.ConvertToLowerCase(CompA)
   CompB = Text.ConvertToLowerCase(CompB)
   For Co=1 To 19
      CopmAC = Text.GetCharacterCode(Text.GetSubText(CompA,Co,1))
      CopmBC = Text.GetCharacterCode(Text.GetSubText(CompB,Co,1))
      If CopmAC <> CopmBC Then
         If CopmAC > CopmBC Then
            CompRes = 1
            Goto CompFin
         Else
            CompRes = -1
            Goto CompFin
         EndIf
      EndIf  
   EndFor
   CompRes = 0
   CompFin:  
Endsub 
'------------------------------------------------------------------------------
' All   Konten-Werte in Datei schreiben
'------------------------------------------------------------------------------
Sub KontenWrite
' --- Timer und Ausschrift setzen
   Timer.Resume()
   TickZaehler = 0 ' zählt die 0,1 Sec
   SpeichTime = "true"
   Font_Ta14()
   GraphicsWindow.BrushColor = "darkgreen"
   GraphicsWindow.DrawText(720,45,"Speicherung erfolgt!")
' --- Werte in Texte übernehmen   
   StartWerte[1] = Text.GetSubText(StartWerteVorgabe[1],1,KontenSubstr[1]-1) + Beginner[4] 
   StartWerte[2] = Text.GetSubText(StartWerteVorgabe[2],1,KontenSubstr[2]-1) + Beginner[1] 
   StartWerte[3] = Text.GetSubText(StartWerteVorgabe[3],1,KontenSubstr[3]-1) + Beginner[2]
   StartWerte[4] = Text.GetSubText(StartWerteVorgabe[4],1,KontenSubstr[4]-1) + Beginner[3]
' --- Datei schreiben   
   For i=1 To 4
' The following line could be harmful and has been automatically commented.
'       File.WriteLine(Output,i,StartWerte[i])
' The following line could be harmful and has been automatically commented.
'       If File.LastError <> "" Then
         GraphicsWindow.DrawText(400,45,"Dateifehler")
      EndIf
   EndFor
 EndSub
'------------------------------------------------------------------------------
' Dat   BudgetWerte in Datei schreiben
'------------------------------------------------------------------------------
Sub BudgetWrite
   BudgetMin()
   For i = 1 To Array.GetItemCount(BudgetWerte)
' The following line could be harmful and has been automatically commented.
'       File.WriteLine(Output,i+4,BudgetWerte[i])
' The following line could be harmful and has been automatically commented.
'       If File.LastError<> "" Then
         GraphicsWindow.DrawText(400,500,"Dateifehler")
      EndIf
   EndFor  
EndSub 
'------------------------------------------------------------------------------
' All   Prüfung Betrag
'------------------------------------------------------------------------------
Sub PruefBtr
   KontoFehler = ""
' --- Prüfung auf nicht numerisch  
   For i=1 To Text.GetLength(Betrag)
      TestChar = Text.GetCharacterCode(Text.GetSubText(Betrag,i,1))
      If TestChar < 48  Or TestChar > 57 Then
         If (TestChar <> 46)Then
            KontoFehler = "unerlaubte Zeichen"
            Goto PrufEnde
         EndIf
      EndIf
   EndFor
' --- Prüfung auf Betragshöhe   
   Value = Betrag * 100
   If Value > 9999999 Then 
      KontoFehler = "Betrag zu groß"
   EndIf
  
   If Value < 0 Then 
      KontoFehler = "Betrag negativ"
   EndIf
' --- Umfornung in verwertbaren String  
   BetrPf= ""
   If Value < 10 Then
      BetrPf = "00"
   ElseIf Value < 100 Then
      BetrPf = "0"
   EndIf
  
   Value = Text.Append(" ",Value)  ' Betrag ist String mit Komma
   Pos = Text.GetIndexOf(Value,",")
   If Pos > 0 Then
      Value = Text.GetSubText(Value,2,Pos-2) ' Betrag mit Punkt (Komma)
   Else
      Value = Text.GetSubText(Value,2,Text.GetLength(Value)-1) ' Betrag ohne Punkt (Komma)
   EndIf
' --- ev. Vornullen anfügen  
   Value = Text.Append(BetrPf,Value)
' --- in englisches Format umstellen 
   LengBtr = Text.GetLength(Value)
   NeuBtr = Text.Append(Text.GetSubText(Value,1,LengBtr-2),".")
   Betrag = Text.Append(NeuBtr,Text.GetSubText(Value,LengBtr-1,2))
PrufEnde:
EndSub
'------------------------------------------------------------------------------
' Knt   Prüfung Datum-Anfangswerte
'------------------------------------------------------------------------------
Sub DatumPruef
' --- Anmerkung: es wird nicht geprüft:
' --- Tage je Monat
' --- Jahreszahl
   Value = Text.GetLength(Beginner[2])
   KontoFehler = ""  
   If Value = 10 Then
' --- Zeichenprüfung
      For i=0 To Value-1
         TestChar = Text.GetCharacterCode(Text.GetSubText(Beginner[2],Value-i,1)) 
         If TestChar < 48  Or TestChar > 57 Then
            If TestChar = 46 Then
               If (i <> 4) And (i <> 7) Then
                  KontoFehler = "Format: tt.mm.jjjj"  ' -- Punkt-Prüfung
               EndIf
            Else
               KontoFehler = "unerlaubte Zeichen"     ' -- Zeichen <> 0-9
            EndIf
         EndIf
      EndFor
   Else
      KontoFehler = "Anz.Zeichen <> 10"
   EndIf
    
   If KontoFehler = "" Then  ' -- diese Prüfungen sind nachgeordnet
      If Text.GetSubText(Beginner[2],1,2)*1 > 31 Then
         KontoFehler = "Tag > 31"
      EndIf
      If Text.GetSubText(Beginner[2],1,2)*1 = 0 Then
         KontoFehler = "Tag = 00"
      EndIf
      If Text.GetSubText(Beginner[2],4,2)*1 > 12 Then
         KontoFehler = "Monat > 12"
      EndIf
      If Text.GetSubText(Beginner[2],4,2)*1 = 0 Then
         KontoFehler = "Monat = 00"
      EndIf
      If Text.GetSubText(Beginner[2],7,4)*1 < 2016 Then
         KontoFehler = "Jahreszahl < 2016 "
      EndIf
   EndIf
EndSub
'------------------------------------------------------------------------------
' Knt   Prüfung Planung mit / ohne
'------------------------------------------------------------------------------
Sub PlanPruef
   KontoFehler = ""  
   If Beginner[3] <> "mit" And Beginner[3] <> "ohne" Then
      KontoFehler = "nur mit / ohne zulässig"
   EndIf 
EndSub
'------------------------------------------------------------------------------
' All   Fehleranzeige
'------------------------------------------------------------------------------
Sub AnzeigFehler
   If KontoFehler = "" Then
      Update[BoxNum] = 0
   Else
      Update[BoxNum] = 1 
      Font_Ta14B()
      GraphicsWindow.BrushColor = "red"
      GraphicsWindow.DrawText(670+PosLösch,102+BoxNum*40,KontoFehler)
   EndIf
EndSub
'------------------------------------------------------------------------------
' All   Löschen Fehlerzeile
'------------------------------------------------------------------------------  
Sub FehlerLösch
   If Fenster = "Button6" Then
      PosLösch = 0
      BrtLösch = 150
      GraphicsWindow.BrushColor = FarbeLösch  'FarbeLösch
      GraphicsWindow.FillRectangle(670+PosLösch,97+BoxNum*40,177+BrtLösch,32)
   ElseIf Fenster = "Button8" Then
      PosLösch = 150
      BrtLösch = 0
      GraphicsWindow.BrushColor =  FarbeLösch    ' FarbeLösch
      GraphicsWindow.FillRectangle(670+PosLösch,97+BoxNum*40,177+BrtLösch,32)
   Endif
EndSub   
'------------------------------------------------------------------------------
' All   Budgetdatei einlesen (Startwerte, Daten)
'------------------------------------------------------------------------------
Sub DateiEinlesen
' --- Prüfen ob eine Datei vorliegt
' The following line could be harmful and has been automatically commented.
'    StartWerte[1] = File.ReadLine(Input,1)
' --- wenn nicht - neu mit Testwerten anlegen
   If StartWerte[1] = "" Then
      For i=1 To 10
' The following line could be harmful and has been automatically commented.
'          File.WriteLine(Output,i,StartWerteVorgabe[i])
' The following line could be harmful and has been automatically commented.
'          If File.LastError<> "" Then
            GraphicsWindow.DrawText(400,500,"Dateifehler")
         EndIf
      EndFor 
   EndIf
' --- Startwerte einlesen - müssen immer vorhanden sein
   For i=1 To 4
' The following line could be harmful and has been automatically commented.
'       StartWerte[i] = File.ReadLine(Input,i)
   EndFor
' --- übertragen in Arbeitsbereich  
   Beginner[1] = Text.GetSubText(StartWerte[2],KontenSubstr[2],10)
   Beginner[2] = Text.GetSubText(StartWerte[3],KontenSubstr[3],10)
   Beginner[3] = Text.GetSubText(StartWerte[4],KontenSubstr[4],4)
   Beginner[4] = Text.GetSubText(StartWerte[1],KontenSubstr[1],10)
' --- Budgetwerte in ein Array
   i = 1
' The following line could be harmful and has been automatically commented.
'    BudgetWerte[i] = File.ReadLine(Input,i+4)
   While  BudgetWerte[i] <> ""
      i = i + 1
' The following line could be harmful and has been automatically commented.
'       BudgetWerte[i] = File.ReadLine(Input,i+4)
   EndWhile
EndSub
'------------------------------------------------------------------------------
' All   Schriftfonts
'------------------------------------------------------------------------------
Sub Font_Ta14
   GraphicsWindow.FontBold = "False"
   GraphicsWindow.FontItalic = "False"
   GraphicsWindow.FontName =  "Tahoma"
   GraphicsWindow.FontSize = 14
EndSub

Sub Font_Ta14B
   GraphicsWindow.FontBold = "True"
   GraphicsWindow.FontItalic = "False"
   GraphicsWindow.FontName =  "Tahoma"
   GraphicsWindow.FontSize = 14
EndSub

Sub Font_TaB16
   GraphicsWindow.FontBold = "True"
   GraphicsWindow.FontItalic = "False"
   GraphicsWindow.FontName =  "Tahoma"
   GraphicsWindow.FontSize = 16
EndSub

Sub Font_SiBI36
   GraphicsWindow.FontBold = "True"
   GraphicsWindow.FontItalic = "True"
   GraphicsWindow.FontName =  "Sitka Banner"
   GraphicsWindow.FontSize = 36
EndSub

Sub Font_Cu18
   GraphicsWindow.FontBold = "False"
   GraphicsWindow.FontItalic = "False"
   GraphicsWindow.FontName = "Courier New"
   GraphicsWindow.FontSize = 18
EndSub

Sub Font_Cu16B
   GraphicsWindow.FontBold = "True"
   GraphicsWindow.FontItalic = "False"
   GraphicsWindow.FontName = "Courier New"
   GraphicsWindow.FontSize = 16
EndSub
'------------------------------------------------------------------------------
' All   BudgetWerte auffüllen
'------------------------------------------------------------------------------
Sub BudgetMax
   BubbleTmp = ""
   j = 0
   For i = 1 to Array.GetItemCount(BudgetWerte)
      If BudgetWerte[i] <> NeuKategor Then
         j = j + 1
         BubbleTmp[j] = BudgetWerte[i] 
      EndIf 
   EndFor
   If j < 50 Then
      j = j + 1
      BubbleTmp[j] = NeuKategor
   Endif   
EndSub
'------------------------------------------------------------------------------
' All   BudgetWerte Listen
'------------------------------------------------------------------------------
Sub BudgetList
   TextWindow.WriteLine("===== Budgetwerte =====")
   Anzahl = Array.GetItemCount(BudgetWerte)
   TextWindow.WriteLine("Anzahl Budgetwerte: "+Anzahl)
   For i = 1 To Anzahl 
      Value = Text.Append(i," ")
'      TextWindow.WriteLine(Text.Append(Value,Text.GetSubText(BudgetWerte[i],1,25)))
      TextWindow.WriteLine(Text.Append(Value,BudgetWerte[i]))
   EndFor  
EndSub 
'******************************************************************************
'                                         PROGRAMM - ENDE
'******************************************************************************
