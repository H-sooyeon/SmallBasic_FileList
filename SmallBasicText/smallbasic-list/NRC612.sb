gw = 800

gh = 400

GraphicsWindow.Width = gw

GraphicsWindow.Height = gh

GraphicsWindow.KeyDown = onKeyDown

bgColour = "lightblue"

GraphicsWindow.BackgroundColor = bgColour



ballRadius = 25

shineRadius = 5

ballDiam = ballRadius * 2

shineDiam = shineRadius * 2

offsetX = 12

offsetY = -8

gravity = 1

angularAcceleration = 0

angularVelocity = 0



originY = 0

originX[1] = gw/2 - 100

originX[5] = gw/2 + 100

stringLength = 300

GraphicsWindow.BrushColor = "Black"

'GraphicsWindow.FillRectangle(originX[1], originY-20, originX[5] - originX[1], 20)



' Create and draw the balls

GraphicsWindow.BrushColor = "Silver"

GraphicsWindow.PenColor = "Silver"

For i = 1 To 5

  ball["shape"] = Shapes.AddEllipse(ballDiam, ballDiam)

  ball["x"] = originX[1] + (i-1) * ballDiam

  ball["y"] = originY + stringLength

  Shapes.Move(ball["shape"], ball["x"]-ballRadius, ball["y"]-ballRadius)

  balls[i] = ball

EndFor



' Create reflection highlights

'GraphicsWindow.PenWidth = 3

GraphicsWindow.PenColor = "LightGray"

GraphicsWindow.BrushColor = "White"

For i = 1 to 5

  shine["shape"] = Shapes.AddEllipse(shineDiam, shineDiam)

  shine["x"] = balls[i]["x"] + offsetX

  shine["y"] = balls[i]["y"] + offsetY

  Shapes.Move(shine["shape"], shine["x"] - shineRadius, shine["y"] - shineRadius)

  shines[i] = shine

endfor



' Create and draw the strings

GraphicsWindow.PenColor = "Black"

For i = 1 To 3

  x1 = i * ballDiam + originX[1]

  GraphicsWindow.DrawLine(x1, originY, x1, originY + stringLength)

EndFor



' Set right ball as active

activeBall = 5

inactiveBall = 1

a = activeBall

angle = Math.GetRadians(70)



GraphicsWindow.BrushColor = bgColour



While "True"

  start = Clock.ElapsedMilliseconds

  

  update()

  

  elapsedTime = Clock.ElapsedMilliseconds - start

  delay = 30 - elapsedTime

  If delay > 0 Then

    Program.Delay(delay)

  EndIf  

EndWhile







Sub update

  ' Update the angular velocity calculations to simulate the pendulum effect

  angularAcceleration = -1 * (gravity / stringLength) * Math.Sin(angle)

  angularVelocity = angularVelocity + angularAcceleration

  angle = angle + angularVelocity

  

  ' If ball goes beyond perpendicular then swap to opposite ball

  If angle < 0 Then

    activeBall = 1

    inactiveBall = 5

  Else

    activeBall = 5

    inactiveBall = 1

  EndIf

  

  ' Play click on ball swap

  If a <> activeBall Then

    a = activeBall

    Sound.PlayClick()

  EndIf

  

  

  ' Update balls positions based on which is active and inactive

  ballX= Math.Sin(angle) * stringLength + originX[activeBall]

  ballY = Math.Cos(angle) * stringLength + originY

  

  iBallX = Math.Sin(0) * stringLength + originX[inactiveBall]

  iBallY = Math.Cos(0) * stringLength + originY

  

  ' Move active ball based on angular calculations and inactive ball to straight down

  Shapes.Move(balls[activeBall]["Shape"], ballX - ballRadius, ballY - ballRadius)

  Shapes.Move(shines[activeBall]["shape"], ballX+offsetX - shineRadius, ballY+offsetY - shineRadius)

  Shapes.Move(balls[inactiveBall]["Shape"], iBallX - ballRadius, iBallY - ballRadius)

  Shapes.Move(shines[inactiveBall]["shape"], iBallX+offsetX - shineRadius, iBallY+offsetY - shineRadius)

  

  

  GraphicsWindow.FillRectangle(0,0,originX[1]+5,gh)

  GraphicsWindow.FillRectangle(originX[5]-5, originY, gw-(originx[5]+5), gh)

  GraphicsWindow.DrawLine(originX[activeBall], originY, ballx, ballY)

  GraphicsWindow.DrawLine(originX[inactiveBall], originY, iBallX, iBallY)

EndSub



Sub onKeyDown

  If GraphicsWindow.LastKey = "Escape" Then

    Program.End()

  EndIf

EndSub


