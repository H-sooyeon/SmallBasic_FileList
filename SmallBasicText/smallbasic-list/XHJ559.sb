' Benchmark of BVector
' Copyright (c) 2010 Nonki Takahashi
CR = Text.GetCharacter(13)
NL = Text.GetCharacter(10)
While "true"
  TextWindow.WriteLine("BVector Benchmark - Small Basic Version")
  Start()
  a = "0011"
  bv = a
  BV_toString()
  TextWindow.WriteLine(" a = " + str)
  b = "0101"
  bv = b
  BV_toString()
  TextWindow.WriteLine(" b = " + str)
  bv1 = a
  i = 3
  BV_getValue()
  TextWindow.WriteLine("(a)3 = " + val)
  bv2 = b
  BV_or()
  BV_toString()
  TextWindow.WriteLine("(a | b) = " + str)
  BV_and()
  BV_toString()
  TextWindow.WriteLine("(a & b) = " + str)
  BV_not()
  BV_toString()
  TextWindow.WriteLine("~a = " + str)
  BV_abs()
  TextWindow.WriteLine("|a| = " + abs)
  BV_diff()
  BV_toString()
  TextWindow.WriteLine("(a - b) = " + str)
  BV_xor()
  BV_toString()
  TextWindow.WriteLine("(a ^ b) = " + str)
  b2 = 0
  BV_mul()
  BV_toString()
  TextWindow.WriteLine("(a * 0) = " + str)
  BV_dot()
  TextWindow.WriteLine("(a ･ b) = " + dot)
  BV_cross()
  BM_toString()
  TextWindow.WriteLine("(a x b) =")
  TextWindow.WriteLine(str)
  BV_eq()
  TextWindow.WriteLine("(a == b) = " + eq)
  BV_ne()
  TextWindow.WriteLine("(a != b) = " + ne)
  Stop()
  TextWindow.Write("Press enter key to continue...")
  TextWindow.Read()
  TextWindow.WriteLine("")
EndWhile
' program end

Sub BM_toString
  ' param bm[] - bit matrix
  ' param bm_n - row order
  ' param bm_m - column order
  ' return str
  str = ""
  l = Text.GetLength(bm)
  For i = 1 To bm_n
    For j = 1 To bm_m
      str = Text.Append(str, Text.GetSubText(bm[j], i, 1))
      If j < bm_m Then
        str = Text.Append(str, " ")
      EndIf
    EndFor
    str = Text.Append(str, (CR + NL))
  EndFor
EndSub
    
Sub BV_abs
  ' param bv1
  ' return abs = |bv1|
  abs = 0
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    If b1 = "1" Then
      abs = abs + 1
    EndIf
  EndFor
EndSub

Sub BV_and
  ' param bv1
  ' param bv2
  ' return bv = (bv1 & bv2)
  bv = ""
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    b2 = Text.GetSubText(bv2, i, 1)
    If b1 = "1" And b2 = "1" Then
      bv = Text.Append(bv, "1")
    Else
      bv = Text.Append(bv, "0")
    EndIf
  EndFor
EndSub

Sub BV_cross
  ' param bv1
  ' param bv2
  ' return bm[] = (bv1 x bv2)
  ' return bm_n - row order of bm
  ' return bm_m - column order of bm
  bm_n = Text.GetLength(bv1)
  bm_m = Text.GetLength(bv2)
  For j = 1 To bm_m
    b2 = Text.GetSubText(bv2, j, 1)
    bm[j] = ""
    For i = 1 To bm_n
      b1 = Text.GetSubText(bv1, i, 1)
      bm[j] = Text.Append(bm[j], (b1 * b2))
    EndFor
  EndFor
EndSub

Sub BV_diff
  ' param bv1
  ' param bv2
  ' return bv = (bv1 - bv2)
  bv = ""
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    b2 = Text.GetSubText(bv2, i, 1)
    If b1 = "1" And b2 = "0" Then
      bv = Text.Append(bv, "1")
    Else
      bv = Text.Append(bv, "0")
    EndIf
  EndFor
EndSub

Sub BV_dot
  ' param bv1
  ' param bv2
  ' return dot = (bv1 ･ bv2)
  dot = 0
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    b2 = Text.GetSubText(bv2, i, 1)
    If b1 = "1" And b2 = "1" Then
      dot = 1
      Goto dot_exit
    EndIf
  EndFor
dot_exit:
EndSub

Sub BV_eq
  ' param bv1
  ' param bv2
  ' return eq = "true" if (bv1 == bv2)
  If bv1 = bv2 Then
    eq = "true"
  Else
    eq = "false"
  EndIf
EndSub

Sub BV_getValue
  ' param bv1
  ' param i
  ' return val = (bv1)i
  val = Text.GetSubText(bv1, i, 1)
EndSub

Sub BV_mul
  ' param bv1 - bit vector
  ' param b2 - bit
  ' return bv = (bv1 * b2)
  If b2 = 1 Then
    bv = bv1
  ElseIf b2 = 0 Then
    bv = ""
    l = Text.GetLength(bv1)
    For i = 1 To l
      bv = Text.Append(bv, "0")
    EndFor
  EndIf
EndSub

Sub BV_ne
  ' param bv1
  ' param bv2
  ' return ne = "true" if (bv1 != bv2)
  If bv1 = bv2 Then
    ne = "false"
  Else
    ne = "true"
  EndIf
EndSub

Sub BV_not
  ' param bv1
  ' return bv = ~bv1
  bv = ""
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    If b1 = "0" Then
      bv = Text.Append(bv, "1")
    Else
      bv = Text.Append(bv, "0")
    EndIf
  EndFor
EndSub

Sub BV_or
  ' param bv1
  ' param bv2
  ' return bv = (bv1 | bv2)
  bv = ""
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    b2 = Text.GetSubText(bv2, i, 1)
    If b1 = "0" And b2 = "0" Then
      bv = Text.Append(bv, "0")
    Else
      bv = Text.Append(bv, "1")
    EndIf
  EndFor
EndSub

Sub BV_toString
  ' param bv
  ' return str
  str = "("
  l = Text.GetLength(bv)
  For i = 1 To l
    str = str + Text.GetSubText(bv, i, 1)
    If i < l Then
      str = str + ","
    EndIf
  EndFor
  str = str + ")"
EndSub
    
Sub BV_xor
  ' param bv1
  ' param bv2
  ' return bv = (bv1 ^ bv2)
  bv = ""
  l = Text.GetLength(bv1)
  For i = 1 To l
    b1 = Text.GetSubText(bv1, i, 1)
    b2 = Text.GetSubText(bv2, i, 1)
    If b1 = b2 Then
      bv = Text.Append(bv, "0")
    Else
      bv = Text.Append(bv, "1")
    EndIf
  EndFor
EndSub

Sub Start
  t = Clock.Time
  ems = Math.Floor(Clock.ElapsedMilliseconds)
  t0 = Math.Remainder(ems, 86400000)
  TextWindow.WriteLine("START:" + t0 + "[ms] (" + t + ")")
EndSub

Sub Stop
  t = Clock.Time
  ems = Math.Floor(Clock.ElapsedMilliseconds)
  t1 = Math.Remainder(ems, 86400000)
  TextWindow.WriteLine("STOP:" + t1 + "[ms]")
  TextWindow.WriteLine("TIME:" + (t1 - t0) + "[ms]")
EndSub
 
