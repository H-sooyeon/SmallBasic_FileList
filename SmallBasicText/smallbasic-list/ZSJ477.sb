background = ImageList.LoadImage("e:\skbg.png")

GraphicsWindow.Left =11

GraphicsWindow.Top =11

GraphicsWindow.Width =1200

GraphicsWindow.Height =700

For x=0 to 7

  image[x] = ImageList.LoadImage("e:\sk"+x+".png")

endfor

image["A"] = ImageList.LoadImage("e:\ska.png")

image["B"] = ImageList.LoadImage("e:\skb.png")

cbbi = ImageList.LoadImage( "e:\skg2.png")

cppi = ImageList.LoadImage("e:\skp2.png")

cpp1 = ImageList.LoadImage("e:\skp1.png")

cpp11 = ImageList.LoadImage("e:\skp11.png")

cpp12 = ImageList.LoadImage("e:\skp12.png")

cpp13 = ImageList.LoadImage("e:\skp13.png")

GraphicsWindow.Title="SokoCute V2



LDImage.EffectGamma (image[6] 2.2)

GraphicsWindow.Clear ()

LDGraphicsWindow.BackgroundImage  (background)



Sub mshh

  s[1]=Shapes.AddImage (cpp1)

  s[2]=Shapes.AddImage (cpp11)

  s[3]=Shapes.AddImage (cpp12)

  s[4]=Shapes.AddImage (cpp13)

  s[5]=Shapes.AddImage (cppi)

  For x=1 To 5

    Shapes.Move(s[x] 100 100)

    If x>1 And x<5 then

      Shapes.HideShape (s[x])

    Endif

  EndFor 

EndSub 



mshh()

InitLevels ()



GraphicsWindow.Keyup=kup

GraphicsWindow.KeyDown =kkk

kuu="true

args=0

Timer.Interval=505

Timer.Pause ()

Timer.Tick =ttt

done="true

korrx = 36

stage=3

animtime = 1500

LevelLoad ()

LDEvents.MouseWheel=mww



sf=1





Sub ttt'-----------------------------------------------------------------------------subs---

  done="true

  Timer.Pause ()

  ' drlin()

EndSub  



Sub mww

  If GraphicsWindow.LastKey ="LeftCtrl" Then

    an=an+ LDEvents.LastMouseWheelDelta*5

  else 

    sf=sf+ LDEvents.LastMouseWheelDelta/10

  EndIf  

  LDGraphicsWindow.Reposition (sf sf 0 0 an)

EndSub 







Sub drlin

  nx=Shapes.GetLeft (s[1])

  ny=Shapes.Gettop (s[1])

  ll=Shapes .AddLine (ox+25 oy+70 nx+25 ny+70)

  LDShapes.ZIndex (ll,-1)

EndSub 



Sub kup

  kuu="true

EndSub 



Sub kkk

  If kuu And done then

    ox=Shapes.GetLeft (s[1])

    oy=Shapes.Gettop (s[1])

    ll= text.ConvertToLowerCase (GraphicsWindow.LastKey) 

    If done and (ll="up" Or ll="rightshift") Then

      done="false

      LDCall.Function ("shps" "2 1 3 4")

      For r=1 To 5

        Shapes .Animate (s[r] Shapes.GetLeft (s[r]) Shapes.GetTop(s[r])-40 450)

        If r=1 then 

          Timer.Resume ()

        endif

        

      endfor  

      

      

    ElseIf  done and ll="down" then

      done="false

      LDCall.Function ("shps" "1 2 3 4")

      For r=1 To 5

        If r=1 then 

          Timer.Resume ()

        endif

        If r=1 or r=5 then 

          Shapes .Animate (s[r] Shapes.GetLeft (s[r]) Shapes.GetTop(s[r])+40 450)

        Else

          

          Shapes.Move (s[r] Shapes.GetLeft (s[r]) Shapes.GetTop(s[r])+40)

        endif

        

      endfor 

      

      

    ElseIf  done and ll="left" then

      done="false

      LDCall.Function ("shps" "4 2 1 3")

      For r=1 To 5

        Shapes .Animate (s[r] Shapes.GetLeft (s[r])-50 Shapes.GetTop(s[r]) 450)

      endfor  

      

      

      Timer.Resume ()

      

      

    ElseIf  done and ll="right" then

      LDCall.Function ("shps" "3 2 4 1")

      done="false

      For r=1 To 5

        Shapes .Animate (s[r] Shapes.GetLeft (s[r])+50 Shapes.GetTop(s[r]) 450)

      endfor  

      

      Timer.Resume ()

      

    ElseIf ll="f11" then

      

      hh= LDShapes.GetAllShapes()

      For rr=1 to Array.GetItemCount (hh)

        ppx=shapes.GetLeft (hh[rr])

        ppy=Shapes.GetTop (hh[rr])

        Shapes.Move (hh[rr] 1200-ppx 800-ppy)

      endfor

      

    ElseIf ll="f1" then

      

      GraphicsWindow.Clear ()

      ac=Array.GetItemCount (block[stage])

      lv=0

      For t=ac to 1 step -1

        For tt=text.GetLength (block[stage][1]) to 1 step -1

          lv[ac-t+1]=text.Append (lv[ac-t+1] text.GetSubText (block[stage][t] tt 1))

        endfor

      endfor

      block[stage]=lv

      mshh()

      LevelLoad ()

      

    ElseIf ll="f2" then

      

      GraphicsWindow.Clear ()

      ac=Array.GetItemCount (block[stage])

      lv=0

      For t=1 to ac

        For tt=1 to text.GetLength (block[stage][1])

          lv[tt]=text.Append (text.GetSubText (block[stage][t] tt 1) lv[tt])

        endfor

      endfor

      block[stage]=lv

      mshh()

      LevelLoad ()

      

    ElseIf ll="f3" then

      

      GraphicsWindow.Clear ()

      stage=stage-1

      If stage<0 then 

        stage=0

      endif

      mshh()

      LevelLoad ()

      

    ElseIf ll="f4" then

      

      GraphicsWindow.Clear ()

      stage=stage+1

      If stage>9 then 

        stage=9

      endif

      mshh()

      LevelLoad ()

    endif

  EndIf

  ddd="true

  kuu="false

EndSub 



Sub shps

  aa=LDText.Split (args[1] " ")

  Shapes.ShowShape (s[aa[1]])

  Shapes.HideShape (s[aa[2]])

  Shapes.HideShape (s[aa[3]])

  Shapes.HideShape (s[aa[4]])

  

EndSub 





Sub InitLevels

  bl[0]="                    ;                    ;                    ;     66666          ;     60006          ;     62006          ;   66600266         ;   60020206         ; 6660606606AA555555 ; 600060660666700115 ; 60200200000X000115 ; 666660666066700115 ;     60000066555555 ;     6666666        ;                    ;                    ;

  bl[1]="                    ;                    ;                    ;       6666666      ;  76666600000667    ;  61111602002006    ;  61100626666006    ;  6110000X066006    ;  61100606002076    ;  76666606620206    ;    602002020206    ;    600007000006    ;    766666666667    ;                    ;                    ;                    ;

  bl[2]="                    ;                    ;                    ;         76666667   ;         600000X6   ;         60262066   ;         6020026    ;         6720206    ; 7666666 602060667  ; 61111066602002006  ; 61110000020020006  ; 61111066666666667  ; 7666666            ;                    ;                    ;                    ;

  bl[3]="                    ;                    ;6666663             ;611166366666  66666 ;611116360006  60006 ;6111163607066660706 ;600X063600200000006 ;6606663700602260666 ;5AAAA73A220060006   ;5ACAABBB002666206   ;5AA5AA3A700060006   ;5555553A666060726   ;AAAAAA3AAA6022006   ;33333333336000006   ;          6666666   ;                    ;

  bl[4]="                    ;                    ;          66666     ;    666666600067    ;   66070X6602206    ;   6000020000006    ;   6002006660006    ;   6660666662666    ;   602006660116     ;   602020201116     ;   600006661116     ;   602206 61116     ;   600666 76667     ;   7667             ;                    ;                    ;

  bl[5]="                    ;           4444444  ;           4AA1114  ;       66667AA1114  ;       60000AA1A14  ;       60067AA1114  ;       66066AA1114  ;      666066444444  ;      60222066AAAA  ;  6666600202066666  ; 66000720200070006  ; 6X020020000200206  ; 66666602202066666  ;      60000006      ;      66666666      ;                    ;

  bl[6]="                    ;     7777777777     ;     7110070007     ;     7110000007     ;     711007007777   ;    77777770070077  ;    70000000000007  ;    70070077007007  ;  7777077007777077  ;  7002007777707007  ;  7070200200702007  ;  70X2002000700077  ;  777707707777777   ;     700007         ;     777777         ;                    ;

  bl[7]="                    ;                    ;                    ;          4444      ;    4444444AY4      ;    4AAAAACAA4      ;    4AAAC77AC4      ;    44C71117A4      ;     4AC111AA4      ;     4A71A17A44     ;     4AAA7A7CA4     ;     4CAACAAAA4     ;     4AA4444444     ;     4444           ;                    ;                    ;

  bl[8]="                    ;                    ;          4444      ;  444444444AA77     ; 74AACAAAAAACA75557 ; 4ABB77B77BBA771115 ; 4A7DDBDBDD7C771115 ; 4A7BBBBZBB7AAA1115 ; 4ABD7B777DDAAA1115 ; 4ACAACCAACA7711115 ; 744CAAAAAAA7755557 ;   4AA4444444       ;   4444             ;                    ;                    ;                    ;

  bl[9]=" AAAAA A   A AAAA   ;   A   A   A A      ;   A   AAAAA AAA    ;   A   A   A A      ;   A   A   A AAAA   ;                    ;  AAAA A   A AAA    ;  A    AA  A A  A   ;  AAA  A A A A  A   ;  A    A  AA A  A   ;  AAAA A   A AAA    ;                    ;                    ; 4444444444444444   ; 40X0020000000104   ; 4444444444444444   " 

  

  For x=0 To 9

    block[x]=ldtext.Split (bl[x] ";")

  EndFor   

EndSub



Sub LevelLoad

  cryst = 0

  posx  = 4

  posy  = 4

  moves = 0

  c15=array.GetItemCount (block[stage])

  For i = 1 To c15

    For p = 1 To Text.GetLength(block[stage][i])

      blockcode = Text.GetSubText(block[stage][i], p, 1) 

      If blockcode = "X" then 

        posy = i  

        posx = p-1

        blockcode = 0

      EndIf

      

      if blockcode = 2 then 

        ground[i][p-1] = 0

      elseif blockcode = "C" then 'crystal on gras

        ground[i][p-1] = "A"

      elseif blockcode = "D" then 'crystal on wood 

        ground[i][p-1] = "B"        

      else 

        ground[i][p-1] = blockcode

      endif

    EndFor

  EndFor

  

  'load the water first

  For i = 1 To c15

    For p = 1 To Text.GetLength(block[stage][i])

      blockcode = Text.GetSubText(block[stage][i], p, 1) 

      If blockcode = 3 Then

        levelshapes[i][p-1] = Shapes.AddImage(image[blockcode])  

        Shapes.move(levelshapes[i][p-1], (p-1) * 50 + korrx, (i) * 40 )    

      Endif      

    EndFor  

  EndFor

  

  For i = 1 To c15

    For p = 1 To Text.GetLength(block[stage][i])

      blockcode = Text.GetSubText(block[stage][i], p, 1) 

      If blockcode = "X" then 

        posy = i  

        posx = p-1

        blockcode = 0

      elseIf blockcode = "Y" then 

        posy = i  

        posx = p-1

        blockcode = "A"     

      elseIf blockcode = "Z" then 

        posy = i  

        posx = p-1

        blockcode = "B"

      EndIf

      

      if blockcode = 2 then 

        ground[i][p-1] = 0

      elseif blockcode = "C" then 

        ground[i][p-1] = "A"

      elseif blockcode = "D" then 

        ground[i][p-1] = "B"

      else  

        ground[i][p-1] = blockcode

      endif

      

      if blockcode = "C" then

        level[i][p-1] = 2  

      elseif blockcode = "D" then

        level[i][p-1] = 2  

      else

        level[i][p-1] = blockcode      

      endif   

      If blockcode = "C" Then 'crystal on gras

        levelshapes[i][p-1] = Shapes.AddImage(image["A"])

        Shapes.move(levelshapes[i][p-1], (p-1) * 50 + korrx, (i) * 40)   

        

      elseIf blockcode = "D" Then 'crystal on wood

        levelshapes[i][p-1] = Shapes.AddImage(image["B"])

        Shapes.move(levelshapes[i][p-1], (p-1) * 50 + korrx, (i) * 40)            

        

      elseIf blockcode < 2  Then

        levelshapes[i][p-1] = Shapes.AddImage(image[blockcode])

        

        Shapes.move(levelshapes[i][p-1], (p-1) * 50 + korrx, (i) * 40) 

        

      ElseIf blockcode = 2  Then

        levelshapes[i][p-1] = Shapes.AddImage(image["0"])

        

        Shapes.move(levelshapes[i][p-1], (p-1) * 50 + korrx, (i) * 40)

      endif 

      

      

    EndFor  

  EndFor   

  

  Program.Delay (5)

  

  'load blocks

  f = 0

  For i = 1 To c15

    For p = 1 To Text.GetLength(block[stage][i])

      blockcode = Text.GetSubText(block[stage][i], p, 1) 

      If blockcode = 2 or blockcode = "C" or blockcode = "D" Then

        crystalimg[cryst] = Shapes.AddImage(image[2])

        crystalbnk[cryst] = Shapes.AddImage(cbbi)

        chestarray[i][p-1] = cryst     

        Shapes.move(crystalimg[cryst] , (p-1) * 50 + korrx, (i) * 40)

        LDShapes.AnimateZoom  (crystalimg[cryst] 1500 0 1.1 1.1)

        Shapes.Move(crystalbnk[cryst] , cryst * 52 , -10000) 

        cryst = cryst + 1    

      Endif      

    EndFor  

  EndFor

  

  For i = 1 To c15

    For p = 1 To Text.GetLength(block[stage][i])

      blockcode = Text.GetSubText(block[stage][i], p, 1) 

      If blockcode >= 4 Then

        levelshapes[i][p-1] = Shapes.AddImage(image[blockcode])      

        Shapes.move(levelshapes[i][p-1], (p-1) * 50 + korrx, (i) * 40 )  

        If blockcode = 6 Or blockcode =7 Then 

          LDShapes.ZIndex (levelshapes[i][p-1] 1000)

        EndIf 

      Endif      

    EndFor  

  EndFor

  

  dd=0

  For f=1 To 5

    If f>4 Then

      dd=1000

    EndIf 

    Shapes.Move(s[f], (posx) * 50 + korrx, (posy) * 40) 

    ldShapes.ZIndex (s[f] 1990-dd)

  EndFor  

  xplayer = Shapes.GetLeft(s[1])

  yplayer = Shapes.GetTop(s[1])  

  

EndSub

  


