WindowWidth = 500
WindowHeight = 500

ClockRadius = WindowWidth * 0.48
ClockCentreX = WindowWidth / 2
ClockCentreY = WindowHeight / 2
ClockColor = GraphicsWindow.GetColorFromRGB(0, 0, 30)
ClockDotColor = "Yellow"
ClockDotRadius = ClockRadius * 0.028
ClockDotDistance = ClockRadius * 0.92
ClockCentreColor = GraphicsWindow.GetColorFromRGB(0, 120, 0)
ClockOutlineColor = "Black"

SecondsArmLength = ClockRadius * 0.85
SecondsArmWidth = ClockRadius * 0.04
SecondsArmColor = GraphicsWindow.GetColorFromRGB(0, 150, 0)

MinutesArmLength = ClockRadius * 0.7
MinutesArmWidth = ClockRadius * 0.055
MinutesArmColor = GraphicsWindow.GetColorFromRGB(0, 100, 0)

HoursArmLength = ClockRadius * 0.5
HoursArmWidth = ClockRadius * 0.07
HoursArmColor = GraphicsWindow.GetColorFromRGB(0, 50, 0)

'Stacks
Params = 0
Return = 1

Main()

Sub InitGraphicsWindow
  GraphicsWindow.Show()
  GraphicsWindow.Width = WindowWidth
  GraphicsWindow.Height = WindowHeight
EndSub

Sub DrawClock
  GraphicsWindow.PenWidth = 0
  GraphicsWindow.BrushColor = HoursArmColor
  HoursArm = Shapes.AddRectangle(HoursArmWidth, HoursArmLength)
  GraphicsWindow.BrushColor = MinutesArmColor
  MinutesArm = Shapes.AddRectangle(MinutesArmWidth, MinutesArmLength)
  GraphicsWindow.BrushColor = SecondsArmColor
  SecondsArm = Shapes.AddRectangle(SecondsArmWidth, SecondsArmLength)
  
  GraphicsWindow.BrushColor = ClockColor
  GraphicsWindow.FillEllipse(ClockCentreX - ClockRadius, ClockCentreY - ClockRadius, ClockRadius * 2, ClockRadius * 2)
  GraphicsWindow.PenWidth = 2
  GraphicsWindow.PenColor = ClockOutlineColor
  GraphicsWindow.DrawEllipse(ClockCentreX - ClockRadius, ClockCentreY - ClockRadius, ClockRadius * 2, ClockRadius * 2)
  
  GraphicsWindow.PenWidth = 0
  GraphicsWindow.BrushColor = ClockCentreColor
  Shapes.Move(Shapes.AddEllipse(HoursArmWidth, HoursArmWidth), ClockCentreX - HoursArmWidth / 2, ClockCentreY - HoursArmWidth / 2)
  
  GraphicsWindow.BrushColor = ClockDotColor
  For i = 1 To 12
    Stack.PushValue(Params, 0)
    Stack.PushValue(Params, -ClockDotDistance)
    Stack.PushValue(Params, i * Math.Pi * 2 / 12)
    RotationMatrix()
    vectorX = Stack.PopValue(Return)
    vectorY = Stack.PopValue(Return)
    GraphicsWindow.FillEllipse(ClockCentreX + vectorX - ClockDotRadius, ClockCentreY + vectorY - ClockDotRadius, ClockDotRadius * 2, ClockDotRadius * 2)
  EndFor
EndSub

Sub Main
  InitGraphicsWindow()
  DrawClock()
  
  While ("True")
    UpdateClock()
  EndWhile
EndSub

Sub UpdateClock
  angleMilliseconds = Clock.Millisecond * 360 / 60000
  
  angleSeconds = Clock.Second * 360 / 60 + angleMilliseconds
  Stack.PushValue(Params, 0)
  Stack.PushValue(Params, -SecondsArmLength / 2)
  Stack.PushValue(Params, Math.GetRadians(angleSeconds))
  RotationMatrix()
  vectorX = Stack.PopValue(Return)
  vectorY = Stack.PopValue(Return)
  Shapes.Rotate(SecondsArm, angleSeconds)
  Shapes.Move(SecondsArm, ClockCentreX - SecondsArmWidth / 2 + vectorX, ClockCentreY - SecondsArmLength / 2 + vectorY)
  
  angleMinutes = Clock.Minute * 360 / 60 + angleSeconds / 60
  Stack.PushValue(Params, 0)
  Stack.PushValue(Params, -MinutesArmLength / 2)
  Stack.PushValue(Params, Math.GetRadians(angleMinutes))
  RotationMatrix()
  vectorX = Stack.PopValue(Return)
  vectorY = Stack.PopValue(Return)
  Shapes.Rotate(MinutesArm, angleMinutes)
  Shapes.Move(MinutesArm, ClockCentreX - MinutesArmWidth / 2 + vectorX, ClockCentreY - MinutesArmLength / 2 + vectorY)
  
  angleHours = Clock.Hour * 360 / 12 + angleMinutes / 12
  Stack.PushValue(Params, 0)
  Stack.PushValue(Params, -HoursArmLength / 2)
  Stack.PushValue(Params, Math.GetRadians(angleHours))
  RotationMatrix()
  vectorX = Stack.PopValue(Return)
  vectorY = Stack.PopValue(Return)
  Shapes.Rotate(HoursArm, angleHours)
  Shapes.Move(HoursArm, ClockCentreX - HoursArmWidth / 2 + vectorX, ClockCentreY - HoursArmLength / 2 + vectorY)
EndSub

Sub RotationMatrix
  paramAngle = Stack.PopValue(Params)
  paramY = Stack.PopValue(Params)
  paramX = Stack.PopValue(Params)
  m11 = Math.Cos(paramAngle)
  m12 = Math.Sin(paramAngle)
  Stack.PushValue(Return, paramX * m12 + paramY * m11)
  Stack.PushValue(Return, paramX * m11 + paramY * -m12)
EndSub
