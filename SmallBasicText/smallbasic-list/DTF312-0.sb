' Lunar Module

' 2014-10-02 15:43:13 Shapes generated by Shapes 1.6b.

' Version 0.4a

' Last update 2014-10-17

' Program ID DTF312-0

'

gw = 598

gh = 428

GraphicsWindow.Width = gw

GraphicsWindow.Height = gh

GraphicsWindow.Title = "Lunar Module 0.4a"

GraphicsWindow.BackgroundColor = "Black"

' initialize shapes for Lunar Module

SB_Workaround()

Shapes_Init()

' add shapes

scale = 0.1

angle = 0

iMin = 1

iMax = 18

Shapes_Add()

x = (gw - 45) / 2

dy = 1

' side thruster off

For op = 100 To 0 Step -1

  Shapes.SetOpacity(shape[2]["obj"], op)

  Shapes.SetOpacity(shape[3]["obj"], op)

EndFor

ys = 125

ye = gh - shape[17]["y"] * scale - 10

For y = ys To ye Step dy

  op = (ye - y) / (ye - ys) * 50

  Shapes_Move()

  Shapes.SetOpacity(shape[1]["obj"], op)  ' main frame

  Program.Delay(1000/24)

EndFor

DrawStars()

DrawVScale()

lmw = 9     ' Lunar Module width [m]

lmh = 6     ' Lunar Module height [m]

fw = 1      ' frame width [m]

fh = 4      ' frame height [m]

gap = 0.5   ' gap between LM and frame [m]

pxpm = 5    ' [px/m]

y0 = gh - 10

GraphicsWindow.PenWidth = 0

GraphicsWindow.BrushColor = "Gray"

moon = Shapes.AddRectangle(gw, 10)

Shapes.Move(moon, 0, y0)

x = gw / 2              ' [px]

y = y0 - lmh / 2 * pxpm ' [px]

MoveLM()

m = 15000   ' mass of LM [kg] = 15[t]

g = 9.8 / 6 ' acceleration due to gravity on the surface of the Moon [m/s^2]

f = 45040   ' descent engine thrust [N]

f2 = 455    ' side thruster thrust [N]

a = f / m   ' acceleration by descent engine [m/s^2]

a2 = f2 / m ' acceleration by side thruster [m/s^2]

vx2 = 0     ' velocity x [m/s]

vy2 = 0     ' velocity y [m/s]

engineOn = "False"

rightOn = "False"

leftOn = "False"

GraphicsWindow.KeyDown = OnKeyDown

GraphicsWindow.KeyUp = OnKeyUp

While "True"

  t1 = t2

  t2 = Clock.ElapsedMilliseconds / 1000

  dt = t2 - t1  ' [s]

  vx1 = vx2

  vy1 = vy2

  If engineOn Then

    Shapes.SetOpacity(shape[1]["obj"], 50)  ' main frame

    vy2 = vy1 + (g - a) * dt  ' [m/s]

  Else

    Shapes.SetOpacity(shape[1]["obj"], 0)   ' main frame

    vy2 = vy1 + g * dt        ' [m/s]

  EndIf

  If rightOn Then

    Shapes.SetOpacity(shape[2]["obj"], 50)  ' right frame

    vx2 = vx1 + a2 * dt       ' [m/s]

  Else

    Shapes.SetOpacity(shape[2]["obj"], 0)   ' right frame

  EndIf

  If leftOn Then

    Shapes.SetOpacity(shape[3]["obj"], 50)  ' left frame

    vx2 = vx1 - a2 * dt       ' [m/s]

  Else

    Shapes.SetOpacity(shape[3]["obj"], 0)   ' left frame

  EndIf

  dx = (vx2 + vx1) * dt / 2 * pxpm ' [px]

  x = x + dx  ' [px]

  dy = (vy2 + vy1) * dt / 2 * pxpm ' [px]

  y = y + dy  ' [px]

  If y0 - lmh / 2 * pxpm <= y Then

    y = y0 - lmh / 2 * pxpm

    vy2 = 0

    vx2 = 0

  EndIf

  ShowV()

  MoveLM()

  Program.Delay(1000 / 24)

EndWhile

Sub DrawStars

  GraphicsWindow.PenWidth = 0

  GraphicsWindow.BrushColor = "White"

  For i = 1 To 300

    x = Math.GetRandomNumber(gw)

    y = Math.GetRandomNumber(gh)

    GraphicsWindow.FillEllipse(x, y, 2, 2)

  EndFor

EndSub

Sub DrawVScale

  GraphicsWindow.BrushColor = "#99000000"

  GraphicsWindow.FillRectangle(10, 10, 40, gh - 40)

  GraphicsWindow.PenWidth = 2

  GraphicsWindow.PenColor = "White"

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.DrawText(10, 10, "v[m/s]")

  For v = -20 To 20

    y = 30 + (1 - v / 20) * ((gh - 60) / 2)

    If Math.Remainder(v + 20, 5) = 0 Then

      GraphicsWindow.DrawLine(10, y, 40, y)

      GraphicsWindow.DrawText(10, y, v)

    Else

      GraphicsWindow.DrawLine(30, y, 40, y)

    EndIf

  EndFor

  Program.Delay(300)  ' for Silverlight

  GraphicsWindow.PenWidth = 0

  GraphicsWindow.BrushColor = "Red"

  vHand = Shapes.AddTriangle(0, 0, 10, -5, 10, 5)

  Shapes.Move(vHand, 40, 10 + (gh - 60) / 2)

EndSub

Sub ShowV

  yV = 30 + (1 + vy2 / 20) * ((gh - 60) / 2)

  Shapes.Move(vHand, 40, yV)

EndSub

Sub MoveLM

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  x = x - lmw / 2 * pxpm

  y = y - lmh / 2 * pxpm

  Shapes_Move()

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

EndSub

Sub OnKeyDown

  key = GraphicsWindow.LastKey

  If key = "Up" Then

    engineOn = "True"

  ElseIf key = "Right" Then

    rightOn = "True"

  ElseIf key = "Left" Then

    leftOn = "True"

  EndIf

EndSub

Sub OnKeyUp

  key = GraphicsWindow.LastKey

  If key = "Up" Then

    engineOn = "False"

  ElseIf key = "Right" Then

    rightOn = "False"

  ElseIf key = "Left" Then

    leftOn = "False"

  EndIf

EndSub

Sub Shapes_Init

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 84 ' x offset

  shY = 114 ' y offset

  shape = ""

  shape[1] = "func=ell;x=196;y=260;width=46;height=145;bc=#FFA500;pw=0;"

  shape[2] = "func=ell;x=40;y=60;width=58;height=25;bc=#FFA500;pw=0;"

  shape[3] = "func=ell;x=332;y=60;width=58;height=25;bc=#FFA500;;pw=0;"

  shape[4] = "func=tri;x=119;y=54;x1=12;y1=0;x2=0;y2=35;x3=25;y3=35;angle=90;bc=#222222;pc=#FFFFFF;pw=2;"

  shape[5] = "func=tri;x=295;y=54;x1=12;y1=0;x2=0;y2=35;x3=25;y3=35;angle=270;bc=#222222;pc=#FFFFFF;pw=2;"

  shape[6] = "func=ell;x=262;y=80;width=69;height=69;bc=#666666;pc=#FFFFFF;pw=2;"

  shape[7] = "func=ell;x=134;y=0;width=171;height=165;bc=#777777;pc=#FFFFFF;pw=2;"

  shape[8] = "func=tri;x=155;y=50;x1=30;y1=0;x2=0;y2=30;x3=60;y3=30;angle=45;bc=#000000;pc=#FFFFFF;pw=2;"

  shape[9] = "func=tri;x=223;y=50;x1=30;y1=0;x2=0;y2=30;x3=60;y3=30;angle=315;bc=#000000;pc=#FFFFFF;pw=2;"

  shape[10] = "func=tri;x=177;y=164;x1=40;y1=0;x2=0;y2=70;x3=81;y3=70;bc=#222222;pc=#FFFFFF;pw=2;"

  shape[11] = "func=rect;x=196;y=0;width=46;height=145;bc=#888888;pc=#FFFFFF;pw=2;"

  shape[12] = "func=rect;x=128;y=142;width=186;height=66;bc=#554400;pc=#FFFFFF;pw=2;"

  shape[13] = "func=line;x=38;y=142;x1=90;y1=0;x2=0;y2=144;pc=#FFFFFF;pw=2;"

  shape[14] = "func=line;x=0;y=286;x1=0;y1=0;x2=86;y2=0;pc=#FFFFFF;pw=2;"

  shape[15] = "func=line;x=312;y=142;x1=0;y1=0;x2=92;y2=144;pc=#FFFFFF;pw=2;"

  shape[16] = "func=line;x=355;y=286;x1=0;y1=0;x2=91;y2=0;pc=#FFFFFF;pw=2;"

  shape[17] = "func=line;x=175;y=286;x1=0;y1=0;x2=91;y2=0;pc=#FFFFFF;pw=2"

  shape[18] = "func=line;x=217;y=142;x1=0;y1=0;x2=2;y2=144;pc=#FFFFFF;pw=2;"

EndSub

Sub Math_CartesianToPolar

  ' Math | convert cartesian coodinate to polar coordinate

  ' param x, y - cartesian coordinate

  ' return r, a - polar coordinate

  r = Math.SquareRoot(x * x + y * y)

  If x = 0 And y > 0 Then

    a = 90 ' [degree]

  ElseIf x = 0 And y < 0 Then

    a = -90

  Else

    a = Math.ArcTan(y / x) * 180 / Math.Pi

  EndIf

  If x < 0 Then

    a = a + 180

  ElseIf x > 0 And y < 0 Then

    a = a + 360

  EndIf

EndSub

Sub SB_RotateWorkaround

  ' Small Basic | Rotate workaround for Silverlight

  ' param x, y - original coordinate

  ' param alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shape[i]["func"] = "tri" Then

    x1 = -Math.Floor(shape[i]["x3"] / 2)

    y1 = -Math.Floor(shape[i]["y3"] / 2)

  ElseIf shape[i]["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shape[i]["x1"] - shape[i]["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shape[i]["y1"] - shape[i]["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

EndSub

Sub SB_Workaround

  ' Small Basic | Workaround for Silverlight

  ' returns silverlight - "True" if in remote

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

    msWait = 300

  Else

    silverlight = "False"

  EndIf

EndSub

Sub Shapes_Add

  ' Shapes | add shapes as shapes data

  ' param iMin, iMax - shape indices to add

  ' param shape - array of shapes

  ' param scale - 1 if same scale

  ' return shWidth, shHeight - total size of shapes

  ' return shAngle - current angle of shapes

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  Shapes_CalcWidthAndHeight()

  s = scale

  For i = iMin To iMax

    GraphicsWindow.PenWidth = shape[i]["pw"] * s

    If shape[i]["pw"] > 0 Then

      GraphicsWindow.PenColor = shape[i]["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) Then

      GraphicsWindow.BrushColor = shape[i]["bc"]

    EndIf

    If shape[i]["func"] = "rect" Then

      shape[i]["obj"] = Shapes.AddRectangle(shape[i]["width"] * s, shape[i]["height"] * s)

    ElseIf shape[i]["func"] = "ell" Then

      shape[i]["obj"] = Shapes.AddEllipse(shape[i]["width"] * s, shape[i]["height"] * s)

    ElseIf shape[i]["func"] = "tri" Then

      shape[i]["obj"] = Shapes.AddTriangle(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s, shape[i]["x3"] * s, shape[i]["y3"] * s)

    ElseIf shape[i]["func"] = "line" Then

      shape[i]["obj"] = Shapes.AddLine(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s)

    ElseIf shape[i]["func"] = "text" Then

      If silverlight Then

        fs = Math.Floor(shape[i]["fs"] * 0.9)

      Else

        fs = shape[i]["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shape[i]["fn"]

      shape[i]["obj"] = Shapes.AddText(shape[i]["text"])

    EndIf

    x = shape[i]["x"]

    y = shape[i]["y"]

    shape[i]["rx"] = x

    shape[i]["ry"] = y

    If silverlight And Text.IsSubText("tri|line", shape[i]["func"]) Then

      alpha = Math.GetRadians(shape[i]["angle"])

      SB_RotateWorkaround()

      shape[i]["wx"] = x

      shape[i]["wy"] = y

    EndIf

    Shapes.Move(shape[i]["obj"], shX + x * s, shY + y * s)

    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) And shape[i]["angle"] <> 0 Then

      Shapes.Rotate(shape[i]["obj"], shape[i]["angle"])

    EndIf

  EndFor

  shAngle = 0

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub

Sub Shapes_CalcRotatePos

  ' Shapes | Calculate position for rotated shape

  ' param["x"], param["y"] - position of a shape

  ' param["width"], param["height"] - size of a shape

  ' param ["cx"], param["cy"] - center of rotation

  ' param ["angle"] - rotate angle

  ' return x, y - rotated position of a shape

  _cx = param["x"] + param["width"] / 2

  _cy = param["y"] + param["height"] / 2

  x = _cx - param["cx"]

  y = _cy - param["cy"]

  Math_CartesianToPolar()

  a = a + param["angle"]

  x = r * Math.Cos(a * Math.Pi / 180)

  y = r * Math.Sin(a * Math.Pi / 180)

  _cx = x + param["cx"]

  _cy = y + param["cy"]

  x = _cx - param["width"] / 2

  y = _cy - param["height"] / 2

EndSub

Sub Shapes_CalcWidthAndHeight

  ' Shapes | Calculate total width and height of shapes

  ' param iMin, iMax - shape indices to add

  ' return shWidth, shHeight - total size of shapes

  For i = iMin To iMax

    If shape[i]["func"] = "tri" Or shape[i]["func"] = "line" Then

      xmin = shape[i]["x1"]

      xmax = shape[i]["x1"]

      ymin = shape[i]["y1"]

      ymax = shape[i]["y1"]

      If shape[i]["x2"] < xmin Then

        xmin = shape[i]["x2"]

      EndIf

      If xmax < shape[i]["x2"] Then

        xmax = shape[i]["x2"]

      EndIf

      If shape[i]["y2"] < ymin Then

        ymin = shape[i]["y2"]

      EndIf

      If ymax < shape[i]["y2"] Then

        ymax = shape[i]["y2"]

      EndIf

      If shape[i]["func"] = "tri" Then

        If shape[i]["x3"] < xmin Then

          xmin = shape[i]["x3"]

        EndIf

        If xmax < shape[i]["x3"] Then

          xmax = shape[i]["x3"]

        EndIf

        If shape[i]["y3"] < ymin Then

          ymin = shape[i]["y3"]

        EndIf

        If ymax < shape[i]["y3"] Then

          ymax = shape[i]["y3"]

        EndIf

      EndIf

      shape[i]["width"] = xmax - xmin

      shape[i]["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shape[i]["x"] + shape[i]["width"]

      shHeight = shape[i]["y"] + shape[i]["height"]

    Else

      If shWidth < shape[i]["x"] + shape[i]["width"] Then

        shWidth = shape[i]["x"] + shape[i]["width"]

      EndIf

      If shHeight < shape[i]["y"] + shape[i]["height"] Then

        shHeight = shape[i]["y"] + shape[i]["height"]

      EndIf

    EndIf

  EndFor

EndSub

Sub Shapes_Move

  ' Shapes | Move shapes

  ' param iMin, iMax - shape indices to add

  ' param shape - array of shapes

  ' param scale - to zoom

  ' param x, y - position to move

  ' return shX, shY - new position of shapes

  Stack.PushValue("local", i)

  s = scale

  shX = x

  shY = y

  For i = iMin To iMax

    If silverlight And Text.IsSubText("tri|line", shape[i]["func"]) Then

      _x = shape[i]["wx"]

      _y = shape[i]["wy"]

    Else

      _x = shape[i]["rx"]

      _y = shape[i]["ry"]

    EndIf

    Shapes.Move(shape[i]["obj"], shX + _x * s, shY + _y * s)

  EndFor

  i = Stack.PopValue("local")

EndSub

Sub Shapes_Remove

  ' Shapes | Remove shapes

  ' param iMin, iMax - shapes indices to remove

  ' param shape - array of shapes

  Stack.PushValue("local", i)

  For i = iMin To iMax

    Shapes.Remove(shape[i]["obj"])

  EndFor

  i = Stack.PopValue("local")

EndSub

Sub Shapes_Rotate

  ' Shapes | Rotate shapes

  ' param iMin, iMax - shapes indices to rotate

  ' param shape - array of shapes

  ' param scale - to zoom

  ' param angle - to rotate

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  s = scale

  param["angle"] = angle

  param["cx"] = shWidth / 2

  param["cy"] = shHeight / 2

  For i = iMin To iMax

    param["x"] = shape[i]["x"]

    param["y"] = shape[i]["y"]

    param["width"] = shape[i]["width"]

    param["height"] = shape[i]["height"]

    Shapes_CalcRotatePos()

    shape[i]["rx"] = x

    shape[i]["ry"] = y

    If silverlight And Text.IsSubText("tri|line", shape[i]["func"]) Then

      alpha = Math.GetRadians(angle + shape[i]["angle"])

      SB_RotateWorkAround()

      shape[i]["wx"] = x

      shape[i]["wy"] = y

    EndIf

    Shapes.Move(shape[i]["obj"], shX + x * s, shY + y * s)

    Shapes.Rotate(shape[i]["obj"], angle + shape[i]["angle"])

  EndFor

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub


