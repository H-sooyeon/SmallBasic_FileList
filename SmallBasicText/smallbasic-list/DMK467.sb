title = "SVG Viewer 0.51b"

Init()

mmm=LDText.Split("Open!Clear!Draw" "!")

LDDialogs.AddRightClickMenu(mmm "")

LDDialogs.RightClickMenu=rcc



Sub rcc

  ll=LDDialogs.LastRightClickMenuItem

  If ll=1 Then

    fff=LDDialogs.OpenFile("SVG" "e:\")

    If fff="" Then

    Else

      opn()

    EndIf

  ElseIf ll=2 Then

    RemoveShapes()

  EndIf

  

EndSub



Sub opn

  path = fff

  nSVG = 0

  level = 1

  buf = ""

  len = 0

  xo = 0

  yo = 0

  LDxml.Open(path)

  LDxml.FirstNode()

  SVG_Container()

  ShowSVG()

  GraphicsWindow.Title = title

EndSub



Sub AddPoint

  If _points <> "" Then

    _points = _points + " "

  EndIf

  _points = _points + x + "," + y

EndSub



Sub AddQuadPoints

  nQ = nQ + 1

  _q[nQ] = "x=" + x1 + ";y=" + y1 + ";"

  nQ = nQ + 1

  _q[nQ] = "x=" + x + ";y=" + y + ";"

  For t = 0 To 1 Step 0.1

    x1 = (1 - t) * _q[nQ - 2]["x"] + t * _q[nQ - 1]["x"]

    y1 = (1 - t) * _q[nQ - 2]["y"] + t * _q[nQ - 1]["y"]

    x2 = (1 - t) * _q[nQ - 1]["x"] + t * _q[nQ]["x"]

    y2 = (1 - t) * _q[nQ - 1]["y"] + t * _q[nQ]["y"]

    x = (1 - t) * x1 + t * x2

    y = (1 - t) * y1 + t * y2

    AddPoint()

  EndFor

EndSub



Sub Init

  GraphicsWindow.Title = title

  Not = "False=True;True=False

  dir = "e:\

  VT = Text.GetCharacter(9)

  CR = Text.GetCharacter(13)

  LF = Text.GetCharacter(10)

  WQ = Text.GetCharacter(34)

  vw = 800

  vh = 600

  gw = vw + 500

  gh = vh + 50

  xL = 10

  yT = 40

  nShp = 0

  GraphicsWindow.Width = gw

  GraphicsWindow.Height = gh

  GraphicsWindow.BackgroundColor = "LightGray"

  

  ' add combobox

  GraphicsWindow.BrushColor = "Black"

  'cbox = LDControls.AddComboBox(svgs, gw - 20, gh - 50)

  'Controls.Move(cbox, 10, 10)

  

  ' add textbox

  tbox = Controls.AddMultiLineTextBox(10, 10)

  Controls.Move(tbox, vw + 20, 40)

  Controls.SetSize(tbox, gw - vw - 30, gh - 50)

  

  ' flag area

  GraphicsWindow.BrushColor = "#11000000"

  GraphicsWindow.FillRectangle(xL, yT, vw, vh)

  

  ' elements (*: obsolete and depricated)

  elements["animation"] = "animate|animateColor*|animateMotion|animateTransform|discard|mpath|set"

  elements["basicShapes"] = "circle|ellipse|line|polygon|polyline|rect"

  elements["otherShapes"] = "mesh|path"

  elements["container"] = "a|defs|g|marker|mask|missing-glyph*|pattern|svg|switch|symbol|unknown"

  elements["descriptive"] = "desc|metadata|title"

  elements["filterPrimitive"] = "feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|feSpecularLighting|feTile|feTurbulence"

  elements["font"] = "font*|font-face*|font-face-format*|font-face-name*|font-face-src*|font-face-uri*|hkern*|vkern*"

  elements["gradient"] = "linearGradient|meshGradient|radialGradient|stop"

  elements["graphicsReferencing"] = "mesh|use"

  elements["neverRended"] = "clipPath|defs|hatch|linearGradient|marker|mask|meshgradient|metadata|pattern|radialGradient|script|style|symbol|title"

  elements["otherGraphics"] = "image|path|text"

  elements["graphics"] = elements["basicShapes"] + "|" + elements["graphicsReferencing"] + "|" + elements["otherGraphics"]

  elements["lightSource"] = "feDistantLight|fePointLight|feSpotLight"

  elements["paintServer"] = "hatch|linearGradient|meshgradient|pattern|radialGradient|solidcolor"

  elements["renderable"] = "a|circle|ellipse|foreignObject|g|image|line|mesh|path|polygon|polyline|rect|svg|switch|symbol|text|textPath|tspan|unknown|use"

  elements["shapes"] = elements["basicShapes"] + "|" + elements["otherShapes"]

  elements["structural"] = "defs|g|svg|symbol|use"

  elements["textContentChild"] = "altGlyph*|textPath|tref|tspan"

  elements["textContentOther"] = "altGlyphDef*|altGlyphItem*|glyph*|glyphRef*|text"

  elements["textContent"] = elements["textOtherContent"] + "|" + elements["textContentChild"]

  elements["uncategorized"] = "clipPath|color-profile|cursor*|filter|foreignObject|hatchpath|meshpatch|meshrow|script|style|view"

  

  ' LDControls.ComboBoxItemChanged = OnCboxChanged

EndSub



Sub RemoveShapes

  For iShp = 1 To nShp

    Shapes.Remove(shp[iShp])

  EndFor

  nShp = 0

EndSub



Sub ShowSVG

  buf = ""

  For iSVG = 1 To nSVG

    buf = buf + "svg[" + iSVG + "] = " + WQ + svg[iSVG] + WQ + LF

  EndFor

  Controls.SetTextBoxText(tbox, buf)

EndSub



Sub Parse_Arc

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  char = "Aa"

  Parse_Char()

  If match Then

    cmd = c

  EndIf

EndSub



Sub Parse_Char

  ' param char - characters

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return c - character

  ' return match - "True" if match

  match = "False"

  c = Text.GetSubText(buf, p, 1)

  If (p <= len) And Text.IsSubText(char, c) Then

    match = "True"

    p = p + 1

  EndIf

EndSub



Sub Parse_ClosePath

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  char = "Zz"

  Parse_Char()

  If match Then

    closed[nPoints] = "True"

    xo = xm

    yo = ym

    cmd = c

  EndIf

EndSub



Sub Parse_Cubic

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  char = "CcSs"

  Parse_Char()

  If match Then

    cmd = c

  EndIf

EndSub



Sub Parse_d

  ' convert path definition d to points array

  ' param buf - attibute d in <path> element

  ' return points[] - points array

  ' return match - "True" if match

  match = "False"

  len = Text.GetLength(buf)

  p = 1

  points = ""

  closed = ""

  nPoints = 0

  'GraphicsWindow.ShowMessage("parse_D" ">>")

  While p <= len

    Parse_Space()

    Parse_MoveTo()

    If Not[match] Then

      Parse_LineTo()

    EndIf

    If Not[match] Then

      Parse_Cubic()

    EndIf

    If Not[match] Then

      Parse_Quadratic()

    EndIf

    If Not[match] Then

      Parse_Arc()

    EndIf

    If Not[match] Then

      Parse_ClosePath()

    EndIf

  EndWhile

  'TextWindow.WriteLine(points)

  For iPoints = 1 To nPoints

    SVG_SetAttr()

    pt = ""

    pts = LDText.Split(points[iPoints], " ")

    nPts = Array.GetItemCount(pts)

    If closed[iPoints] Then

      Render_Polygon()

    Else

      Render_Polyline()

    EndIf

  EndFor

EndSub



Sub Parse_LineTo

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  _p = p

  char = "LlHhVv"

  Parse_Char()

  If match Then

    cmd = c

    _points = ""

  EndIf

  matchL = "False"

  If Text.IsSubText("Ll", cmd) Then

    While match

      Parse_Space()

      Parse_Point()

      If match Then

        matchL = "True"

        If cmd = "l" Then

          x = xo + x

          y = yo + y

        EndIf

        AddPoint()

        xo = x

        yo = y

      EndIf

    EndWhile

  Else

    ' cmd is subtext of "HhVv"

    While match

      Parse_Space()

      Parse_Number()

      If match Then

        matchL = "True"

        If cmd = "H" Then

          x = number

          y = yo

        ElseIf cmd = "h" Then

          x = xo + number

          y = yo

        ElseIf cmd = "V" Then

          x = xo

          y = number

        ElseIf cmd = "v" Then

          x = xo

          y = yo + number

        EndIf

        AddPoint()

        xo = x

        yo = y

      EndIf

    EndWhile

  EndIf

  If Not[matchL] Then

    p = _p

  Else

    points[nPoints] = points[nPoints] + " " + _points

    match = "True"

  EndIf

EndSub



Sub Parse_MoveTo

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  _p = p

  char = "Mm"

  Parse_Char()

  If match Then

    cmd = c

    _points = ""

  EndIf

  matchM = "False"

  While match

    Parse_Space()

    Parse_Point()

    If match Then

      matchM = "True"

      If cmd = "m" Then

        x = xo + x

        y = yo + y

      EndIf

      AddPoint()

      xo = x

      yo = y

      xm = x

      ym = y

    EndIf

  EndWhile

  If Not[matchM] Then

    p = _p

  Else

    nPoints = nPoints + 1

    points[nPoints] = _points

    closed[nPoints] = "False"

    match = "True"

  EndIf

EndSub



Sub Parse_Number

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  _p = p

  matchN = "False"

  char = "-"

  Parse_Char()

  If match Then

    number = "-"

  Else

    number = ""

  EndIf

  match = "True"

  char = "0123456789"

  While match

    Parse_Char()

    If match Then

      number = Text.Append(number, c)

      matchN = "True"

    EndIf

  EndWhile

  char = "."

  Parse_Char()

  If match Then

    number = Text.Append(number, c)

  EndIf

  char = "0123456789"

  While match

    Parse_Char()

    If match Then

      number = Text.Append(number, c)

      matchN = "True"

    EndIf

  EndWhile

  If Not[matchN] Then

    p = _p

  Else

    match = "True"

  EndIf

EndSub



Sub Parse_Point

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return x, y - coordinates of the point

  ' return p - updated pointer to buf

  ' return match - "True" if match

  _p = p

  match = "False"

  Parse_Number()

  If match Then

    x = number

    Parse_Space()

    match = "True"

  EndIf

  If match Then

    Parse_Number()

  EndIf

  If match Then

    y = number

  Else

    p = _p

  EndIf

EndSub



Sub Parse_Quadratic

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  _p = p

  char = "QqTt"

  Parse_Char()

  If match Then

    cmd = c

  EndIf

  matchQ = "False"

  If Text.IsSubText("Qq", cmd) Then

    _q = ""

    nQ = 1

    _q[nQ]["x"] = xm

    _q[nQ]["y"] = ym

    While match

      Parse_Space()

      Parse_Point()   '  control point

      If cmd = "q" Then

        x = xo + x

        y = yo + y

      EndIf

      x1 = x

      y1 = y

      If match Then

        Parse_Space()

        Parse_Point() ' end point

        If cmd = "q" Then

          x = xo + x

          y = yo + y

        EndIf

      EndIf

      If match Then

        matchQ = "True"

        AddQuadPoints()

      EndIf

    EndWhile

  Else

    Parse_Space()

    Parse_Point() ' end point

    If match Then

      If cmd = "t" Then

        x = xo + x

        y = yo + y

      EndIf

      x1 = _q[nQ]["x"] + (_q[nQ]["x"] - _q[nQ - 1]["x"])

      y1 = _q[nQ]["y"] + (_q[nQ]["x"] - _q[nQ - 1]["x"])

      AddQuadPoints()

    EndIf

  EndIf

  If Not[matchQ] Then

    p = _p

  Else

    points[nPoints] = points[nPoints] + " " + _points

    match = "True"

  EndIf

EndSub



Sub Parse_Space

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  match = "False"

  While (p <= len) And Text.IsSubText(" ," + VT + CR + LF, Text.GetSubText(buf, p, 1))

    match = "True"

    p = p + 1

  EndWhile

EndSub



Sub Parse_ViewBox

  ' param buf - buffer to parse

  ' param len - length of buf

  ' param p - pointer to buf

  ' return p - updated pointer to buf

  ' return match - "True" if match

  _p = p

  match = "False"

  Parse_Number()

  If match Then

    viewBox = number  ' x-min

    Parse_Space()

    char = ","

    Parse_Char()

    match = "True"

  EndIf

  If match Then

    Parse_Number()

  EndIf

  If match Then

    viewBox = Text.Append(viewBox + " ", number)  ' y-min

    Parse_Space()

    char = ","

    Parse_Char()

    match = "True"

  EndIf

  If match Then

    Parse_Number()

  EndIf

  If match Then

    viewBox = Text.Append(viewBox + " ", number)  ' width

    Parse_Space()

    char = ","

    Parse_Char()

    match = "True"

  EndIf

  If match Then

    Parse_Number()

  EndIf

  If match Then

    viewBox = Text.Append(viewBox + " ", number)  ' height

    vb = LDText.Split(viewBox, " ")

    scale = vw / vb[3]

  Else

    p = _p

  EndIf

EndSub



Sub Render_Polygon

  ' TextWindow.WriteLine(pts)

  For iPts = 1 To nPts

    _pt = LDText.Split(pts[iPts], ",")

    pt[iPts][1] = Math.Round(_pt[1] * scale)

    pt[iPts][2] = Math.Round(_pt[2] * scale)

  EndFor

  nShp = nShp + 1

  shp[nShp] = LDShapes.AddPolygon(pt)

  If attr["fill-rule"] = "evenodd" Then

    LDShapes.SetProperty(shp[nShp], "FillRule", "EvenOdd")

  Else

    LDShapes.SetProperty(shp[nShp], "FillRule", "NonZero")

  EndIf

  Shapes.Move(shp[nShp], xL, yT)

EndSub



Sub Render_Polyline

  For iPts = 1 To nPts

    _pt = LDText.Split(pts[iPts], ",")

    x2 = Math.Round(_pt[1] * scale)

    y2 = Math.Round(_pt[2] * scale)

    If 1 < iPts Then

      nShp = nShp + 1

      shp[nShp] = Shapes.AddLine(x1, y1, x2, y2)

      Shapes.Move(shp[nShp], xL, yT)

    EndIf

    x1 = x2

    y1 = y2

  EndFor

EndSub



Sub SVG_Animation

  If Text.IsSubText("|" + elements["animation"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_Attr

  attr = LDxml.Attributes

  index = Array.GetAllIndices(attr)

  nAttr = Array.GetItemCount(attr)

  For iAttr = 1 To nAttr

    buf = buf + index[iAttr] + "=" + attr[index[iAttr]] + ";"

  EndFor

EndSub



Sub SVG_Container

  If Text.IsSubText("|" + elements["container"] + "|", "|" + LDxml.NodeName + "|") Then

    buf = buf + "element=" + LDxml.NodeName + ";"

    buf = buf + "level=" + level + ";"

    SVG_Attr()

    nSVG = nSVG + 1

    svg[nSVG] = buf

    If LDxml.NodeName = "svg" Then

      buf = attr["viewBox"]

      p = 1

      len = Text.GetLength(buf)

      Parse_ViewBox()

      If Not[match] Then

        If attr["width"] <> "" Then

          scale = vw / attr["width"]

        Else

          scale = 1

        EndIf

      EndIf

    ElseIf LDxml.NodeName = "g" Then

      SVG_SetAttr()

    EndIf

    buf = ""

    LDxml.FirstChild()

    Stack.PushValue("local", level)

    level = level + 1

    match = "True"

    While match

      SVG_Descriptive()

      If Not[match] Then

        SVG_Graphics()

      EndIf

      If Not[match] Then

        SVG_Container()

      EndIf

      If match Then

        result = LDxml.NextSibling()

        If result = "FAILED" Then

          match = "False"

        EndIf

      EndIf

    EndWhile

    level = Stack.PopValue("local")

    match = "True"

  Else

    match = "False"

  EndIf

EndSub



Sub SVG_Descriptive

  If Text.IsSubText("|" + elements["descriptive"] + "|", "|" + LDxml.NodeName + "|") Then

    buf = buf + "element=" + LDxml.NodeName + ";"

    buf = buf + "level=" + level + ";"

    If LDxml.NodeName = "title" Then

      buf = buf + "title=" + LDxml.NodeInnerText + ";"

    Else

      SVG_Attr()

    EndIf

    nSVG = nSVG + 1

    svg[nSVG] = buf

    buf = ""

    match = "True"

  Else

    match = "False"

  EndIf

EndSub



Sub SVG_FilterPrimitive

  If Text.IsSubText("|" + elements["filterPrimitive"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_Font

  If Text.IsSubText("|" + elements["font"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_Gradient

  If Text.IsSubText("|" + elements["gradient"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_Graphics

  If Text.IsSubText("|" + elements["basicShapes"] + "|", "|" + LDxml.NodeName + "|") Then

    ' Basic Shapes

    buf = buf + "element=" + LDxml.NodeName + ";"

    buf = buf + "level=" + level + ";"

    SVG_Attr()

    nSVG = nSVG + 1

    svg[nSVG] = buf

    buf = ""

    

    If LDxml.NodeName = "circle" Then

      SVG_SetAttr()

      cx = attr["cx"] * scale

      cy = attr["cy"] * scale

      r = attr["r"] * scale

      nShp = nShp + 1

      shp[nShp] = Shapes.AddEllipse(2 * r, 2 * r)

      Shapes.Move(shp[nShp], xL + cx - r, yT + cy - r)

      

    ElseIf LDxml.NodeName = "ellipse" Then

      SVG_SetAttr()

      cx = attr["cx"] * scale

      cy = attr["cy"] * scale

      rx = attr["rx"] * scale

      ry = attr["ry"] * scale

      nShp = nShp + 1

      shp[nShp] = Shapes.AddEllipse(2 * rx, 2 * ry)

      Shapes.Move(shp[nShp], xL + cx - rx, yT + cy - ry)

      

    ElseIf LDxml.NodeName = "line" Then

      SVG_SetAttr()

      x1 = attr["x1"] * scale

      y1 = attr["y1"] * scale

      x2 = attr["x2"] * scale

      y1 = attr["y1"] * scale

      nShp = nShp + 1

      shp[nShp] = Shapes.AddLine(x1, y1, x2, y2)

      

    ElseIf LDxml.NodeName = "polygon" Then

      SVG_SetAttr()

      iPoints = 1

      points[iPoints] = attr["points"]

      pt = ""

      pts = LDText.Split(points[iPoints], " ")

      nPts = Array.GetItemCount(pts)

      Render_Polygon()

      

    ElseIf LDxml.NodeName = "polyline" Then

      SVG_SetAttr()

      iPoints = 1

      points[iPoints] = attr["points"]

      pt = ""

      pts = LDText.Split(points[iPoints], " ")

      nPts = Array.GetItemCount(pts)

      Render_Polyline()

      

    ElseIf LDxml.NodeName = "rect" Then

      SVG_SetAttr()

      width = attr["width"] * scale

      height = attr["height"] * scale

      x = attr["x"] * scale

      y = attr["y"] * scale

      nShp = nShp + 1

      shp[nShp] = Shapes.AddRectangle(width, height)

      Shapes.Move(shp[nShp], xL + x, yT + y)

    EndIf

    match = "True"

  ElseIf Text.IsSubText("|" + elements["graphicsReferencing"] + "|", "|" + LDxml.NodeName + "|") Then

    ' Graphics Referencing

  ElseIf Text.IsSubText("|" + elements["otherGraphics"] + "|", "|" + LDxml.NodeName + "|") Then

    ' other Graphics

    buf = buf + "element=" + LDxml.NodeName + ";"

    buf = buf + "level=" + level + ";"

    SVG_Attr()

    nSVG = nSVG + 1

    svg[nSVG] = buf

    buf = ""

    If LDxml.NodeName = "image" Then

      

    ElseIf LDxml.NodeName = "path" Then

      buf = attr["d"]

      Parse_d()

      buf = ""

    ElseIf LDxml.NodeName = "text" Then

    EndIf

    match = "True"

  Else

    match = "False"

  EndIf

EndSub



Sub SVG_LightSource

  If Text.IsSubText("|" + elements["lightSource"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_PaintServer

  If Text.IsSubText("|" + elements["paintServer"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_SetAttr

  If attr["style"] <> "" Then

    style = LDText.Split(attr["style"], ";")

    nStyle = Array.GetItemCount(style)

    For iStyle = 1 To nStyle

      pair = LDText.Split(style[iStyle], ":")

      If attr[pair[1]] = "" Then

        attr[pair[1]] = pair[2]

      EndIf

    EndFor

  EndIf

  If attr["stroke"] = "" Then

    GraphicsWindow.PenColor = "Transparent"

  Else

    GraphicsWindow.PenColor = attr["stroke"]

  EndIf

  If attr["stroke-width"] <> "" Then

    GraphicsWindow.PenWidth = attr["stroke-width"] * scale

  EndIf

  If attr["fill"] = "none" Then

    GraphicsWindow.BrushColor = "Transparent"

  ElseIf attr["fill"] <> "" Then

    GraphicsWindow.BrushColor = attr["fill"]

  Else

    GraphicsWindow.BrushColor = "Black"

  EndIf

EndSub



Sub SVG_TextContent

  If Text.IsSubText("|" + elements["textContentChild"] + "|", "|" + LDxml.NodeName + "|") Then

  ElseIf Text.IsSubText("|" + elements["textContentOther"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub



Sub SVG_Uncategorized

  If Text.IsSubText("|" + elements["gradient"] + "|", "|" + LDxml.NodeName + "|") Then

  EndIf

EndSub


