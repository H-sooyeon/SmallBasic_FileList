args=0
Sub ipart
  return= math.floor(args[1])
EndSub

Sub round
  return= ldcall.Function("ipart" args[1] + 0.5)
EndSub

Sub fpart' fractional part of x
  return= args[1] - math.floor(args[1])
EndSub

Sub rfpart
  return= 1 -  ldcall.Function("fpart" args[1])
EndSub

Sub dLine'(x0,y0,x1,y1)
  x0=args[1]
  y0=args[2]
  x1=args[3]
  y1=args[4]
  steep = "false
  If math.abs(y1 - y0) > math.abs(x1 - x0) Then
    steep="true
  EndIf
  
  If steep Then
    x0=ldcall.function2("swap" x0, y0)
    y0=r1
    x1=ldcall.function2("swap" x1, y1)
    y1=r1
  EndIf
  If x0 > x1 Then
    x0=ldcall.function2("swap" x0, x1)
    x1=r1
    y0=ldcall.function2("swap" y0, y1)
    y1=r1
  EndIf
  dx = x1 - x0
  dy = y1 - y0
  gradient = dy / dx
  If dx  = 0 Then
    gradient = 1
  EndIf
  
  xend = ldcall.function("round" x0)  ' handle first endpoint
  yend = y0 + gradient * (xend - x0)
  xgap =  ldcall.function("rfpart" x0 + 0.5)
  xpxl1 = xend ' th  will be used in the main loop
  ypxl1 =  ldcall.function("ipart" yend)
  If steep Then
    ldcall.function3("plot" ypxl1,   xpxl1,  ldcall.function("rfpart" yend) * xgap)
    ldcall.function3("plot" ypxl1+1, xpxl1,   ldcall.function("fpart" yend) * xgap)
  Else
    ldcall.function3("plot" xpxl1, ypxl1  ,  ldcall.function("rfpart" yend) * xgap)
    ldcall.function3("plot" xpxl1, ypxl1+1,   ldcall.function("fpart" yend) * xgap)
  EndIf
  intery = yend + gradient ' first y-intersection For the main loop
  
  xend = ldcall.function("round" x1)  ' handle second endpoint
  yend = y1 + gradient * (xend - x1)
  xgap =  ldcall.function("fpart" x1 + 0.5)
  xpxl2 = xend 
  ypxl2 =  ldcall.function("ipart" yend)
  If steep Then
    ldcall.function3("plot" ypxl2  , xpxl2, ldcall.function("rfpart" yend) * xgap)
    ldcall.function3("plot" ypxl2+1, xpxl2,  ldcall.function("fpart" yend) * xgap)
    For x  = xpxl1 + 1 To xpxl2 - 1
      ldcall.function3("plot"  ldcall.function("ipart" intery)  , x,  ldcall.function("rfpart" intery))
      ldcall.function3("plot"  ldcall.function("ipart" intery)+1, x,  ldcall.function("fpart" intery))
      intery = intery + gradient
    EndFor
  Else
    ldcall.function3("plot" xpxl2, ypxl2,   ldcall.function("rfpart" yend) * xgap)
    ldcall.function3("plot" xpxl2, ypxl2+1,  ldcall.function("fpart" yend) * xgap)
    For x  = xpxl1 + 1 To xpxl2 - 1
      ldcall.function3("plot" x,  ldcall.function("ipart" intery),   ldcall.function("rfpart" intery))
      ldcall.function3("plot" x,  ldcall.function("ipart" intery)+1,  ldcall.function("fpart" intery))
      intery = intery + gradient
    EndFor
  EndIf
EndSub

Sub plot
  GraphicsWindow.SetPixel(args[1] args[2] LDColours.HSLtoRGB(0 0 1-args[3]))
EndSub

Sub swap
  return=args[2]
  r1=args[1]
EndSub
GraphicsWindow.Title="AntiAliasing Algorithm for Line Draw
For xx=0 To 90 Step 3
  cc=LDMath.Convert2Cartesian(200 200 150 xx*3)
  LDCall.Function4("dline" 200 200 cc[1] cc[2])
  GraphicsWindow.PenColor="black
  GraphicsWindow.PenWidth=.5
  GraphicsWindow.DrawLine(500 200 300+cc[1] cc[2])
EndFor
