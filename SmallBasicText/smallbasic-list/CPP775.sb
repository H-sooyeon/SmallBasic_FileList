' Stacks
Param = 1
Return = 2
Error = 3

' Errors
Error_None = 1
Error_VectorSizeMismatch = 2

ErrorMsg[Error_VectorSizeMismatch] = "Vectors must be of equal size."

Main()

Sub Main
  While ("True")
    TextWindow.WriteLine("(1) Dot")
    TextWindow.WriteLine("(2) Length")
    TextWindow.WriteLine("(3) Exit")
    TextWindow.WriteLine("")
    TextWindow.Write("Selection: ")
    Main_Selection = TextWindow.ReadNumber()
    TextWindow.WriteLine("")
    
    If (Main_Selection = 3) Then
      Program.End()
    ElseIf (Main_Selection = 1) Then
      TextWindow.Write("a: ")
      Stack.PushValue(Param, TextWindow.Read())
      Stack.PushValue(Param, ",")
      Split()
      Main_VectorA = Stack.PopValue(Return)
      
      TextWindow.Write("b: ")
      Stack.PushValue(Param, TextWindow.Read())
      Stack.PushValue(Param, ",")
      Split()
      Stack.PushValue(Param, Stack.PopValue(Return))
      Stack.PushValue(Param, Main_VectorA)
      Dot()
      
      Main_LastError = Stack.PopValue(Error)
      If (Main_LastError = Error_None) Then
        TextWindow.WriteLine("Dot: " + Stack.PopValue(Return))
      Else
        TextWindow.WriteLine("Error: " + ErrorMsg[Main_LastError])
      EndIf
    ElseIf (Main_Selection = 2) Then
      TextWindow.Write("a: ")
      Stack.PushValue(Param, TextWindow.Read())
      Stack.PushValue(Param, ",")
      Split()
      Stack.PushValue(Param, Stack.PopValue(Return))
      GetVectorLength()
      
      TextWindow.WriteLine("Length: " + Stack.PopValue(Return))
    EndIf
    TextWindow.WriteLine("")
  EndWhile
EndSub

' Param:
' decimal[] vector1, decimal[] vector2
' Returns:
' decimal dot
Sub Dot
  Dot_Vector1 = Stack.PopValue(Param)
  Dot_Vector2 = Stack.PopValue(Param)
  
  Dot_n = Array.GetItemCount(Dot_Vector1)
  If (Dot_n <> Array.GetItemCount(Dot_Vector2)) Then
    Stack.PushValue(Error, Error_VectorSizeMismatch)
  Else
    Dot_Sum = 0
    For Dot_i = 1 To Dot_n
      Dot_Sum = Dot_Sum + Dot_Vector1[Dot_i] * Dot_Vector2[Dot_i]
    Endfor
    Stack.PushValue(Return, Dot_Sum)
    Stack.PushValue(Error, Error_None)
  EndIf
EndSub

' Param:
' decimal[] vector
' Returns:
' decimal length
Sub GetVectorLength
  GetVectorLength_Vector = Stack.PopValue(Param)
  Stack.PushValue(Param, GetVectorLength_Vector)
  Stack.PushValue(Param, GetVectorLength_Vector)
  Dot()
  Stack.PushValue(Return, Math.SquareRoot(Stack.PopValue(Return)))
EndSub

' Param:
' string text, string separator
' Returns:
' string[] textArray
Sub Split
  Split_Separator = Stack.PopValue(Param)
  Split_String = Stack.PopValue(Param)
  Split_Length = Text.GetLength(Split_String)
  Split_Count = 1
  Split_Buffer = ""
  Split_Return = 0
  
  For Split_i = 1 To Split_Length
    If (Text.GetSubText(Split_String, Split_i, Text.GetLength(Split_Separator)) = Split_Separator) Then
      Split_i = Split_i + Text.GetLength(Split_Separator) - 1
      If (Text.GetLength(Split_Buffer) > 0) Then
        Split_Return[Split_Count] = Split_Buffer
        Split_Count = Split_Count + 1
        Split_Buffer = ""
      EndIf
    Else
      Split_Buffer = Text.Append(Split_Buffer, Text.GetSubText(Split_String, Split_i, 1))
    EndIf
  EndFor
  If (Text.GetLength(Split_Buffer) > 0) Then
    Split_Return[Split_Count] = Split_Buffer
  EndIf
  Stack.PushValue(Return, Split_Return)
EndSub
