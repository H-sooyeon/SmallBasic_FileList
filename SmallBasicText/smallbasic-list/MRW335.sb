'Magic cube - method by Daniel E. Thomasson, with permutations code added

start = Clock.ElapsedMilliseconds 'For timing the code
Initialise() 'Set everything up
Permute() 'Do it all

'Some simple results
TextWindow.WriteLine("")
cpu = Math.Round((Clock.ElapsedMilliseconds - start)/1000)
TextWindow.WriteLine(solutions+" solutions found in "+count+" tested permutations ("+cpu+" sec)")

'=================================================================
'SUBROUTINES
'=================================================================

'Recursive routine to calculate permutations
Sub Permute
  If (position = dim+1) Then 'We have set the last position and have a new permutation to test - this will also return from the recursive call and modify lower positions
    count = count+1 'Check we get the right number dim!
    CheckCube() 'Check the current permutation
  Else
    For i = 1 To dim
      If (remaining[i] = 1) Then 'This value hasn't been used yet - so use it    
        result[position] = i 'Set value on current position
        
        remaining[i] = 0 'We have now used this value so it is not avaiable for higher positions
        position = position+1 'Next position
        Stack.PushValue("i",i) 'Store i on stack since it is global scope and the recurise call to Permute will modify it
        
        Permute() 'Recursive call to do higher positions
        
        'On return from the recursive call we have tried all possible permutations with this value in this position and the values in lower positions
        i = Stack.PopValue("i") 'Restore i
        position = position-1 'Previous position is now current
        remaining[i] = 1 'Restore the last used value - it may be used in higher positions as we try them      
      EndIf
    EndFor
  EndIf
EndSub

'=================================================================

Sub CheckCube
  d1 = 0
  d2 = 0
  d3 = 0
  d4 = 0
  For i = 1 To dim
    d1 = d1 + diags[result[i]][i]
    d2 = d2 + diags[result[i]][9-i]
    d3 = d3 + diags[result[i]][8+i]
    d4 = d4 + diags[result[i]][17-i]
  EndFor
  If (d1=260 And d2=260 And d3=260 And d4=260) Then
    solutions = solutions+1
    'Output slows things a little bit (especially file access)
    value = ""
    For i = 1 To dim
      value = value+Text.GetCharacter(aCode+result[i])
    EndFor
    TextWindow.WriteLine(solutions+" : "+count+" : "+value)
' The following line could be harmful and has been automatically commented.
'     'File.WriteLine(Program.Directory+"\MagicCube.txt",solutions,value)
  EndIf
EndSub

'=================================================================

Sub Initialise
  dim = 8 'Must be 8 for the magic cube - the permutations works for other values
  For i = 1 To dim
    remaining[i] = 1 'The remaining possible values in permutation
  EndFor
  
  result = "" 'An array that will hold the permutations as we create them
  position = 1 'A position in the permutation
  count = 0 'Number of permutations tested
  solutions = 0 'Number of magic cube solutions found
  aCode = Text.GetCharacterCode("a")-1 'For output in characters (-1 since we add to it with "a" being 1)
  InitDiags() 'Set up the diags arrays
EndSub

'=================================================================

Sub InitDiags
  diags[1] = "1=42;2=18;3=20;4=44;5=12;6=52;7=50;8=10;9=31;10=7;11=55;12=29;13=61;14=23;15=39;16=63;"
  diags[2] = "1=39;2=63;3=61;4=37;5=5;6=29;7=31;8=7;9=50;10=10;11=26;12=52;13=20;14=58;15=42;16=18;"
  diags[3] = "1=7;2=31;3=29;4=5;5=37;6=61;7=63;8=39;9=18;10=42;11=58;12=20;13=52;14=26;15=10;16=50;"
  diags[4] = "1=10;2=50;3=52;4=12;5=44;6=20;7=18;8=42;9=63;10=39;11=23;12=61;13=29;14=55;15=7;16=31;"
  diags[5] = "1=55;2=15;3=13;4=53;5=21;6=45;7=47;8=23;9=2;10=26;11=42;12=4;13=36;14=10;15=58;16=34;"
  diags[6] = "1=26;2=2;3=4;4=28;5=60;6=36;7=34;8=58;9=15;10=55;11=39;12=13;13=45;14=7;15=23;16=47;"
  diags[7] = "1=58;2=34;3=36;4=60;5=28;6=4;7=2;8=26;9=47;10=23;11=7;12=45;13=13;14=39;15=55;16=15;"
  diags[8] = "1=23;2=47;3=45;4=21;5=53;6=13;7=15;8=55;9=34;10=58;11=10;12=36;13=4;14=42;15=26;16=2;"
EndSub

