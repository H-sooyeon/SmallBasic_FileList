'Airwaves's Awesome Maze (Which is extremely awesome and better than everyone elses! :O )
GraphicsWindow.Title = "Airwaves's Maze!"
GraphicsWindow.BackgroundColor = "Black"
blocksize=50
blockcount=10
BuildMaze() 'Build the Maze
GraphicsWindow.BrushColor = "Red"
GraphicsWindow.PenColor = "Black"
Player = Shapes.AddEllipse(25, 25)
Shapes.Move(Player, ((blockcount*50)-50)+(25/2), (((blockcount-2)*50)-50)+(25/2))
pX = Shapes.GetLeft(Player)
pY = Shapes.GetTop(Player)
input = 0
output = 0
GraphicsWindow.Width = blocksize*blockcount
GraphicsWindow.Height = blocksize*blockcount
GraphicsWindow.KeyDown = KeyDown
direction = ""
keypressed="False"

Sub BuildMaze
  'Make the grid for the spaces that ARE open; this will help with grid size, making it smaller and easier to control
  'grid[x][y]=(0:Empty,1:Player occupies the block)
  grid[blockcount][blockcount-2]=1
  grid[blockcount-1][blockcount-2]=0
  grid[blockcount-2][blockcount-2]=0
  grid[blockcount-3][blockcount-2]=0
  grid[blockcount-4][blockcount-2]=0
  grid[blockcount-5][blockcount-2]=0
  grid[blockcount-6][blockcount-2]=0
  grid[blockcount-7][blockcount-2]=0
  grid[blockcount-7][blockcount-3]=0
  grid[blockcount-7][blockcount-4]=0
  grid[blockcount-7][blockcount-5]=0
  grid[blockcount-7][blockcount-6]=0
  grid[blockcount-7][blockcount-7]=0
  GeneratePhysicalMaze()
EndSub

Sub ConvertBlockToPixels
  output = (input*50)-50
EndSub

Sub ConvertPixelsToBlock
  output = Math.Floor((input/50)+1)
EndSub

Sub GeneratePhysicalMaze
  GraphicsWindow.PenColor = "Gray"
  GraphicsWindow.BrushColor = "White"
  For i = 1 To blockcount
    For j = 1 To blockcount
      If grid[i][j]=0 Or grid[i][j]=1 Then
        input = i
        ConvertBlockToPixels()
        X = output
        input = j
        ConvertBlockToPixels()
        Y = output
        block[i][j]=Shapes.AddRectangle(blocksize,blocksize)
        Shapes.Move(block[i][j], X, Y)
      EndIf
    EndFor
  EndFor
EndSub

Sub KeyDown
  lk = GraphicsWindow.LastKey
  If lk = "Left" Or lk = "Right" Or lk = "Up" Or lk = "Down" Then
      If lk = "Left" Then
        direction = "L"
        GetCollisionDetection()
        If Return Then
          Shapes.Move(Player, pX-10, pY)
        EndIf
      ElseIf lk = "Right" Then
        direction = "R"
        GetCollisionDetection()
        If Return Then
          Shapes.Move(Player, pX+10, pY)
        EndIf
      ElseIf lk = "Up" Then
        direction = "U"
        GetCollisionDetection()
        If Return Then
          Shapes.Move(Player, pX, pY-10)
        EndIf
      ElseIf lk = "Down" Then
        direction = "D"
        GetCollisionDetection()
        If Return Then
          Shapes.Move(Player, pX, pY+10)
        EndIf
      EndIf
      pX = Shapes.GetLeft(Player)
      pY = Shapes.GetTop(Player)
  EndIf
EndSub

Sub GetCollisionDetection
  If direction = "L" Then
    tt = pY
    tL = pX-10
    input = tL
    ConvertPixelsToBlock()
    tL = output
    input = tt
    ConvertPixelsToBlock()
    tt = output
    If grid[tL][tt] = "" Then
      Return = "False"
    Else
      Return = "True"
    EndIf
  ElseIf direction = "U" Then
    tt = pY-10
    tL = pX
    input = tL
    ConvertPixelsToBlock()
    tL = output
    input = tt
    ConvertPixelsToBlock()
    tt = output
    If grid[tL][tt] = "" Then
      Return = "False"
    Else
      Return = "True"
    EndIf
  ElseIf direction = "R" Then
    tt = pY
    tL = pX+30
    input = tL
    ConvertPixelsToBlock()
    tL = output
    input = tt
    ConvertPixelsToBlock()
    tt = output
    If grid[tL][tt] = "" Then
      Return = "False"
    Else
      Return = "True"
    EndIf
  ElseIf direction = "D" Then
    tt = pY+30
    tL = pX
    input = tL
    ConvertPixelsToBlock()
    tL = output
    input = tt
    ConvertPixelsToBlock()
    tt = output
    If grid[tL][tt] = "" Then
      Return = "False"
    Else
      Return = "True"
    EndIf
  EndIf
EndSub
  
