game["grid"]["show grid"] = "False"

game["grid"]["highlight"]["style"] = 2







init_program()





Sub init_program

  'Setup Default Values:

  

  ship["type"][1] = "LT"

  ship["type"][2] = "LC"

  ship["type"][3] = "LS"

  ship["type"][4] = "ST"

  ship["type"][5] = "SC"

  ship["type"][6] = "SS"

  

  ship["stats"]["LT"]["class name"] = "Heavy Weaver"

  ship["stats"]["LT"]["move range"] = 8

  ship["stats"]["LT"]["attack range"] = 2

  ship["stats"]["LT"]["damage per shot"] = 3

  ship["stats"]["LT"]["shots"] = 3

  ship["stats"]["LT"]["hp"] = 12

  

  ship["stats"]["LC"]["class name"] = "Heavy Spiker"

  ship["stats"]["LC"]["move range"] = 4

  ship["stats"]["LC"]["attack range"] = 3

  ship["stats"]["LC"]["damage per shot"] = 5

  ship["stats"]["LC"]["shots"] = 2

  ship["stats"]["LC"]["hp"] = 16

  

  ship["stats"]["LS"]["class name"] = "Heavy Tank"

  ship["stats"]["LS"]["move range"] = 2

  ship["stats"]["LS"]["attack range"] = 4

  ship["stats"]["LS"]["damage per shot"] = 8

  ship["stats"]["LS"]["shots"] = 2

  ship["stats"]["LS"]["hp"] = 20

  

  ship["stats"]["ST"]["class name"] = "Light Weaver"

  ship["stats"]["ST"]["move range"] = 12

  ship["stats"]["ST"]["attack range"] = 2

  ship["stats"]["ST"]["damage per shot"] = 3

  ship["stats"]["ST"]["shots"] = 4

  ship["stats"]["ST"]["hp"] = 4

  

  ship["stats"]["SC"]["class name"] = "Light Spiker"

  ship["stats"]["SC"]["move range"] = 6

  ship["stats"]["SC"]["attack range"] = 2

  ship["stats"]["SC"]["damage per shot"] = 3

  ship["stats"]["SC"]["shots"] = 2

  ship["stats"]["SC"]["hp"] = 8

  

  ship["stats"]["SS"]["class name"] = "Light Tank"

  ship["stats"]["SS"]["move range"] = 3

  ship["stats"]["SS"]["attack range"] = 3

  ship["stats"]["SS"]["damage per shot"] = 4

  ship["stats"]["SS"]["shots"] = 1

  ship["stats"]["SS"]["hp"] = 12

  

  game["ship"]["init"]["LT"] = 1

  game["ship"]["init"]["LC"] = 1

  game["ship"]["init"]["LS"] = 1

  game["ship"]["init"]["ST"] = 2

  game["ship"]["init"]["SC"] = 2

  game["ship"]["init"]["SS"] = 2

  

  game["grid"]["init"]["width"] = 15

  game["grid"]["init"]["height"] = 11

  game["grid"]["init"]["moves"] = 5

  game["grid"]["init"]["attacks"] = 5

  game["grid"]["init"]["terrain"] = 5

  game["grid"]["init"]["multi move"] =0

  home_init()

EndSub







'Init



Sub home_init

  'Buttons

  home_init_button["list"][0] = "Play"

  home_init_button["list"][1] = "Options"

  home_init_button["list"][2] = "Quit"

  

  GraphicsWindow.Width = 1000

  GraphicsWindow.Height = 600

  GraphicsWindow.BackgroundColor = "Black"

  GraphicsWindow.Top = (Desktop.Height/2)-(GraphicsWindow.Height/2)

  GraphicsWindow.Left = (Desktop.Width/2)-(GraphicsWindow.Width/2)

  GraphicsWindow.Show()

  

  home_button_draw()

  Controls.ButtonClicked = home_button_clicked

  GraphicsWindow.MouseDown = null

  GraphicsWindow.MouseUp = null

  GraphicsWindow.MouseMove = null

  

EndSub



Sub home_button_draw

  home_init_button["count"] = Array.GetItemCount(home_init_button["list"])

  home_init_button["height"] = 60

  home_init_button["width"] = 200

  home_init_button["padding"] = 40

  

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.FontName = "Century"

  GraphicsWindow.FontSize = home_init_button["height"]/3

  GraphicsWindow.FontBold = "true"

  GraphicsWindow.FontItalic = "true"

  

  For i = 0 To (home_init_button["count"] - 1)

    home_init_button["button"][i] = Controls.AddButton(home_init_button["list"][i],(GraphicsWindow.Width/2)-(home_init_button["width"]/2),(GraphicsWindow.height/2)-((((home_init_button["height"]+home_init_button["padding"])*home_init_button["count"])-home_init_button["padding"])/2)+((home_init_button["height"]+home_init_button["padding"])*i))

    Controls.SetSize(home_init_button["button"][i],home_init_button["width"],home_init_button["height"])

  EndFor

EndSub



Sub home_button_clicked

  home_init_button["last clicked"] = Controls.LastClickedButton

  

  If home_init_button["last clicked"] = home_init_button["button"][0] Then

    'Play

    home_clear()

    play_init()

    

  ElseIf home_init_button["last clicked"] = home_init_button["button"][1] Then

    'Options

    home_clear()

    option_init()

    

  ElseIf home_init_button["last clicked"] = home_init_button["button"][2] Then

    'Exit

    Program.End()

    

  EndIf

EndSub



Sub home_clear

  'Clear Buttons

  For i = 0 To (home_init_button["count"] - 1)

    Controls.Remove(home_init_button["button"][i])

  EndFor

EndSub



'Ship classes



'Class: Heavy Weaver

'Shape: Large Triangle

'Move Range: 6

'Attack Range: 2

'Damage/shot: 3

'Shots: 4

'HP: 12



'Class: Light Weaver

'Shape: Small Triangle

'Move Range: 9

'Attack Range: 1

'Damage/shot: 1

'Shots: 3

'HP: 4



'Class: Heavy Spiker

'Shape: Large Circle

'Move Range: 4

'Attack Range: 3

'Damage/shot: 5

'Shots: 3

'HP: 16



'Class: Light Spiker

'Shape: Small Circle

'Move Range: 6

'Attack Range: 2

'Damage/shot: 3

'Shots: 2

'HP: 8



'Class: Heavy Tank

'Shape: Large Square

'Move Range: 2

'Attack Range: 4

'Damage/shot: 8

'Shots: 2

'HP: 20



'Class: Light Tank

'Shape: Small Square

'Move Range: 3

'Attack Range: 3

'Damage/shot: 4

'Shots: 1

'HP: 12



'Option Section

Sub option_init

  

  

  column[1] = 10

  column[2] = 150

  column[3] = 340

  column[4] = 480

  column[5] = 670

  column[6] = 810

  

  GraphicsWindow.FontSize = 28

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.FontItalic = "True"

  

  GraphicsWindow.DrawText(column[1],10,"Options")

  

  GraphicsWindow.FontSize = 18

  

  GraphicsWindow.DrawText(column[1],50,"Ships")

  

  GraphicsWindow.FontItalic = "False"

  GraphicsWindow.FontSize = 12

  

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(10,80,"Large Triangle")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[1],100,"Class name:")

  GraphicsWindow.DrawText(column[1],125,"Move Range:")

  GraphicsWindow.DrawText(column[1],150,"Attack Range:")

  GraphicsWindow.DrawText(column[1],175,"Damage per shot:")

  GraphicsWindow.DrawText(column[1],200,"Shots:")

  GraphicsWindow.DrawText(column[1],225,"HP:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["LT"]["class name"] = Controls.AddTextBox(column[2],100)

  options_text_box["LT"]["move range"] = Controls.AddTextBox(column[2],125)

  options_text_box["LT"]["attack range"] = Controls.AddTextBox(column[2],150)

  options_text_box["LT"]["damage per shot"] = Controls.AddTextBox(column[2],175)

  options_text_box["LT"]["shots"] = Controls.AddTextBox(column[2],200)

  options_text_box["LT"]["hp"] = Controls.AddTextBox(column[2],225)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(column[1],250,"Large Circle")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[1],270,"Class name:")

  GraphicsWindow.DrawText(column[1],295,"Move Range:")

  GraphicsWindow.DrawText(column[1],320,"Attack Range:")

  GraphicsWindow.DrawText(column[1],345,"Damage per shot:")

  GraphicsWindow.DrawText(column[1],370,"Shots:")

  GraphicsWindow.DrawText(column[1],395,"HP:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["LC"]["class name"] = Controls.AddTextBox(column[2],270)

  options_text_box["LC"]["move range"] = Controls.AddTextBox(column[2],295)

  options_text_box["LC"]["attack range"] = Controls.AddTextBox(column[2],320)

  options_text_box["LC"]["damage per shot"] = Controls.AddTextBox(column[2],345)

  options_text_box["LC"]["shots"] = Controls.AddTextBox(column[2],370)

  options_text_box["LC"]["hp"] = Controls.AddTextBox(column[2],395)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(column[1],420,"Large Square")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[1],440,"Class name:")

  GraphicsWindow.DrawText(column[1],465,"Move Range:")

  GraphicsWindow.DrawText(column[1],490,"Attack Range:")

  GraphicsWindow.DrawText(column[1],515,"Damage per shot:")

  GraphicsWindow.DrawText(column[1],540,"Shots:")

  GraphicsWindow.DrawText(column[1],565,"HP:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["LS"]["class name"] = Controls.AddTextBox(column[2],440)

  options_text_box["LS"]["move range"] = Controls.AddTextBox(column[2],465)

  options_text_box["LS"]["attack range"] = Controls.AddTextBox(column[2],490)

  options_text_box["LS"]["damage per shot"] = Controls.AddTextBox(column[2],515)

  options_text_box["LS"]["shots"] = Controls.AddTextBox(column[2],540)

  options_text_box["LS"]["hp"] = Controls.AddTextBox(column[2],565)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(column[3],80,"Small Triangle")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[3],100,"Class name:")

  GraphicsWindow.DrawText(column[3],125,"Move Range:")

  GraphicsWindow.DrawText(column[3],150,"Attack Range:")

  GraphicsWindow.DrawText(column[3],175,"Damage per shot:")

  GraphicsWindow.DrawText(column[3],200,"Shots:")

  GraphicsWindow.DrawText(column[3],225,"Shots:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["ST"]["class name"] = Controls.AddTextBox(column[4],100)

  options_text_box["ST"]["move range"] = Controls.AddTextBox(column[4],125)

  options_text_box["ST"]["attack range"] = Controls.AddTextBox(column[4],150)

  options_text_box["ST"]["damage per shot"] = Controls.AddTextBox(column[4],175)

  options_text_box["ST"]["shots"] = Controls.AddTextBox(column[4],200)

  options_text_box["ST"]["hp"] = Controls.AddTextBox(column[4],225)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(column[3],250,"Small Circle")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[3],270,"Class name:")

  GraphicsWindow.DrawText(column[3],295,"Move Range:")

  GraphicsWindow.DrawText(column[3],320,"Attack Range:")

  GraphicsWindow.DrawText(column[3],345,"Damage per shot:")

  GraphicsWindow.DrawText(column[3],370,"Shots:")

  GraphicsWindow.DrawText(column[3],395,"HP:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["SC"]["class name"] = Controls.AddTextBox(column[4],270)

  options_text_box["SC"]["move range"] = Controls.AddTextBox(column[4],295)

  options_text_box["SC"]["attack range"] = Controls.AddTextBox(column[4],320)

  options_text_box["SC"]["damage per shot"] = Controls.AddTextBox(column[4],345)

  options_text_box["SC"]["shots"] = Controls.AddTextBox(column[4],370)

  options_text_box["SC"]["hp"] = Controls.AddTextBox(column[4],395)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(column[3],420,"Small Square")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[3],440,"Class name:")

  GraphicsWindow.DrawText(column[3],465,"Move Range:")

  GraphicsWindow.DrawText(column[3],490,"Attack Range:")

  GraphicsWindow.DrawText(column[3],515,"Damage per shot:")

  GraphicsWindow.DrawText(column[3],540,"Shots:")

  GraphicsWindow.DrawText(column[3],565,"HP:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["SS"]["class name"] = Controls.AddTextBox(column[4],440)

  options_text_box["SS"]["move range"] = Controls.AddTextBox(column[4],465)

  options_text_box["SS"]["attack range"] = Controls.AddTextBox(column[4],490)

  options_text_box["SS"]["damage per shot"] = Controls.AddTextBox(column[4],515)

  options_text_box["SS"]["shots"] = Controls.AddTextBox(column[4],540)

  options_text_box["SS"]["hp"] = Controls.AddTextBox(column[4],565)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontSize = 18

  GraphicsWindow.FontItalic = "True"

  GraphicsWindow.FontBold = "True"

  

  GraphicsWindow.DrawText(column[5],50,"Game Options")

  

  GraphicsWindow.FontItalic = "False"

  GraphicsWindow.FontSize = 14

  GraphicsWindow.DrawText(column[5],80,"Fleet Size")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[5],100,"Large Triangles:")

  GraphicsWindow.DrawText(column[5],130,"Large Cirlces:")

  GraphicsWindow.DrawText(column[5],160,"Large Squares:")

  GraphicsWindow.DrawText(column[5],190,"Small Triangles:")

  GraphicsWindow.DrawText(column[5],220,"Small Circles:")

  GraphicsWindow.DrawText(column[5],250,"Small Squares:")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["Game"]["LT"] = Controls.AddTextBox(column[6],100)

  options_text_box["Game"]["LC"] = Controls.AddTextBox(column[6],130)

  options_text_box["Game"]["LS"] = Controls.AddTextBox(column[6],160)

  options_text_box["Game"]["ST"] = Controls.AddTextBox(column[6],190)

  options_text_box["Game"]["SC"] = Controls.AddTextBox(column[6],220)

  options_text_box["Game"]["SS"] = Controls.AddTextBox(column[6],250)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.DrawText(column[5],280,"Game Options")

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.DrawText(column[5],300,"Grid Width:")

  GraphicsWindow.DrawText(column[5],330,"Grid Height:")

  GraphicsWindow.DrawText(column[5],360,"Moves per Turn:")

  GraphicsWindow.DrawText(column[5],390,"Attacks per Turn:")

  GraphicsWindow.DrawText(column[5],420,"Terrain Level (0-10):")

  GraphicsWindow.DrawText(column[5],450,"Can multi-move (1/0):")

  

  GraphicsWindow.BrushColor = "Black"

  options_text_box["Game"]["width"] = Controls.AddTextBox(column[6],300)

  options_text_box["Game"]["height"] = Controls.AddTextBox(column[6],330)

  options_text_box["Game"]["moves"] = Controls.AddTextBox(column[6],360)

  options_text_box["Game"]["attacks"] = Controls.AddTextBox(column[6],390)

  options_text_box["Game"]["terrain"] = Controls.AddTextBox(column[6],420)

  options_text_box["Game"]["multi move"] = Controls.AddTextBox(column[6],450)

  

  For i = 1 To 6

    

    'Each Ship's Stats:

    Controls.SetTextBoxText(options_text_box[ship["type"][i]]["class name"],ship["stats"][ship["type"][i]]["class name"])

    Controls.SetTextBoxText(options_text_box[ship["type"][i]]["move range"],ship["stats"][ship["type"][i]]["move range"])

    Controls.SetTextBoxText(options_text_box[ship["type"][i]]["attack range"],ship["stats"][ship["type"][i]]["attack range"])

    Controls.SetTextBoxText(options_text_box[ship["type"][i]]["damage per shot"],ship["stats"][ship["type"][i]]["damage per shot"])

    Controls.SetTextBoxText(options_text_box[ship["type"][i]]["shots"],ship["stats"][ship["type"][i]]["shots"])

    Controls.SetTextBoxText(options_text_box[ship["type"][i]]["hp"],ship["stats"][ship["type"][i]]["hp"])

    

    

    Controls.SetTextBoxText(options_text_box["Game"][ship["type"][i]],game["ship"]["init"][ship["type"][i]])

    

  EndFor

  

  Controls.SetTextBoxText(options_text_box["Game"]["width"],game["grid"]["init"]["width"])

  Controls.SetTextBoxText(options_text_box["Game"]["height"],game["grid"]["init"]["height"])

  Controls.SetTextBoxText(options_text_box["Game"]["moves"],game["grid"]["init"]["moves"])

  Controls.SetTextBoxText(options_text_box["Game"]["attacks"],game["grid"]["init"]["attacks"])

  Controls.SetTextBoxText(options_text_box["Game"]["terrain"],game["grid"]["init"]["terrain"])

  Controls.SetTextBoxText(options_text_box["Game"]["multi move"],game["grid"]["init"]["multi move"])

  

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.FontItalic = "False"

  GraphicsWindow.FontSize = 20

  

  options_button["spacing"] = 30

  options_button["left"] = column[5]

  options_button["right"] = column[6] + 160

  options_button["height"] = 35

  options_button["width"] = ((options_button["right"] - options_button["left"])/2) - (options_button["spacing"]/2)

  

  options_button["save"] = Controls.AddButton("Save",options_button["left"],550)

  Controls.SetSize(options_button["save"],options_button["width"], options_button["height"])

  

  options_button["return"] = Controls.AddButton("Return",options_button["right"] - options_button["width"],550)

  Controls.SetSize(options_button["return"],options_button["width"], options_button["height"])

  

  Controls.ButtonClicked = option_event

EndSub





Sub option_event

  last_button_clicked = Controls.LastClickedButton

  

  If last_button_clicked = options_button["save"] Then

    

    option_save()

    GraphicsWindow.ShowMessage("Options Saved!","Options")

    

  ElseIf last_button_clicked = options_button["return"] Then

    

    option_clear()

    home_init()

    

  EndIf

  

  

  

  

EndSub





Sub option_clear

  

  GraphicsWindow.Clear()

  

  Controls.Remove(options_button["save"])

  Controls.Remove(options_button["return"])

  

  For i = 1 To 6

    Controls.Remove(options_text_box[ship["type"][i]]["class name"])

    Controls.Remove(options_text_box[ship["type"][i]]["move range"])

    Controls.Remove(options_text_box[ship["type"][i]]["attack range"])

    Controls.Remove(options_text_box[ship["type"][i]]["damage per shot"])

    Controls.Remove(options_text_box[ship["type"][i]]["shots"])

    Controls.Remove(options_text_box[ship["type"][i]]["hp"])

    

    Controls.Remove(options_text_box["Game"][ship["type"][i]])

  EndFor

  

  Controls.Remove(options_text_box["Game"]["width"])

  Controls.Remove(options_text_box["Game"]["height"])

  Controls.Remove(options_text_box["Game"]["moves"])

  Controls.Remove(options_text_box["Game"]["attacks"])

  Controls.Remove(options_text_box["Game"]["terrain"])

  Controls.Remove(options_text_box["Game"]["multi move"])

EndSub



Sub option_save

  For i = 1 To 6

    

    'Each Ship's Stats:

    

    ship["stats"][ship["type"][i]]["class name"] = Controls.GetTextBoxText(options_text_box[ship["type"][i]]["class name"])

    ship["stats"][ship["type"][i]]["move range"] = Controls.GetTextBoxText(options_text_box[ship["type"][i]]["move range"])

    ship["stats"][ship["type"][i]]["attack range"] = Controls.GetTextBoxText(options_text_box[ship["type"][i]]["attack range"])

    ship["stats"][ship["type"][i]]["damage per shot"] = Controls.GetTextBoxText(options_text_box[ship["type"][i]]["damage per shot"])

    ship["stats"][ship["type"][i]]["shots"] = Controls.GetTextBoxText(options_text_box[ship["type"][i]]["shots"])

    ship["stats"][ship["type"][i]]["hp"] = Controls.GetTextBoxText(options_text_box[ship["type"][i]]["hp"])

    

    game["ship"]["init"][ship["type"][i]] = Controls.GetTextBoxText(options_text_box["Game"][ship["type"][i]])

  EndFor

  

  game["grid"]["init"]["width"] = Controls.GetTextBoxText(options_text_box["Game"]["width"])

  game["grid"]["init"]["height"] = Controls.GetTextBoxText(options_text_box["Game"]["height"])

  game["grid"]["init"]["moves"] = Controls.GetTextBoxText(options_text_box["Game"]["moves"])

  game["grid"]["init"]["attacks"] = Controls.GetTextBoxText(options_text_box["Game"]["attacks"])

  game["grid"]["init"]["terrain"] = Controls.GetTextBoxText(options_text_box["Game"]["terrain"])

  game["grid"]["init"]["multi move"] = Controls.GetTextBoxText(options_text_box["Game"]["multi move"])

EndSub







'Play Section

Sub play_init

  

  game["grid"]["padding"] = 25

  game["grid"]["max height"] = GraphicsWindow.Height - (2*game["grid"]["padding"])

  game["grid"]["max width"] = 800 - (2*game["grid"]["padding"])

  

  game["grid"]["proposed cell size"]["by height"] = game["grid"]["max height"]/game["grid"]["init"]["height"]

  game["grid"]["proposed cell size"]["by width"] = game["grid"]["max width"]/game["grid"]["init"]["width"]

  

  game["grid"]["cell size"] = Math.Min(game["grid"]["proposed cell size"]["by height"],game["grid"]["proposed cell size"]["by width"])

  game["grid"]["width px"] = game["grid"]["cell size"]*game["grid"]["init"]["width"]

  game["grid"]["height px"] = game["grid"]["cell size"]*game["grid"]["init"]["height"]

  

  game["grid"]["center"]["x"] = 400

  game["grid"]["center"]["y"] = GraphicsWindow.Height/2

  

  game["grid"]["left"] = game["grid"]["center"]["x"] - (game["grid"]["width px"]/2)

  game["grid"]["top"] = game["grid"]["center"]["y"] - (game["grid"]["height px"]/2)

  

  

  game["grid"]["columns"] = game["grid"]["init"]["width"]

  game["grid"]["rows"] = game["grid"]["init"]["height"]

  

  game["ship"]["init"]["total per side"] = 0

  For i = 1 To 6

    game["ship"]["init"]["total per side"] = game["ship"]["init"]["total per side"] + game["ship"]["init"][ship["type"][i]]

  EndFor

  

  game["grid"]["base size"] = Math.Ceiling(Math.SquareRoot((2*game["ship"]["init"]["total per side"]) + (1/4))-(1/2))

  

  GraphicsWindow.Title = "Left: " + game["grid"]["left"] + ", Top: " + game["grid"]["top"] + ", Cell size: " + game["grid"]["cell size"] + ", Base size: " + game["grid"]["base size"]

  

  

  'Draw Bases: 

  'Blue - bottom left

  'Purple - top right

  

  GraphicsWindow.BrushColor = "Blue"

  GraphicsWindow.PenColor = "Blue"

  GraphicsWindow.PenWidth = 0

  

  blue_team["base"] = Shapes.AddTriangle(game["grid"]["left"],game["grid"]["top"]+game["grid"]["height px"],game["grid"]["left"],game["grid"]["top"]+game["grid"]["height px"]-(game["grid"]["cell size"]*((1/2)+game["grid"]["base size"])),game["grid"]["left"]+(game["grid"]["cell size"]*((1/2)+game["grid"]["base size"])),game["grid"]["top"]+game["grid"]["height px"])

  Shapes.SetOpacity(blue_team["base"],40)

  

  GraphicsWindow.BrushColor = "Purple"

  GraphicsWindow.PenColor = "Purple"

  GraphicsWindow.PenWidth = 0

  

  purple_team["base"] = Shapes.AddTriangle(game["grid"]["left"]+game["grid"]["width px"],game["grid"]["top"],game["grid"]["left"]+game["grid"]["width px"]-(game["grid"]["cell size"]*((1/2)+game["grid"]["base size"])),game["grid"]["top"],game["grid"]["left"]+game["grid"]["width px"],game["grid"]["top"]+(game["grid"]["cell size"]*((1/2)+game["grid"]["base size"])))

  Shapes.SetOpacity(purple_team["base"],40)

  

  If game["grid"]["highlight"]["style"] = 1 Then

    play_highlight_style_1_draw()

  ElseIf game["grid"]["highlight"]["style"] = 2 Then

    play_highlight_style_2_draw()

  EndIf

  

  If game["grid"]["show grid"] = "True" Then

    play_show_grid()

  EndIf

  

  

  game["grid"]["l size"] = game["grid"]["cell size"]*(80/100)

  game["grid"]["l padding"] = (game["grid"]["cell size"] - game["grid"]["l size"])/2

  

  game["grid"]["s size"] = game["grid"]["cell size"]*(40/100)

  game["grid"]["s padding"] = (game["grid"]["cell size"] - game["grid"]["s size"])/2

  

  

  

  'Team Blue ships

  

  'ships["blue"][ <ID> ][ <type> / <name> / x / y / hp /dps / attack range / move range ]

  

  ship["attribute"][1] = "class name"

  ship["attribute"][2] = "move range"

  ship["attribute"][3] = "attack range"

  ship["attribute"][4] = "damage per shot"

  ship["attribute"][5] = "shots"

  ship["attribute"][6] = "hp"

  

  

  

  

  

  For i = 1 To game["grid"]["columns"]

    For j = 1 To game["grid"]["rows"]

      

      game["grid"][i][j]["blue"] = 0

      game["grid"][i][j]["purple"] = 0

      game["grid"][i][j]["terrain"] = 0

      

    EndFor

  EndFor

  ship["color"][1] = "blue"

  ship["color"][2] = "purple"

  

  For color = 1 To 2

    

    If color = 1 Then

      GraphicsWindow.BrushColor = "Blue"

      GraphicsWindow.PenColor = "White"

      GraphicsWindow.PenWidth = 2

      

      current_id = 1

      current_x = 1

      current_y = game["grid"]["rows"]

      current_y_max = game["grid"]["rows"]

      current_y_min = game["grid"]["rows"]

      current_x_min = 1

    Else

      GraphicsWindow.BrushColor = "Purple"

      GraphicsWindow.PenColor = "White"

      GraphicsWindow.PenWidth = 2

      

      current_id = 1

      current_x = game["grid"]["columns"]

      current_y = 1

      current_x_max = game["grid"]["columns"]

      current_y_min = 1

      current_y_max = 1

      

    EndIf

    

    

    For i = 1 To 6 'Ship types

      If game["ship"]["init"][ship["type"][i]] > 0 Then

        For j = 1 To game["ship"]["init"][ship["type"][i]]

          If ship["type"][i] = "LT" Then

            ship[ship["color"][color]][current_id]["padding"] = game["grid"]["l padding"]

            

            x[1] = game["grid"]["left"]+((current_x-(1/2))*game["grid"]["cell size"])

            y[1] = game["grid"]["top"]+((current_y-1)*game["grid"]["cell size"])+game["grid"]["l padding"]

            x[2] = game["grid"]["left"]+((current_x-1)*game["grid"]["cell size"])+game["grid"]["l padding"]

            y[2] = game["grid"]["top"]+(current_y*game["grid"]["cell size"])-game["grid"]["l padding"]

            x[3] = game["grid"]["left"]+(current_x*game["grid"]["cell size"])-game["grid"]["l padding"]

            y[3] = game["grid"]["top"]+(current_y*game["grid"]["cell size"])-game["grid"]["l padding"]

            

            ship[ship["color"][color]][current_id]["padding"]["x"] = game["grid"]["l padding"]-x[2]

            ship[ship["color"][color]][current_id]["padding"]["y"] = game["grid"]["l padding"]-y[1]

            

            ship[ship["color"][color]][current_id]["shape"] = Shapes.AddTriangle(x[1],y[1],x[2],y[2],x[3],y[3])

          ElseIf ship["type"][i] = "ST" Then

            x[1] = game["grid"]["left"]+((current_x-(1/2))*game["grid"]["cell size"])

            y[1] = game["grid"]["top"]+((current_y-1)*game["grid"]["cell size"])+game["grid"]["s padding"]

            x[2] = game["grid"]["left"]+((current_x-1)*game["grid"]["cell size"])+game["grid"]["s padding"]

            y[2] = game["grid"]["top"]+(current_y*game["grid"]["cell size"])-game["grid"]["s padding"]

            x[3] = game["grid"]["left"]+(current_x*game["grid"]["cell size"])-game["grid"]["s padding"]

            y[3] = game["grid"]["top"]+(current_y*game["grid"]["cell size"])-game["grid"]["s padding"]

            

            ship[ship["color"][color]][current_id]["padding"]["x"] = game["grid"]["s padding"]-x[2]

            ship[ship["color"][color]][current_id]["padding"]["y"] = game["grid"]["s padding"]-y[1]

            

            ship[ship["color"][color]][current_id]["shape"] = Shapes.AddTriangle(x[1],y[1],x[2],y[2],x[3],y[3])

          ElseIf ship["type"][i] = "LC" Then

            ship[ship["color"][color]][current_id]["shape"] =  Shapes.AddEllipse(game["grid"]["l size"],game["grid"]["l size"])

            ship[ship["color"][color]][current_id]["padding"]["x"] = game["grid"]["l padding"]

            ship[ship["color"][color]][current_id]["padding"]["y"] = game["grid"]["l padding"]

            x[1] = game["grid"]["left"]+((current_x-1)*game["grid"]["cell size"])+game["grid"]["l padding"]

            y[1] = game["grid"]["top"]+((current_y-1)*game["grid"]["cell size"])+game["grid"]["l padding"]

            Shapes.Move(ship[ship["color"][color]][current_id]["shape"],x[1],y[1])

          ElseIf ship["type"][i] = "SC" Then

            ship[ship["color"][color]][current_id]["shape"] =  Shapes.AddEllipse(game["grid"]["s size"],game["grid"]["s size"])

            ship[ship["color"][color]][current_id]["padding"]["x"] = game["grid"]["s padding"]

            ship[ship["color"][color]][current_id]["padding"]["y"] = game["grid"]["s padding"]

            x[1] = game["grid"]["left"]+((current_x-1)*game["grid"]["cell size"])+game["grid"]["s padding"]

            y[1] = game["grid"]["top"]+((current_y-1)*game["grid"]["cell size"])+game["grid"]["s padding"]

            Shapes.Move(ship[ship["color"][color]][current_id]["shape"],x[1],y[1])

          ElseIf ship["type"][i] = "LS" Then

            ship[ship["color"][color]][current_id]["shape"] =  Shapes.AddRectangle(game["grid"]["l size"],game["grid"]["l size"])

            ship[ship["color"][color]][current_id]["padding"]["x"] = game["grid"]["l padding"]

            ship[ship["color"][color]][current_id]["padding"]["y"] = game["grid"]["l padding"]

            x[1] = game["grid"]["left"]+((current_x-1)*game["grid"]["cell size"])+game["grid"]["l padding"]

            y[1] = game["grid"]["top"]+((current_y-1)*game["grid"]["cell size"])+game["grid"]["l padding"]

            Shapes.Move(ship[ship["color"][color]][current_id]["shape"],x[1],y[1])

          ElseIf ship["type"][i] = "SS" Then

            ship[ship["color"][color]][current_id]["shape"] =  Shapes.AddRectangle(game["grid"]["s size"],game["grid"]["s size"])

            ship[ship["color"][color]][current_id]["padding"]["x"] = game["grid"]["s padding"]

            ship[ship["color"][color]][current_id]["padding"]["y"] = game["grid"]["s padding"]

            x[1] = game["grid"]["left"]+((current_x-1)*game["grid"]["cell size"])+game["grid"]["s padding"]

            y[1] = game["grid"]["top"]+((current_y-1)*game["grid"]["cell size"])+game["grid"]["s padding"]

            Shapes.Move(ship[ship["color"][color]][current_id]["shape"],x[1],y[1])

          EndIf

          

          For k = 1 to 6 'Attributes

            ship[ship["color"][color]][current_id][ship["attribute"][k]] = ship["stats"][ship["type"][i]][ship["attribute"][k]]

          EndFor

          

          game["grid"][current_x][current_y][ship["color"][color]] = current_id

          ship[ship["color"][color]][current_id]["x"] = current_x

          ship[ship["color"][color]][current_id]["y"] = current_y

          

          ship[ship["color"][color]][current_id]["permission"]["move"] = 1

          ship[ship["color"][color]][current_id]["permission"]["attack"] = 1

          

          ship[ship["color"][color]][current_id]["is dead"] = 0

          ship[ship["color"][color]][current_id]["type"] = ship["type"][i]

          

          If color = 1 Then

            current_id = current_id + 1

            If current_y = current_y_max Then

              current_x = current_x_min

              current_y_min = current_y_min - 1

              current_y = current_y_min

            Else

              current_x = current_x + 1

              current_y = current_y + 1

            EndIf

          Else

            current_id = current_id + 1

            If current_y = current_y_min Then

              current_x = current_x_max

              current_y_max = current_y_max + 1

              current_y = current_y_max

            Else

              current_x = current_x - 1

              current_y = current_y - 1

            EndIf

          EndIf

          

          

        EndFor

      EndIf

    EndFor

  EndFor

  

  'Side Bar:

  

  game["side bar"]["padding"] = 25

  game["side bar"]["left"] = 800

  game["side bar"]["width"] = GraphicsWindow.Width - game["side bar"]["left"]

  game["side bar"]["height"] = GraphicsWindow.Height - (300)

  game["side bar"]["top"] = (GraphicsWindow.Height/2)-(game["side bar"]["height"]/2)

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.PenWidth = 0

  game["side bar"]["shape shadow"] = Shapes.AddRectangle(game["side bar"]["width"] - game["side bar"]["padding"] ,game["side bar"]["height"]-game["side bar"]["padding"])

  Shapes.Move(game["side bar"]["shape shadow"],game["side bar"]["left"]+(game["side bar"]["padding"]/2)-(game["side bar"]["padding"]/2),game["side bar"]["top"]+(game["side bar"]["padding"]/2)-(game["side bar"]["padding"]/2))

  Shapes.SetOpacity(game["side bar"]["shape shadow"],40)

  

  game["side bar"]["shape"] = Shapes.AddRectangle(game["side bar"]["width"] - game["side bar"]["padding"] ,game["side bar"]["height"]-game["side bar"]["padding"])

  Shapes.Move(game["side bar"]["shape"],game["side bar"]["left"]+(game["side bar"]["padding"]/2),game["side bar"]["top"]+(game["side bar"]["padding"])/2)

  

  player[1] = "Blue"

  player[2] = "Purple"

  

  game["turn player"] = 1

  game["attacks remaining"] = game["grid"]["init"]["attacks"]

  game["moves remaining"] = game["grid"]["init"]["moves"]

  

  

  GraphicsWindow.FontBold = "True"

  GraphicsWindow.FontItalic = "False"

  GraphicsWindow.FontSize = 20

  GraphicsWindow.BrushColor = "Blue"

  game["side bar"]["text"]["turn"]["Blue"] = Shapes.AddText("Blue's Turn")

  

  GraphicsWindow.BrushColor = "Purple"

  game["side bar"]["text"]["turn"]["Purple"] = Shapes.AddText("Purple's Turn")

  

  Shapes.Move(game["side bar"]["text"]["turn"]["Blue"], game["side bar"]["left"] + game["side bar"]["padding"],game["side bar"]["top"]+game["side bar"]["padding"])

  Shapes.Move(game["side bar"]["text"]["turn"]["Purple"], game["side bar"]["left"] + game["side bar"]["padding"],game["side bar"]["top"]+game["side bar"]["padding"])

  

  Shapes.HideShape(game["side bar"]["text"]["turn"]["Blue"])

  Shapes.HideShape(game["side bar"]["text"]["turn"]["Purple"])

  

  Shapes.ShowShape(game["side bar"]["text"]["turn"][player[game["turn player"]]])

  

  GraphicsWindow.FontBold = "False"

  GraphicsWindow.FontItalic = "False"

  GraphicsWindow.FontSize = 16

  GraphicsWindow.BrushColor = "Black"

  game["side bar"]["text"]["moves"] = Shapes.AddText("Moves Remaining: " + game["moves remaining"])

  game["side bar"]["text"]["attacks"] = Shapes.AddText("Attacks Remaining: " + game["attacks remaining"])

  

  Shapes.Move(game["side bar"]["text"]["moves"], game["side bar"]["left"] + game["side bar"]["padding"], game["side bar"]["top"]+game["side bar"]["padding"] + 50)

  Shapes.Move(game["side bar"]["text"]["attacks"], game["side bar"]["left"] + game["side bar"]["padding"], game["side bar"]["top"]+game["side bar"]["padding"] + 80)

  

  game["side bar"]["button"]["end turn"] = Controls.AddButton("End Turn",game["side bar"]["left"] + game["side bar"]["padding"], game["side bar"]["top"]+game["side bar"]["height"]-(game["side bar"]["padding"]+60))

  Controls.SetSize(game["side bar"]["button"]["end turn"],150,60)

  

  game["side bar"]["button"]["resign"] = Controls.AddButton("Resign",game["side bar"]["left"] + game["side bar"]["padding"], game["side bar"]["top"]+game["side bar"]["height"]-(2*game["side bar"]["padding"]+100))

  Controls.SetSize(game["side bar"]["button"]["resign"],150,40)

  

  'Terrain:

  GraphicsWindow.BrushColor = "Brown"

  

  If game["grid"]["init"]["terrain"] <> 0 Then

    game["grid"]["init"]["terrain scaling"] = (1/30)

    game["grid"]["init"]["terrain tries"] = Math.Floor(game["grid"]["init"]["terrain scaling"]*game["grid"]["init"]["terrain"]*game["grid"]["rows"]*game["grid"]["columns"])

    For i = 1 To game["grid"]["init"]["terrain tries"]

      x["terrain"] = Math.GetRandomNumber(game["grid"]["columns"])

      y["terrain"] = Math.GetRandomNumber(game["grid"]["rows"])

      

      If y["terrain"] < (game["grid"]["rows"]-game["grid"]["base size"]+x["terrain"]-1) And x["terrain"] < (game["grid"]["columns"]-game["grid"]["base size"]+y["terrain"]-1) Then

        If game["grid"][x["terrain"]][y["terrain"]]["terrain"] = 0 Then

          'Types of terrain

          

          game["grid"][x["terrain"]][y["terrain"]]["terrain"] = 1

          x[1] = game["grid"]["left"]+(x["terrain"]-1)*game["grid"]["cell size"]

          y[1] = game["grid"]["top"]+(y["terrain"]-1)*game["grid"]["cell size"]

          GraphicsWindow.FillRectangle(x[1],y[1],game["grid"]["cell size"],game["grid"]["cell size"])

          

          

          game["grid"][game["grid"]["columns"]-x["terrain"]+1][game["grid"]["rows"]-y["terrain"]+1]["terrain"] = 1

          x[2] = game["grid"]["left"]+(game["grid"]["columns"]-x["terrain"])*game["grid"]["cell size"]

          y[2] = game["grid"]["top"]+(game["grid"]["rows"]-y["terrain"])*game["grid"]["cell size"]

          GraphicsWindow.FillRectangle(x[2],y[2],game["grid"]["cell size"],game["grid"]["cell size"])

          

        EndIf

      EndIf

    EndFor

  EndIf

  

  

  

  

  'Mini Menu

  

  

  game["mini menu"]["padding"] = 5

  game["mini menu"]["text size"] = 18

  game["mini menu"]["width"] = 220

  game["mini menu"]["height"] = (12*game["mini menu"]["text size"])+(13*game["mini menu"]["padding"])

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.PenColor = "Gray"

  GraphicsWindow.PenWidth = 2

  

  game["mini menu"]["shape"]["background"] = Shapes.AddRectangle(game["mini menu"]["width"],game["mini menu"]["height"])

  

  GraphicsWindow.BrushColor = "Black"

  game["mini menu"]["shape"]["highlight"] = Shapes.AddRectangle(game["mini menu"]["width"],game["mini menu"]["text size"]+2)

  Shapes.SetOpacity(game["mini menu"]["shape"]["highlight"],20)

  

  Shapes.HideShape(game["mini menu"]["shape"]["background"])

  Shapes.HideShape(game["mini menu"]["shape"]["highlight"])

  

  

  GraphicsWindow.FontSize = game["mini menu"]["text size"]

  GraphicsWindow.BrushColor = "Black"

  

  GraphicsWindow.FontBold = "True"

  game["mini menu"]["text"]["class name"] = Shapes.AddText("Name")

  GraphicsWindow.FontBold = "False"

  game["mini menu"]["text"]["hp"] = Shapes.AddText("HP: ")

  game["mini menu"]["text"]["move range"] = Shapes.AddText("Move Range: ")

  game["mini menu"]["text"]["attack range"] = Shapes.AddText("Attack Range: ")

  game["mini menu"]["text"]["damage per shot"] = Shapes.AddText("Damage per Shot: ")

  game["mini menu"]["text"]["shots"] = Shapes.AddText("Shots: ")

  game["mini menu"]["text"]["can attack"] = Shapes.AddText("Can Attack: ")

  game["mini menu"]["text"]["can move"] = Shapes.AddText("Can Move: ")

  

  GraphicsWindow.FontBold = "True"

  game["mini menu"]["text"]["options"] = Shapes.AddText("Options:")

  GraphicsWindow.FontBold = "False"

  game["mini menu"]["text"]["attack"] = Shapes.AddText("Attack")

  game["mini menu"]["text"]["move"] = Shapes.AddText("Move")

  game["mini menu"]["text"]["cancel"] = Shapes.AddText("Cancel")

  

  

  

  Shapes.HideShape(game["mini menu"]["text"]["class name"])

  Shapes.HideShape(game["mini menu"]["text"]["hp"])

  Shapes.HideShape(game["mini menu"]["text"]["move range"])

  Shapes.HideShape(game["mini menu"]["text"]["attack range"])

  Shapes.HideShape(game["mini menu"]["text"]["damage per shot"])

  Shapes.HideShape(game["mini menu"]["text"]["shots"])

  Shapes.HideShape(game["mini menu"]["text"]["can attack"])

  Shapes.HideShape(game["mini menu"]["text"]["can move"])

  

  Shapes.HideShape(game["mini menu"]["text"]["options"])

  Shapes.HideShape(game["mini menu"]["text"]["attack"])

  Shapes.HideShape(game["mini menu"]["text"]["move"])

  Shapes.HideShape(game["mini menu"]["text"]["cancel"])

  

  game["mini menu"]["display"] = "False"

  game["mini menu"]["top"] = 0

  game["mini menu"]["left"] = 0

  game["mini menu"]["current option"] = 0

  

  'Events

  play_assign_event_handler()

EndSub



Sub play_assign_event_handler

  GraphicsWindow.MouseMove = play_mouse_move

  GraphicsWindow.MouseUp = play_mouse_up

  GraphicsWindow.MouseDown = play_mouse_down

  Controls.ButtonClicked = play_button_clicked

  play_mouse_move()

EndSub





Sub play_show_grid

  GraphicsWindow.PenColor = "White"

  GraphicsWindow.PenWidth = "2"

  

  For i = 0 To game["grid"]["rows"]

    GraphicsWindow.DrawLine(game["grid"]["left"],game["grid"]["top"]+(i*game["grid"]["cell size"]),game["grid"]["left"]+game["grid"]["width px"],game["grid"]["top"]+(i*game["grid"]["cell size"]))

  EndFor

  For i = 0 To game["grid"]["columns"]

    GraphicsWindow.DrawLine(game["grid"]["left"]+(i*game["grid"]["cell size"]),game["grid"]["top"],game["grid"]["left"]+(i*game["grid"]["cell size"]),game["grid"]["top"]+game["grid"]["height px"])

  EndFor

EndSub







Sub play_button_clicked

  

  'Clear Sub-menus

  play_assign_event_handler()

  play_mini_menu_hide()

  Shapes.HideShape(game["move"]["highlight"]["shape"])

  Shapes.HideShape(game["move"]["area"]["shape"])

  Shapes.HideShape(game["attack"]["highlight"]["shape"])

  Shapes.HideShape(game["attack"]["area"]["shape"])

  

  

  last_button_clicked = Controls.LastClickedButton

  If last_button_clicked = game["side bar"]["button"]["resign"] Then

    

    GraphicsWindow.Clear()

    home_init()

    

  ElseIf last_button_clicked = game["side bar"]["button"]["end turn"] Then

    If game["turn player"] <> 0 Then

      play_new_turn()

    EndIf

    

  EndIf

EndSub



Sub play_new_turn

  

  Shapes.HideShape(game["side bar"]["text"]["turn"][player[game["turn player"]]])

  game["turn player"] = Math.Remainder(game["turn player"],2)+1

  Shapes.ShowShape(game["side bar"]["text"]["turn"][player[game["turn player"]]])

  

  For current_id = 1 To game["ship"]["init"]["total per side"]

    ship[ship["color"][game["turn player"]]][current_id]["shots"] = ship["stats"][ship[ship["color"][game["turn player"]]][current_id]["type"]]["shots"]

    ship[ship["color"][game["turn player"]]][current_id]["permission"]["move"] = 1

    ship[ship["color"][game["turn player"]]][current_id]["permission"]["attack"] = 1

  EndFor

  

  game["moves remaining"] = game["grid"]["init"]["moves"]

  game["attacks remaining"] = game["grid"]["init"]["attacks"]

  

  Shapes.SetText(game["side bar"]["text"]["moves"],"Moves Remaining: " + game["moves remaining"])

  Shapes.SetText(game["side bar"]["text"]["attacks"],"Attacks Remaining: " + game["attacks remaining"])

EndSub



Sub play_mouse_move

  

  play_update_mouse_pos()

  

  If current_cell["x"] >= 1 And current_cell["x"] <= game["grid"]["columns"] And current_cell["y"] >= 1 And current_cell["y"] <= game["grid"]["rows"] Then

    'Mouse.HideCursor()

    If game["grid"]["highlight"]["style"] = 1 Then

      play_highlight_style_1_show_and_update()

    ElseIf game["grid"]["highlight"]["style"] = 2 Then

      play_highlight_style_2_show_and_update()

    EndIf

    

  Else

    'Mouse.ShowCursor()

    If game["grid"]["highlight"]["style"] = 1 Then

      play_highlight_style_1_hide()

    ElseIf game["grid"]["highlight"]["style"] = 2 Then

      play_highlight_style_2_hide()

    EndIf

    

  EndIf

  

EndSub



Sub play_highlight_style_1_draw

  

  'Highlighting

  GraphicsWindow.PenColor = "White"

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.PenWidth = 2

  game["grid"]["highlight"]["row"][1] = Shapes.AddLine(0,0,game["grid"]["cell size"]*3,0)

  game["grid"]["highlight"]["row"][2] = Shapes.AddLine(0,0,game["grid"]["cell size"]*4,0)

  game["grid"]["highlight"]["row"][3] = Shapes.AddLine(0,0,game["grid"]["cell size"]*3,0)

  

  game["grid"]["highlight"]["column"][1] = Shapes.AddLine(0,0,0,game["grid"]["cell size"]*3)

  game["grid"]["highlight"]["column"][2] = Shapes.AddLine(0,0,0,game["grid"]["cell size"]*4)

  game["grid"]["highlight"]["column"][3] = Shapes.AddLine(0,0,0,game["grid"]["cell size"]*3)

  

  play_highlight_style_1_hide()

  

  'Blackout around grid

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.PenColor = "Black"

  Shapes.AddRectangle(GraphicsWindow.Width, game["grid"]["top"])

  Shapes.AddRectangle(game["grid"]["left"],GraphicsWindow.Height)

  blackout_bottom = Shapes.AddRectangle(GraphicsWindow.Width, game["grid"]["top"])

  Shapes.Move(blackout_bottom,0, game["grid"]["top"]+game["grid"]["height px"])

  blackout_right = Shapes.AddRectangle(GraphicsWindow.Width-(game["grid"]["padding"]+game["grid"]["width px"]),GraphicsWindow.Height)

  Shapes.Move(blackout_right,game["grid"]["width px"] + game["grid"]["padding"],0)

  

EndSub



Sub play_highlight_style_1_show_and_update

  

  Shapes.ShowShape(game["grid"]["highlight"]["row"][1])

  Shapes.ShowShape(game["grid"]["highlight"]["row"][2])

  Shapes.ShowShape(game["grid"]["highlight"]["row"][3])

  

  Shapes.ShowShape(game["grid"]["highlight"]["column"][1])

  Shapes.ShowShape(game["grid"]["highlight"]["column"][2])

  Shapes.ShowShape(game["grid"]["highlight"]["column"][3])

  

  Shapes.Move(game["grid"]["highlight"]["row"][1],game["grid"]["left"]+((current_cell["x"]-2)*game["grid"]["cell size"])+current_cell["mod x"],game["grid"]["top"]+((current_cell["y"]-(3/2))*game["grid"]["cell size"]))

  Shapes.Move(game["grid"]["highlight"]["row"][2],game["grid"]["left"]+((current_cell["x"]-(5/2))*game["grid"]["cell size"])+current_cell["mod x"],game["grid"]["top"]+((current_cell["y"]-(1/2))*game["grid"]["cell size"]))

  Shapes.Move(game["grid"]["highlight"]["row"][3],game["grid"]["left"]+((current_cell["x"]-2)*game["grid"]["cell size"])+current_cell["mod x"],game["grid"]["top"]+((current_cell["y"]+(1/2))*game["grid"]["cell size"]))

  

  Shapes.Move(game["grid"]["highlight"]["column"][1],game["grid"]["left"]+((current_cell["x"]-(3/2))*game["grid"]["cell size"]),game["grid"]["top"]+((current_cell["y"]-2)*game["grid"]["cell size"])+current_cell["mod y"])

  Shapes.Move(game["grid"]["highlight"]["column"][2],game["grid"]["left"]+((current_cell["x"]-(1/2))*game["grid"]["cell size"]),game["grid"]["top"]+((current_cell["y"]-(5/2))*game["grid"]["cell size"])+current_cell["mod y"])

  Shapes.Move(game["grid"]["highlight"]["column"][3],game["grid"]["left"]+((current_cell["x"]+(1/2))*game["grid"]["cell size"]),game["grid"]["top"]+((current_cell["y"]-2)*game["grid"]["cell size"])+current_cell["mod y"])

  

EndSub



Sub play_highlight_style_1_hide

  

  Shapes.HideShape(game["grid"]["highlight"]["row"][1])

  Shapes.HideShape(game["grid"]["highlight"]["row"][2])

  Shapes.HideShape(game["grid"]["highlight"]["row"][3])

  

  Shapes.HideShape(game["grid"]["highlight"]["column"][1])

  Shapes.HideShape(game["grid"]["highlight"]["column"][2])

  Shapes.HideShape(game["grid"]["highlight"]["column"][3])

  

EndSub



Sub play_highlight_style_2_draw

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.PenWidth = 0

  

  game["grid"]["highlight"]["square"] = Shapes.AddRectangle(game["grid"]["cell size"],game["grid"]["cell size"])

  Shapes.SetOpacity(game["grid"]["highlight"]["square"],50)

  

  play_highlight_style_2_hide()

  

EndSub



Sub play_highlight_style_2_show_and_update

  

  Shapes.ShowShape(game["grid"]["highlight"]["square"])

  Shapes.Move(game["grid"]["highlight"]["square"],game["grid"]["left"]+((current_cell["x"]-1)*game["grid"]["cell size"]),game["grid"]["top"]+((current_cell["y"]-1)*game["grid"]["cell size"]))

  

EndSub





Sub play_highlight_style_2_hide

  Shapes.HideShape(game["grid"]["highlight"]["square"])

EndSub





Sub play_update_mouse_pos

  

  m["x"] = GraphicsWindow.MouseX

  m["y"] = GraphicsWindow.MouseY

  

  current_cell["x"] = Math.Floor((m["x"] - game["grid"]["left"])/game["grid"]["cell size"])+1

  current_cell["y"] = Math.Floor((m["y"] - game["grid"]["top"])/game["grid"]["cell size"])+1

  

  current_cell["mod x"] = Math.Remainder(m["x"] - game["grid"]["left"],game["grid"]["cell size"])

  current_cell["mod y"] = Math.Remainder(m["y"] - game["grid"]["top"],game["grid"]["cell size"])

  

  current_cell["mod x"] = 0

  current_cell["mod y"] = 0

  

EndSub





Sub play_mouse_up

  

  

  

  

  

EndSub



Sub play_mouse_down

  

  play_update_mouse_pos()

  If current_cell["x"] >= 1 And current_cell["x"] <= game["grid"]["columns"] And current_cell["y"] >= 1 And current_cell["y"] <= game["grid"]["rows"] Then

    If game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][1]] <> 0 Or game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][2]] <> 0 Then

      If game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][1]] <> 0 Then

        color = 1

      Else

        color = 2

      EndIf

      

      'Decide where Top, Left goes

      If m["x"]>(GraphicsWindow.Width-game["mini menu"]["width"]) Then

        game["mini menu"]["left"] = m["x"] - game["mini menu"]["width"] 

      Else

        game["mini menu"]["left"] = m["x"]

      EndIf

      

      If m["y"]>(GraphicsWindow.Height-game["mini menu"]["height"]) Then

        game["mini menu"]["top"] = m["y"] - game["mini menu"]["height"]

      Else

        game["mini menu"]["top"] = m["y"]

      EndIf

      

      'Draw BG

      Shapes.Move(game["mini menu"]["shape"]["background"],game["mini menu"]["left"],game["mini menu"]["top"])

      Shapes.ShowShape(game["mini menu"]["shape"]["background"])

      

      Shapes.SetText(game["mini menu"]["text"]["class name"],ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["class name"]+" ("+ship["color"][color]+")")

      Shapes.SetText(game["mini menu"]["text"]["hp"],"HP: "+ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["hp"])

      Shapes.SetText(game["mini menu"]["text"]["move range"],"Move Range: "+ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["move range"])

      Shapes.SetText(game["mini menu"]["text"]["attack range"],"Attack Range: "+ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["attack range"])

      Shapes.SetText(game["mini menu"]["text"]["damage per shot"],"Damage per Shot: "+ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["damage per shot"])

      Shapes.SetText(game["mini menu"]["text"]["shots"],"Shots: "+ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["shots"])

      If ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["permission"]["move"] = 1 Then

        Shapes.SetText(game["mini menu"]["text"]["can move"],"Can Move: Yes")

      Else

        Shapes.SetText(game["mini menu"]["text"]["can move"],"Can Move: No")

      EndIf

      If ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["permission"]["attack"] = 1 Then

        Shapes.SetText(game["mini menu"]["text"]["can attack"],"Can Attack: Yes")

      Else

        Shapes.SetText(game["mini menu"]["text"]["can attack"],"Can Attack: No")

      EndIf

      

      Shapes.Move(game["mini menu"]["text"]["class name"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+game["mini menu"]["padding"])

      Shapes.Move(game["mini menu"]["text"]["hp"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(2*game["mini menu"]["padding"])+(game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["move range"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(3*game["mini menu"]["padding"])+(2*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["attack range"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(4*game["mini menu"]["padding"])+(3*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["damage per shot"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(5*game["mini menu"]["padding"])+(4*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["shots"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(6*game["mini menu"]["padding"])+(5*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["can move"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(7*game["mini menu"]["padding"])+(6*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["can attack"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(8*game["mini menu"]["padding"])+(7*game["mini menu"]["text size"]))

      

      Shapes.Move(game["mini menu"]["text"]["options"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(9*game["mini menu"]["padding"])+(8*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["move"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(10*game["mini menu"]["padding"])+(9*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["attack"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(11*game["mini menu"]["padding"])+(10*game["mini menu"]["text size"]))

      Shapes.Move(game["mini menu"]["text"]["cancel"],game["mini menu"]["left"]+game["mini menu"]["padding"],game["mini menu"]["top"]+(12*game["mini menu"]["padding"])+(11*game["mini menu"]["text size"]))

      

      Shapes.ShowShape(game["mini menu"]["text"]["class name"])

      Shapes.ShowShape(game["mini menu"]["text"]["hp"])

      Shapes.ShowShape(game["mini menu"]["text"]["move range"])

      Shapes.ShowShape(game["mini menu"]["text"]["attack range"])

      Shapes.ShowShape(game["mini menu"]["text"]["damage per shot"])

      Shapes.ShowShape(game["mini menu"]["text"]["shots"])

      Shapes.ShowShape(game["mini menu"]["text"]["can move"])

      Shapes.ShowShape(game["mini menu"]["text"]["can attack"])

      Shapes.ShowShape(game["mini menu"]["text"]["options"])

      Shapes.ShowShape(game["mini menu"]["text"]["move"])

      Shapes.ShowShape(game["mini menu"]["text"]["attack"])

      Shapes.ShowShape(game["mini menu"]["text"]["cancel"])

      

      GraphicsWindow.MouseDown = play_mini_menu_mouse_down

      GraphicsWindow.MouseMove = play_mini_menu_mouse_move

      

      

    EndIf

  EndIf

EndSub



Sub play_mini_menu_mouse_move

  

  play_mini_menu_update_mouse_pos()

  GraphicsWindow.Title = ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["permission"]["attack"]

  

  If m["x"] >= game["mini menu"]["left"] And m["x"] <= (game["mini menu"]["left"]+game["mini menu"]["width"]) Then

    If m["y"] >= (game["mini menu"]["top"]+(10*game["mini menu"]["padding"])+(9*game["mini menu"]["text size"])) And m["y"] <= (game["mini menu"]["top"]+(10*game["mini menu"]["padding"])+(10*game["mini menu"]["text size"])) And game["turn player"] = color And ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["permission"]["move"]=1 And game["moves remaining"]>0 Then  

      game["mini menu"]["current option"] = "move"

      Shapes.ShowShape(game["mini menu"]["shape"]["highlight"])

      Shapes.Move(game["mini menu"]["shape"]["highlight"],game["mini menu"]["left"],game["mini menu"]["top"]+(10*game["mini menu"]["padding"])+(9*game["mini menu"]["text size"]))

    ElseIf m["y"] >= (game["mini menu"]["top"]+(11*game["mini menu"]["padding"])+(10*game["mini menu"]["text size"])) And m["y"] <= (game["mini menu"]["top"]+(11*game["mini menu"]["padding"])+(11*game["mini menu"]["text size"])) And game["turn player"] = color And ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["permission"]["attack"]=1 And game["attacks remaining"]>0 And ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["shots"]>0 Then

      game["mini menu"]["current option"] = "attack"

      Shapes.ShowShape(game["mini menu"]["shape"]["highlight"])

      Shapes.Move(game["mini menu"]["shape"]["highlight"],game["mini menu"]["left"],game["mini menu"]["top"]+(11*game["mini menu"]["padding"])+(10*game["mini menu"]["text size"]))

    ElseIf m["y"] >= (game["mini menu"]["top"]+(12*game["mini menu"]["padding"])+(11*game["mini menu"]["text size"])) And m["y"] <= (game["mini menu"]["top"]+(12*game["mini menu"]["padding"])+(12*game["mini menu"]["text size"])) Then

      game["mini menu"]["current option"] = "cancel"

      Shapes.ShowShape(game["mini menu"]["shape"]["highlight"])

      Shapes.Move(game["mini menu"]["shape"]["highlight"],game["mini menu"]["left"],game["mini menu"]["top"]+(12*game["mini menu"]["padding"])+(11*game["mini menu"]["text size"]))

    Else

      Shapes.HideShape(game["mini menu"]["shape"]["highlight"])

      game["mini menu"]["current option"] = 0

    EndIf

  Else

    Shapes.HideShape(game["mini menu"]["shape"]["highlight"])

    game["mini menu"]["current option"] = 0

  EndIf

EndSub



Sub play_mini_menu_mouse_down

  

  If game["mini menu"]["current option"] = 0 Or game["mini menu"]["current option"] = "cancel" Then

    

    play_mini_menu_hide()

    play_assign_event_handler()

    

  ElseIf game["mini menu"]["current option"] = "move" Then

    

    play_move_init()

    play_mini_menu_hide()

    

  ElseIf game["mini menu"]["current option"] = "attack" Then

    

    play_attack_init()

    play_mini_menu_hide()

    

  EndIf

  

EndSub



Sub play_mini_menu_hide

  Shapes.HideShape(game["mini menu"]["text"]["class name"])

  Shapes.HideShape(game["mini menu"]["text"]["hp"])

  Shapes.HideShape(game["mini menu"]["text"]["move range"])

  Shapes.HideShape(game["mini menu"]["text"]["attack range"])

  Shapes.HideShape(game["mini menu"]["text"]["damage per shot"])

  Shapes.HideShape(game["mini menu"]["text"]["shots"])

  Shapes.HideShape(game["mini menu"]["text"]["can attack"])

  Shapes.HideShape(game["mini menu"]["text"]["can move"])

  

  Shapes.HideShape(game["mini menu"]["text"]["options"])

  Shapes.HideShape(game["mini menu"]["text"]["attack"])

  Shapes.HideShape(game["mini menu"]["text"]["move"])

  Shapes.HideShape(game["mini menu"]["text"]["cancel"])

  

  Shapes.HideShape(game["mini menu"]["shape"]["highlight"])

  Shapes.HideShape(game["mini menu"]["shape"]["background"])

EndSub





Sub play_mini_menu_update_mouse_pos

  

  m["x"] = GraphicsWindow.MouseX

  m["y"] = GraphicsWindow.MouseY

  

EndSub



Sub play_move_init

  ship["current"]["move range"] = ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["move range"]

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.PenColor = "Green"

  GraphicsWindow.PenWidth = game["grid"]["cell size"]*(3/50)

  

  game["move"]["area"]["radius"] = (game["grid"]["cell size"]*((2*ship["current"]["move range"])+1))/2

  game["move"]["area"]["shape"] = Shapes.AddEllipse(game["move"]["area"]["radius"]*2,game["move"]["area"]["radius"]*2)

  

  Shapes.SetOpacity(game["move"]["area"]["shape"],50)

  Shapes.Move(game["move"]["area"]["shape"],game["grid"]["left"]+((current_cell["x"]-(1/2))*game["grid"]["cell size"])-game["move"]["area"]["radius"],game["grid"]["top"]+((current_cell["y"]-(1/2))*game["grid"]["cell size"])-game["move"]["area"]["radius"])

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.PenWidth = 0

  

  game["move"]["highlight"]["shape"] = Shapes.AddRectangle(game["grid"]["cell size"],game["grid"]["cell size"])

  Shapes.SetOpacity(game["move"]["highlight"]["shape"],30)

  Shapes.HideShape(game["move"]["highlight"]["shape"])

  

  GraphicsWindow.MouseDown = play_move_mouse_down

  GraphicsWindow.MouseMove = play_move_mouse_move

EndSub



Sub play_move_mouse_move

  

  m["x"] = GraphicsWindow.MouseX

  m["y"] = GraphicsWindow.MouseY

  

  game["move"]["current cell"]["x"] = Math.Floor((m["x"] - game["grid"]["left"])/game["grid"]["cell size"])+1

  game["move"]["current cell"]["y"] = Math.Floor((m["y"] - game["grid"]["top"])/game["grid"]["cell size"])+1

  

  

  If game["move"]["current cell"]["x"] >= 1 And game["move"]["current cell"]["x"] <= game["grid"]["columns"] And game["move"]["current cell"]["y"] >= 1 And game["move"]["current cell"]["y"] <= game["grid"]["rows"] Then

    d["x"] = current_cell["x"]-game["move"]["current cell"]["x"]

    d["y"] = current_cell["y"]-game["move"]["current cell"]["y"]

    d["distance"] = Math.SquareRoot((d["x"]*d["x"])+(d["y"]*d["y"]))

    If Math.Round(d["distance"]) <= ship["current"]["move range"] And game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]]["blue"]=0 And game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]]["purple"]=0 And game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]]["terrain"]=0 Then

      Shapes.Move(game["move"]["highlight"]["shape"],game["grid"]["left"]+((game["move"]["current cell"]["x"]-1)*game["grid"]["cell size"]),game["grid"]["top"]+((game["move"]["current cell"]["y"]-1)*game["grid"]["cell size"]))

      Shapes.ShowShape(game["move"]["highlight"]["shape"])

    Else

      Shapes.HideShape(game["move"]["highlight"]["shape"])

      game["move"]["current cell"]["x"] = 0

      game["move"]["current cell"]["y"] = 0

    EndIf

  Else

    Shapes.HideShape(game["move"]["highlight"]["shape"])

    game["move"]["current cell"]["x"] = 0

    game["move"]["current cell"]["y"] = 0

  EndIf

EndSub



Sub play_move_mouse_down

  play_move_mouse_move()

  If game["move"]["current cell"]["x"] = 0 And game["move"]["current cell"]["y"] = 0 Then

    Shapes.HideShape(game["move"]["highlight"]["shape"])

    Shapes.HideShape(game["move"]["area"]["shape"])

    play_assign_event_handler()

  Else

    'Move the ship there

    

    game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]] = game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]

    game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]] = 0

    ship[ship["color"][color]][game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]]]["x"] = game["move"]["current cell"]["x"]

    ship[ship["color"][color]][game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]]]["y"] = game["move"]["current cell"]["y"]

    

    If game["grid"]["init"]["multi move"] = 0 Then

      ship[ship["color"][color]][game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]]]["permission"]["move"]=0

    EndIf

    

    x[1] = game["grid"]["left"]+((game["move"]["current cell"]["x"]-1)*game["grid"]["cell size"])+ship[ship["color"][color]][game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]]]["padding"]["x"]

    y[1] = game["grid"]["top"]+((game["move"]["current cell"]["y"]-1)*game["grid"]["cell size"])+ship[ship["color"][color]][game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]]]["padding"]["y"]

    

    x[1] = Math.Floor(x[1])

    y[1] = Math.Floor(y[1])

    Shapes.Move(ship[ship["color"][color]][game["grid"][game["move"]["current cell"]["x"]][game["move"]["current cell"]["y"]][ship["color"][color]]]["shape"],x[1],y[1])

    

    game["moves remaining"] = game["moves remaining"] - 1

    Shapes.SetText(game["side bar"]["text"]["moves"],"Moves Remaining: " + game["moves remaining"])

    

    Shapes.HideShape(game["move"]["highlight"]["shape"])

    Shapes.HideShape(game["move"]["area"]["shape"])

    play_assign_event_handler()

  EndIf

  

  

  

EndSub



Sub play_attack_init

  ship["current"]["attack range"] = ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["attack range"]

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.PenColor = "Red"

  GraphicsWindow.PenWidth = game["grid"]["cell size"]*(3/50)

  

  game["attack"]["area"]["radius"] = (game["grid"]["cell size"]*((2*ship["current"]["attack range"])+1))/2

  game["attack"]["area"]["shape"] = Shapes.AddEllipse(game["attack"]["area"]["radius"]*2,game["attack"]["area"]["radius"]*2)

  

  Shapes.SetOpacity(game["attack"]["area"]["shape"],50)

  Shapes.Move(game["attack"]["area"]["shape"],game["grid"]["left"]+((current_cell["x"]-(1/2))*game["grid"]["cell size"])-game["attack"]["area"]["radius"],game["grid"]["top"]+((current_cell["y"]-(1/2))*game["grid"]["cell size"])-game["attack"]["area"]["radius"])

  

  GraphicsWindow.BrushColor = "White"

  GraphicsWindow.PenWidth = 0

  

  game["attack"]["highlight"]["shape"] = Shapes.AddRectangle(game["grid"]["cell size"],game["grid"]["cell size"])

  Shapes.SetOpacity(game["attack"]["highlight"]["shape"],30)

  Shapes.HideShape(game["attack"]["highlight"]["shape"])

  

  GraphicsWindow.MouseDown = play_attack_mouse_down

  GraphicsWindow.MouseMove = play_attack_mouse_move

EndSub



Sub play_attack_mouse_move

  

  m["x"] = GraphicsWindow.MouseX

  m["y"] = GraphicsWindow.MouseY

  

  game["attack"]["current cell"]["x"] = Math.Floor((m["x"] - game["grid"]["left"])/game["grid"]["cell size"])+1

  game["attack"]["current cell"]["y"] = Math.Floor((m["y"] - game["grid"]["top"])/game["grid"]["cell size"])+1

  

  

  If game["attack"]["current cell"]["x"] >= 1 And game["attack"]["current cell"]["x"] <= game["grid"]["columns"] And game["attack"]["current cell"]["y"] >= 1 And game["attack"]["current cell"]["y"] <= game["grid"]["rows"] Then

    d["x"] = current_cell["x"]-game["attack"]["current cell"]["x"]

    d["y"] = current_cell["y"]-game["attack"]["current cell"]["y"]

    d["distance"] = Math.SquareRoot((d["x"]*d["x"])+(d["y"]*d["y"]))

    

    

    If Math.Round(d["distance"]) <= ship["current"]["attack range"] And game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]>0 Then

      Shapes.Move(game["attack"]["highlight"]["shape"],game["grid"]["left"]+((game["attack"]["current cell"]["x"]-1)*game["grid"]["cell size"]),game["grid"]["top"]+((game["attack"]["current cell"]["y"]-1)*game["grid"]["cell size"]))

      Shapes.ShowShape(game["attack"]["highlight"]["shape"])

    Else

      Shapes.HideShape(game["attack"]["highlight"]["shape"])

      game["attack"]["current cell"]["x"] = 0

      game["attack"]["current cell"]["y"] = 0

    EndIf

  Else

    Shapes.HideShape(game["attack"]["highlight"]["shape"])

    game["attack"]["current cell"]["x"] = 0

    game["attack"]["current cell"]["y"] = 0

  EndIf

EndSub



Sub play_attack_mouse_down

  play_attack_mouse_move()

  If game["attack"]["current cell"]["x"] = 0 And game["attack"]["current cell"]["y"] = 0 Then

    Shapes.HideShape(game["attack"]["highlight"]["shape"])

    Shapes.HideShape(game["attack"]["area"]["shape"])

    play_assign_event_handler()

  Else

    'Attack the ship there

    

    ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["shots"] = ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["shots"] - 1

    ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["hp"] = ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["hp"] - ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["damage per shot"]

    

    If ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["shots"]  = 0 Then

      ship[ship["color"][color]][game["grid"][current_cell["x"]][current_cell["y"]][ship["color"][color]]]["permission"]["attack"] = 0

    EndIf

    

    

    If ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["hp"] <= 0 Then

      'Kill ship

      

      ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["is dead"] = 1

      ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["x"] = 0

      ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["y"] = 0

      

      

      Shapes.HideShape(ship[ship["color"][Math.Remainder(color,2)+1]][game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]]]["shape"])

      game["grid"][game["attack"]["current cell"]["x"]][game["attack"]["current cell"]["y"]][ship["color"][Math.Remainder(color,2)+1]] = 0

      

      play_check_winner()

      

    EndIf

    

    game["attacks remaining"] = game["attacks remaining"] - 1

    Shapes.SetText(game["side bar"]["text"]["attacks"],"Attacks Remaining: " + game["attacks remaining"])

    

    

    

    Shapes.HideShape(game["attack"]["highlight"]["shape"])

    Shapes.HideShape(game["attack"]["area"]["shape"])

    play_assign_event_handler()

  EndIf

EndSub



Sub play_check_winner

  game["winner"][1] = game["ship"]["init"]["total per side"]

  game["winner"][2] = game["ship"]["init"]["total per side"]

  

  For current_id = 1 To game["ship"]["init"]["total per side"]

    game["winner"][1] = game["winner"][1] - ship["blue"][current_id]["is dead"]

    game["winner"][2] = game["winner"][2] - ship["purple"][current_id]["is dead"]

  EndFor

  

  If game["winner"][1] = 0 Then

    

    GraphicsWindow.ShowMessage(player[2]+" Wins!","Game Over")

    game["turn player"] = 0

    

  ElseIf game["winner"][2] = 0 Then

    

    GraphicsWindow.ShowMessage(player[1]+" Wins!","Game Over")

    game["turn player"] = 0

    

  EndIf

  

  

EndSub









Sub null

  

EndSub






