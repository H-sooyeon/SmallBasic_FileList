'* Events
Controls.ButtonClicked = OnButtonClicked 
LDControls.MenuClicked = OnMenuClicked

'Constans
F = "False"
T = "True"
gt = 1
gl = 1
gw = Desktop.Width - 20
gh = Desktop.Height - 70
bac = LDColours.White 
brc = LDColours.SteelBlue 
fna = "Consolas"
fsi = 12
ext = "dbS"  'Filename extention for databases

Init()

DoProgramEnding = F
While DoProgramEnding = F
  If OMC = T Then 
    OMC = F
    LMP = LDControls.LastMenuItem
    CMP = LDControls.MenuChecked(menu,LMP)
    Controls.HideControl(menu)
    If LMP =  "New Database" Then 
      NewDatabase()
    ElseIf LMP = "Open Database" Then   
      OpenDatabase()
    ElseIf LMP = "New Table" Then
      NewTable()
    ElseIf LMP = "Delete Table" Then
      DeleteTabled()
    ElseIf LMP = "Add Record" Then
      AddRecord()
    ElseIf LMP = "Find Record" Then
      FindRecord()
    ElseIf LMP = "Exact Match" Then
      FindExactMatch()
    ElseIf LMP = "Case Insensitive" Then
      FindCaseInsensitive()
    ElseIf LMP = "By Field" Then
      SortByField()
    ElseIf LMP = "By Index" Then
      SortByIndex()
    ElseIf LMP = "About" Then
      HelpAbout()
    ElseIf LMP = "End" Then 
      DoProgramEnding = T
    EndIf
    Controls.ShowControl(menu)  
  EndIf 
EndWhile 

Program.End()


'*** Subroutines ***
Sub NewDatabase
  Select = "save"
  SelectDatabase()
  database = LDDataBase.AddDataBase(dbName)
  PutGenerationInDatabase()
  Shapes.ShowShape(LV[1])
  DBTab = LDDataBase.Query(database, "SELECT * FROM sqlite_master WHERE type='table'", LV[1], T)
EndSub 'NewDatabase

Sub PutGenerationInDatabase
  ' Types
  ' ---------------------------------------------------------------------------------------------------------------
  c = "BEGIN TRANSACTION;CREATE TABLE IF NOT EXISTS TDefFieldType"
  c = Text.Append(c, "(TDefFieldType_ID INTEGER PRIMARY KEY, ")
  c = Text.Append(c, "TDefFieldType_TypeName TEXT UNIQUE);COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldType("
  c = Text.Append(c, "TDefFieldType_TypeName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TEXT'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldType("
  c = Text.Append(c, "TDefFieldType_TypeName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'INTEGER'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldType("
  c = Text.Append(c, "TDefFieldType_TypeName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'DATE'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldType("
  c = Text.Append(c, "TDefFieldType_TypeName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'NUL'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldType("
  c = Text.Append(c, "TDefFieldType_TypeName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'BLOB'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  ' Constraints
  '-------------------------------------------------------------------------------------------------------------------------
  c = "BEGIN TRANSACTION;CREATE TABLE IF NOT EXISTS TDefFieldConstraint"
  c = Text.Append(c, "(TDefConstraint_ID INTEGER PRIMARY KEY, ")
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName TEXT UNIQUE);COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldConstraint("
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'NOT NULL'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldConstraint("
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'UNIQUE'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldConstraint("
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'PRIMARY KEY'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldConstraint("
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'FOREIGN KEY'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldConstraint("
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'CHECK'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefFieldConstraint("
  c = Text.Append(c, "TDefFieldConstraint_ConstraintName)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'DEFAULT'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  ' Fields
  '----------------------------------------------------------------------------------------------------------------  
  c = "BEGIN TRANSACTION;CREATE TABLE IF NOT EXISTS TFields"
  c = Text.Append(c, "(TFields_ID INTEGER PRIMARY KEY, ")
  c = Text.Append(c, "TFields_FieldName TEXT UNIQUE, ")
  c = Text.Append(c, "TFields_FieldDiscription TEXT, ")
  c = Text.Append(c, "TFields_FieldType TEXT, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab TEXT, ")
  c = Text.Append(c, "TFields_FieldConstraint TEXT, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab TEXT);COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TDefFieldType_TypeName', ")
  c = Text.Append(c, "'Type of field', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'UNIQUE', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFieldS("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TDefFieldConstraint_ConstraintName', ")
  c = Text.Append(c, "'Constraint of field', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'UNIQUE', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TFields_FieldName', ")
  c = Text.Append(c, "'Name of field', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'UNIQUE', ")
  c = Text.Append(c, "'TDefFieldConstraint'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TFields_FieldDiscription', ")
  c = Text.Append(c, "'Discription of field', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TFields_FieldType', ")
  c = Text.Append(c, "'Type of field', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TFields_FieldTypeDefTab', ")
  c = Text.Append(c, "'Check table for field type', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TFields_FieldConstraint', ")
  c = Text.Append(c, "'Constraint of field', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TFields("
  c = Text.Append(c, "TFields_FieldName, ")
  c = Text.Append(c, "TFields_FieldDiscription, ")
  c = Text.Append(c, "TFields_FieldType, ")
  c = Text.Append(c, "TFields_FieldTypeDefTab, ")
  c = Text.Append(c, "TFields_FieldConstraint, ")
  c = Text.Append(c, "TFields_FieldConstraintDefTab)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'TFields_FieldConstraintDefTab', ")
  c = Text.Append(c, "'Check table for field constraint', ")
  c = Text.Append(c, "'TEXT', ")
  c = Text.Append(c, "'TDefFieldType', ")
  c = Text.Append(c, "'', ")
  c = Text.Append(c, "''")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  ' Defination of Field
  '----------------------------------------------------------------------------------------------------------------
  c = "BEGIN TRANSACTION;CREATE TABLE IF NOT EXISTS TDefField"
  c = Text.Append(c, "(TDefField_ID INTEGER PRIMARY KEY, ")
  c = Text.Append(c, "TDefField_FieldName Text UNIQUE, ")
  c = Text.Append(c, "TDefField_FieldNameLength Integer, ")
  c = Text.Append(c, "TDefField_FieldDiscription Text, ")
  c = Text.Append(c, "TDefField_FieldDiscriptionLength Integer, ")
  c = Text.Append(c, "TDefField_FieldType Text, ")
  c = Text.Append(c, "TDefField_FieldTypeLength Integer, ")
  c = Text.Append(c, "TDefField_FieldTypeDefTab Text, ")
  c = Text.Append(c, "TDefField_FieldTypeDefTabLength Integer, ")
  c = Text.Append(c, "TDefField_FieldConstraint Text, ")
  c = Text.Append(c, "TDefField_FieldConstraintLength Integer, ")
  c = Text.Append(c, "TDefField_FieldConstraintDefTab Text, ")
  c = Text.Append(c, "TDefField_FieldConstraintDefTabLength Integer);COMMIT;")
  LDDataBase.Command(database, c)
  
  c = "BEGIN TRANSACTION;INSERT INTO TDefField("
  c = Text.Append(c, "TDefField_FieldName, TDefField_FieldNameLength, ")
  c = Text.Append(c, "TDefField_FieldDiscription, TDefField_FieldDiscriptionLength, ")
  c = Text.Append(c, "TDefField_FieldType, TDefField_FieldTypeLength, ")
  c = Text.Append(c, "TDefField_FieldTypeDefTab, TDefField_FieldTypeDefTabLength, ")
  c = Text.Append(c, "TDefField_FieldConstraint, TDefField_FieldConstraintLength, ")
  c = Text.Append(c, "TDefField_FieldConstraintDefTab, TDefField_FieldConstraintDefTabLength)")
  c = Text.Append(c, "VALUES(")
  c = Text.Append(c, "'Fieldname', '50', ")
  c = Text.Append(c, "'Fielddiscription', '50', ")
  c = Text.Append(c, "'Fieldtype', '30', ")
  c = Text.Append(c, "'Defination table of fieldtype', '30', ")
  c = Text.Append(c, "'Fieldconstraint', '30', ")
  c = Text.Append(c, "'Defination table of Fieldconstraint', '30'")
  c = Text.Append(c, ");COMMIT;")
  LDDataBase.Command(database, c)
  
  
EndSub 'PutGenerationInDatabase

Sub OpenDatabase
  TXTSelect = "Please open an exist database"
  Select = "open"
  SelectDatabase()
  database = LDDataBase.AddDataBase(dbName) 
  Shapes.ShowShape(LV[1])
  DBTab = LDDataBase.Query(database, "SELECT * FROM sqlite_master WHERE type='table'", LV[1], T)
EndSub 'OpenDatabase

Sub SelectDatabase 
  dbName = ""
  While dbName = ""
    sht1 = Shapes.AddText("                                                                           ")
    sht1 = Shapes.AddText(TXTSelect)
    Shapes.Move(sht1, 10,50)
    Shapes.ShowShape(sht1)
    Selecting = T
    While Selecting = T
      dbPath = "" 
      If Select = "save" Then 
        dbName = LDDialogs.SaveFile(ext, dbPath)
      ElseIf Select = "open" Then 
        dbName = LDDialogs.OpenFile(ext, dbPath)
      EndIf 
      If Text.EndsWith(dbName, ext) = T Then 
        sht1 = Shapes.AddText("                                                                       ")
        sht1 = Shapes.AddText("The actualy database is:")
        Shapes.Move(sht1, 10,50)
        sht2 = Shapes.AddText("                                                                       ")
        sht2 = Shapes.AddText(dbName)
        Shapes.Move(sht2, 10,80)
        Shapes.ShowShape(sht1)
        Shapes.ShowShape(sht2)
        Selecting = F             'Exit Loop Selcting = T
        '                                                                             'dbName <> "" --> Exit Loop dbName = ""        
      else 
        dbName = ""
        sht1 = Shapes.AddText(" ")
        sht1 = Shapes.AddText(TXTSelect)
        Shapes.Move(sht1, 10,50)
        Shapes.ShowShape(sht1)
        Shapes.HideShape(sht2)
      EndIf 
    EndWhile 'Selecting = T
  EndWhile 'dbName = ""
EndSub 'SelectDatabase  

Sub NewTable
  
EndSub 'NewTable

Sub DeleteTabled
  
EndSub 'DeleteTabled

Sub AddRecord
  
EndSub 'AddRecord

Sub FindRecord
  
EndSub 'FindRecord

Sub FindExactMatch
  
EndSub 'FindExactMatch

Sub FindCaseInsensitive
  
EndSub 'FindCaseInsensitive

Sub SortByField
  
EndSub 'SortByField

Sub SortByIndex
  
EndSub 'SortByIndex

Sub HelpAbout 
  
EndSub 'HelpAbout 


Sub Init
  GraphicsWindow.Top = gt
  GraphicsWindow.Left = gl 
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = bac 
  GraphicsWindow.BrushColor = brc 
  GraphicsWindow.FontName = fna
  GraphicsWindow.FontSize = fsi 
  GraphicsWindow.Title="Database"
  GraphicsWindow.Show()
  
  LV[1] = LDDataBase.AddListView(gw - 10, 150)
  Shapes.HideShape(LV[1])
  Shapes.Move(LV[1], 5, gh - 540)
  
  TXTSN = 0
  OBC = F
  OMC = F 
  menuList["File"] = "Main"
  menuList["Record"] = "Main"
  menuList["Sort"] = "Main"
  menuList["Help"] = "Main"
  menuList["End"] = "Main"
  menuList["Open Database"] = "File"
  menuList["-"] = "File"
  menuList["New Table"] = "File"
  menuList["--"] = "File"
  menuList["Delete Table"] = "File"
  menuList["---"] = "File"
  menuList["New Database"] = "File"
  menuList["----"] = "File"
  menuList["Add Record"] = "Record"
  menuList["-----"] = "Record"
  menuList["Find Record"] = "Record"
  menuList["------"] = "Record"
  menuList["Records"] = "Record"
  menuList["-------"] = "Record"
  menuList["Exact Match"] = "Records"
  menuList["--------"] = "Records"
  menuList["Case Insensitive"] = "Records"
  menuList["---------"] = "Records"
  menuList["By Field"] = "Sort"
  menuList["----------"] = "Sort"
  menuList["By Index"] = "Sort"
  menuList["-----------"] = "Sort"
  menuList["About"] = "Help"
  menuList["----------"] = "Help"
  iconList["File"]="c:\temp\tomtom.ico"
  checkList["By Field"] = F 
  menu = LDControls.AddMenu(GraphicsWindow.Width,20,menuList,iconList,checkList)
  
  LDShapes.BrushColour(menu,ldcolours.WhiteSmoke)
  LDControls.MenuBackground(menu,ldcolours.LightGray)
  LDShapes.PenColour(menu,LDColours.DarkBlue)  
  
  CO["OK"] = Controls.AddButton("OK", 10, 130)
  Controls.HideControl(CO["OK"])
  CO["BACK"] = Controls.AddButton("Back", 100, 130)
  Controls.HideControl(CO["BACK"])
EndSub 'Init

'* Eventsubroutines
Sub OnMenuClicked 
  OMC = T 
EndSub

Sub OnButtonClicked
  OBC = T 
EndSub 'OnButtonClicked
