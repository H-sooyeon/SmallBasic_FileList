'sorting algorithm demo

'compares two O(n^2) algorithms (bubble sort and insertion sort)

'with n log^2 n algorithm (shell sort)

'Zeven Provincien May 2010

'now new & improved with multi-threading!!!!!!!!!!!!!



rows = 16

columns = 16

size = 24

offsetx = (columns+1) * size

offsety = (rows+1) * size

GraphicsWindow.Height=rows*size*2+size*2

GraphicsWindow.Width=columns*size*2+size*2

GraphicsWindow.Show()

GraphicsWindow.BackgroundColor = "SteelBlue"

GraphicsWindow.BrushColor = "Black"



GraphicsWindow.DrawText(0, 0.5 * size, "Bubble Sort")

GraphicsWindow.DrawText(offsetx, 0.5 * size, "Insertion Sort")

GraphicsWindow.DrawText(0, offsety + 0.5 * size, "Shell Sort")



'set up random array

For r = 0 To rows-1

  For c = 0 To columns-1

    red = Math.GetRandomNumber(256)-1

    green = Math.GetRandomNumber(256)-1

    blue = Math.GetRandomNumber(256)-1

    'red = 0

    green = 0 'comment this line and next to get a more colourful effect

    blue = 0

    GraphicsWindow.BrushColor = GraphicsWindow.GetColorFromRGB(red,green,blue)

    'GraphicsWindow.BrushColor = GraphicsWindow.GetRandomColor()

    i = r * columns + c

    boxes[i]["obj"] = Shapes.AddRectangle(size, size)

    boxes2[i]["obj"] = Shapes.AddRectangle(size,size)

    boxes3[i]["obj"] = Shapes.AddRectangle(size,size)

    Shapes.Move(boxes[i]["obj"], c * size, r * size + size)

    Shapes.Move(boxes2[i]["obj"], c * size + offsetx, r * size + size)

    Shapes.Move(boxes3[i]["obj"], c * size, r * size + offsety + size)

    boxes[i]["val"] = blue + green + red

    boxes2[i]["val"] = blue + green + red

    boxes3[i]["val"] = blue + green + red

  EndFor

EndFor



Program.Delay(1000)



'set up for sorting

arrlen = i



countstarted = 0

start = Clock.ElapsedMilliseconds

Timer.Interval = 0

Timer.Tick = OnTick



shellfinished = "false"

insfinished = "false"

bubblefinished = "false"



Sub OnTick

  countstarted = countstarted + 1

  If countstarted = 1 Then

    bubblesort()

    If bubblefinished = "true" then

      bubtime = Clock.ElapsedMilliseconds - start

      bubtext = "Elapsed time = " + bubtime/1000 + " seconds"

      GraphicsWindow.DrawText(offsetx+100, offsety+3*size, bubtext)

      GraphicsWindow.DrawText(offsetx, offsety+7*size, "Program ended.")

    Endif

  Elseif countstarted = 2 then

    insertionsort()

    If insfinished = "true" then

      instime = Clock.ElapsedMilliseconds - start

      instext = "Elapsed time = " + instime/1000 + " seconds"

      GraphicsWindow.DrawText(offsetx+100, offsety+4*size, instext)

  Endif

  Elseif countstarted = 3 then

    shellsort()

    If shellfinished = "true" then

      shelltime = Clock.ElapsedMilliseconds - start

      shelltext = "Elapsed time = " + shelltime/1000 + " seconds"

      GraphicsWindow.DrawText(offsetx+100, offsety+5*size, shelltext)

    Endif

  Else

    Timer.Pause()

  Endif

EndSub



GraphicsWindow.BrushColor = "black"

title = "Sorting algorithm efficiency comparison"

GraphicsWindow.DrawText(offsetx, offsety+size, title)

arrsizetext = "Size of array = " + (arrlen + 1)

GraphicsWindow.DrawText(offsetx, offsety+1.5*size, arrsizetext)



GraphicsWindow.DrawText(offsetx, offsety+3*size, "Bubble Sort:")

GraphicsWindow.DrawText(offsetx, offsety+4*size, "Insertion Sort:")

GraphicsWindow.DrawText(offsetx, offsety+5*size, "Shell Sort:")



Sub shellsort

  inc = Math.Round(arrlen/2)

  While inc > 0

    For i3 = inc To arrlen

      temp = boxes3[i3]["val"]

      tempbox = boxes3[i3]["obj"]

      j3 = i3

      while (j3 >= inc) and (boxes3[j3-inc]["val"] > temp)

        boxes3[j3]["val"] = boxes3[j3-inc]["val"]

        boxes3[j3]["obj"] = boxes3[j3-inc]["obj"]

        r3 = Math.Floor((j3)/columns)

        c3 = Math.Remainder(j3,columns)

        Shapes.Move(boxes3[j3]["obj"],c3 * size, r3 * size + offsety + size)

        j3 = j3 - inc

      EndWhile

      boxes3[j3]["val"] = temp

      boxes3[j3]["obj"] = tempbox

      r3 = Math.Floor((j3)/columns)

      c3 = Math.Remainder(j3,columns)

      Shapes.Move(boxes3[j3]["obj"],c3 * size, r3 * size + offsety + size)

      'Program.Delay(50) 'uncomment this to get a better idea how shell sort works

    EndFor

        inc = Math.Round(inc/2.2)

  Endwhile

      shellfinished = "true"

Endsub



Sub insertionsort



  For i2 = 1 to arrlen

    value2 = boxes2[i2]["val"]

    boxtemp2 = boxes2[i2]["obj"]

    j2 = i2 - 1

    done = "false"

    While done = "false"

      If boxes2[j2]["val"] > value2 then

        boxes2[j2 + 1]["val"] = boxes2[j2]["val"]

        boxes2[j2 +1 ]["obj"] = boxes2[j2]["obj"]

        r2 = Math.Floor((j2+1)/columns)

        c2 = Math.Remainder(j2+1,columns)

        Shapes.Move(boxes2[j2+1]["obj"],c2 * size + offsetx, r2 * size + size)

        j2 = j2 - 1

        If j2 < 0 then

          done = "true"

        EndIf  

      Else

        done = "true"

      EndIf

    'Program.Delay(100)   

    EndWhile

    boxes2[j2+1]["val"] = value2

    boxes2[j2+1]["obj"] = boxtemp2

    r2 = Math.Floor((j2+1)/columns)

    c2 = Math.Remainder(j2+1,columns)

    Shapes.Move(boxes2[j2+1]["obj"],c2 * size + offsetx, r2 * size + size)

  EndFor

  insfinished = "true"

Endsub



Sub bubblesort

  imax = arrlen

  'highval = boxes[1]["val"]

  swapped = "true"

  While swapped = "true"

    swapped = "false"

    For i1 = 1 To imax

      If boxes[i1]["val"] < boxes[i1-1]["val"] Then

        boxtemp1 = boxes[i1-1]["obj"]

        boxtempval1 = boxes[i1-1]["val"]

        boxes[i1-1]["obj"]=boxes[i1]["obj"]

        boxes[i1-1]["val"]=boxes[i1]["val"]

        boxes[i1]["obj"]=boxtemp1

        boxes[i1]["val"]=boxtempval1

        'highval=boxes[i]["val"]

        r1 = Math.Floor((i1-1)/columns)

        c1 = Math.Remainder(i1-1,columns)

        Shapes.Move(boxes[i1-1]["obj"],c1 * size, r1 * size + size)

        r1 = Math.Floor((i1)/columns)

        c1 = Math.Remainder(i1,columns)

        Shapes.Move(boxes[i1]["obj"],c1 * size, r1 * size + size)

        swapped = "true"

      EndIf

      'Program.Delay(100)

    Endfor

    imax = imax - 1

  Endwhile

  bubblefinished = "true"

EndSub


