' SmallBasic Version 1.2

' Program: Screenshot

' Changelog: 

' Author: Pappa Lapub

' Website: https://social.msdn.microsoft.com/Forums/en-US/775229e2-3fa5-46f3-a7ba-17e7ba1ac6fc/a-progamme-to-auto-click-every-after-40seconds

' ImportURL: http://smallbasic.com/program/?

' Extension: LitDev

' Comment: 

'  

' Variables: 

' ToDo: 

' ================================================================================

'' 1.) Region x,y, w,h:

param[1] = 100  '' left x position

param[2] = 100  '' upper y position

param[3] = 624  '' image width

param[4] = 442  '' image height

param[5] = " "  '' full path to save,   or " " in ImageList,  NO "" in SB arrays



'' 2.) Full desktop

'param = "1= ;2= ;3= ;4= ;5= ;"    '' full screen to ImageList





CSExt()

compRes = LDInline.IncludeCS(cs, "","")

If compRes <> "SUCCESS" Then

  TextWindow.WriteLine(compRes)

  Program.End()

EndIf



LDShell.ShowDesktop()

Program.Delay(500)

sshot = LDInline.Call("SBDesktop.Screenshot", param)

LDShell.RestoreWindows()



GraphicsWindow.Title = sshot

GraphicsWindow.DrawResizedImage(sshot, 0,0, GraphicsWindow.Width,GraphicsWindow.Height)





' //////////  SUB  \\\\\\\\\\

Sub CSExt

  lf = Text.GetCharacter(10)

  qu = Text.GetCharacter(34)

  cs = "using System;"+ lf

  cs = cs +"using System.IO;"+ lf

  cs = cs +"using System.Drawing;"+ lf

  cs = cs +"using System.Drawing.Imaging;"+ lf

  cs = cs +"using System.Windows.Media.Imaging;"+ lf

  cs = cs +"using System.Runtime.InteropServices;"+ lf

  cs = cs +"using System.Reflection;"+ lf

  cs = cs +"using System.Collections.Generic;"+ lf

  cs = cs +"using Microsoft.SmallBasic.Library;"+ lf

  cs = cs +"using Microsoft.SmallBasic.Library.Internal;"+ lf

  cs = cs +"/// <summary>Desktop Screenshot. (SBDesktop Ext)</summary>"+ lf

  cs = cs +"[SmallBasicType]"+ lf

  cs = cs +"public static class SBDesktop {"+ lf

  cs = cs +"  private static BitmapImage getBitmapImage(Bitmap dImg) {"+ lf

  cs = cs +"    MemoryStream ms = new MemoryStream();"+ lf

  cs = cs +"    dImg.Save(ms, ImageFormat.Png);"+ lf

  cs = cs +"    BitmapImage bImg = new BitmapImage();"+ lf

  cs = cs +"    bImg.BeginInit();"+ lf

  cs = cs +"    bImg.StreamSource = ms;"+ lf

  cs = cs +"    bImg.EndInit();"+ lf

  cs = cs +"    return bImg; }"+ lf

  cs = cs +"  [DllImport("+ qu +"user32.dll"+ qu +", SetLastError = true)]"+ lf

  cs = cs +"  private static extern bool DestroyIcon(IntPtr hIcon);"+ lf

  cs = cs +"  /// <summary>Creates an image of the whole or a region of the screen and saves it to a file (bmp, gif, ico (4bit), jp(e)g, png, tif(f)) or to ImageList (Intern: ImageList#+1)."+ lf

  cs = cs +"  /// The mouse pointer will be hidden. After LDShell.ShowDesktop ev. a short delay eg. Program.Delay(300).</summary>"+ lf

  cs = cs +"  /// <param name="+ qu +"x"+ qu +">The left position of the region [pxl] (Default: 0).</param>"+ lf

  cs = cs +"  /// <param name="+ qu +"y"+ qu +">The upper position of the region [pxl] (Default: 0).</param>"+ lf

  cs = cs +"  /// <param name="+ qu +"width"+ qu +">The width of the region [pxl] (from 1, Default: Desktop.Width).</param>"+ lf

  cs = cs +"  /// <param name="+ qu +"height"+ qu +">The height of the region [pxl] (from 1, Default: Desktop.Height).</param>"+ lf

  cs = cs +"  /// <param name="+ qu +"imageName"+ qu +">The full path to save as image file (bmp, gif, ico (4bit), jp(e)g, png, tif(f), Standard: jpg) or "+ qu +""+ qu +" to save in ImageList.</param>"+ lf

  cs = cs +"  /// <returns>The image file path if saved or ImageList name on success, else "+ qu +"FAILED"+ qu +".</returns>"+ lf

  cs = cs +"  /// <example>SBDesktop.Screenshot("+ qu +""+ qu +","+ qu +""+ qu +", "+ qu +""+ qu +","+ qu +""+ qu +", "+ qu +""+ qu +") 'whole desktop in ImageList</example>"+ lf

  cs = cs +"  public static Primitive Screenshot(Primitive x, Primitive y, Primitive width, Primitive height, Primitive imageName) {"+ lf

  cs = cs +"    int scrW = Desktop.Width;"+ lf

  cs = cs +"    int scrH = Desktop.Height;"+ lf

  cs = cs +"    int posX = ((int)x < 0) ? 0 : System.Math.Min((int)x, scrW-1);"+ lf

  cs = cs +"    int posY = ((int)y < 0) ? 0 : System.Math.Min((int)y, scrH-1);"+ lf

  cs = cs +"    int w = ((int)width < 1) ? scrW : System.Math.Min((int)width, scrW-posX);"+ lf

  cs = cs +"    int h = ((int)height < 1) ? scrH : System.Math.Min((int)height, scrH-posY);"+ lf

  cs = cs +"    Bitmap bmp = new Bitmap(w, h);"+ lf

  cs = cs +"    Size s = new Size(bmp.Width, bmp.Height);"+ lf

  cs = cs +"    Graphics gr = Graphics.FromImage(bmp);"+ lf

  cs = cs +"    gr.CopyFromScreen(posX, posY, 0, 0, s);"+ lf

  cs = cs +"    gr.Dispose();"+ lf

  cs = cs +"    string img = Environment.ExpandEnvironmentVariables(imageName);"+ lf

  cs = cs +"    Type GraphicsWindowType = typeof(GraphicsWindow);"+ lf

  cs = cs +"    Type ShapesType = typeof(Shapes);"+ lf

  cs = cs +"    Type ImageListType = typeof(Microsoft.SmallBasic.Library.ImageList);"+ lf

  cs = cs +"    Dictionary<string, BitmapSource> _savedImages;"+ lf

  cs = cs +"    if(img.Trim() == "+ qu +""+ qu +") {"+ lf

  cs = cs +"      InvokeHelperWithReturn ret = new InvokeHelperWithReturn(delegate {"+ lf

  cs = cs +"        try {"+ lf

  cs = cs +"          _savedImages = (Dictionary<string, BitmapSource>)ImageListType.GetField("+ qu +"_savedImages"+ qu +", BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.IgnoreCase).GetValue(null);"+ lf

  cs = cs +"          string shapeName = ShapesType.GetMethod("+ qu +"GenerateNewName"+ qu +", BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.IgnoreCase).Invoke(null, new object[] { "+ qu +"ImageList"+ qu +" }).ToString();"+ lf

  cs = cs +"          _savedImages[shapeName] = getBitmapImage(bmp);"+ lf

  cs = cs +"          return shapeName; }"+ lf

  cs = cs +"          catch { }"+ lf

  cs = cs +"          return "+ qu +""+ qu +"; });"+ lf

  cs = cs +"        MethodInfo method = GraphicsWindowType.GetMethod("+ qu +"InvokeWithReturn"+ qu +", BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.IgnoreCase);"+ lf

  cs = cs +"        return method.Invoke(null, new object[] { ret }).ToString(); }"+ lf

  cs = cs +"    try {"+ lf

  cs = cs +"      string ext = Path.GetExtension(img).ToLower();"+ lf

  cs = cs +"      switch(ext) {"+ lf

  cs = cs +"        case "+ qu +".bmp"+ qu +":	bmp.Save(img, ImageFormat.Bmp); break;"+ lf

  cs = cs +"        case "+ qu +".gif"+ qu +":	bmp.Save(img, ImageFormat.Gif); break;"+ lf

  cs = cs +"        case "+ qu +".ico"+ qu +":"+ lf

  cs = cs +"          IntPtr Hicon = bmp.GetHicon();"+ lf

  cs = cs +"          Icon newIcon = Icon.FromHandle(Hicon);"+ lf

  cs = cs +"          FileStream fs = new FileStream(img, FileMode.OpenOrCreate);"+ lf

  cs = cs +"          newIcon.Save(fs);"+ lf

  cs = cs +"          fs.Close();"+ lf

  cs = cs +"          SBDesktop.DestroyIcon(Hicon);"+ lf

  cs = cs +"          break;"+ lf

  cs = cs +"        case "+ qu +".jpg"+ qu +":"+ lf

  cs = cs +"        case "+ qu +".jpeg"+ qu +":	bmp.Save(img, ImageFormat.Jpeg); break;"+ lf

  cs = cs +"        case "+ qu +".png"+ qu +":	bmp.Save(img, ImageFormat.Png);	break;"+ lf

  cs = cs +"        case "+ qu +".tif"+ qu +":"+ lf

  cs = cs +"        case "+ qu +".tiff"+ qu +":	bmp.Save(img, ImageFormat.Tiff); break;"+ lf

  cs = cs +"        default:"+ lf

  cs = cs +"          img = Path.ChangeExtension(img, "+ qu +".jpg"+ qu +");"+ lf

  cs = cs +"          bmp.Save(img, ImageFormat.Jpeg); 

  cs = cs +"          break; }"+ lf

  cs = cs +"      return img; }"+ lf

  cs = cs +"    catch"+ lf

  cs = cs +"    { return "+ qu +"FAILED"+ qu +"; } } }"

  

' The following line could be harmful and has been automatically commented.

'   'File.WriteContents(Program.Directory +"\SBDesktop.cs", cs)

EndSub




