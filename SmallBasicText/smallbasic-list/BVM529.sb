'Sorting Prototype - Created by Matthew L. Parets aka codingCat. No rights reserved. Use and distribute at your pleasure
'This program creates a random lists of numbers and letters and then
'sorts the list first by numbers, and then by letters. The number and word
'lists are treated as match sets and are swapped together during the sort.
'
'To compare the words a CompareString method is used. This is to get 
'around the fact that SmallBasic will not usefully do a greater/less 
'comparison of strings of text. Has this been true from day one? Is this 
'a bug in version 1.1?


RandomizeArrays()
TextWindow.WriteLine("Unsorted Records")
TextWindow.WriteLine("-------------------------------------------")
DisplayRecords()
TextWindow.WriteLine("")

SortByNumber()
TextWindow.WriteLine("Records Sorted by numbers")
TextWindow.WriteLine("-------------------------------------------")
DisplayRecords()
TextWindow.WriteLine("")

SortByWords()
TextWindow.WriteLine("Records Sorted by words")
TextWindow.WriteLine("-------------------------------------------")
DisplayRecords()
TextWindow.WriteLine("")




Sub RandomizeArrays
  For i = 1 To 10
    numbers[i] = Math.GetRandomNumber(999)
  EndFor
  
  For i = 1 To 10
    word = ""
    For j = 1 To 4
      word = word + Text.GetCharacter(64 + Math.GetRandomNumber(26))
    EndFor
    words[i] = word
  EndFor
EndSub

Sub DisplayRecords
  For i =1 To Array.GetItemCount(words)
    TextWindow.Write("Record #" + i + ": ")
    TextWindow.Write(numbers[i] + " = ")
    TextWindow.WriteLine(words[i])
  EndFor
EndSub

Sub SortByNumber
  length = Array.GetItemCount(numbers)
  For i = 1 To length       'A terrible, but easy to understand selection sort
    For j = 1 To length     'Compare every entry to every other entry
      If numbers[i] < numbers[j] Then 'If they are out of order
        numTemp = numbers[i]          'swap them to the correct order
        numbers[i] = numbers[j]
        numbers[j] = numTemp
        
        wordTemp = words[i]           'swap the matching words at the same time
        words[i] = words[j]
        words[j] = wordTemp
      EndIf
    EndFor
  EndFor
EndSub

Sub SortByWords
  length = Array.GetItemCount(words)
  For swi = 1 To length   'A terrible, but easy to understand selection sort
    For swj = 1 To length 'Compare every entry to every other entry
      left = words[swi]   'pull the words from the array
      right = words[swj]
      CompareStrings()          'Compare the strings giving a greater/less/equal evaluation
      If less = "true" Then     'If they are out of order
        wordTemp = words[swi]   'Swap them to the correct order
        words[swi] = words[swj]
        words[swj] = wordTemp
        
        numTemp = numbers[swi]  'Swap the matching numbers at the same time
        numbers[swi] = numbers[swj]
        numbers[swj] = numTemp
      EndIf
    EndFor
  EndFor
EndSub

'Needed to compare to strings - I am amazed that I haven't noticed that
'Small basic doesn't do greater/less comparisons on strings before now
Sub CompareStrings
  greater = "False" 'state of the comparison
  equal = "False"
  less = "False"
  match = "False"
  csi = 1
  While match <> "True" And csi <= Text.GetLength(left) And csi <= Text.GetLength(right)
    lc = Text.GetSubText(left,csi,1)
    rc = Text.GetSubText(right,csi,1)
    If Text.GetCharacterCode(lc) <> Text.GetCharacterCode(rc) then 'compare individual characters
      match = "True"
      If Text.GetCharacterCode(lc) > Text.GetCharacterCode(rc) Then
        greater = "True"
      Else
        less = "True"
      EndIf
    EndIf
    csi = csi + 1   
  EndWhile
  If match = "False" Then 'If equal at the end of the comparison
    If Text.GetLength(left) = Text.GetLength(right) Then 'base the result on the length
      equal = "True"
    elseIf Text.GetLength(left) > Text.GetLength(right) Then
      greater = "True"
    Else
      less = "True"
    EndIf
  EndIf
EndSub
      
