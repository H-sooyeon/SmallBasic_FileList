nBall = 20
radius = 20
gw = 600
gh = 600
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh

For i = 1 To nBall
  ball[i] = Shapes.AddEllipse(2*radius,2*radius)
  posX[i] = radius + Math.GetRandomNumber(gw-2*radius)
  posY[i] = radius + Math.GetRandomNumber(gh-2*radius)
  velX[i] = Math.GetRandomNumber(11)-6
  velY[i] = Math.GetRandomNumber(11)-6
EndFor

While ("True")
  start = Clock.ElapsedMilliseconds
  
  For i = 1 To nBall
    posX[i] = posX[i]+velX[i]
    posY[i] = posY[i]+velY[i]
    
    If (posX[i] < radius) Then
      velX[i] = -velX[i]
      posX[i] = radius
    ElseIf (posX[i] > gw-radius) Then
      velX[i] = -velX[i]
      posX[i] = gw-radius
    EndIf
    If (posY[i] < radius) Then
      velY[i] = -velY[i]
      posY[i] = radius
    ElseIf (posY[i] > gh-radius) Then
      velY[i] = -velY[i]
      posY[i] = gh-radius
    EndIf
    
    For j = i+1 To nBall 'Only compare each ball others once
      dx = posX[j]-posX[i]
      dy = posY[j]-posY[i]      
      
      dist = Math.SquareRoot(dx*dx + dy*dy)
      If (dist < 2*radius) Then 'A hit
        'Centre of mass (momentum)
        mX = (velX[j]+velX[i])/2
        mY = (velY[j]+velY[i])/2
        'Velocities transformed to CM frame
        cX1 = velX[i]-mX
        cY1 = velY[i]-mY
        cX2 = velX[j]-mX
        cY2 = velY[j]-mY
        ''Unit vector from i to j
        dx = dx/dist
        dy = dy/dist
        'Dot products
        n1 = cX1*dx+cY1*dy
        n2 = cX2*dx+cY2*dy
        'Do bounce
        cX1 = cX1-2*n1*dx
        cY1 = cY1-2*n1*dy
        cX2 = cX2-2*n2*dx
        cY2 = cY2-2*n2*dy
        'Velocities transformed back to True Frame
        velX[i] = cX1+mX
        velY[i] = cY1+mY
        velX[j] = cX2+mX
        velY[j] = cY2+mY
        'Separate balls by moving apart to at least 2 radius separation (prevents odd multiple internal hits)
        dt = 1 'step size
        While (dist < 2*radius)
          posX[i] = posX[i]+velX[i]*dt
          posY[i] = posY[i]+velY[i]*dt
          posX[j] = posX[j]+velX[j]*dt
          posY[j] = posY[j]+velY[j]*dt
          dx = posX[j]-posX[i]
          dy = posY[j]-posY[i]               
          dist = Math.SquareRoot(dx*dx + dy*dy)
        EndWhile
        'Program.Delay(1000)
      EndIf
    EndFor
    
    Shapes.Move(ball[i],posX[i]-radius,posY[i]-radius)
  EndFor
  
  delay = 20-(Clock.ElapsedMilliseconds-start)
  If (delay > 0) Then
    Program.Delay(delay)
  EndIf
EndWhile
