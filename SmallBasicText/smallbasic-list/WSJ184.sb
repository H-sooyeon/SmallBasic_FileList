bx=100
by=100
bw=600
bh=400
e=2.717
GraphicsWindow.BackgroundColor="Gray
args=0
GraphicsWindow.Title ="Generating animation, wait...
GraphicsWindow.FillEllipse(1,1,2,2)
GraphicsWindow.Width=800
GraphicsWindow.Height =800
bcl[1]="Gray
bcl[2]="Darkblue
bbg=ldshapes.BrushGradient (bcl,"DD")
LDGraphicsWindow.BackgroundBrushGradient (bbg)
bx=0.1*bw
by=0.1*bh
bw=bw-2*bx
bh=bh-2*by

x1=-2
x2=2
y1=-2
y2=2
z1=-1
z2=1
sx=0.2
sy=0.2
sz=0.2
ebene=0   ' ! Projektionsebene (y-Koordinate)
prozy=-4  '! Projektionszentrum
prozx=0
prozz=0
stx=0.8   '      ! Beobachterstandpunkt
sty=-0.9
stz=0.8
bbx=-1    '     ! Beobachterblickrichtung
bby=1
bbz=-1
nwink=0   '    ! Neigungswinkel
If bby<0 then 
  bb=1
else
  bb=0
endif

zwink=MathPlus.SiGN(bby)*MathPlus.SiGN(bbx)*math.ArcTaN(math.ABS(bbx/bby))+math.PI*bb
xwink=-MathPlus.SiGN(bbz)*math.ArcTaN(math.ABS(bbz/Math.SquareRoot (bbz*bbz+bby*bby)))
hh=0

g=1
st=300/((x2-x1)/sx)
For df=3 to 5 step 0.5
  d=1
  FOR y=y2 TO y1 STEP -sy
    hh=0
    yy=y
    FOR x=x1 TO x2 STEP sx
      hh=hh+st
      z=ldcall.Function2 ("f",x,y)
      zz=ldcall.Function2 ("f",x+sx,y)
      zzz=ldcall.Function2 ("f",x,y+sy)
      zzzz=ldcall.Function2 ("f",x+sx,y+sy)
      pU[1][1]=ldcall.Function3 ("kx",x,y,z)
      pU[1][2]=ldcall.Function3 ("ky",x,y,z)
      pU[2][1]=ldcall.Function3 ("kx",x+sx,y,zz)
      pU[2][2]=ldcall.Function3 ("ky",x+sx,y,zz)
      pU[3][1]=ldcall.Function3 ("kx",x+sx,y+sy,zzzz)
      pU[3][2]=ldcall.Function3 ("ky",x+sx,y+sy,zzzz)
      pU[4][1]=ldcall.Function3 ("kx",x,y+sy,zzz)
      pU[4][2]=ldcall.Function3 ("ky",x,y+sy,zzz)
      color=LDColours.HSLtoRGB(hh,0.8,0.2+math.Abs (z)*0.7)
      
      ' brr=LDShapes.BrushGradient (bcl,"DD")
      'LDShapes.BrushGradientPolygon(brr,pU)
      ss[d]=ldshapes.AddPolygon (pu)
      LDShapes.BrushColour (ss[d],color)
      LDShapes.PenWidth (ss[d],0)
      fss[g][d]=LDFastShapes.ShapeIndex(ss[d]) 
      LDFastShapes.SetOpacity ( fss[g][d],0) 
      d=d+1
    endfor
  endfor
  LDfastShapes.Update ()
  g=g+1
endfor
d5=5
GraphicsWindow.Title ="Animation tween
While 1=1
  aa=aa+d5
  If aa>90 Then
    aa=90
    d5=-5
  ElseIf aa<-90 then
    aa=-90
    d5=5
  endif
  
  For qf=1 To g-1
    For x=1 To d-1
      ldfastShapes.SetOpacity   (fss[qf][x],100)
      LDFastShapes.Rotate (fss[qf][x],aa)
    EndFor 
    
    LDFastShapes.Update ()
    Program.Delay (110)
    For x=1 To d-1
      ldfastShapes.SetOpacity   (fss[qf][x],15)
    EndFor 
    'LDFastShapes.Update ()  
    
  EndFor 
  For qf=g-2 To 2 Step -1
    For x=1 To d-1
      ldfastShapes.SetOpacity   (fss[qf][x],100)
    EndFor 
    
    LDFastShapes.Update ()
    Program.Delay (110)
    For x=1 To d-1
      ldfastShapes.SetOpacity   (fss[qf][x],15)
    EndFor 
    
    'LDFastShapes.Update ()
  EndFor 
endwhile


sub f '(x,y)=
  ax=args[1]
  ay=args[2]
  ret=math.sin(ax)*Math.Tan(Math.Abs(ay/df))
  
  If  ret<-3 Then 
    TextWindow.WriteLine (ret)
    return=0
  Else 
    return=ret
  EndIf 
endsub

sub kx
  ax=args[1]
  ay=args[2]
  az=args[3]
  lx=ax-stx
  ly=ay-sty
  lz=az-stz
  xx=lx
  lx=math.COS(zwink)*lx-math.SIN(zwink)*ly
  ly=math.SIN(zwink)*xx+math.COS(zwink)*ly
  xx=lz
  lz=math.COS(xwink)*lz+math.SIN(xwink)*ly
  ly=-math.SIN(xwink)*xx+math.COS(xwink)*ly
  lx=math.COS(nwink)*lx+math.SIN(nwink)*lz
  px=(lx-prozx)*(ebene-prozy)/(ly-prozy)
  RETURN=( bx+bw/2+px*bw/(x2-x1))
ENDsub 

sub ky
  ax=args[1]
  ay=args[2]
  az=args[3]
  lx=ax-stx
  ly=ay-sty
  lz=az-stz
  xx=lx
  lx=math.COS(zwink)*lx-math.SIN(zwink)*ly
  ly=math.SIN(zwink)*xx+math.COS(zwink)*ly
  xx=lz
  lz=math.COS(xwink)*lz+math.SIN(xwink)*ly
  ly=-math.SIN(xwink)*xx+math.COS(xwink)*ly
  xx=lx
  lz=-math.SIN(nwink)*xx+math.COS(nwink)*lz
  py=(lz-prozz)*(ebene-prozy)/(ly-prozy)
  RETURN= ( by+bh/2-py*bh/(z2-z1))
ENDsub
