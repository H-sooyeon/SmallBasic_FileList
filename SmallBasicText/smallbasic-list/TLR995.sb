' 0.1 2013-08-03 Created as DuckShoot opening.

' 0.2 2013-08-03 14:38:49 Shapes generated by Shapes 1.5b.

'

' initialize shapes

SB_Workaround()

GraphicsWindow.Title = "DuckShoot"

GraphicsWindow.FontSize = 50

GraphicsWindow.BackgroundColor = "DarkRed"

GraphicsWindow.BrushColor = "White"

GraphicsWindow.DrawText(170, 60, "DuckShoot")

Shapes_Init()

' add shapes

scale = 1

angle = 0

iMin = 1

iMax = 10

Shapes_Add()

Sighter_Init()

iMin = 11

iMax = 14

Shapes_Add()

' Blink start

wait = "True"

While wait

  Program.Delay(2900)

  x = 250 + (Math.GetRandomNumber(50) - 25)

  y = 200 + (Math.GetRandomNumber(50) - 25)

  Shapes_Move()

  Program.Delay(100)

  Shapes.HideShape(shape[4]["obj"])

  Program.Delay(100)

  Shapes.ShowShape(shape[4]["obj"])

EndWhile

Sub Sighter_Init

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 250 ' x offset

  shY = 200 ' y offset

  shape[11] = "func=ell;x=0;y=0;width=80;height=80;bc=#005AC3CD;pc=#FFFFFF;pw=2;"

  shape[12] = "func=ell;x=20;y=20;width=40;height=40;bc=#005AC3CD;pc=#FFFFFF;pw=2;"

  shape[13] = "func=line;x=1;y=40;x1=0;y1=0;x2=80;y2=0;pc=#FFFFFF;pw=2;"

  shape[14] = "func=line;x=41;y=0;x1=0;y1=0;x2=0;y2=80;pc=#FFFFFF;pw=2;"

EndSub

Sub Shapes_Init

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 194 ' x offset

  shY = 150 ' y offset

  shape = ""

  shape[1] = "func=tri;x=153;y=41;x1=47;y1=0;x2=0;y2=22;x3=95;y3=22;bc=#CD845A;pw=0;"

  shape[2] = "func=ell;x=118;y=0;width=91;height=73;bc=#CDBE5A;pw=0;"

  shape[3] = "func=line;x=172;y=36;x1=0;y1=0;x2=22;y2=0;pc=#000000;pw=2;"

  shape[4] = "func=ell;x=172;y=25;width=22;height=22;bc=#000000;pw=0;"

  shape[5] = "func=tri;x=132;y=58;x1=31;y1=0;x2=0;y2=45;x3=62;y3=45;bc=#CDBE5A;pw=0;"

  shape[6] = "func=tri;x=0;y=80;x1=37;y1=0;x2=0;y2=32;x3=75;y3=32;angle=178;bc=#CDBE5A;pw=0;"

  shape[7] = "func=line;x=91;y=134;x1=0;y1=0;x2=0;y2=36;pc=#CD845A;pw=8;"

  shape[8] = "func=ell;x=33;y=72;width=164;height=82;bc=#CDBE5A;pw=0;"

  shape[9] = "func=tri;x=58;y=180;x1=46;y1=0;x2=0;y2=14;x3=93;y3=14;bc=#CD845A;pw=0;"

  shape[10] = "func=line;x=90;y=169;x1=0;y1=0;x2=14;y2=15;pc=#CD845A;pw=8;"

EndSub

Sub Math_CartesianToPolar

  ' Math | convert cartesian coodinate to polar coordinate

  ' param x, y - cartesian coordinate

  ' return r, a - polar coordinate

  r = Math.SquareRoot(x * x + y * y)

  If x = 0 And y > 0 Then

    a = 90 ' [degree]

  ElseIf x = 0 And y < 0 Then

    a = -90

  Else

    a = Math.ArcTan(y / x) * 180 / Math.Pi

  EndIf

  If x < 0 Then

    a = a + 180

  ElseIf x > 0 And y < 0 Then

    a = a + 360

  EndIf

EndSub

Sub SB_RotateWorkaround

  ' Small Basic | Rotate workaround for Silverlight

  ' param x, y - original coordinate

  ' param alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shape[i]["func"] = "tri" Then

    x1 = -Math.Floor(shape[i]["x3"] / 2)

    y1 = -Math.Floor(shape[i]["y3"] / 2)

  ElseIf shape[i]["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shape[i]["x1"] - shape[i]["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shape[i]["y1"] - shape[i]["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

EndSub

Sub SB_Workaround

  ' Small Basic | Workaround for Silverlight

  ' returns silverlight - "True" if in remote

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

    msWait = 300

  Else

    silverlight = "False"

  EndIf

EndSub

Sub Shapes_Add

  ' Shapes | add shapes as shapes data

  ' param iMin, iMax - shape indices to add

  ' param shape - array of shapes

  ' param scale - 1 if same scale

  ' return shWidth, shHeight - total size of shapes

  ' return shAngle - current angle of shapes

  Stack.PushValue("local", i)

  Shapes_CalcWidthAndHeight()

  s = scale

  For i = iMin To iMax

    GraphicsWindow.PenWidth = shape[i]["pw"] * s

    If shape[i]["pw"] > 0 Then

      GraphicsWindow.PenColor = shape[i]["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) Then

      GraphicsWindow.BrushColor = shape[i]["bc"]

    EndIf

    If shape[i]["func"] = "rect" Then

      shape[i]["obj"] = Shapes.AddRectangle(shape[i]["width"]* s, shape[i]["height"] * s)

    ElseIf shape[i]["func"] = "ell" Then

      shape[i]["obj"] = Shapes.AddEllipse(shape[i]["width"]* s, shape[i]["height"] * s)

    ElseIf shape[i]["func"] = "tri" Then

      shape[i]["obj"] = Shapes.AddTriangle(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s, shape[i]["x3"] * s, shape[i]["y3"] * s)

    ElseIf shape[i]["func"] = "line" Then

      shape[i]["obj"] = Shapes.AddLine(shape[i]["x1"] * s, shape[i]["y1"] * s, shape[i]["x2"] * s, shape[i]["y2"] * s)

    ElseIf shape[i]["func"] = "text" Then

      If silverlight Then

        fs = Math.Floor(shape[i]["fs"] * 0.9)

      Else

        fs = shape[i]["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shape[i]["fn"]

      shape[i]["obj"] = Shapes.AddText(shape[i]["text"])

    EndIf

    If silverlight And shape[i]["func"] = "tri" Then

      alpha = Math.GetRadians(shape[i]["angle"])

      x1 = -Math.Floor(shape[i]["x3"] / 2)

      y1 = -Math.Floor(shape[i]["y3"] / 2)

      ox = shape[i]["x"] - x1

      oy = shape[i]["y"] - y1

      r = Math.SquareRoot(x1 * x1 + y1 * y1)

      x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox

      y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy

      Shapes.Move(shape[i]["obj"], shX + x * s, shY + y * s)

    Else

      Shapes.Move(shape[i]["obj"], shX + shape[i]["x"] * s, shY + shape[i]["y"] * s)

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shape[i]["func"]) And shape[i]["angle"] <> 0 Then

      Shapes.Rotate(shape[i]["obj"], shape[i]["angle"])

    EndIf

    shape[i]["rx"] = shape[i]["x"]

    shape[i]["ry"] = shape[i]["y"]

  EndFor

  shAngle = 0

  i = Stack.PopValue("local")

EndSub

Sub Shapes_CalcRotatePos

  ' Shapes | Calculate position for rotated shape

  ' param["x"], param["y"] - position of a shape

  ' param["width"], param["height"] - size of a shape

  ' param ["cx"], param["cy"] - center of rotation

  ' param ["angle"] - rotate angle

  ' return x, y - rotated position of a shape

  _cx = param["x"] + param["width"] / 2

  _cy = param["y"] + param["height"] / 2

  x = _cx - param["cx"]

  y = _cy - param["cy"]

  Math_CartesianToPolar()

  a = a + param["angle"]

  x = r * Math.Cos(a * Math.Pi / 180)

  y = r * Math.Sin(a * Math.Pi / 180)

  _cx = x + param["cx"]

  _cy = y + param["cy"]

  x = _cx - param["width"] / 2

  y = _cy - param["height"] / 2

EndSub

Sub Shapes_CalcWidthAndHeight

  ' Shapes | Calculate total width and height of shapes

  ' param iMin, iMax - shape indices to add

  ' return shWidth, shHeight - total size of shapes

  For i = iMin To iMax

    If shape[i]["func"] = "tri" Or shape[i]["func"] = "line" Then

      xmin = shape[i]["x1"]

      xmax = shape[i]["x1"]

      ymin = shape[i]["y1"]

      ymax = shape[i]["y1"]

      If shape[i]["x2"] < xmin Then

        xmin = shape[i]["x2"]

      EndIf

      If xmax < shape[i]["x2"] Then

        xmax = shape[i]["x2"]

      EndIf

      If shape[i]["y2"] < ymin Then

        ymin = shape[i]["y2"]

      EndIf

      If ymax < shape[i]["y2"] Then

        ymax = shape[i]["y2"]

      EndIf

      If shape[i]["func"] = "tri" Then

        If shape[i]["x3"] < xmin Then

          xmin = shape[i]["x3"]

        EndIf

        If xmax < shape[i]["x3"] Then

          xmax = shape[i]["x3"]

        EndIf

        If shape[i]["y3"] < ymin Then

          ymin = shape[i]["y3"]

        EndIf

        If ymax < shape[i]["y3"] Then

          ymax = shape[i]["y3"]

        EndIf

      EndIf

      shape[i]["width"] = xmax - xmin

      shape[i]["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shape[i]["x"] + shape[i]["width"]

      shHeight = shape[i]["y"] + shape[i]["height"]

    Else

      If shWidth < shape[i]["x"] + shape[i]["width"] Then

        shWidth = shape[i]["x"] + shape[i]["width"]

      EndIf

      If shHeight < shape[i]["y"] + shape[i]["height"] Then

        shHeight = shape[i]["y"] + shape[i]["height"]

      EndIf

    EndIf

  EndFor

EndSub

Sub Shapes_Move

  ' Shapes | Move shapes

  ' param iMin, iMax - shape indices to add

  ' param shape - array of shapes

  ' param scale - to zoom

  ' param x, y - position to move

  ' return shX, shY - new position of shapes

  Stack.PushValue("local", i)

  s = scale

  shX = x

  shY = y

  For i = iMin To iMax

    _x = shape[i]["rx"]

    _y = shape[i]["ry"]

    Shapes.Move(shape[i]["obj"], shX + _x * s, shY + _y * s)

  EndFor

  i = Stack.PopValue("local")

EndSub

Sub Shapes_Remove

  ' Shapes | Remove shapes

  ' param iMin, iMax - shapes indices to remove

  ' param shape - array of shapes

  Stack.PushValue("local", i)

  For i = iMin To iMax

    Shapes.Remove(shape[i]["obj"])

  EndFor

  i = Stack.PopValue("local")

EndSub

Sub Shapes_Rotate

  ' Shapes | Rotate shapes

  ' param iMin, iMax - shapes indices to rotate

  ' param shape - array of shapes

  ' param scale - to zoom

  ' param angle - to rotate

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  s = scale

  param["angle"] = angle

  param["cx"] = shWidth / 2

  param["cy"] = shHeight / 2

  For i = iMin To iMax

    param["x"] = shape[i]["x"]

    param["y"] = shape[i]["y"]

    param["width"] = shape[i]["width"]

    param["height"] = shape[i]["height"]

    Shapes_CalcRotatePos()

    If silverlight And Text.IsSubText("tri|line", shape[i]["func"]) Then

      alpha = Math.GetRadians(angle + shape[i]["angle"])

      SB_RotateWorkAround()

    EndIf

    shape[i]["rx"] = x

    shape[i]["ry"] = y

    Shapes.Move(shape[i]["obj"], shX + x * s, shY + y * s)

    Shapes.Rotate(shape[i]["obj"], angle + shape[i]["angle"])

  EndFor

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub


