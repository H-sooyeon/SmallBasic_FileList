' Avatar Genarator
' Version 0.2
' Copyright Â© 2016 Nonki Takahashi.  The MIT License.
' Program ID QRW232-0

GraphicsWindow.Title = "Aavatar Generator 0.2"
debug = "False"
Init()
If debug Then
  UnitTest()
EndIf
nShape = Array.GetItemCount(shape)
While "True"
  GraphicsWindow.Clear()
  col = 4
  row = 3
  x0 = (gw - (3 * size) * col - 10 * (col - 1)) / 2
  y0 = (gh - (3 * size) * row - 10 * (row - 1)) / 2
  For j = 1 To col * row
    s2 = nShape + 1
    DecidePattern()
    If debug Then
      TextWindow.WriteLine("Decided:pattern=" + pattern)
    EndIf
    color = GraphicsWindow.GetRandomColor()
    For i = 1 To 6
      p = rotate[i]["p"]
      p2 = rotate[i]["p2"]
      angle = rotate[i]["angle"]
      RotatePattern()
    EndFor
    If debug Then
      For p = 1 To Array.GetItemCount(pattern)
        TextWindow.WriteLine("pattern[" + p + "]=" + pattern[p])
      EndFor
      For s = 1 To Array.GetItemCount(shape)
        TextWindow.WriteLine("shape[" + s + "]=" + shape[s])
      EndFor
    EndIf
    p = 1
    For y = y0 To y0 + 2 * size Step size
      For x = x0 To x0 + 2 * size Step size
        DrawPattern()
        p = p + 1
      EndFor
    EndFor
    If Math.Remainder((j - 1), col) = col - 1 Then
      x0 = (gw - (3 * size) * col - 10 * (col - 1)) / 2
      y0 = y0 + (3 * size + 10)
    Else
      x0 = x0 + (3 * size + 10)
    EndIf
  EndFor
  Program.Delay(5000)
EndWhile

Sub Init
  ' graphics window size
  size = 40
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  
  ' rotate center position
  cx = 0.5
  cy = 0.5
  
  ' base patterns
  candidate[1] = "1=5;2=3;"
  candidate[2] = "1=5;2=10;"
  candidate[3] = "1=1;2=3;"
  candidate[4] = "1=6;2=10;"
  candidate[5] = "1=1;2=8;"
  candidate[6] = "1=12;2=13;"
  candidate[7] = "1=6;2=14;"
  candidate[8] = "1=8;2=7;"
  candidate[9] = "1=13;2=14;"
  candidate[10] = "1=14;2=15;"
  candidate[11] = "1=1;2=11;"
  candidate[12] = "1=6;2=8;"
  candidate[13] = "1=2;2=6;"
  candidate[14] = "1=3;2=14;"
  candidate[15] = "1=6;2=3;"
  
  ' parts (shapes)
  shape[1] = "type=rect;x=0;y=0;width=0.5;height=0.5;"
  shape[2] = "type=rect;x=0.5;y=0;width=0.5;height=0.5;"
  shape[3] = "type=rect;x=0.5;y=0.5;width=0.5;height=0.5;"
  shape[4] = "type=rect;x=0;y=0.5;width=0.5;height=0.5;"
  shape[5] = "type=tri;x1=0;y1=0;x2=0;y2=1;x3=1;y3=0;"
  shape[6] = "type=tri;x1=0;y1=0;x2=0;y2=1;x3=0.5;y3=1;"
  shape[7] = "type=tri;x1=0;y1=0;x2=0.5;y2=0;x3=0.5;y3=1;"
  shape[8] = "type=tri;x1=0.5;y1=0;x2=0.5;y2=1;x3=1;y3=1;"
  shape[9] = "type=tri;x1=0.5;y1=0;x2=1;y2=0;x3=1;y3=1;"
  shape[10] = "type=tri;x1=1;y1=0;x2=0.5;y2=1;x3=1;y3=1;"
  shape[11] = "type=tri;x1=1;y1=0;x2=0.5;y2=1;x3=0.5;y3=0;"
  shape[12] = "type=tri;x1=0;y1=0;x2=0.5;y2=0;x3=0;y3=1;"
  shape[13] = "type=tri;x1=1;y1=0.5;x2=0;y2=1;x3=1;y3=1;"
  shape[14] = "type=tri;x1=0;y1=0;x2=1;y2=0;x3=0.5;y3=0.5;"
  shape[15] = "type=tri;x1=0.5;y1=0.5;x2=0;y2=1;x3=1;y3=1;"
  
  ' rotated patterns
  rotate[1] = "p=1;p2=3;angle=90;"
  rotate[2] = "p=2;p2=6;angle=90;"
  rotate[3] = "p=1;p2=9;angle=180;"
  rotate[4] = "p=2;p2=8;angle=180;"
  rotate[5] = "p=1;p2=7;angle=270;"
  rotate[6] = "p=2;p2=4;angle=270;"
EndSub

Sub DecidePattern
  ' return pattern - pattern array [1, 2, 5]
  ' decide base patterns
  
  pattern = ""
  n = Array.GetItemCount(candidate)
  indices = Array.GetAllIndices(candidate)
  For _p = 1 To 3
    n = Array.GetItemCount(indices)
    index = Array.GetAllIndices(indices)
    i = Math.GetRandomNumber(n)
    If _p = 3 Then
      _p = 5
    EndIf
    pattern[_p] = candidate[index[i]]
    pattern[_p + 1] = candidate[index[i]]
    a = Math.GetRandomNumber(4) - 1
    If 0 < a Then
      p = _p + 1
      p2 = _p
      angle = a * 90
      RotatePattern()
    EndIf
    indices[index[i]] = ""
  EndFor
EndSub

Sub DrawPattern
  ' param pattern - pattern array
  ' param p - patten index
  ' param color - fill color
  If debug Then
    TextWindow.WriteLine("DrawPattern:")
    TextWindow.WriteLine("p=" + p)
    TextWindow.WriteLine("pattern[p]=" + pattern[p])
    If pattern[p] = "" Then
      TextWindow.Read()
    EndIf
  EndIf
  GraphicsWindow.BrushColor = color
  n = Array.GetItemCount(pattern[p])
  If debug Then
    TextWindow.WriteLine("n=" + n)
  EndIf
  For s = 1 To n
    shp = shape[pattern[p][s]]
    If shp["type"] = "rect" Then
      _x = x + shp["x"] * size
      _y = y + shp["y"] * size
      _width = shp["width"] * size
      _height = shp["height"] * size
      GraphicsWindow.FillRectangle(_x, _y, _width, _height)
    ElseIf shp["type"] = "tri" Then
      _x1 = x + shp["x1"] * size
      _y1 = y + shp["y1"] * size
      _x2 = x + shp["x2"] * size
      _y2 = y + shp["y2"] * size
      _x3 = x + shp["x3"] * size
      _y3 = y + shp["y3"] * size
      If debug Then
        TextWindow.Write("FillTriangle(" + _x1 + "," + _y1 + ",")
        TextWindow.Write(_x2 + "," + _y2 + ",")
        TextWindow.WriteLine(_x3 + "," + _y3 + ")")
      EndIf
      GraphicsWindow.FillTriangle(_x1, _y1, _x2, _y2, _x3, _y3)
    EndIf
  EndFor
EndSub

Sub RotatePattern
  ' param p - patten index
  ' param p2 - rotated pattern index
  ' param angle - rotate angle
  n = Array.GetItemCount(pattern[p])
  For s = 1 To n
    shp = shape[pattern[p][s]]
    shp2 = "type=" + shp["type"] + ";"
    If shp["type"] = "rect" Then
      If angle = 90 Then
        If debug Then
          TextWindow.WriteLine("angle=90")
        EndIf
        q = pattern[p][s] + 1
        If 4 < q Then
          q = q - 4
        EndIf
      ElseIf angle = 180 Then
        q = pattern[p][s] + 2
        If 4 < q Then
          q = q - 4
        EndIf
      ElseIf angle = 270 Then
        q = pattern[p][s] + 3
        If 4 < q Then
          q = q - 4
        EndIf
      EndIf
      pattern[p2][s] = q
    ElseIf shp["type"] = "tri" Then
      If debug Then
        TextWindow.WriteLine("shp=" + shp)
      EndIf
      x = shp["x1"]
      y = shp["y1"]
      RotatePoint()
      shp2["x1"] = x
      shp2["y1"] = y
      x = shp["x2"]
      y = shp["y2"]
      RotatePoint()
      shp2["x2"] = x
      shp2["y2"] = y
      x = shp["x3"]
      y = shp["y3"]
      RotatePoint()
      shp2["x3"] = x
      shp2["y3"] = y
      If debug Then
        TextWindow.WriteLine("shp2=" + shp2)
      EndIf
      shape[s2] = shp2
      pattern[p2][s] = s2
      s2 = s2 + 1
    EndIf
  EndFor
EndSub

Sub RotatePoint
  ' param x, y - point to rotate
  ' param angle - rotate angle
  ' param cx, cy - rotate center
  ' return x, y - rotated point
  lx = x - cx
  ly = y - cy
  _a = Math.GetRadians(angle)
  x = Math.Round((Math.Cos(_a) * lx - Math.Sin(_a) * ly) * 100) / 100
  y = Math.Round((Math.Sin(_a) * lx + Math.Cos(_a) * ly) * 100) / 100
  x = x + cx
  y = y + cy
EndSub

Sub UnitTest
  y = 10
  x = 10
  nCandidate = Array.GetItemCount(candidate)
  For p = 1 To nCandidate
    pattern[p] = candidate[p]
    color = "Black"
    DrawPattern()
    GraphicsWindow.DrawText(x, y + size, p)
    x = x + (size + 10)
    If gw < x + 100 Then
      x = 10
      y = y + (size + 20)
    EndIf
  EndFor
  TextWindow.Read()
  nShape = Array.GetItemCount(shape)
  y = 10
  pattern = ""
  GraphicsWindow.PenColor = "Gray"
  For p = 1 To nShape
    s2 = nShape + 1
    x = 10
    GraphicsWindow.Clear()
    pattern[p] = "1=" + p + ";"
    color = "Black"
    GraphicsWindow.DrawRectangle(x, y, size, size)
    DrawPattern()
    color = "Green"
    p2 = p
    For a = 1 To 3
      x = x + (size + 10)
      angle = a * 90
      p2 = p2 + 1
      Stack.PushValue("local", x)
      Stack.PushValue("local", y)
      RotatePattern()
      y = Stack.PopValue("local")
      x = Stack.PopValue("local")
      GraphicsWindow.DrawRectangle(x, y, size, size)
      Stack.PushValue("local", p)
      p = p2
      DrawPattern()
      p = Stack.PopValue("local")
    EndFor
    TextWindow.Write("p=" + p)
    TextWindow.Read()
  EndFor
EndSub
