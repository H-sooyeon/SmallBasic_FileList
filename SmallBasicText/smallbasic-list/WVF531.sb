GraphicsWindow.Hide()
SG_ParamChecks=1
GraphicsWindow.CanResize="False"
GraphicsWindow.Title="Sinclair Spectrum"
GraphicsWindow.KeyDown=SE_OnInKeyDown
GraphicsWindow.KeyUp=SE_OnInKeyUp
Timer.Tick=SE_OnTimerTick
Timer.Interval=50
S_ResetFramesPerSecondAndTimer()

'ScrollAlt=1
SG_Scale=4
SG_GraWinX=256*SG_Scale
SG_GraWinY=192*SG_Scale
SG_FontWidth=8*SG_Scale
SG_FontHeight=8*SG_Scale
SG_POffSetX=32*SG_Scale '320-256=64. 64/2=32.
SG_POffSetY=24*SG_Scale '240-192=48. 48/2=24.
GraphicsWindow.Width=SG_GraWinX+SG_POffSetX*2
GraphicsWindow.Height=SG_GraWinY+SG_POffSetY*2
GraphicsWindow.Left=(Desktop.Width-(SG_GraWinX+SG_POffSetX))/2-70
GraphicsWindow.Top=(Desktop.Height-(SG_GraWinY+SG_POffSetY))/2-34
'GraphicsWindow.FontName=""
GraphicsWindow.FontName="Lucida Console"
GraphicsWindow.FontSize=SG_FontHeight'*1.2
GraphicsWindow.BackgroundColor="White"
GraphicsWindow.PenColor="Black"
GraphicsWindow.BrushColor="Black"
r=0
c=0
pstr=""
pstream=1
inkey=""

S_InitColors()
GraphicsWindow.Show() 


Sub SE_OnTimerTick
  
  SG_TLE=SG_TLE+1
  If SG_TLE>255 Then
    SG_TLE=0
    SG_TMI=SG_TMI+1
  EndIf
  If SG_TMI>255 Then
    SG_TMI=0
    SG_TMO=SG_TMO+1
  EndIf
  If SG_TMO>255 Then
    SG_TMO=0
    SG_TWH=0
    SG_FrameCounter=0
  EndIf

  SG_TWH=SG_TMO*65536+SG_TMI*256+SG_TLE
  
EndSub

Sub SE_OnInKeyDown
  
  inkey=GraphicsWindow.LastKey
  'st=Inkey
  'Print()
  
EndSub

Sub SE_OnInKeyUp
  
  inkey=""
  
EndSub

Sub S_ResetFramesPerSecondAndTimer

Timer.Pause()
SG_TLE=0 'Timer least
SG_TMI=0 'Timer middle?
SG_TMO=0 'Timer most
SG_TWH=0 'Timer whole
SG_FrameCounter=0

EndSub

Sub S_GetFramesPerSecond
  
  Timer.Pause()
  Stack.PushValue("SG_ParamPreserve",pstr)
  Stack.PushValue("SG_ParamPreserve",c)
  Stack.PushValue("SG_ParamPreserve",r)
  Stack.PushValue("SG_ParamPreserve",fc)
  Stack.PushValue("SG_ParamPreserve",ci)
  ci=1
  fc=7
  
  If SG_FrameCounter=0 And SG_TWH=0 Then
    r=21
    c=0
    pstr="fps:"
    Print()
  EndIf
  
  pstr=SG_TWH
  S_GetFrames_Temp=pstr
  r=21
  c=4
  If S_GetFrames_Temp<>0 Then
    pstr=Math.Floor(SG_FrameCounter/(S_GetFrames_Temp)*17)+" " '1000/50=20 ms
    SG_FrameCounter=SG_FrameCounter+1
  Else
    pstr="0 "
  Endif
  Print()
  S_GetFrames_Temp=0
  
  ci=Stack.PopValue("SG_ParamPreserve")
  fc=Stack.PopValue("SG_ParamPreserve")
  r=Stack.PopValue("SG_ParamPreserve")
  c=Stack.PopValue("SG_ParamPreserve")
  pstr=Stack.PopValue("SG_ParamPreserve")
  Timer.Resume()
  
EndSub

Sub S_Destroy

SG_ColorLookUpTable=0
Program.End()

EndSub

Sub S_InitColors
  
  SG_ColorLookUpTable[0]=GraphicsWindow.GetColorFromRGB(0,0,0)
  SG_ColorLookUpTable[1]=GraphicsWindow.GetColorFromRGB(0,0,255)
  SG_ColorLookUpTable[2]=GraphicsWindow.GetColorFromRGB(255,0,0)
  SG_ColorLookUpTable[3]=GraphicsWindow.GetColorFromRGB(255,0,255)
  SG_ColorLookUpTable[4]=GraphicsWindow.GetColorFromRGB(0,255,0)
  SG_ColorLookUpTable[5]=GraphicsWindow.GetColorFromRGB(0,255,255)
  SG_ColorLookUpTable[6]=GraphicsWindow.GetColorFromRGB(255,255,0)
  SG_ColorLookUpTable[7]=GraphicsWindow.GetColorFromRGB(255,255,255)
  SG_ColorLookUpTable[8]=GraphicsWindow.GetColorFromRGB(0,0,0) 'Colors with half the intensity
  SG_ColorLookUpTable[9]=GraphicsWindow.GetColorFromRGB(0,0,127)
  SG_ColorLookUpTable[10]=GraphicsWindow.GetColorFromRGB(127,0,0)
  SG_ColorLookUpTable[11]=GraphicsWindow.GetColorFromRGB(127,0,127)
  SG_ColorLookUpTable[12]=GraphicsWindow.GetColorFromRGB(0,127,0)
  SG_ColorLookUpTable[13]=GraphicsWindow.GetColorFromRGB(0,127,127)
  SG_ColorLookUpTable[14]=GraphicsWindow.GetColorFromRGB(127,127,0)
  SG_ColorLookUpTable[15]=GraphicsWindow.GetColorFromRGB(127,127,127)
  
  fc=0 'foreground color
  bc=7 'background color
  dc=7 'desk color, can never take a bright color value; must be used with Border
  ci=0 'ci is 'color intensity' or bright colors on or off
  
  pfc=-1
  pbc=-1
  pci=-1  
  S_Print_SupressForegroundColor=0
  S_Print_SupressBackgroundColor=0
  S_Print_SupressColorIntensity=0
  
  SG_ColorToRGBLookUp_SupressIntensity=0
  SP_ColorToLookUp=0 'Set this with 1 and get ReturnVal=0000FF  with ci=1 or 00007F with ci=0
  Cls()
  
EndSub

Sub S_ColorToRGBLookUp
  
  If SG_ParamChecks=1 Then
    SP_ColorToLookUp=Math.Floor(SP_ColorToLookUp)
    ci=Math.Floor(ci)
    If SP_ColorToLookUp<0 Or SP_ColorToLookUp>7 Or ci<0 Or ci>1 Then
      S_ColorToRGBLookUp_Error=1
    EndIf
    If S_ColorToRGBLookUp_Error=1 Then
      TextWindow.WriteLine("S_ColorToRGBLookUp: Integer out of range")
      TextWindow.Pause()
      S_Destroy()
    EndIf
  EndIf
  
  If ci=1 And SG_ColorToRGBLookUp_SupressColorIntensity=0 Then
    S_ReturnVal=SG_ColorLookUpTable[SP_ColorToLookUp]
  Else
    S_ReturnVal=SG_ColorLookUpTable[8+SP_ColorToLookUp]
  EndIf
  SG_ColorToRGBLookUp_SupressColorIntensity=0
  
EndSub

Sub Cls
  
  SP_ColorToLookUp=fc
  S_ColorToRGBLookUp()
  SG_PenColorBakcup=S_ReturnVal
  GraphicsWindow.PenColor=SG_PenColorBakcup
  
  SP_ColorToLookUp=bc
  S_ColorToRGBLookUp()
  SG_BrushColorBakcup=S_ReturnVal
  GraphicsWindow.BrushColor=SG_BrushColorBakcup
  GraphicsWindow.FillRectangle(SG_POffSetX,SG_POffSetY,SG_GraWinX,SG_GraWinY-2*SG_FontHeight)
  
  SG_ColorToRGBLookUp_SupressColorIntensity=1
  SP_ColorToLookUp=dc
  S_ColorToRGBLookUp()
  GraphicsWindow.BrushColor=S_ReturnVal
  GraphicsWindow.FillRectangle(SG_POffSetX,SG_POffSetY+22*SG_FontHeight,SG_GraWinX,2*SG_FontHeight)
  GraphicsWindow.BrushColor=SG_BrushColorBakcup
  
  Border()
  
EndSub

Sub Border
  
  S_Border_BrushColorBakcup=GraphicsWindow.BrushColor
  SG_ColorToRGBLookUp_SupressColorIntensity=1
  SP_ColorToLookUp=dc
  S_ColorToRGBLookUp()
  GraphicsWindow.BrushColor=S_ReturnVal
  
  GraphicsWindow.FillRectangle(0,0,SG_GraWinX+SG_POffSetX*2,SG_POffSetY)
  GraphicsWindow.FillRectangle(0,SG_POffSetY,SG_POffSetX,SG_GraWinY)
  GraphicsWindow.FillRectangle(SG_GraWinX+SG_POffSetX,SG_POffSetY,SG_POffSetX,SG_GraWinY)
  GraphicsWindow.FillRectangle(0,SG_GraWinY+SG_POffSetY,SG_GraWinX+SG_POffSetX*2,SG_POffSetY)
  
  GraphicsWindow.BrushColor=S_Border_BrushColorBakcup
  
EndSub

Sub Print
  
  S_Print_PrintStringLength=Text.GetLength(pstr)
  S_Print_RowUpperLimit=21
  If pstream=0 Then
    S_Print_RowUpperLimit=1
  EndIf
  
  If SG_ParamChecks=1 Then
    r=Math.Floor(r)
    c=Math.Floor(c)
    If r<0 or r>S_Print_RowUpperLimit Or c<0 Or c>31 Or c+S_Print_PrintStringLength>32 Or pstream<0 Or pstream>1 Then
      S_Print_Error=1
    EndIf
    If S_Print_Error=1 Then
      TextWindow.WriteLine("Print: Integer out of range or string out of screen or invalid stream")
      TextWindow.Pause()
      S_Destroy()
    EndIf
  EndIf
  
  S_Print_ColorIntensityBakup=ci
  If pstream=0 Then 
    pstream=1
    r=r+22
    S_Print_SupressColorIntensity=1
    ci=0
  EndIf
  If pci<>-1 Then
    S_Print_SupressColorIntensity=1
    ci=pci
    pci=-1
  EndIf
  S_Print_ForegroundColorBackup=fc
  If pfc<>-1 Then
    S_Print_SupressForegroundColor=1
    fc=pfc
    pfc=-1
  EndIf
  S_Print_BackgroundColorBackup=bc
  If pfc<>-1 Then
    S_Print_SupressBackgroundColor=1
    bc=pbc
    pbc=-1
  EndIf
  
  S_Print_DrawAtX=SG_POffSetX+c*SG_FontWidth
  S_Print_DrawAtY=SG_POffSetY+r*SG_FontHeight
  
  SP_ColorToLookUp=bc
  S_ColorToRGBLookUp()
  SG_BrushColorBakcup=S_ReturnVal
  GraphicsWindow.BrushColor=SG_BrushColorBakcup
  
  SP_ColorToLookUp=fc
  S_ColorToRGBLookUp()
  SG_PenColorBakcup=S_ReturnVal
  'GraphicsWindow.FillRectangle(S_Print_DrawAtX,S_Print_DrawAtY,SG_FontWidth*S_Print_PrintStringLength,SG_FontHeight)
  
  'GraphicsWindow.BrushColor=SG_PenColorBakcup
  
  'Goto PrintSkip1
  'GraphicsWindow.DrawText(S_Print_DrawAtX,S_Print_DrawAtY,pstr)
  'PrintSkip1:
  'S_Print_PrintStringLength=0
  
  For S_Print_Counter=1 To S_Print_PrintStringLength
    S_Print_CharToDraw=Text.GetSubText(pstr,S_Print_Counter,1)
    GraphicsWindow.BrushColor=SG_BrushColorBakcup
    GraphicsWindow.FillRectangle(S_Print_DrawAtX,S_Print_DrawAtY,SG_FontWidth,SG_FontHeight)
    GraphicsWindow.BrushColor=SG_PenColorBakcup
    
    GraphicsWindow.DrawText(S_Print_DrawAtX,S_Print_DrawAtY,S_Print_CharToDraw)
    'S_Print_CharToDraw=Text.GetSubText(pstr,S_Print_Counter,1)
    S_Print_DrawAtX=S_Print_DrawAtX+SG_FontWidth
  EndFor
  
  'GraphicsWindow.PenColor=SG_PenColorBakcup
  'GraphicsWindow.BrushColor=SG_BrushColorBakcup 
  
  If S_Print_SupressForegroundColor=1 Then
    S_Print_SupressForegroundColor=0
    fc=S_Print_ForegroundColorBackup
  EndIf
  If S_Print_SupressBackgroundColor=1 Then
    S_Print_SupressBackgroundColor=0
    fc=S_Print_BackgroundColorBackup
  EndIf
  If S_Print_SupressColorIntensity=1 Then
    S_Print_SupressColorIntensity=0
    ci=S_Print_ColorIntensityBakup
  EndIf
  
  r=r+1
  c=0
  pstr=""
  
EndSub

Sub String

S_ReturnStr=""
For S_String_Counter=1 To sl 'sl string length
  S_ReturnStr=S_ReturnStr+fch ' fch is fill char
EndFor

EndSub


' Game Subroutines

Sub CycleThruDeskColor
  
  olddc=dc
  Key=""
  While Key=""
    ColorCounter=1
    While ColorCounter<>0 And Key=""
      Key=inkey
      dc=ColorCounter
      Border()
      ColorCounter=ColorCounter+1
      If ColorCounter=8 Then
        ColorCounter=0
        dc=ColorCounter
        Border()
      EndIf
    EndWhile
  EndWhile
  dc=olddc
  Border()
  
EndSub

Sub CycleDeskColor
  
  'If ColorCounter=0 Then
  '  ColorCounter=1
  'EndIf
  If ColorCounter=8 Then
    ColorCounter=0
  EndIf
  dc=ColorCounter
  Border()
  ColorCounter=ColorCounter+1
  
EndSub

Sub PlayScreenBackground
  
  ci=0
  c=0
  If SkyColor<>0 Then
    bc=SkyColor
    sl=32
    fch=" "
    String()
    temp=S_ReturnStr
    For Counter=0 To 12
      r=Counter
      pstr=temp
      Print()  
    EndFor
    temp=""
  EndIf
  
  ci=1
  r=11
  c=6
  bc=4
  sl=21
  fch=" "
  String()
  pstr=S_ReturnStr
  Print()

  sl=22
  fch=" "
  String()
  temp=S_ReturnStr

  For Counter=8 To 21
    bc=2
    r=Counter
    c=5
    pstr=" "
    Print()
    If Counter>11 Then
      r=Counter
      c=5
      pstr=temp
      Print()
      If Counter>12 And Counter<21 Then
        bc=1
        r=Counter
        'c=0
        sl=5
        fch=" "
        String()
        pstr=S_ReturnStr
        Print()
        r=Counter
        c=27
        'sl=5
        'fch=" "
        'String()
        pstr=S_ReturnStr
        Print()
      EndIf
    EndIf
  EndFor
  temp=""

  bc=6
  r=21
  'c=0
  pstr=S_ReturnStr
  Print()
  r=21
  c=27
  pstr=S_ReturnStr
  Print()
  bc=0
  r=0

EndSub


'Main Program

ci=1
dc=3
bc=3
fc=5
'TextWindow.PauseWithoutMessage()
Cls()
'TextWindow.PauseWithoutMessage()

'For x=1 To 1000
  'dc=Math.GetRandomNumber(8)-1
  'Border()
'  r=0
'  pstr=x
'  Print()
'EndFor
'dc=5
'Border()
ci=0
'For x=0 To 21
'  pstr=x
'  Print()
'EndFor

pstr="Hello World!"
Print()
ci=1
bc=0
pstr="12345678901234567890123456789012"
Print()
ci=0
pstr=1+1
Print()

'CycleDeskColor()
'pstr=GraphicsWindow.Left
'Print()




r=20
c=0

sl=32
fch=" "
String()
BlankLineStr=S_ReturnStr
ScrollStr="SpecSim v0.1 by Johnny B. is a simulation of the ZX Spectrum BASIC language written for Microsoft Small Basic v0.6 with the ToneGenerator exstension by Rushworks and it includes a platform/adventure game [Rather a mockup screen], Invasion v0.01 by Johnny B."
ScrollStr=BlankLineStr+ScrollStr+fch
Key=""
ColorCounter=0
OldDc=dc
'Timer.Resume()
StartScroll:
For ScrollCounter=1 To Text.GetLength(ScrollStr)
  r=20
  pstr=Text.GetSubText(ScrollStr,1+ScrollCounter,32)
  Print()
  CycleDeskColor()
  'Program.Delay(144)
  'TextWindow.PauseWithoutMessage()
  S_GetFramesPerSecond()
  Key=inkey
  If Key<>"" Then
    Goto BreakScroll
  EndIf
EndFor
BreakScroll:
If Key="" Then
  Goto StartScroll
EndIf
Key=""
ColorCounter=0
dc=OldDc
Border()

fc=7
bc=0
ci=1
dc=0
Cls()

SkyColor=1
PlayScreenBackground()

CycleThruDeskColor()
