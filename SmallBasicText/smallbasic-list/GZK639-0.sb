' Challenge of the Month - March 2017  KUMIKO pattern -3      by NaochanON   CWS459   GZK639-0

dL="1=30;2=18"     ' half Length of side of triangle

dL=dL+";H1="+(dL[1]/math.SquareRoot(3)*2)

Color="0=Transparent;1=#F8E58C;2=#CA8269;"

YN=15

XN=13

GraphicsWindow.BackgroundColor="Black"

GraphicsWindow.Width=dL[1]*(XN*2+1)

GraphicsWindow.Height=dL[1]*(YN+2)

For N=1 to YN 

  for  M=1 to XN Step 2

    _C="X="+(3*dL["H1"]*(M-1)/2+3*Math.Remainder(N,2)*dL["H1"]/2)+";Y="+(dL["H1"]+dL[1]*(N-1))

    make_triangle()

    Make_Hexagon()

  endfor

endfor

ddx=2

ddY=1

While "True"

  For N=1 to YN 

    for  M=1 to XN Step 2

      NMB= M+":"+N

      For L=1 to 6

        shapes.Move(hxg[NMB][L],Shapes.GetLeft(hxg[NMB][L])+ddX,Shapes.GetTop(hxg[NMB][L])+ddY)

      EndFor

    EndFor

  EndFor

  If Shapes.GetLeft(hxg[XN+":"+1][5])>GraphicsWindow.Width or Shapes.GetLeft(hxg["1:1"][2])<-5Then 

    ddx=-ddx

  ElseIf Shapes.Gettop(hxg[1+":"+YN][1])>GraphicsWindow.height or Shapes.Gettop(hxg["1:1"][1])<-5 then 

    ddy=-ddy

  EndIf

endwhile



sub make_triangle

  NMB=M+":"+N

  GraphicsWindow.BrushColor=Color[0]

  GraphicsWindow.PenWidth=4

  GraphicsWindow.PenColor=Color[1] 

  tri[NMB][1]= Shapes.AddTriangle(dL["H1"]/2,-dL[1],-dL["H1"],0,dL["H1"]/2,dL[1]) 

  Shapes.Animate(tri[NMB][1],_C["X"],_C["Y"],500)

  tri[NMB][2]= Shapes.AddTriangle(-dL["H1"]/2,-dL[1],dL["H1"],0,-dL["H1"]/2,dL[1]) 

  Shapes.animate(tri[NMB][2],_C["X"]+dL["H1"],_C["Y"],500)

  Program.Delay(20)

EndSub



Sub Make_Hexagon

  GraphicsWindow.PenWidth=3

  If Math.Remainder(N,4)=1 Then 

    GraphicsWindow.PenColor="Green" 

  else

    GraphicsWindow.PenColor=Color[2] 

  EndIf

  hxg[NMB][1]=Shapes.AddLine(0,-2*dL[2],-dL[2]*Math.SquareRoot(3),-dL[2])

  hxg[NMB][2]=Shapes.AddLine(-dL[2]*Math.SquareRoot(3),-dL[2],-dL[2]*Math.SquareRoot(3),dL[2])

  hxg[NMB][3]=Shapes.AddLine(-dL[2]*Math.SquareRoot(3),dL[2],0,2*dL[2])

  hxg[NMB][4]=Shapes.AddLine(0,2*dL[2],dL[2]*Math.SquareRoot(3),dL[2])

  hxg[NMB][5]=Shapes.AddLine(dL[2]*Math.SquareRoot(3),dL[2],dL[2]*Math.SquareRoot(3),-dL[2])

  hxg[NMB][6]=Shapes.AddLine(dL[2]*Math.SquareRoot(3),-dL[2],0,-2*dL[2])

  For L=1 To 6

    shapes.Animate(hxg[NMB][L],_C["X"]+dL[1]/2,_C["Y"]-dL[1],500)

  EndFor

EndSub






