' Pictionary - Subroutine

' Version 0.93

' Copyright Â© 2017-2019 Nonki Takahashi.  The MIT License.

' 2017-09-25 15:14:55 Shapes generated by Shapes 2.3b.

' Last update 2019-05-17



GraphicsWindow.Title = "Pictionary"

bbb=LDShapes.BrushGradient("1=white;2=white;3=#333333" "DD")

  LDGraphicsWindow.BackgroundBrush(bbb)

SB_Workaround()

Init()

' initialize subroutine shapes

Shapes_Init_Subroutine()

name = "Subroutine"

Group_Add()

' initialize caption shapes

Shapes_Init_Caption()

name = "Caption"

Group_Add()

' initialize arrow shapes

Shapes_Init_Arrow()

name = "Arrow-1"

Group_Add()

i = nGroup

angle = -45

Group_Rotate()

name = "Arrow-2"

Group_Add()

i = nGroup

x = 270

y = 195

Group_Move()

angle = -135

Group_Rotate()



Sub Init

  gw = 598

  gh = 428

  GraphicsWindow.Width = gw

  GraphicsWindow.Height = gh

EndSub



Sub Group_Add

  ' Group | add shapes to a group

  ' param name - group name

  ' param shX, shY, origin of shape array

  ' param shape[] - shape array

  ' param nGroup - number of group

  ' return nGroup - updated number of group

  ' return group - group array

  Stack.PushValue("local", i)

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  nGroup = nGroup + 1

  grp = ""

  grp["name"] = name

  grp["x"] = shX

  grp["y"] = shY

  grp["angle"] = 0

  grp["dir"] = 1

  Shapes_CalcWidthAndHeight()

  grp["width"] = shWidth

  grp["height"] = shHeight

  grp["cx"] = shWidth / 2

  grp["cy"] = shHeight / 2

  s = 1

  grp["scale"] = s

  For i = 1 To Array.GetItemCount(shape)

    shp = shape[i]

    GraphicsWindow.PenWidth = shp["pw"] * s

    If shp["pw"] > 0 Then

      GraphicsWindow.PenColor = shp["pc"]

    EndIf

    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then

      GraphicsWindow.BrushColor = shp["bc"]

    EndIf

    If Text.IsSubText("text|btn", shp["func"]) Then

      If silverlight Then

        fs = Math.Floor(shp["fs"] * 0.9)

      Else

        fs = shp["fs"]

      EndIf

      GraphicsWindow.FontSize = fs * s

      GraphicsWindow.FontName = shp["fn"]

      If shp["fb"] = "False" Then

        GraphicsWindow.FontBold = "False"

      Else

        GraphicsWindow.FontBold = "True"

      EndIf      

      If shp["fi"] = "False" Then

        GraphicsWindow.FontItalic = "False"

      Else

        GraphicsWindow.FontItalic = "True"

      EndIf

    EndIf

    If shp["func"] = "rect" Then

      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "ell" Then

      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)

    ElseIf shp["func"] = "tri" Then

      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)

    ElseIf shp["func"] = "line" Then

      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)

    ElseIf shp["func"] = "text" Then

      shp["obj"] = Shapes.AddText(shp["text"])

    EndIf

    x = shp["x"]

    y = shp["y"]

    shp["rx"] = x

    shp["ry"] = y

    If sbd And (shp["func"] = "line") Then

      x1 = shp["x1"]

      y1 = shp["y2"]

      x2 = shp["x1"]

      y2 = shp["y2"]

      pw = shp["pw"]

      angle = shp["angle"] + grp["angle"]

      SB_LineWorkAround()

      shp["wx"] = x

      shp["wy"] = y

    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then

      alpha = Math.GetRadians(shp["angle"])

      SB_RotateWorkaround()

      shp["wx"] = x

      shp["wy"] = y

    EndIf

    If shp["func"] = "btn" Then

      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)

    Else

      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)

    EndIf

    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then

      Shapes.Rotate(shp["obj"], shp["angle"])

    EndIf

    shape[i] = shp

  EndFor

  grp["shape"] = shape

  group[nGroup] = grp

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  i = Stack.PopValue("local")

EndSub



Sub Group_Move

  ' Group | move a group

  ' param group[i] - group To move

  ' param x, y - position To move

  ' return group[i] - updated group

  Stack.PushValue("local", j)

  grp = group[i]

  s = grp["scale"]

  grp["x"] = x

  grp["y"] = y

  shape = grp["shape"]

  n = Array.GetItemCount(shape)

  For j = 1 To n

    shp = shape[j]

    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then

      _x = shp["wx"]

      _y = shp["wy"]

    Else

      _x = shp["rx"]

      _y = shp["ry"]

    EndIf

    _w2 = shp["width"] / 2

    _h2 = shp["height"] / 2

    Shapes.Move(shp["obj"], grp["x"] + (_x - _w2) * s + _w2, grp["y"]  + (_y - _h2) * s + _h2)

  EndFor

  group[i] = grp

  j = Stack.PopValue("local")

EndSub



Sub Group_Rotate

  ' Group | rotate a group

  ' param group[i] - group to move

  ' param cx, cy - rotation center (if given)

  ' param angle - to rotate

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  Stack.PushValue("local", n)

  grp = group[i]

  shape = grp["shape"]

  moved = "False"

  If cx <> "" Then

    moved = "True"

  Else

    cx = ""   ' to avoid syntax error

  EndIf

  If cy <> "" Then

    moved = "True"

  Else

    cy = ""   ' to avoid syntax error

  EndIf

  If moved Then

    param["x"] = grp["x"]

    param["y"] = grp["y"]

    param["cx"] = cx

    param["cy"] = cy

    param["width"] = grp["width"]

    param["height"] = grp["height"]

    param["scale"] = 1

    param["angle"] = angle

    Shapes_CalcRotateZoomPos()

    grp["x"] = x

    grp["y"] = y

  EndIf

  param["cx"] = grp["width"] / 2

  param["cy"] = grp["height"] / 2

  param["scale"] = grp["scale"]

  grp["angle"] = angle

  param["angle"] = grp["angle"]

  n = Array.GetItemCount(shape)

  Stack.PushValue("local", i)

  For i = 1 To n

    shp = shape[i]

    param["x"] = shp["x"]

    param["y"] = shp["y"]

    param["width"] = shp["width"]

    param["height"] = shp["height"]

    Shapes_CalcRotateZoomPos()

    shp["rx"] = x

    shp["ry"] = y

    alpha = shp["angle"] + grp["angle"]

    If sbd And (shp["func"] = "line") And (alpha <> 0) Then

      x1 = shp["x1"]

      y1 = shp["y1"]

      x2 = shp["x2"]

      y2 = shp["y2"]

      pw = shp["pw"]

      SB_LineWorkAround()

      shp["wx"] = x

      shp["wy"] = y

    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then

      _alpha = Math.GetRadians(alpha)

      SB_RotateWorkAround()

      shp["wx"] = x

      shp["wy"] = y

    EndIf

    Shapes.Move(shp["obj"], grp["x"] + x, grp["y"] + y)

    Shapes.Rotate(shp["obj"], shp["angle"] + grp["angle"])

    shape[i] = shp

  EndFor

  i = Stack.PopValue("local")

  grp["shape"] = shape

  group[i] = grp

  n = Stack.PopValue("local")

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

EndSub



Sub Math_CartesianToPolar

  ' Math | convert cartesian coodinate to polar coordinate

  ' param x, y - cartesian coordinate

  ' return r, a - polar coordinate

  r = Math.SquareRoot(x * x + y * y)

  If x = 0 And y > 0 Then

    a = 90 ' [degree]

  ElseIf x = 0 And y < 0 Then

    a = -90

  ElseIf x = 0 Then

    a = 0

  Else

    a = Math.ArcTan(y / x) * 180 / Math.Pi

  EndIf

  If x < 0 Then

    a = a + 180

  ElseIf x > 0 And y < 0 Then

    a = a + 360

  EndIf

EndSub



Sub SB_LineWorkaround

  ' Small Basic | line rotate workaround for Silverlight

  ' param x, y - coordinate of the position of the line

  ' param x1, y1 - coordinate of the first point

  ' param x2, y2 - coordinate of the second point

  ' param pw - pen width

  ' param alpha - to rotate [degree]

  ' return x, y - workaround value for the coordinate

  Stack.PushValue("local", x)

  Stack.PushValue("local", y)

  x = x1 - x2

  y = y1 - y2

  Math_CartesianToPolar()

  y = Stack.PopValue("local")

  x = Stack.PopValue("local")

  _a = Math.GetRadians(a)

  _alpha = Math.GetRadians(a - alpha)

  x = x - pw / 4 * (Math.Sin(_alpha) - Math.Sin(_a))

  y = y - pw / 4 * (Math.Cos(_alpha) - Math.Cos(_a))

EndSub



Sub SB_RotateWorkaround

  ' Small Basic | rotate workaround for Silverlight

  ' param shp - current shape

  ' param x, y - original coordinate

  ' param _alpha - angle [radian]

  ' returns x, y - workaround coordinate

  If shp["func"] = "tri" Then

    x1 = -Math.Floor(shp["x3"] / 2)

    y1 = -Math.Floor(shp["y3"] / 2)

  ElseIf shp["func"] = "line" Then

    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)

    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)

  EndIf

  ox = x - x1

  oy = y - y1

  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox

  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy

EndSub



Sub SB_Workaround

  ' Small Basic | workaround for Silverlight / Small Basic Desktop

  ' returns silverlight - "True" if in remote

  sbd = "False"

  color = GraphicsWindow.GetPixel(0, 0)

  If Text.GetLength(color) > 7 Then

    silverlight = "True"

    msWait = 300

  Else

    silverlight = "False"

    If GraphicsWindow.Width = 624 Then

      sbd = "True"

    EndIf

  EndIf

EndSub



Sub Shapes_CalcWidthAndHeight

  ' Shapes | calculate total width and height of shapes

  ' param shape[] - shape array

  ' return shWidth, shHeight - total size of shapes

  For i = 1 To Array.GetItemCount(shape)

    shp = shape[i]

    If shp["func"] = "tri" Or shp["func"] = "line" Then

      xmin = shp["x1"]

      xmax = shp["x1"]

      ymin = shp["y1"]

      ymax = shp["y1"]

      If shp["x2"] < xmin Then

        xmin = shp["x2"]

      EndIf

      If xmax < shp["x2"] Then

        xmax = shp["x2"]

      EndIf

      If shp["y2"] < ymin Then

        ymin = shp["y2"]

      EndIf

      If ymax < shp["y2"] Then

        ymax = shp["y2"]

      EndIf

      If shp["func"] = "tri" Then

        If shp["x3"] < xmin Then

          xmin = shp["x3"]

        EndIf

        If xmax < shp["x3"] Then

          xmax = shp["x3"]

        EndIf

        If shp["y3"] < ymin Then

          ymin = shp["y3"]

        EndIf

        If ymax < shp["y3"] Then

          ymax = shp["y3"]

        EndIf

      EndIf

      shp["width"] = xmax - xmin

      shp["height"] = ymax - ymin

    EndIf

    If i = 1 Then

      shWidth = shp["x"] + shp["width"]

      shHeight = shp["y"] + shp["height"]

    Else

      If shWidth < shp["x"] + shp["width"] Then

        shWidth = shp["x"] + shp["width"]

      EndIf

      If shHeight < shp["y"] + shp["height"] Then

        shHeight = shp["y"] + shp["height"]

      EndIf

    EndIf

    shape[i] = shp

  EndFor

EndSub

  

Sub Shapes_CalcRotateZoomPos

  ' Shapes | calculate position For rotated and zoomed shape

  ' param["x"], param["y"] - position of a shape

  ' param["width"], param["height"] - size of a shape

  ' param ["cx"], param["cy"] - center of rotation

  ' param ["angle"] - rotate angle

  ' param ["scale"] - zoom scale

  ' return x, y - rotated position of a shape

  _cx = param["x"] + param["width"] / 2

  _cy = param["y"] + param["height"] / 2

  x = _cx - param["cx"]

  y = _cy - param["cy"]

  Math_CartesianToPolar()

  a = a + param["angle"]

  x = r * Math.Cos(a * Math.Pi / 180) * param["scale"]

  y = r * Math.Sin(a * Math.Pi / 180) * param["scale"]

  _cx = x + param["cx"]

  _cy = y + param["cy"]

  x = _cx - param["width"] / 2

  y = _cy - param["height"] / 2

EndSub



Sub Shapes_Init_Arrow

  ' Shapes | initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 270 ' x offset

  shY = 85  ' y offset

  shape = ""

  shape[1] = "func=line;x=0;y=5;x1=0;y1=0;x2=80;y2=0;pc=#339999;pw=2;"

  shape[2] = "func=line;x=70;y=0;x1=0;y1=0;x2=10;y2=5;pc=#339999;pw=2;"

  shape[3] = "func=line;x=70;y=5;x1=0;y1=5;x2=10;y2=0;pc=#339999;pw=2;"

EndSub



Sub Shapes_Init_Caption

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 321 ' x offset

  shY = 358 ' y offset

  shape = ""

  shape[1] = "func=text;x=0;y=0;text=Subroutine;fn=trebuchet ms;fs=50;fb=True;pw=0;bc=Black;"

EndSub



Sub Shapes_Init_Subroutine

  ' Shapes | Initialize shapes data

  ' return shX, shY - current position of shapes

  ' return shape - array of shapes

  shX = 140 ' x offset

  shY = 50  ' y offset

  shape = ""

  shape[1] = "func=ell;x=0;y=0;width=40;height=40;bc=#999999;pw=0;"

  shape[2] = "func=rect;x=20;y=0;width=100;height=40;bc=#999999;pw=0;"

  shape[3] = "func=ell;x=100;y=0;width=40;height=40;bc=#999999;pw=0;"

  shape[4] = "func=text;x=40;y=8;text=START;fs=20;fn=noto mono;fb=true;fi=False;"

  shape[5] = "func=line;x=68;y=40;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"

  shape[6] = "func=rect;x=0;y=70;width=140;height=50;bc=#999999;pw=0;"

  shape[7] = "func=text;x=14;y=84;text=LDCall.Function;fs=12;fn=noto mono;fb=False;fi=False;"

  shape[8] = "func=line;x=6;y=70;x1=0;y1=0;x2=0;y2=50;pc=#666666;pw=2;"

  shape[9] = "func=line;x=134;y=70;x1=0;y1=0;x2=0;y2=50;pc=#666666;pw=2;"

  shape[10] = "func=line;x=68;y=120;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"

  shape[11] = "func=tri;x=-2;y=147;x1=70;y1=0;x2=0;y2=27;x3=140;y3=27;bc=#999999;pw=0;"

  shape[12] = "func=tri;x=-2;y=174;x1=70;y1=0;x2=0;y2=27;x3=140;y3=27;angle=180;bc=#999999;pw=0;"

  shape[13] = "func=text;x=40;y=161;text=LOOP?;fs=20;fn=noto mono;fb=False;fi=False;"

  shape[14] = "func=text;x=-40;y=176;text=YES;fs=20;fn=noto mono;fb=False;fi=False;"

  shape[15] = "func=text;x=80;y=198;text=NO;fs=20;fn=noto mono;fb=False;fi=False;"

  shape[16] = "func=line;x=68;y=200;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"

  shape[17] = "func=ell;x=0;y=230;width=40;height=40;bc=#999999;pw=0;"

  shape[18] = "func=rect;x=20;y=230;width=100;height=40;bc=#999999;pw=0;"

  shape[19] = "func=ell;x=100;y=230;width=40;height=40;bc=#999999;pw=0;"

  shape[20] = "func=text;x=50;y=238;text=END;fs=20;fn=noto mono;fb=true;fi=False;"

  shape[21] = "func=line;x=-40;y=55;x1=0;y1=0;x2=0;y2=120;pc=#666666;pw=2;"

  shape[22] = "func=line;x=-40;y=55;x1=0;y1=0;x2=109;y2=0;pc=#666666;pw=2;"

  shape[23] = "func=line;x=-40;y=174;x1=0;y1=0;x2=40;y2=0;pc=#666666;pw=2;"

  shape[24] = "func=line;x=68;y=55;x1=0;y1=0;x2=-10;y2=-5;pc=#666666;pw=2;"

  shape[25] = "func=line;x=68;y=55;x1=0;y1=0;x2=-10;y2=5;pc=#666666;pw=2;"

  shape[26] = "func=ell;x=200;y=0;width=40;height=40;bc=#99FFFF;pw=0;"

  shape[27] = "func=rect;x=220;y=0;width=100;height=40;bc=#99FFFF;pw=0;"

  shape[28] = "func=ell;x=300;y=0;width=40;height=40;bc=#99FFFF;pw=0;"

  shape[29] = "func=text;x=250;y=8;text=Sub;fs=20;fn=Times new roman;fb=true;fi=true;"

  shape[30] = "func=line;x=268;y=40;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"

  shape[31] = "func=rect;x=200;y=70;width=140;height=50;bc=#99FFFF;pw=0;"

  shape[32] = "func=text;x=230;y=84;text=PROCESS;fs=20;fn=noto mono;fb=False;fi=true;"

  shape[33] = "func=line;x=268;y=120;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"

  shape[34] = "func=ell;x=200;y=150;width=40;height=40;bc=#99FFFF;pw=0;"

  shape[35] = "func=rect;x=220;y=150;width=100;height=40;bc=#99FFFF;pw=0;"

  shape[36] = "func=ell;x=300;y=150;width=40;height=40;bc=#99FFFF;pw=0;"

  shape[37] = "func=text;x=234;y=158;text=EndSub;fs=20;fn=Times new roman;fb=true;fi=true;"

EndSub


