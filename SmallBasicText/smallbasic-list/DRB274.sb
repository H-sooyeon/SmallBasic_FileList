' Gemini
' Version 0.1
' ふたご
' June
' Copyright © 2016 Nonki Takahashi.  The MIT License.
' Update 2016-04-02
'
' Reference:
'  http://en.wikipedia.org/wiki/List_of_stars_in_Gemini
'
GraphicsWindow.Title = "Gemini 0.1"
SB_Workaround()
wrap = "True"
gw = 598
gh = 428
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
GraphicsWindow.BackgroundColor = "Black"
' initialize shapes
Shapes_Init()
' add shapes
scale = 1
angle = 0
iMin = 1
iMax = 54
Shapes_Add()
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 100
GraphicsWindow.BrushColor = "Gray"
symbol = Shapes.AddText("♊")
Shapes.Move(symbol, gw - 120, gh - 140)
InitStars()
num = Array.GetItemCount(star)
index = Array.GetAllIndices(star)
offsetX = 0
offsetY = 0
GetMinMax()
offsetX = -xMin - 720
offsetY = -yMin + 130
DrawGrids()
GraphicsWindow.PenWidth = 1
GraphicsWindow.PenColor = "DarkGray"
num = Array.GetItemCount(edge)
index = Array.GetAllIndices(edge)
For i = 1 To num
  e = edge[index[i]]
  m = Text.GetIndexOf(e, "-")
  ra = star[Text.GetSubText(e, 1, m - 1)]["RA"]
  dec = star[Text.GetSubText(e, 1, m - 1)]["Dec"]
  RADec2XY()
  x1 = x
  y1 = y
  ra = star[Text.GetSubTextToEnd(e, m + 1)]["RA"]
  dec = star[Text.GetSubTextToEnd(e, m + 1)]["Dec"]
  RADec2XY()
  x2 = x
  y2 = y
  Shapes.AddLine(x1, y1, x2, y2)
EndFor
num = Array.GetItemCount(star)
index = Array.GetAllIndices(star)
GraphicsWindow.BrushColor = "White"
For i = 1 To num
  ra = star[index[i]]["RA"]
  dec = star[index[i]]["Dec"]
  RADec2XY()
  mag = star[index[i]]["Mag"]
  d = 16 / mag
  ell = Shapes.AddEllipse(d, d)
  Shapes.Move(ell, x - d / 2, y - d / 2) 
EndFor
GraphicsWindow.BrushColor = "White"
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 30
x = 50
y = 30
GraphicsWindow.DrawText(x, y, "June")
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 40
year = 2016
GraphicsWindow.DrawText(x, y + 30, year)
Cal_Init()
sBuf = year + ",6"
Command_GetArgs()
iYear = sArg[1]
if iYear = "" Then
  Goto lEnd
Endif
If Math.Remainder(iYear, 4) = 0 And Math.Remainder(iYear, 100) > 0 Or Math.Remainder(iYear, 400) = 0 Then
  iDoM[2] = iDoM[2] + 1
Endif
iNoL = Math.Floor((iYear - 1) / 4) - Math.Floor((iYear - 1) / 100) + Math.Floor((iYear - 1) / 400)  ' number of leap year
iWoY = Math.Remainder((iYear + iNoL), 7)  ' week of year
iMonth = sArg[2]
If iMonth = "" Then
  iM0 = 1
  iM1 = 12
Else
  iM0 = iMonth
  iM1 = iMonth
Endif
iDoY = 0  ' days of year
iNoM = 1  ' number of month
For iM = iM0 To iM1
  While iNoM < iM
    iDoY = iDoY + iDoM[iNoM]
    iNoM = iNoM + 1
  EndWhile
  Cal_DrawMonth()
EndFor  
lEnd:
' Blink start
While "True"
  Program.Delay(2900)
  Shapes.HideShape(shape[51]["obj"])
  Shapes.HideShape(shape[52]["obj"])
  Shapes.HideShape(shape[53]["obj"])
  Shapes.HideShape(shape[54]["obj"])
  Program.Delay(100)
  Shapes.ShowShape(shape[51]["obj"])
  Shapes.ShowShape(shape[52]["obj"])
  Shapes.ShowShape(shape[53]["obj"])
  Shapes.ShowShape(shape[54]["obj"])
EndWhile
' end of main
Sub Cal_Init
  ' Calendar | Initialize days of month
  CRLF = Text.GetCharacter(13) + Text.GetCharacter(10)
  iDoM = "1=31;2=28;3=31;4=30;5=31;6=30;7=31;8=31;9=30;10=31;11=30;12=31;"
EndSub
Sub Cal_DrawMonth
  ' Calendar | Print month
  ' param iM - month
  ' param iDoY - days of year
  ' param iWoY - week of year
  If silverlight Then
    Program.Delay(msWait)
  EndIf
  GraphicsWindow.FontSize = 16
  GraphicsWindow.FontName = "Consolas"
  iW = Math.Remainder((iDoY + iWoY), 7)
  line = "SUN MON TUE WED THU FRI SAT" + CRLF
  iWoM = 0
  While iWoM < iW
    line = line + "    "
    iWoM = iWoM + 1
  EndWhile
  For iD = 1 To iDoM[iM]
    If iD < 10 Then
      line = line + "  " + iD + " "
    Else
      line = line + " " + iD + " "
    EndIf
    If Math.Remainder(iWoM, 7) = 6 Then
      line = line + CRLF
    EndIf
    iWoM = iWoM + 1
  EndFor
  If Math.Remainder(iWoM, 7) > 0 Then
    line = line + CRLF
  EndIf
  cal = Shapes.AddText(line)
  Shapes.Move(cal, 330, 40)
EndSub
Sub Command_GetArgs
  ' Command line | Get arguments
  ' param sBuf - input buffer
  ' return sArg[] - arguments
  ' return iN - number of arguments
  iP = 1  ' buffer pointer
  iN = 1  ' number of args
  iC = Text.GetIndexOf(sBuf, ",")   ' index of comma
  While iC > iP
    sArg[iN] = Text.GetSubText(sBuf, iP, iC - iP)
    iP = iC + 1
    iN = iN + 1
    iC = Text.GetIndexOf(sBuf, ",")
  EndWhile
  iE = Text.GetLength(sBuf) + 1     ' end of buffer
  sArg[iN] = Text.GetSubText(sBuf, iP, iE - iP)  
EndSub
Sub GetMinMax
  For i = 1 To num
    ra = star[index[i]]["RA"]
    dec = star[index[i]]["Dec"]
    RADec2XY()
    ra1 = Text.GetSubText(ra, 1, 2)
    If wrap And 12 < ra1 Then
      ra1 = ra1 - 24
    EndIf
    If i = 1 Then
      raMin = ra1
      decMin = Text.GetSubText(dec, 1, 3)
      raMax = ra1
      decMax = Text.GetSubText(dec, 1, 3)
      xMin = x
      yMin = y
      xMax = x
      yMax = y
    Else
      raMin = Math.Min(ra1, raMin)
      decMin = Math.Min(Text.GetSubText(dec, 1, 3), decMin)
      raMax = Math.Max(ra1, raMax)
      decMax = Math.Max(Text.GetSubText(dec, 1, 3), decMax)
      xMin = Math.Min(x, xMin)
      yMin = Math.Min(y, yMin)
      xMax = Math.Max(x, xMax)
      yMax = Math.Max(y, yMax)
    EndIf
  EndFor
  decMin = Math.Floor(decMin / 10) * 10
  raMax = raMax + 1
  decMax = decMax + 1
EndSub
Sub InitStars
  ' Initialize stars in Gemini
  ' index: Flamsteed designation
  ' RA (Right ascension), Dec (Declination), Mag (Apparent magnitude)
  star[78] = "name=Pollux;ra=07 45 19.36;dec=+28 01 34.7;mag=1.16;"
  star[66] = "name=Castor A;ra=07 34 36.00;dec=+31 53 19.1;mag=1.90;"
  star[24] = "name=γ Gem;ra=06 37 42.70;dec=+16 23 57.9;mag=1.93;"
  star[13] = "name=μ Gem;ra=06 22 57.59;dec=+22 30 49.9;mag=2.87;"
  '  star[66] = "name=Castor B;ra=07 34 36.00;dec=+31 53 19.0;mag=2.88;"
  star[27] = "name=ε Gem;ra=06 43 55.93;dec=+25 07 52.2;mag=3.06;"
  star[7] = "name=η Gem;ra=06 14 52.70;dec=+22 30 24.6;mag=3.31;"
  star[31] = "name=ξ Gem;ra=06 45 17.43;dec=+12 53 45.8;mag=3.35;"
  star[55] = "name=δ Gem;ra=07 20 07.39;dec=+21 58 56.4;mag=3.50;"
  star[77] = "name=κ Gem;ra=07 44 26.87;dec=+24 23 53.3;mag=3.57;"
  star[54] = "name=λ Gem;ra=07 18 05.61;dec=+16 32 25.7;mag=3.58;"
  star[34] = "name=θ Gem;ra=06 52 47.34;dec=+33 57 40.9;mag=3.60;"
  star[60] = "name=ι Gem;ra=07 25 43.68;dec=+27 47 53.8;mag=3.78;"
  star[43] = "name=ζ Gem;ra=07 04 06.54;dec=+20 34 13.1;mag=4.01;"
  star[69] = "name=υ Gem;ra=07 35 55.37;dec=+26 53 45.6;mag=4.06;"
  star[18] = "name=ν Gem A;ra=06 28 57.79;dec=+20 12 43.8;mag=4.13;"
  star[1] = "name=1 Gem;ra=06 04 07.22;dec=+23 15 49.1;mag=4.16;"
  star[62] = "name=ρ Gem;ra=07 29 06.61;dec=+31 47 02.7;mag=4.16;"
  star[75] = "name=σ Gem;ra=07 43 18.69;dec=+28 53 02.7;mag=4.23;"
  star[46] = "name=τ Gem;ra=07 11 08.39;dec=+30 14 43.0;mag=4.41;"
  star[30] = "name=30 Gem;ra=06 43 59.29;dec=+13 13 41.3;mag=4.49;"
  star[38] = "name=38 Gem;ra=06 54 38.59;dec=+13 10 40.9;mag=4.71;"
  star[71] = "name=ο Gem;ra=07 39 09.96;dec=+34 35 04.7;mag=4.89;"
  star[81] = "name=81 Gem;ra=07 46 07.49;dec=+18 30 36.6;mag=4.89;"
  star[83] = "name=φ Gem;ra=07 53 29.84;dec=+26 45 57.1;mag=4.97;"
  star[65] = "name=65 Gem;ra=07 29 48.78;dec=+27 54 58.3;mag=5.01;"
  star[57] = "name=57 Gem;ra=07 23 28.55;dec=+25 03 02.2;mag=5.04;"
  star[74] = "name=74 Gem;ra=07 39 28.59;dec=+17 40 28.3;mag=5.04;"
  star[51] = "name=51 Gem;ra=07 13 22.27;dec=+16 09 32.6;mag=5.07;"
  star[64] = "name=64 Gem;ra=07 29 20.46;dec=+28 07 06.3;mag=5.07;"
  star[56] = "name=56 Gem;ra=07 21 56.90;dec=+20 26 37.4;mag=5.09;"
  star[80] = "name=π Gem;ra=07 47 30.34;dec=+33 24 56.8;mag=5.14;"
  star[26] = "name=26 Gem;ra=06 42 24.32;dec=+17 38 43.9;mag=5.20;"
  star[42] = "name=ω Gem;ra=07 02 24.78;dec=+24 12 55.6;mag=5.20;"
  star[63] = "name=63 Gem;ra=07 27 44.39;dec=+21 26 44.0;mag=5.20;"
  star[68] = "name=68 Gem;ra=07 33 36.50;dec=+15 49 36.1;mag=5.27;"
  star[36] = "name=36 Gem;ra=06 51 33.05;dec=+21 45 40.4;mag=5.28;"
  star[76] = "name=76 Gem;ra=07 44 06.92;dec=+25 47 03.2;mag=5.30;"
  star[85] = "name=85 Gem;ra=07 55 39.90;dec=+19 53 02.6;mag=5.38;"
  star[28] = "name=28 Gem;ra=06 44 45.46;dec=+28 58 15.6;mag=5.42;"
  star[45] = "name=45 Gem;ra=07 08 22.04;dec=+15 55 51.3;mag=5.47;"
  star[70] = "name=70 Gem;ra=07 38 32.84;dec=+35 02 54.5;mag=5.58;"
  star[35] = "name=35 Gem;ra=06 50 25.50;dec=+13 24 47.5;mag=5.68;"
  star[41] = "name=41 Gem;ra=07 00 15.82;dec=+16 04 44.4;mag=5.73;"
  star[37] = "name=37 Gem;ra=06 55 18.69;dec=+25 22 32.3;mag=5.73;"
  star[3] = "name=3 Gem;ra=06 09 43.99;dec=+23 06 48.5;mag=5.75;"
  star[47] = "name=47 Gem;ra=07 11 23.08;dec=+26 51 24.0;mag=5.75;"
  star[53] = "name=53 Gem;ra=07 15 57.18;dec=+27 53 50.7;mag=5.75;"
  star[59] = "name=59 Gem;ra=07 24 33.44;dec=+27 38 16.1;mag=5.77;"
  star[5] = "name=5 Gem;ra=06 11 32.31;dec=+24 25 13.4;mag=5.83;"
  star[52] = "name=52 Gem;ra=07 14 41.94;dec=+24 53 06.7;mag=5.84;"
  star[48] = "name=48 Gem;ra=07 12 26.39;dec=+24 07 43.3;mag=5.85;"
  star[33] = "name=33 Gem;ra=06 49 49.85;dec=+16 12 10.5;mag=5.85;"
  star[61] = "name=61 Gem;ra=07 26 56.33;dec=+20 15 27.3;mag=5.94;"
  star[44] = "name=44 Gem;ra=07 05 18.37;dec=+22 38 14.9;mag=6.00;"
  star[8] = "name=8 Gem;ra=06 16 19.05;dec=+23 58 12.2;mag=6.09;"
  star[58] = "name=58 Gem;ra=07 23 28.15;dec=+22 56 43.6;mag=6.17;"
  star[82] = "name=82 Gem;ra=07 48 33.65;dec=+23 08 27.5;mag=6.18;"
  star[39] = "name=39 Gem;ra=06 58 47.52;dec=+26 04 51.1;mag=6.20;"
  star[16] = "name=16 Gem;ra=06 27 56.69;dec=+20 29 46.6;mag=6.22;"
  star[9] = "name=9 Gem;ra=06 16 58.71;dec=+23 44 27.3;mag=6.24;"
  star[20] = "name=20 Gem;ra=06 32 18.52;dec=+17 47 03.4;mag=6.26;"
  star[(141)] = "name=141 Tau;ra=06 01 41.63;dec=+22 24 03.8;mag=6.36;"
  star[19] = "name=19 Gem;ra=06 31 37.44;dec=+15 54 12.7;mag=6.38;"
  star[40] = "name=40 Gem;ra=06 59 27.94;dec=+25 54 51.1;mag=6.40;"
  star[25] = "name=25 Gem;ra=06 41 20.90;dec=+28 11 47.9;mag=6.45;"
  star[50] = "name=50 Gem;ra=07 12 49.08;dec=+27 13 30.2;mag=6.46;"
  star[32] = "name=32 Gem;ra=06 45 54.20;dec=+12 41 36.8;mag=6.47;"
  star[6] = "name=6 Gem;ra=06 12 19.10;dec=+22 54 30.7;mag=6.51;"
  star[79] = "name=79 Gem;ra=07 45 09.34;dec=+20 18 57.8;mag=6.53;"
  star[15] = "name=15 Gem A;ra=06 27 46.58;dec=+20 47 22.6;mag=6.54;"
  star[10] = "name=10 Gem;ra=06 18 54.43;dec=+23 36 11.9;mag=6.58;"
  star[2] = "name=2 Gem;ra=06 06 48.66;dec=+23 38 19.0;mag=6.67;"
  star[23] = "name=23 Gem;ra=06 36 02.12;dec=+16 47 49.5;mag=6.73;"
  star[4] = "name=4 Gem;ra=06 10 29.94;dec=+22 59 52.4;mag=6.88;"
  star[11] = "name=11 Gem;ra=06 19 19.30;dec=+23 28 09.9;mag=6.91;"
  star[12] = "name=12 Gem;ra=06 19 22.52;dec=+23 16 28.2;mag=6.95;"
  star[49] = "name=49 Gem;ra=07 12 49.38;dec=+25 44 55.3;mag=7.05;"
  star[18] = "name=ν Gem B;ra=06 28 53.70;dec=+20 14 20.0;mag=8.00;"
  star[15] = "name=15 Gem B;ra=06 27 45.94;dec=+20 46 59.6;mag=8.59;"
  edge = "1=66-46;2=46-27;3=27-13;4=13-7;5=66-78;6=78-55;7=55-43;"
  edge = edge + "8=43-24;"
EndSub
Sub DrawGrids
  If silverlight Then
    Program.Delay(msWait)
  EndIf
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "DimGray"
  GraphicsWindow.BrushColor = "DimGray"
  GraphicsWindow.FontSize = 12
  y1 = 0
  y2 = GraphicsWindow.Height
  For ra = raMin To raMax
    RADec2XY()
    Shapes.AddLine(x, y1, x, y2)
    raTxt = ra
    If wrap And raTxt < 0 Then
      raTxt = raTxt + 24
    EndIf
    txt = Shapes.AddText(raTxt + "h")
    Shapes.Move(txt, x, 5) 
  EndFor
  x1 = 0
  x2 = GraphicsWindow.Width
  For dec = decMin To decMax + 10 Step 10
    If dec > 0 Then
      dec = Text.Append("+", Math.Abs(dec))
    EndIf
    RADec2XY()
    Shapes.AddLine(x1, y, x2, y)
    txt = Shapes.AddText(dec)
    Shapes.Move(txt, x1, y) 
  EndFor
EndSub
Sub RADec2XY
  ' param ra - right ascension
  ' param dec - declination
  ' return x, y
  x = Text.GetSubText(ra, 1, 2)
  If wrap And 12 < x Then
    x = x - 24
  EndIf
  x = x + Text.GetSubText(ra, 4, 2) / 60
  x = x + Text.GetSubText(ra, 7, 5) / 3600
  x = offsetX - (x - raMin) * 3600 / 24
  y = Text.GetSubText(dec, 2, 2)
  y = y + Text.GetSubText(dec, 5, 2) / 60
  y = y + Text.GetSubText(dec, 8, 5) / 3600
  y = y * Text.Append(Text.GetSubText(dec, 1, 1), "1")
  y = offsetY - y * 3600 / 360
EndSub
Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 148 ' x offset
  shY = 56 ' y offset
  shape = ""
  shape[1] = "func=ell;x=34;y=69;width=54;height=52;bc=#A4825B;pw=0;"
  shape[2] = "func=ell;x=0;y=117;width=54;height=52;bc=#A4825B;pw=0;"
  shape[3] = "func=ell;x=30;y=144;width=41;height=61;angle=33;bc=#A4825B;pw=0;"
  shape[4] = "func=rect;x=109;y=201;width=44;height=21;bc=#A4825B;pw=0;"
  shape[5] = "func=rect;x=91;y=224;width=44;height=21;angle=4;bc=#A4825B;pw=0;"
  shape[6] = "func=rect;x=138;y=221;width=67;height=20;angle=43;bc=#A4825B;pw=0;"
  shape[7] = "func=rect;x=118;y=244;width=67;height=20;angle=43;bc=#A4825B;pw=0;"
  shape[8] = "func=rect;x=141;y=164;width=61;height=23;angle=335;bc=#A4825B;pw=0;"
  shape[9] = "func=rect;x=172;y=143;width=44;height=21;angle=335;bc=#A4825B;pw=0;"
  shape[10] = "func=rect;x=196;y=156;width=67;height=20;angle=43;bc=#A4825B;pw=0;"
  shape[11] = "func=rect;x=177;y=180;width=67;height=20;angle=57;bc=#A4825B;pw=0;"
  shape[12] = "func=ell;x=245;y=179;width=41;height=16;angle=333;bc=#A4825B;pw=0;"
  shape[13] = "func=ell;x=218;y=210;width=41;height=16;angle=349;bc=#A4825B;pw=0;"
  shape[14] = "func=ell;x=187;y=246;width=41;height=16;angle=349;bc=#A4825B;pw=0;"
  shape[15] = "func=ell;x=161;y=269;width=41;height=20;angle=7;bc=#A4825B;pw=0;"
  shape[16] = "func=rect;x=77;y=121;width=101;height=50;angle=39;bc=#A4825B;pw=0;"
  shape[17] = "func=rect;x=34;y=169;width=85;height=53;angle=38;bc=#A4825B;pw=0;"
  shape[18] = "func=rect;x=106;y=86;width=53;height=22;angle=348;bc=#A4825B;pw=0;"
  shape[19] = "func=rect;x=148;y=69;width=51;height=20;angle=325;bc=#A4825B;pw=0;"
  shape[20] = "func=tri;x=133;y=0;x1=11;y1=0;x2=0;y2=42;x3=23;y3=42;angle=305;bc=#624E37;pw=0;"
  shape[21] = "func=line;x=156;y=28;x1=0;y1=0;x2=89;y2=60;pc=#624E37;pw=4;"
  shape[22] = "func=tri;x=230;y=74;x1=12;y1=0;x2=0;y2=20;x3=24;y3=20;angle=307;bc=#624E37;pw=0;"
  shape[23] = "func=rect;x=248;y=84;width=25;height=28;angle=304;bc=#624E37;pw=0;"
  shape[24] = "func=tri;x=252;y=94;x1=15;y1=0;x2=0;y2=18;x3=30;y3=18;angle=307;bc=#000000;pw=0;"
  shape[25] = "func=rect;x=91;y=174;width=51;height=19;angle=358;bc=#A4825B;pc=#000000;pw=2;"
  shape[26] = "func=ell;x=130;y=169;width=29;height=25;bc=#A4825B;pw=0;"
  shape[27] = "func=rect;x=32;y=189;width=20;height=48;angle=350;bc=#A4825B;pw=0;"
  shape[28] = "func=rect;x=36;y=222;width=46;height=18;bc=#A4825B;pw=0;"
  shape[29] = "func=rect;x=64;y=241;width=9;height=0;bc=#A4825B;pw=0;"
  shape[30] = "func=rect;x=55;y=136;width=44;height=20;angle=324;bc=#A4825B;pw=0;"
  shape[31] = "func=rect;x=62;y=151;width=56;height=22;angle=74;bc=#A4825B;pc=#000000;pw=2;"
  shape[32] = "func=ell;x=86;y=169;width=23;height=23;angle=347;bc=#A4825B;pw=0;"
  shape[33] = "func=ell;x=77;y=87;width=42;height=63;angle=44;bc=#A4825B;pw=0;"
  shape[34] = "func=ell;x=73;y=221;width=27;height=23;angle=13;bc=#A4825B;pw=0;"
  shape[35] = "func=ell;x=103;y=116;width=61;height=64;angle=316;bc=#624E37;pw=0;"
  shape[36] = "func=ell;x=111;y=128;width=40;height=34;angle=313;bc=#A4825B;pw=0;"
  shape[37] = "func=rect;x=104;y=120;width=25;height=23;angle=315;bc=#A4825B;pw=0;"
  shape[38] = "func=ell;x=93;y=117;width=19;height=30;angle=318;bc=#624E37;pw=0;"
  shape[39] = "func=ell;x=108;y=102;width=19;height=30;angle=318;bc=#624E37;pw=0;"
  shape[40] = "func=line;x=118;y=134;x1=0;y1=0;x2=29;y2=27;pc=#624E37;pw=2;"
  shape[41] = "func=line;x=111;y=135;x1=0;y1=0;x2=29;y2=29;pc=#624E37;pw=2;"
  shape[42] = "func=line;x=121;y=128;x1=0;y1=0;x2=28;y2=27;pc=#624E37;pw=2;"
  shape[43] = "func=ell;x=89;y=119;width=15;height=29;angle=340;bc=#A4825B;pw=0;"
  shape[44] = "func=ell;x=113;y=95;width=15;height=29;angle=291;bc=#A4825B;pw=0;"
  shape[45] = "func=ell;x=184;y=40;width=26;height=33;angle=352;bc=#A4825B;pw=0;"
  shape[46] = "func=rect;x=107;y=130;width=22;height=9;angle=313;bc=#624E37;pw=0;"
  shape[47] = "func=rect;x=131;y=152;width=22;height=9;angle=315;bc=#624E37;pw=0;"
  shape[48] = "func=tri;x=126;y=106;x1=6;y1=0;x2=0;y2=10;x3=12;y3=10;angle=294;bc=#000000;pw=0;"
  shape[49] = "func=ell;x=68;y=74;width=26;height=19;angle=39;bc=#A4825B;pw=0;"
  shape[50] = "func=ell;x=2;y=152;width=26;height=19;angle=231;bc=#A4825B;pw=0;"
  shape[51] = "func=ell;x=60;y=84;width=13;height=13;bc=#000000;pw=0;"
  shape[52] = "func=ell;x=48;y=99;width=13;height=13;bc=#000000;pw=0;"
  shape[53] = "func=ell;x=32;y=122;width=13;height=13;bc=#000000;pw=0;"
  shape[54] = "func=ell;x=20;y=137;width=13;height=13;bc=#000000;pw=0;"
EndSub
Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub
Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub
Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      If silverlight Then
        Program.Delay(msWait)
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub
Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
