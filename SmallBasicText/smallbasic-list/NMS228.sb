' GraphicsWindow mit fester Größe 1600x800px einrichten. Abstand von linker oberer Ecke: x=50, y=20.

' Resize dieses GraphicsWindow nicht erlaubt.

' ----------------------------------------------------------------------------------------------------------------------------

' Daten für mögliche flexible Skalierung des GraphicsWindow

'SysScreenW = Desktop.Width

'SysScreenH = Desktop.Height

'MyScreenW = SysScreenW * 0.8

'MyScreenH = SysScreenH * 0.8

' -----------------------------------------

' Basisdaten für Programmverzeichnis, Screengröße und PPT-Zeichenbereich bzw. Skalierungsfaktor

PATH = "C:\PPT-Calculator\"

'PATH = "E:\FOTOGRAFIE_SW\@@@_Passepartout_Calculator\My-SB-Programs\"

MyScreenW = 1600

MyScreenH = 800

PPTfac = MyScreenH - 200    ' PPTfac = 600 pixel im Quadrat (800 -200 = 600px)



' Farben für PPT

PPTColor = "Snow"

CutoutColor = "SlateGray"





' -----------------------------------------

' PPT-Zeichenbereich kalkulieren und GraphicsWindow anzeigen

PPTScreenW = MyScreenW * 0.5

PPTScreenH = MyScreenH

GraphicsWindow.BackgroundColor = "LightGray"

GraphicsWindow.FontName = "Calibri"

GraphicsWindow.FontSize = 14

'GraphicsWindow.FontBold = "True"

GraphicsWindow.CanResize = "True"

GraphicsWindow.Width = MyScreenW

GraphicsWindow.Height = MyScreenH

GraphicsWindow.Top = 100

GraphicsWindow.Left = 40

GraphicsWindow.Title = "Tom's Passepartout Calculator"





CreateBasicGUI()

ClearButton()

ExitButton()

PPTButtons()

BTWButtons()

CreateStep25GUI()









Sub CreateBasicGUI

' Platz für die Bilder, welche  die Bilder pro PPT anzeigen (Schritt 1)

GraphicsWindow.PenColor = "Black"

GraphicsWindow.PenWidth = 2

' Rectangle linke Screenhälfte

GraphicsWindow.DrawRectangle(1, 1, (MyScreenW * 0.5) -1 , MyScreenH - 2)

' 1. senkrechte Linie zur Trennung Schritte 1-5 <-> Eingaben

GraphicsWindow.DrawLine((MyScreenW * 0.5) - 720, 1, (MyScreenW * 0.5) - 720, MyScreenH)

' 2. senkrechte Linie zur Trennung Grafiken <-> Eingaben

GraphicsWindow.DrawLine((MyScreenW * 0.5) - 210, 1, (MyScreenW * 0.5) - 210, MyScreenH)

' 1. horizontale Linie mit Text "Schritt 1" -> Auswahl der Anzahl der Bilder/PPT

GraphicsWindow.DrawLine(1, 170, (MyScreenW * 0.5) - 1, 170)

GraphicsWindow.BrushColor = "Black" '"DarkGreen"

GraphicsWindow.DrawText(10, 15, "Schritt 1")

' 2. horizontale Linie mit Text "Schritt 2" -> Eingabe PPT-Größe

GraphicsWindow.DrawLine(1, 310, (MyScreenW * 0.5) - 1, 310)

GraphicsWindow.DrawText(10, 185, "Schritt 2")

' 3. horizontale Linie mit Text "Schritt 3" -> Eingabe Bild-Größe

GraphicsWindow.DrawLine(1, 450, (MyScreenW * 0.5) - 1, 450)

GraphicsWindow.DrawText(10, 325, "Schritt 3")

' 4. horizontale Linie mit Text "Schritt 4a" -> Eingabe zusätzlicher Layout-Maße (Z & S)

GraphicsWindow.DrawLine(1, 615, (MyScreenW * 0.5) - 1, 615)

GraphicsWindow.DrawText(10, 465, "Schritt 4a")

' 5. horizontale Linie mit Text "Schritt 4b" -> Eingabe Auswahl bei PPT = 1:1 und Bild = 1:1 bei 2/3 Bildern Hoch/Quer

GraphicsWindow.DrawLine(1, 715, (MyScreenW * 0.5) - 1, 715)

GraphicsWindow.DrawText(10, 630, "Schritt 4b")





' Text "Schritt 5" -> Auswahl des Bottom Weight Factors BWT

GraphicsWindow.DrawText(10, 730, "Schritt 5")



' PPT-window (rechte Hälfte (PPT-Bereich) bekommt u.U. andere Hintergrundfarbe)

PPTWinColor = "DarkGray"

GraphicsWindow.BrushColor = PPTWinColor

GraphicsWindow.FillRectangle(PPTScreenW+1, 0, PPTScreenW-1, PPTScreenH)



' Ausrrufezeichen "mark" für Fehler definiert

MarkImg = ImageList.LoadImage(PATH + "mark.jpg")

' Aufhebung des "mark" via "nomark"

NoMarkImg = ImageList.LoadImage(PATH + "nomark.jpg")





EndSub







Sub CreateStep25GUI

  

' Eingabefelder für die PPT-Größe

PPTImg = ImageList.LoadImage(PATH + "pptmasse.jpg")

GraphicsWindow.DrawImage(PPTImg, (MyScreenW * 0.5) - 205,172)

Controls.SetTextBoxText(PPTAtextbox, "")  

Controls.SetTextBoxText(PPTBtextbox, "")

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(100, 185, "Passepartout/Rahmen Maße [70 - 1400 mm]")

GraphicsWindow.DrawText(100, 230, "PPT-Höhe A [in mm]: ")  

PPTAtextbox = Controls.AddTextBox(270, 228)

Controls.SetSize(PPTAtextbox, 70, 25)

GraphicsWindow.DrawText(100, 270, "PPT-Breite B [in mm]: ")  

PPTBtextbox = Controls.AddTextBox(270, 268)

Controls.SetSize(PPTBtextbox, 70, 25)



' Eingabefelder für die Bild-Größe

PICImg = ImageList.LoadImage(PATH + "picmasse.jpg")

GraphicsWindow.DrawImage(PICImg, (MyScreenW * 0.5) - 205,313)

Controls.SetTextBoxText(PICA2textbox, "")  

Controls.SetTextBoxText(PICB2textbox, "")

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(100, 325, "Maße (gedrucktes) Bild [20 - 1000 mm]")

GraphicsWindow.DrawText(100, 370, "Bild-Höhe A2 [in mm]: ")  

PICA2textbox = Controls.AddTextBox(270, 368)

Controls.SetSize(PICA2textbox, 70, 25)

GraphicsWindow.DrawText(100, 410, "Bild-Breite B2 [in mm]: ")  

PICB2textbox = Controls.AddTextBox(270, 408)

Controls.SetSize(PICB2textbox, 70, 25)





' Hier evtl. TXT-Box ändern in reine TXT-Ausgabe - Errechnete Formate für PPT und Bild und Steg

GraphicsWindow.BrushColor = "Black"



GraphicsWindow.DrawText(480, 185, "PPT-Format") 

PPTFtextbox=Controls.AddTextBox(480, 205) 

Controls.SetSize(PPTFtextbox, 100, 25) 

Controls.SetTextBoxText(PPTFtextbox, "=> berechnet")



GraphicsWindow.DrawText(480, 325, "Bild-Format") 

PICFtextbox=Controls.AddTextBox(480, 345) 

Controls.SetSize(PICFtextbox, 100, 25) 

Controls.SetTextBoxText(PICFtextbox, "=> berechnet")





GraphicsWindow.DrawText(480, 465, "S+2*Z >= 20mm !") 

SFtextbox=Controls.AddTextBox(480, 485) 

Controls.SetSize(SFtextbox, 100, 25) 

Controls.SetTextBoxText(SFtextbox, "=> berechnet")





' Eingabefelder für die PPT-Überlappung Z und Steg S (Schritt 4a)

' PPT-Überlappung "Z" und Steg "S"

ZSImg = ImageList.LoadImage(PATH + "zs.jpg")

GraphicsWindow.DrawImage(ZSImg, (MyScreenW * 0.5) - 205,456)

Controls.SetTextBoxText(Ztextbox, "")  

Controls.SetTextBoxText(Stextbox, "")

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(100, 465, "PPT-Überlappung mit Bild 'Z' u. PPT-Steg zw. 2 Bildern 'S'")

GraphicsWindow.DrawText(100, 490, "Z<0 = neg. Überlappung und Z>0 = pos. Überlappung")

GraphicsWindow.DrawText(100, 540, "PPT-Überlappung 'Z'   -100 <-> +100  [in mm]: ")  

Ztextbox = Controls.AddTextBox(375, 538)

Controls.SetSize(Ztextbox, 70, 25)

GraphicsWindow.DrawText(100, 580, "PPT-Steg 'S' zwischen 2 Bildern  [in mm]: ")  

Stextbox = Controls.AddTextBox(375, 578)

Controls.SetSize(Stextbox, 70, 25)



' Bild für HV-Entscheidung in Schritt 4b

HVImg = ImageList.LoadImage(PATH + "hv.jpg")

GraphicsWindow.DrawImage(HVImg, (MyScreenW * 0.5) - 205,619)





' Shapes.coverretangle zum Abdecken der Ausgabefelder für berechnete "Format-Werte"



GraphicsWindow.BrushColor = "Violet"

coverrectanglePPT = Shapes.AddRectangle(100, 25)

Shapes.Move(coverrectanglePPT,480,205)

Shapes.SetOpacity(coverrectanglePPT, 20)

coverrectanglePIC = Shapes.AddRectangle(100, 25)

Shapes.Move(coverrectanglePIC,480,345)

Shapes.SetOpacity(coverrectanglePIC, 20)

coverrectangleS = Shapes.AddRectangle(100,25)

Shapes.Move(coverrectangleS,480,485)

Shapes.SetOpacity(coverrectangleS, 20)





' 2x Shapes.coverretangle zum Abdecken des ganzen Bereichs 4b, wenn dieser nicht benötigt wird

GraphicsWindow.BrushColor = "LightGray" '"Cyan"  

' 1.Teil

coverrectangle4b1 = Shapes.AddRectangle((MyScreenW * 0.5)-((MyScreenW * 0.5) - 720) -208, 102)

Shapes.Move(coverrectangle4b1,(MyScreenW * 0.5) - 721, 614)

Shapes.SetOpacity(coverrectangle4b1, 100)

' 2.Teil

coverrectangle4b2 = Shapes.AddRectangle(212, 102)

Shapes.Move(coverrectangle4b2,(MyScreenW * 0.5) - 211, 614)

Shapes.SetOpacity(coverrectangle4b2, 100)





' 2x Shapes.coverretangle zum Abdecken des ganzen Bereichs 5, solange dieser nicht "zulässig" ist

GraphicsWindow.BrushColor = "LightGray" '"Cyan"  

' 1.Teil

coverrectangle51 = Shapes.AddRectangle((MyScreenW * 0.5)-((MyScreenW * 0.5) - 720) -208, 86)

Shapes.Move(coverrectangle51,(MyScreenW * 0.5) - 721, 714)

Shapes.SetOpacity(coverrectangle51, 100)

' 2.Teil - nicht genutzt

'coverrectangle52 = Shapes.AddRectangle(212, 86)

'Shapes.Move(coverrectangle52,(MyScreenW * 0.5) - 211, 714)

'Shapes.SetOpacity(coverrectangle52, 50)





' Shapes.coverretangle zum Abdecken des Spalt-Eingabefeldes "S" wenn nur 1 Bild/PPT gewählt ist

GraphicsWindow.PenColor = "LightGray"

GraphicsWindow.BrushColor = "LightGray" '"Cyan"  

coverrectangleS = Shapes.AddRectangle((MyScreenW * 0.5)-((MyScreenW * 0.5) - 720) -350, 40)

Shapes.Move(coverrectangleS,(MyScreenW * 0.5) - 719,570)

Shapes.SetOpacity(coverrectangleS, 100)





'Shapes.coverrectangle zum Abdecken des "Daten Prüfung" Buttons

GraphicsWindow.BrushColor = "LightGray"   '"Cyan"  

coverrectangleCheck = Shapes.AddRectangle(120, 30)

Shapes.Move(coverrectangleCheck,460,570)

Shapes.SetOpacity(coverrectangleCheck, 100)

Shapes.HideShape(coverrectangleCheck)



EndSub





Sub ClearButton

  GraphicsWindow.BrushColor = "Red"

  CLRButton = Controls.AddButton("> C L E A R <",595,760)

  Controls.SetSize(CLRButton,100,30)  

EndSub



Sub ExitButton

  GraphicsWindow.BrushColor = "Red"

  EXITButton = Controls.AddButton("> E X I T <",1498,760)

  Controls.SetSize(EXITButton,100,30)  

EndSub





Sub PPTColorButtons

  GraphicsWindow.BrushColor = "Black"

  GraphicsWindow.FontSize = 11

  For c = 1 To 25

    PPTCButton1 = Controls.AddButton(c, 795+(c*30), 2)

    Controls.SetSize(PPTCButton1,30,30)

  EndFor

  For u = 1 To 25

    GraphicsWindow.BrushColor = "#00FF00"

    GraphicsWindow.PenColor = "White"

    GraphicsWindow.PenWidth = 2

    GraphicsWindow.DrawRectangle(795+(u*30),34,30,15)

    GraphicsWindow.FillRectangle(797+(u*30),34,26,15)

  EndFor  

EndSub





Sub BTWButtons

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(100,730, "Wählen Sie, wie das Verhältnis 'oberer <-> unterer' Rand errechnet werden soll")

BTWButton1 = Controls.AddButton("Mathe Zentr",100,760)

Controls.SetSize(BTWButton1,94,30)

BTWButton2 = Controls.AddButton("Visuell Zentr",194,760)

Controls.SetSize(BTWButton2,94,30)

BTWButton3 = Controls.AddButton("O:1/3-U:2/3",288,760)

Controls.SetSize(BTWButton3,94,30)

BTWButton4 = Controls.AddButton("Golden",382,760)

Controls.SetSize(BTWButton4,94,30)

BTWButton5 = Controls.AddButton("Li=Ob=Re",476,760)

Controls.SetSize(BTWButton5,94,30)

EndSub







' ' -----------------------------------------

' Buttons zur Auswahl der Anzahl der Bilder pro PPT ( 1, 2, 3 oder 4)

Sub PPTButtons

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(100,15, "Wählen Sie die Zahl der Bilder pro Passepartout")

GraphicsWindow.DrawText(100,120, "Mögliche 'Layouts' bei der gewählten Anzahl von Bildern pro Passepartout =>")

BildButton1 = Controls.AddButton("1 Bild",100,70)

Controls.SetSize(BildButton1,90,30)

BildButton2 = Controls.AddButton("2 Bilder",190,70)

Controls.SetSize(BildButton2,90,30)

BildButton3 = Controls.AddButton("3 Bilder",280,70)

Controls.SetSize(BildButton3,90,30)

BildButton4 = Controls.AddButton("4 Bilder",370,70)

Controls.SetSize(BildButton4,90,30)



' Buttons zur Entscheidung, ob 2/3 Bilder neben- der untereinander sein sollen, wenn PPT und Bild = 1:1 und 2/3 Bilder/PPT gewählt sind

GraphicsWindow.BrushColor = "Black"

GraphicsWindow.DrawText(100,630, "Wählen Sie, ob die 2 bzw. 3 Bilder neben- oder untereinander stehen sollen")

'GraphicsWindow.BrushColor = "Red"

HVButton1 = Controls.AddButton("[1]  2 bzw. 3 Bilder nebeneinander", 100, 665)

Controls.SetSize(HVButton1,230,30)

HVButton2 = Controls.AddButton("[2]  2 bzw. 3 Bilder untereinander", 340, 665)

Controls.SetSize(HVButton2,230, 30)





' Button für die 1. Prüfung

GraphicsWindow.BrushColor = "Red"

CalcButton1 = Controls.AddButton("Daten-Prüfung",460,570)

Controls.SetSize(CalcButton1,120,30)







' Button für die Finale Berechnung

' Button Clear



Controls.ButtonClicked = ButtonClick



EndSub









Sub CheckMark1

  If A2 >= A Then

    'Mark at: PPT A and Pic A2

    GraphicsWindow.DrawImage(MarkImg, 345, 225)

    GraphicsWindow.DrawImage(MarkImg, 345, 365)

  Else 

    'NoMark at: PPT A and Pic A2

    GraphicsWindow.DrawImage(NoMarkImg, 345, 225)

    GraphicsWindow.DrawImage(NoMarkImg, 345, 365)

  EndIf



  If B2 >= B Then

    ' Mark at: PPT B and Pic B2

    GraphicsWindow.DrawImage(MarkImg, 345, 265)

    GraphicsWindow.DrawImage(MarkImg, 345, 405)

  Else

    ' NoMark at: PPT B and Pic B2

    GraphicsWindow.DrawImage(NoMarkImg, 345, 265)

    GraphicsWindow.DrawImage(NoMarkImg, 345, 405)

  EndIf    

EndSub



Sub CheckMark2

  If ImgC = 1 Then

    If E <PPTMin Then    ' <= 0

      'Mark at: PPT A and Pic A2 and Z

      GraphicsWindow.DrawImage(MarkImg, 345, 225)

      GraphicsWindow.DrawImage(MarkImg, 345, 365)

      allright = "no"

      Shapes.HideShape(coverrectangleCheck)

    Else

      'NoMark at: PPT A and Pic A2 and Z

      GraphicsWindow.DrawImage(NoMarkImg, 345, 225)

      GraphicsWindow.DrawImage(NoMarkImg, 345, 365)

    EndIf

    

    If G < PPTMin Then  '<= 0

      ' Mark at: PPT B and Pic B2 and Z

      GraphicsWindow.DrawImage(MarkImg, 345, 265)

      GraphicsWindow.DrawImage(MarkImg, 345, 405)

      allright = "no"

      Shapes.HideShape(coverrectangleCheck)

    Else

      ' NoMark at: PPT B and Pic B2 and Z

      GraphicsWindow.DrawImage(NoMarkImg, 345, 265)

      GraphicsWindow.DrawImage(NoMarkImg, 345, 405)

    EndIf

    

    If E >= PPTMin And G >= PPTMin Then  ' > 0

      allright = "yes"

    Else

    EndIf  

      

  

  ElseIf ImgC > 1 Then

    If E < PPTMin Then    ' <= 0

      'Mark at: PPT A and Pic A2 and Z and S

      GraphicsWindow.DrawImage(MarkImg, 345, 225)

      GraphicsWindow.DrawImage(MarkImg, 345, 365)

      allright = "no"

      Shapes.HideShape(coverrectangleCheck)

    Else

      ' NoMark at: PPT A and Pic A2 and Z and S

      GraphicsWindow.DrawImage(NoMarkImg, 345, 225)

      GraphicsWindow.DrawImage(NoMarkImg, 345, 365)

    EndIf  

    

    If G < PPTMin Then      '<= 0

      ' Mark at: PPT B and Pic B2 and Z and S

      GraphicsWindow.DrawImage(MarkImg, 345, 265)

      GraphicsWindow.DrawImage(MarkImg, 345, 405)

      allright = "no"

      Shapes.HideShape(coverrectangleCheck)      

    Else

      ' NoMark at: PPT B and Pic B2 and Z and S

      GraphicsWindow.DrawImage(NoMarkImg, 345, 265)

      GraphicsWindow.DrawImage(NoMarkImg, 345, 405)

    EndIf



    If E >= PPTMin And G >= PPTMin Then   ' > 0

      allright = "yes"

    Else

    EndIf

    

  Else

  EndIf

  'GraphicsWindow.ShowMessage("allright-Status = " +allright, "Allright Status Message")

EndSub  







Sub OpenBtw

  If allright = "yes" Then

    Shapes.HideShape(coverrectangle51)

    'Shapes.HideShape(coverrectangle52)

    Shapes.ShowShape(coverrectangleCheck)

    

  ElseIf allright = "no" Then

    Shapes.ShowShape(coverrectangle51)

    'Shapes.ShowShape(coverrectangle52)

    Shapes.HideShape(coverrectangleCheck)

    

  Else

  EndIf

EndSub  







' -----------------------------------------

' Sub zur Auswertung der Klicks auf alle Buttons des Programms



Sub ButtonClick

' Auswertung der Bildbuttons in Schritt 1  

   BC = Controls.GetButtonCaption(Controls.LastClickedButton)  

If BC = "1 Bild" Then

    ImgC = 1

    Img = ImageList.LoadImage(PATH +ImgC+"_Bilder.jpg")

    GraphicsWindow.DrawImage(Img, (MyScreenW * 0.5) - 205, 10)

    S = ""

    szvalue = ""

    Controls.SetTextBoxText(SFtextbox, szvalue)

    Shapes.ShowShape(coverrectangleS)

    Shapes.ShowShape(coverrectangle4b1)

    Shapes.ShowShape(coverrectangle4b2)

    Shapes.ShowShape(coverrectangle51)

    'Shapes.ShowShape(coverrectangle52)

    Shapes.HideShape(coverrectangleCheck)

ElseIf BC = "2 Bilder" Then

    ImgC = 2

    Img = ImageList.LoadImage(PATH +ImgC+"_Bilder.jpg")

    GraphicsWindow.DrawImage(Img, (MyScreenW * 0.5) - 205,10)

    Shapes.HideShape(coverrectangleS)

    Shapes.ShowShape(coverrectangle4b1)

    Shapes.ShowShape(coverrectangle4b2)

    Shapes.ShowShape(coverrectangle51)

    'Shapes.ShowShape(coverrectangle52)

    Shapes.HideShape(coverrectangleCheck)

ElseIf BC = "3 Bilder" Then

    ImgC = 3

    Img = ImageList.LoadImage(PATH +ImgC+"_Bilder.jpg")

    GraphicsWindow.DrawImage(Img, (MyScreenW * 0.5) - 205, 10)

    Shapes.HideShape(coverrectangleS)

    Shapes.ShowShape(coverrectangle4b1)

    Shapes.ShowShape(coverrectangle4b2)

    Shapes.ShowShape(coverrectangle51)

    'Shapes.ShowShape(coverrectangle52)

    Shapes.HideShape(coverrectangleCheck)

ElseIf BC = "4 Bilder" Then

    ImgC = 4

    Img = ImageList.LoadImage(PATH +ImgC+"_Bilder.jpg")

    GraphicsWindow.DrawImage(Img, (MyScreenW * 0.5) - 205, 10)

    Shapes.HideShape(coverrectangleS)

    Shapes.ShowShape(coverrectangle4b1)

    Shapes.ShowShape(coverrectangle4b2)

    Shapes.ShowShape(coverrectangle51)

    'Shapes.ShowShape(coverrectangle52)

    Shapes.HideShape(coverrectangleCheck)

    

    

' **********   Ab hier werden die  Eingabedaten geprüft ***********  



ElseIf BC = "Daten-Prüfung" Then

   

      A = Controls.GetTextBoxText(PPTAtextbox) 

      B = Controls.GetTextBoxText(PPTBtextbox)

      A2 = Controls.GetTextBoxText(PICA2textbox) 

      B2 = Controls.GetTextBoxText(PICB2textbox)

      Z = Controls.GetTextBoxText(Ztextbox)

      S = Controls.GetTextBoxText(Stextbox)

      

      Shapes.ShowShape(coverrectangle51)

      'Shapes.ShowShape(coverrectangle52)

     

      If ImgC ="" Then

        GraphicsWindow.ShowMessage("Sie haben Schritt 1 noch nicht ausgeführt", "Fehler 1: keine Auswahl der Bildanzahl")

        Goto finito1

      Else

      EndIf

   

      If A = "" Or B = "" Then

        GraphicsWindow.ShowMessage("Sie müssen die Werte A & B eingeben", "Fehler 2: keine PPT-Eingabe")

        Goto finito1

      ElseIf A < 70 Or A > 1400 then

        GraphicsWindow.ShowMessage("Werte für A müssen zwischen 70 u. 1400 mm liegen", "Fehler 3: PPT-Eingabe A falsch")

        Goto finito1

      ElseIf B < 70 or B > 1400 then

        GraphicsWindow.ShowMessage("Werte für B müssen zwischen 70 u. 1400 mm liegen", "Fehler 4: PPT-Eingabe B falsch")    

        Goto finito1

      ElseIf A > B then

        pptformat = "Hochformat"

        Shapes.ShowShape(coverrectangle4b1)

        Shapes.ShowShape(coverrectangle4b2)

        Controls.SetTextBoxText(PPTFtextbox, pptformat)

      ElseIf A < B then

        pptformat = "Querformat"

        Shapes.ShowShape(coverrectangle4b1)

        Shapes.ShowShape(coverrectangle4b2)

        Controls.SetTextBoxText(PPTFtextbox, pptformat)

      ElseIf A = B then

        pptformat = "1:1"

        Controls.SetTextBoxText(PPTFtextbox, pptformat)

      Else

      EndIf

      

        

      If A2 = "" Or B2 = "" Then

        GraphicsWindow.ShowMessage("Sie müssen die Werte für die Bildhöhe/Bildbreite 'A2/B2' eingeben", "Fehler 5: keine Bild-Eingabe")

        Goto finito1

      ElseIf A2 < 20 Or A2 > 1000 then

        GraphicsWindow.ShowMessage("Werte für Bildhöhe 'A2' müssen zwischen 20 u. 1000 mm liegen", "Fehler 6: Bild-Eingabe A2 falsch")

        Goto finito1

      ElseIf B2 < 20 or B2 > 1000 then

        GraphicsWindow.ShowMessage("Werte für Bildbreite 'B2' müssen zwischen 20 u. 1000 mm liegen", "Fehler 7: Bild-Eingabe B2 falsch")    

        Goto finito1

      ElseIf A2 >= A or B2 >= B Then

        CheckMark1()

        GraphicsWindow.ShowMessage("Die eingegebene Bildgröße >= als die eingegebene PPT-Größe", "Fehler 8: Bild <-> PPT Größe falsch")

        Goto finito1

      ElseIf A2 > B2 then

        picformat = "Hochformat"

        Shapes.ShowShape(coverrectangle4b1)

        Shapes.ShowShape(coverrectangle4b2)

        Controls.SetTextBoxText(PICFtextbox, picformat)

      ElseIf A2 < B2 then

        picformat = "Querformat"

        Shapes.ShowShape(coverrectangle4b1)

        Shapes.ShowShape(coverrectangle4b2)

        Controls.SetTextBoxText(PICFtextbox, picformat)

      ElseIf A2 = B2 then

        picformat = "1:1"

        Controls.SetTextBoxText(PICFtextbox, picformat)

      Else

      EndIf

      

      If Z = "" Then

        GraphicsWindow.ShowMessage("Sie müssen einen Wert für PPT-Überlappung 'Z' eingegeben", "Fehler 9: keine Eingabe von Z")

        Goto finito1

      ElseIf Z < -100 Or Z > 100 Then

        GraphicsWindow.ShowMessage("Der eingegebene Wert für 'Z' liegt außerhalb des zulässigen Wertebereichs", "Fehler 10: Falscher Z-Wert")

        Goto finito1

      ElseIf ImgC <> 1 And S = "" Then   

        GraphicsWindow.ShowMessage("Sie müssen einen Wert für die Passepartout-Stegbreite 'S' zwischen 2 Bildern eingegeben", "Fehler 11: keine Eingabe von S")

        Goto finito1

      ElseIf ImgC = 1 Then

        SZ = "Steg entfällt"

        Controls.SetTextBoxText(SFtextbox, SZ)

      ElseIf S + (2 * Z) < 20 Then

        SZ = S + (2 * Z)

        Controls.SetTextBoxText(SFtextbox, SZ)        

        GraphicsWindow.ShowMessage("Die eingegebene Kombination von 'S + 2xZ' führt zu PPT-Stegbreiten < 20mm zwischen 2 Bildern", "Fehler 12: S+2*Z kleiner 20mm")

        Goto finito1

      Else  

        SZ = S + (2 * Z)

        Controls.SetTextBoxText(SFtextbox, SZ)

      EndIf



' Sprung ins Unterprogramm "Sub PPTBorderMin" zur Feststellung der Mindest-PPT-Breite abhängig von der Bildgröße (A2/B2) und PPT-Überlappung "Z" und PPT-Steg "S" sowie Festlegung der Variablen "PPTMin"



      PPTBorderMin()

      GraphicsWindow.ShowMessage("A2B2Summe = " +A2B2Summe+ " PPTMin = " +PPTMin, "Daten für A2B2Summe und PPTMin")

      

      

' Auswertung der Bild- / PPT- Kombinationen bzgl. Größe





      If ImgC = 1 Then

         If ((A - A2) + (2 * Z)) / 2 < PPTMin Or ((B - B2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

           E = ((A - A2) + (2 * Z)) / 2

           F = E

           G = ((B - B2) + (2 * Z)) / 2

           H = G

           CheckMark2()  

           GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'Z' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")

           Goto finito1

         Else

         EndIf

           E = ((A - A2) + (2 * Z)) / 2

           F = E

           G = ((B - B2) + (2 * Z)) / 2

           H = G

         CheckMark2()

         OpenBtw()  

           

      ElseIf ImgC = 4 Then

         If (A - ((ImgC -2) * A2) + (ImgC * Z) - SZ) / 2 < PPTMin Or (B - ((ImgC -2) * B2) + (ImgC * Z) - SZ) / 2 < PPTMin Then     ' eigentlich < 50  !!!

           E = (A - ((ImgC -2) * A2) + (ImgC * Z) - SZ) / 2

           F = E

           G = (B - ((ImgC -2) * B2) + (ImgC * Z) - SZ) / 2

           H = G

           CheckMark2()

           GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")

           Goto finito1

         Else

         EndIf

           E = (A - ((ImgC -2) * A2) + (ImgC * Z) - SZ) / 2

           F = E

           G = (B - ((ImgC -2) * B2) + (ImgC * Z) - SZ) / 2

           H = G        

           CheckMark2()   

           OpenBtw()  

      

      ElseIf ImgC = 2 or ImgC = 3 Then

         If pptformat = "Hochformat" Then

           If (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2 < PPTMin Or ((B - B2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

             E = (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

             F = E

             G = ((B - B2) + (2 * Z)) / 2 

             H = G

             CheckMark2()

             GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")              

             Goto finito1

           Else

           EndIf

             E = (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

             F = E

             G = ((B - B2) + (2 * Z)) / 2 

             H = G

             CheckMark2() 

             OpenBtw()  

             

         ElseIf pptformat = "Querformat" Then  

           If (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2 < PPTMin Or ((A - A2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

             G = (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

             H = G

             E = ((A - A2) + (2 * Z)) / 2

             F = E

             CheckMark2()             

             GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")

             Goto finito1

           Else

           EndIf           

             G = (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

             H = G

             E = ((A - A2) + (2 * Z)) / 2

             F = E

             CheckMark2()

             OpenBtw()  

           

' Sonderbehandlung  für 2/3 Bilder und PPT-format = 1:1 und Bilder entweder HF, QF oder 1:1

         ElseIf pptformat = "1:1" Then

           If picformat = "Hochformat" Then 

             If (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2 < PPTMin Or ((A - A2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

               G = (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

               H = G

               E = ((A - A2) + (2 * Z)) / 2

               F = E

               CheckMark2()               

               GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")

               Goto finito1

             Else

             EndIf

               G = (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

               H = G

               E = ((A - A2) + (2 * Z)) / 2

               F = E

               CheckMark2()    

               OpenBtw()  

            

           ElseIf picformat = "Querformat" Then

             If (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2 < PPTMin Or ((B - B2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

               E = (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

               F = E

               G = ((B - B2) + (2 * Z)) / 2

               H = G

               CheckMark2()               

               GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")

               Goto finito1

             Else

             EndIf

               E = (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

               F = E

               G = ((B - B2) + (2 * Z)) / 2

               H = G

               CheckMark2()

               OpenBtw()  

               

           ElseIf picformat = "1:1" Then

             '  Ab hier werden die beiden Auswahl-Buttons sichtbar um bei PPT-format 1:1 UND Bild-format 1:1 zu entscheiden, ob 2/3 neben- oder untereinander sein sollen

             'GraphicsWindow.ShowMessage("Jetzt verschwindet der Check-Button und 2 andere Buttons erscheinen","Meldung der Ränder PPT-1:1 - 2/3 Bilder 1:1")

             Shapes.HideShape(coverrectangle4b1)

             Shapes.HideShape(coverrectangle4b2)

             Shapes.ShowShape(coverrectangleCheck)

           Else

           EndIf

         Else

         EndIf   

    

      Else  

      EndIf



' Auswertung der beiden Buttons für 2/3 Bilder 1:1 im PPT-format 1:1 -> neben- oder untereinander



ElseIf BC = "[1]  2 bzw. 3 Bilder nebeneinander" Then

    decide23 = "neben"

    'GraphicsWindow.ShowMessage("[1] wurde gedrückt - decide23 = "+decide23, "Info zu [1]")

    If (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2 < PPTMin Or ((A - A2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

      G = (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

      H = G

      E = ((A - A2) + (2 * Z)) / 2

      F = E

      CheckMark2()      

      GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")

      Goto finito1

    Else

    EndIf           

      G = (B - (ImgC * B2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

      H = G

      E = ((A - A2) + (2 * Z)) / 2

      F = E

      CheckMark2()

      OpenBtw()  

  

ElseIf BC = "[2]  2 bzw. 3 Bilder untereinander" Then

    decide23 = "unter"

    If (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2 < PPTMin Or ((B - B2) + (2 * Z)) / 2 < PPTMin Then     ' eigentlich < 50  !!!

      E = (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

      F = E

      G = ((B - B2) + (2 * Z)) / 2 

      H = G

      CheckMark2()      

      GraphicsWindow.ShowMessage("Warnung: Werte von 'A2', 'B2', 'A', 'B' mit 'S+2xZ' führen schon bei 'math. Zentrierung' zu PPT-Rändern < Idealwert= "+PPTMin+ "mm => oben= "+E+" unten= "+F+" links= "+G+" rechts= "+H, "Warnung PPT-Ränder")              

      Goto finito1

    Else

    EndIf

      E = (A - (ImgC * A2) + (2 * ImgC * Z) - ((ImgC - 1) * SZ)) / 2

      F = E

      G = ((B - B2) + (2 * Z)) / 2 

      H = G

      CheckMark2()

      OpenBtw()  

    

    

    

' Auswertung der 5 BTW-Buttons (Bottom Weight Factor) zur Festlegung des Verhältnisses von oberem Rand "E" zu unterem Rand "F"



ElseIf BC = "Mathe Zentr" Then

  Shapes.HideShape(coverrectangleCheck)

  BTW = "Mathe Zentr"

  PPTDraw()



ElseIf BC = "Visuell Zentr" Then

  Shapes.HideShape(coverrectangleCheck)

  BTW = "Visuell Zentr"

  PPTDraw()

  

ElseIf BC = "O:1/3-U:2/3" Then

  Shapes.HideShape(coverrectangleCheck)

  BTW = "O:1/3-U:2/3"

  PPTDraw()

  

ElseIf BC = "Golden" Then

  Shapes.HideShape(coverrectangleCheck)

  BTW = "Golden"

  PPTDraw()

  

ElseIf BC = "Li=Ob=Re" Then

  Shapes.HideShape(coverrectangleCheck)

  BTW = "Li=Ob=Re"

  PPTDraw()

  

  

'ElseIf BC = "> C L E A R <" Then

'  Controls.SetTextBoxText(PPTAtextbox, "")  

'  Controls.SetTextBoxText(PPTBtextbox, "")  

'  Controls.SetTextBoxText(PICA2textbox, "")

'  Controls.SetTextBoxText(PICB2textbox, "")

'  Controls.SetTextBoxText(Ztextbox, "")

'  Controls.SetTextBoxText(Stextbox, "")

'  Controls.SetTextBoxText(SFtextbox, "")

'  Controls.SetTextBoxText(PPTFtextbox, "")

'  Controls.SetTextBoxText(PICFtextbox, "")

'  GraphicsWindow.Clear()    '???????????



ElseIf BC = "> E X I T <" Then

  Program.End()

  

  

Else  

EndIf



finito1: 

'GraphicsWindow.ShowMessage("finito1 wurde erreicht", "finito1 Meldung")

'Shapes.ShowShape(coverrectangle4a1)

'Shapes.ShowShape(coverrectangle4a2)  



EndSub





'Unterprogramm "Sub PPTBorderMin" zur Feststellung der Mindest-PPT-Breite abhängig von der Bildgröße (A2/B2) und PPT-Überlappung "Z" und PPT-Steg "S" sowie Festlegung der Variablen "PPTMin"



Sub PPTBorderMin



If ImgC = 1 Then

  A2B2Summe = (A2-(2*Z)) + (B2-(2*Z))



ElseIf ImgC = 2 Or ImgC = 3 Then    

  If pptformat = "Hochformat" Or pptformat = "1:1" And picformat = "Querformat" Or picformat = "1:1" And decide23 ="unter" Then

    A2B2Summe = (ImgC*(A2-(2*Z))) + (B2-(2*Z)) + ((ImgC-1)*(S+(2*Z)))



  ElseIf pptformat = "Querformat" Or pptformat = "1:1" And picformat = "Hochformat" Or picformat = "1:1" And decide23 ="neben" Then

    A2B2Summe = (A2-(2*Z)) + (ImgC*(B2-(2*Z))) + ((ImgC-1)*(S+(2*Z)))

   

  Else

  EndIf

  

ElseIf ImgC = 4 Then

  A2B2Summe = (2*(A2-(2*Z))) + (2*(B2-(2*Z))) + (2*(S+(2*Z)))



Else

EndIf     





' Zuweisung des Wertes für PPTMin



If A2B2Summe <= 70 Then

  PPTMin = 10

ElseIf A2B2Summe <= 100 Then

  PPTMin = 15  

ElseIf A2B2Summe <= 150 Then

  PPTMin = 20

ElseIf A2B2Summe <= 200 Then

  PPTMin = 25

ElseIf A2B2Summe <= 300 Then

  PPTMin = 30

ElseIf A2B2Summe <= 600 Then

  PPTMin = 45

ElseIf A2B2Summe <= 800 Then  

  PPTMin = 50

ElseIf A2B2Summe <= 900 Then

  PPTMin = 55

ElseIf A2B2Summe <= 1100 Then

  PPTMin = 60

ElseIf A2B2Summe <= 1300 Then

  PPTMin = 70

ElseIf A2B2Summe <= 1400 Then

  PPTMin = 80    

ElseIf A2B2Summe <= 1600 Then

  PPTMin = 90 

ElseIf A2B2Summe <= 1800 Then

  PPTMin = 100

ElseIf A2B2Summe <= 2000 Then

  PPTMin = 110

ElseIf A2B2Summe <= 2200 Then

  PPTMin = 120

ElseIf A2B2Summe <= 2400 Then

  PPTMin = 140

Else

EndIf 





EndSub





' -----------------------------------------

Sub PPTDraw     

GraphicsWindow.BrushColor = PPTWinColor        '"DarkGray"

GraphicsWindow.FillRectangle(PPTScreenW+1, 0, PPTScreenW-1, PPTScreenH)



If pptformat = "Hochformat" Or pptformat = "1:1" Then

  Scale = PPTfac / A

  PPTxs = ((MyScreenW * 0.5) + (PPTScreenW * 0.5)) - (B * Scale * 0.5)

  PPTys = (PPTScreenH - PPTfac) / 2

  PPTxd = B * Scale

  PPTyd = PPTfac

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.PenWidth = 2

  'evtl. Rahmen um ein PPT ???

  GraphicsWindow.DrawRectangle(PPTxs, PPTys, PPTxd, PPTyd)

  GraphicsWindow.BrushColor = PPTColor

  'GraphicsWindow.FillRectangle(PPTxs+1, PPTys+1, PPTxd-2, PPTyd-2)

  GraphicsWindow.FillRectangle(PPTxs, PPTys, PPTxd, PPTyd)



ElseIf pptformat = "Querformat" Then

  Scale = PPTfac / B

  PPTxs = ((MyScreenW * 0.5) + (PPTScreenW * 0.5)) - (PPTfac / 2)

  PPTys = (PPTScreenH * 0.5) - (A * Scale * 0.5)

  PPTxd = PPTfac

  PPTyd = A * Scale

  GraphicsWindow.PenColor = "Black"

  GraphicsWindow.PenWidth = 2

  'evtl. Rahmen um ein PPT ???

  GraphicsWindow.DrawRectangle(PPTxs, PPTys, PPTxd, PPTyd)

  GraphicsWindow.BrushColor = PPTColor

  'GraphicsWindow.FillRectangle(PPTxs+1, PPTys+1, PPTxd-2, PPTyd-2)

  GraphicsWindow.FillRectangle(PPTxs, PPTys, PPTxd, PPTyd)



Else

EndIf



PPTColorButtons()

PicLoad()

Labels()



EndSub





Sub PicLoad

  

  If picformat = "Hochformat" Then

   Image[1] = ImageList.LoadImage(PATH + "Portrait_1.jpg")

   Image[2] = ImageList.LoadImage(PATH + "Portrait_2.jpg")

   Image[3] = ImageList.LoadImage(PATH + "Portrait_3.jpg")

   Image[4] = ImageList.LoadImage(PATH + "Portrait_4.jpg")



  ElseIf picformat = "Querformat" Then

   Image[1] = ImageList.LoadImage(PATH + "Landscape_1.jpg")

   Image[2] = ImageList.LoadImage(PATH + "Landscape_2.jpg")

   Image[3] = ImageList.LoadImage(PATH + "Landscape_3.jpg")

   Image[4] = ImageList.LoadImage(PATH + "Landscape_4.jpg")



 ElseIf picformat = "1:1" Then

   Image[1] = ImageList.LoadImage(PATH + "Square_1.jpg")

   Image[2] = ImageList.LoadImage(PATH + "Square_2.jpg")

   Image[3] = ImageList.LoadImage(PATH + "Square_3.jpg")

   Image[4] = ImageList.LoadImage(PATH + "Square_4.jpg")

   

 Else

 EndIf  

 

PicDraw()

 

EndSub







Sub PicDraw

  If ImgC = 1 Then

    If BTW = "Mathe Zentr" Then         ' E = F; G = H immer gegeben

      E = ((A - A2) + (2 * Z)) / 2

      F = E

      G = ((B - B2) + (2 * Z)) / 2

      H = G

    ElseIf BTW = "Visuell Zentr" Then   ' E ist um 1,5% von PPT-Höhe "A" kleiner u. entsprechend größer wird F 

      E = ((A - A2) + (2 * Z)) / 2

      E = E - (A / 100 * 1.5)

      F = A - A2 + (2 * Z) - E

      G = ((B - B2) + (2 * Z)) / 2

      H = G

    ElseIf BTW = "O:1/3-U:2/3" Then     ' E = 1/3 und F = 2/3

      E = Math.Round(((A - A2) + (2 * Z)) / 3)

      F = A - A2 + (2 * Z) - E

      G = ((B - B2) + (2 * Z)) / 2

      H = G

    ElseIf BTW = "Golden" Then          ' E = E / 2.618

      E = Math.Round(((A - A2) + (2 * Z)) / 2.618)

      F = A - A2 + (2 * Z) - E

      G = ((B - B2) + (2 * Z)) / 2

      H = G

    ElseIf BTW = "Li=Ob=Re" Then        ' E = G = H

      G = ((B - B2) + (2 * Z)) / 2

      H = G

      E = G

      F = A - A2 + (2 * Z) - E

    Else

    EndIf



  i = ImgC  

  PaperDraw() 

  GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale), PPTys+((E-Z)*Scale), B2*Scale, A2*Scale)

  

  CutoutDraw14()

    

  ElseIf ImgC = 4 Then

    If BTW = "Mathe Zentr" Then       ' E = F; G = H immer gegeben

        E = (A - (2 * A2) + (4 * Z) - (S + (2 * Z))) / 2

        F = E

        G = (B - (2 * B2) + (4 * Z) - (S + (2 * Z))) / 2

        H = G

      ElseIf BTW = "Visuell Zentr" Then    ' E ist um 1,5% von PPT-Höhe "A" kleiner u. entsprechend größer wird F 

        E = (A - (2 * A2) + (4 * Z) - (S + (2 * Z))) / 2

        E = E - (A / 100 * 1.5)

        F = A - (2 * A2) - (S + (2 * Z)) + (4 * Z) - E

        G = (B - (2 * B2) - (S + (2 * Z)) + (4 * Z)) / 2

        H = G

      ElseIf BTW = "O:1/3-U:2/3" Then      ' E = 1/3 und F = 2/3

        E = Math.Round((A - (2 * A2) + (4 * Z) - (S + (2 * Z))) / 3)

        F = A - (2 * A2) - (S + (2 * Z)) + (4 * Z) - E

        G = (B - (2 * B2) - (S + (2 * Z)) + (4 * Z)) / 2

        H = G

      ElseIf BTW = "Golden" Then          ' E = E / 2.618

        E = Math.Round((A - (2 * A2) + (4 * Z) - (S + (2 * Z))) / 2.618)

        F = A - (2 * A2) - (S + (2 * Z)) + (4 * Z) - E

        G = (B - (2 * B2) - (S + (2 * Z)) + (4 * Z)) / 2

        H = G

      ElseIf BTW = "Li=Ob=Re" Then        ' E = G = H

        G = (B - (2 * B2) - (S + (2 * Z)) + (4 * Z)) / 2

        H = G

        E = G

        F = A - (2 * A2) - (S + (2 * Z)) + (4 * Z) - E

      Else

      EndIf 

 

  PaperDraw()

     For i = 1 To ImgC       

       If i <= 2 Then

       GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale)+((i-1)*(B2+S)*Scale), PPTys+((E-Z)*Scale), B2*Scale, A2*Scale)

       Else

       GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale)+((i-3)*(B2+S)*Scale), PPTys+((E-Z)*Scale)+((A2+S)*Scale), B2*Scale, A2*Scale)

       EndIf

     EndFor

  CutoutDraw14()       

      

      

   ' Bilder anzeigen, wenn 2 oder 3 Bilder gewählt sind

   

  ElseIf ImgC = 2 Or ImgC = 3 Then 

   

    If pptformat = "Hochformat" Or pptformat = "1:1" And picformat = "Querformat" Then

        If BTW = "Mathe Zentr" Then       ' E = F; G = H immer gegeben

           E = (A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           F = E

           G = ((B - B2) + (2*Z)) / 2

           H = G

        ElseIf BTW = "Visuell Zentr" Then    ' E ist um 1,5% von PPT-Höhe "A" kleiner u. entsprechend größer wird F 

           E = (A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           E = E - (A / 100 * 1.5)

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

           G = ((B - B2) + (2*Z)) / 2

           H = G

        ElseIf BTW = "O:1/3-U:2/3" Then      ' E = 1/3 und F = 2/3

           E = Math.Round((A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 3)

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

           G = ((B - B2) + (2*Z)) / 2

           H = G

        ElseIf BTW = "Golden" Then          ' E = E / 2.618

           E = Math.Round((A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2.618)

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

           G = ((B - B2) + (2*Z)) / 2

           H = G

        ElseIf BTW = "Li=Ob=Re" Then        ' E = G = H

           G = ((B - B2) + (2*Z)) / 2

           H = G

           E = G

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

        Else

        EndIf

        

      PaperDraw()



      For i = 1 To ImgC       

         GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale), PPTys+((E-Z)*Scale)+((i-1)*(A2+S)*Scale), B2*Scale, A2*Scale)

      EndFor

     CutoutDraw23()     

        

    ElseIf pptformat = "Querformat" Or pptformat = "1:1" And picformat = "Hochformat" Then

        If BTW = "Mathe Zentr" Then       ' E = F; G = H immer gegeben

           E = (A - A2 + (2*Z)) / 2

           F = E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           H = G

        ElseIf BTW = "Visuell Zentr" Then    ' E ist um 1,5% von PPT-Höhe "A" kleiner u. entsprechend größer wird F 

           E = (A - A2 + (2*Z)) / 2

           E = E - (A / 100 * 1.5)

           F = A - A2 + (2*Z) - E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           H = G

        ElseIf BTW = "O:1/3-U:2/3" Then      ' E = 1/3 und F = 2/3

           E = Math.Round((A - A2 + (2*Z)) / 3)

           F = A - A2 + (2*Z) - E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           H = G

        ElseIf BTW = "Golden" Then          ' E = E / 2.618

           E = Math.Round((A - A2 + (2*Z)) / 2.618)

           F = A - A2 + (2*Z) - E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           H = G

        ElseIf BTW = "Li=Ob=Re" Then        ' E = G = H

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           H = G

           E = G

           F = A - A2 + (2*Z) - E

        Else

        EndIf

      PaperDraw()

      For i = 1 To ImgC       

         GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale)+((i-1)*(B2+S)*Scale), PPTys+((E-Z)*Scale), B2*Scale, A2*Scale)

      EndFor

     CutoutDraw23()           

     

    ElseIf pptformat = "1:1" And picformat = "1:1" Then

        If BTW = "Mathe Zentr" Then       ' E = F; G = H immer gegeben

          If decide23 = "neben" Then

           E = (A - A2 + (2*Z)) / 2

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

          ElseIf decide23 = "unter" Then

           E = (A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           G = ((B - B2) + (2*Z)) / 2

          Else

          EndIf

           F = E

           H = G        

        ElseIf BTW = "Visuell Zentr" Then    ' E ist um 1,5% von PPT-Höhe "A" kleiner u. entsprechend größer wird F 

          If decide23 = "neben" Then

           E = (A - A2 + (2*Z)) / 2

           E = E - (A / 100 * 1.5) 

           F = A - A2 + (2*Z) - E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

          ElseIf decide23 = "unter" Then

           E = (A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           E = E - (A / 100 * 1.5)

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

           G = ((B - B2) + (2*Z)) / 2

          Else

          EndIf         

           H = G

        ElseIf BTW = "O:1/3-U:2/3" Then      ' E = 1/3 und F = 2/3

          If decide23 = "neben" Then

           E = Math.Round((A - A2 + (2*Z)) / 3)

           F = A - A2 + (2*Z) - E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

          ElseIf decide23 = "unter" Then

           E = Math.Round((A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 3)

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

           G = ((B - B2) + (2*Z)) / 2

          Else

          EndIf

           H = G

        ElseIf BTW = "Golden" Then          ' E = E / 2.618

          If decide23 = "neben" Then       

           E = Math.Round((A - A2 + (2*Z)) / 2.618)

           F = A - A2 + (2*Z) - E

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

          ElseIf decide23 = "unter" Then

           E = Math.Round((A - (ImgC*A2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2.618)

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E

           G = ((B - B2) + (2*Z)) / 2           

          Else

          EndIf 

           H = G   

        ElseIf BTW = "Li=Ob=Re" Then        ' E = G = H

          If decide23 = "neben" Then

           G = (B - (ImgC*B2) + (ImgC*2*Z) - ((ImgC-1)*(S + (2*Z)))) / 2

           E = G

           F = A - A2 + (2*Z) - E

         ElseIf decide23 = "unter" Then

           G = ((B - B2) + (2*Z)) / 2

           E = G

           F = A - (ImgC*A2) - (ImgC-1)*(S + (2*Z)) + (ImgC*2*Z) - E           

         Else

         EndIf

           H = G     

       Else

       EndIf  



       PaperDraw()

      

         For i = 1 To ImgC

           If decide23 = "neben"Then

              GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale)+((i-1)*(B2+S)*Scale), PPTys+((E-Z)*Scale), B2*Scale, A2*Scale)

           ElseIf decide23 = "unter" Then

              GraphicsWindow.DrawResizedImage(Image[i], PPTxs+((G-Z)*Scale), PPTys+((E-Z)*Scale)+((i-1)*(A2+S)*Scale), B2*Scale, A2*Scale)

           Else

           EndIf    

         EndFor

        CutoutDraw23()

    Else  ' für pptformat

    EndIf ' für  pptformat

   

  Else  ' für ImgC =

  EndIf ' für ImgC =

    

EndSub







Sub PaperDraw

  ' Warnung für oberen u/o unteren Rand (E/F) wenn kleiner 50mm

  If F < PPTMin And F > 0 Or E < PPTMin Then

    GraphicsWindow.ShowMessage("Warnung: Bei der Wahl von '" +BTW+ "' entstehen oben/unten Ränder < Idealwert= " +PPTMin+ " mm", "Warnung: Ränder oben/unten zu klein ")

    Goto finito2

  ElseIf F <= 0 Then

    GraphicsWindow.ShowMessage("Warnung: Bei der Wahl von '" +BTW+ "' haben Sie keinen unteren Rand mehr bzw. überschreiten den PPT-Bereich", "Warnung: kein unterer Rand mehr")

    Goto finito2    

  EndIf 

   

  Paper = ImageList.LoadImage(PATH + "Paper.jpg")

  If ImgC = 1 And Z < 0 Then

    GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale), PPTys+(E*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)

    

  ElseIf ImgC = 4 And Z < 0 Then

    For i = 1 To ImgC

      If i <= 2 Then  

        GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale), PPTys+(E*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)

      Else

        GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale)+((i-3)*(B2-(2*Z)+(S+2*Z))*Scale), PPTys+(E*Scale)+((A2-(2*Z)+(S+2*Z))*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)

      EndIf

    EndFor

    

  ElseIf ImgC = 2 Or ImgC = 3 And Z < 0 Then

    If pptformat = "Hochformat" Or pptformat = "1:1" And picformat = "Querformat" Then

      For i = 1 To ImgC

        GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale), PPTys+(E*Scale)+((i-1)*(A2-(2*Z)+(S+2*Z))*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)

      EndFor

    ElseIf pptformat = "Querformat" Or pptformat = "1:1" And picformat = "Hochformat" Then

      For i = 1 To ImgC

        GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale), PPTys+(E*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)  

      EndFor

    ElseIf pptformat = "1:1" And picformat = "1:1" And decide23 = "neben" Then 

      For i = 1 To ImgC

        GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale), PPTys+(E*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)

      EndFor

    ElseIf pptformat = "1:1" And picformat = "1:1" And decide23 = "unter" Then 

      For i = 1 To ImgC 

        GraphicsWindow.DrawResizedImage(Paper, PPTxs+(G*Scale), PPTys+(E*Scale)+((i-1)*(A2-(2*Z)+(S+2*Z))*Scale), (B2-(2*Z))*Scale, (A2-(2*Z))*Scale)

      EndFor

    Else

    EndIf  

        

 Else   'für ImgC

 EndIf  'für ImgC

 

finito2: 

EndSub  







Sub CutoutDraw14

GraphicsWindow.PenColor = CutoutColor '"SlateGray"

GraphicsWindow.PenWidth = 4

 

If Z < 0 Then

      For i = 1 To ImgC

        If i <= 2 Then

          GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+(E*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

        Else

          GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)+((i-3)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+(E*Scale)+((A2-(2*Z)+(S+2*Z))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

        EndIf

      EndFor

      

ElseIf Z = 0 Then

      For i = 1 To ImgC

        If i <= 2 Then      

          GraphicsWindow.DrawRectangle(PPTxs+((G+Z)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E+Z)*Scale)-1, (B2-(4*Z))*Scale+2, (A2-(4*Z))*Scale+2)

        Else

          GraphicsWindow.DrawRectangle(PPTxs+((G+Z)*Scale)+((i-3)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E+Z)*Scale)+((A2-(2*Z)+(S+2*Z))*Scale)-1, (B2-(4*Z))*Scale+2, (A2-(4*Z))*Scale+2)

        EndIf

      EndFor  

      

ElseIf Z > 0 Then

      For i = 1 To ImgC

        If i <= 2 Then 

          GraphicsWindow.PenColor = PPTColor '"Snow"

          GraphicsWindow.PenWidth = Math.Round(Z*Scale)+1

          GraphicsWindow.DrawRectangle(PPTxs+Math.Round((G-Z/2)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-2, PPTys+Math.Round((E-Z/2)*Scale)-2, (B2-Z)*Scale+3, (A2-Z)*Scale+3)

          GraphicsWindow.PenColor = CutoutColor '"SlateGray"

          GraphicsWindow.PenWidth = 4

          GraphicsWindow.DrawRectangle(PPTxs+((G)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E)*Scale)-1, (B2-(2*Z))*Scale+1, (A2-(2*Z))*Scale+1)

        Else

          GraphicsWindow.PenColor = PPTColor '"Snow"

          GraphicsWindow.PenWidth = Math.Round(Z*Scale)+1

          GraphicsWindow.DrawRectangle(PPTxs+Math.Round((G-Z/2)*Scale)+((i-3)*(B2-(2*Z)+(S+2*Z))*Scale)-2, PPTys+Math.Round((E-Z/2)*Scale)+((A2-(2*Z)+(S+2*Z))*Scale) - 2, (B2-Z)*Scale+3, (A2-Z)*Scale+3)

          GraphicsWindow.PenColor = CutoutColor '"SlateGray"

          GraphicsWindow.PenWidth = 4

          GraphicsWindow.DrawRectangle(PPTxs+((G)*Scale)+((i-3)*(B2-(2*Z)+(S+2*Z))*Scale) - 1, PPTys+((E)*Scale)+((A2-(2*Z)+(S+2*Z))*Scale) - 1, (B2-(2*Z))*Scale+1, (A2-(2*Z))*Scale+1)

        EndIf

      EndFor

Else

EndIf  

EndSub   





Sub CutoutDraw23

GraphicsWindow.PenColor = CutoutColor '"SlateGray"

GraphicsWindow.PenWidth = 4



If pptformat = "Hochformat" Or pptformat = "1:1" And picformat = "Querformat" Then

  If Z < 0 Then

      For i = 1 To ImgC

        GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)-1, PPTys+(E*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

    

  ElseIf Z = 0 Then

      For i = 1 to ImgC

        GraphicsWindow.DrawRectangle(PPTxs+((G+Z)*Scale)-1, PPTys+((E+Z)*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

      

  ElseIf Z > 0 Then

      For i = 1 To ImgC    

        GraphicsWindow.PenColor = PPTColor '"Snow"

        GraphicsWindow.PenWidth = Math.Round(Z*Scale)+1

        GraphicsWindow.DrawRectangle(PPTxs+Math.Round((G-Z/2)*Scale)-2, PPTys+Math.Round((E-Z/2)*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-2, (B2-Z)*Scale+3, (A2-Z)*Scale+3)    

        GraphicsWindow.PenColor = CutoutColor '"SlateGray"

        GraphicsWindow.PenWidth = 4

        GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)-1, PPTys+(E*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor  

  Else

  EndIf

  

ElseIf pptformat = "Querformat" Or pptformat = "1:1" And picformat = "Hochformat" Then

  If Z < 0 Then

      For i = 1 To ImgC

        GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+(E*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

    

  ElseIf Z = 0 Then

      For i = 1 to ImgC

        GraphicsWindow.DrawRectangle(PPTxs+((G+Z)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E+Z)*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

      

  ElseIf Z > 0 Then

      For i = 1 To ImgC    

          GraphicsWindow.PenColor = PPTColor '"Snow"

          GraphicsWindow.PenWidth = Math.Round(Z*Scale)+1

          GraphicsWindow.DrawRectangle(PPTxs+Math.Round((G-Z/2)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-2, PPTys+Math.Round((E-Z/2)*Scale)-2, (B2-Z)*Scale+3, (A2-Z)*Scale+3)

          GraphicsWindow.PenColor = CutoutColor '"SlateGray"

          GraphicsWindow.PenWidth = 4

          GraphicsWindow.DrawRectangle(PPTxs+((G)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E)*Scale)-1, (B2-(2*Z))*Scale+1, (A2-(2*Z))*Scale+1)

      EndFor  

  Else

  EndIf

  

ElseIf pptformat = "1:1" And picformat = "1:1" And decide23 = "neben" Then   

  If Z < 0 Then

      For i = 1 To ImgC

        GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+(E*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

    

  ElseIf Z = 0 Then

      For i = 1 to ImgC

        GraphicsWindow.DrawRectangle(PPTxs+((G+Z)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E+Z)*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

      

  ElseIf Z > 0 Then

      For i = 1 To ImgC    

        GraphicsWindow.PenColor = PPTColor  '"Snow"

          GraphicsWindow.PenWidth = Math.Round(Z*Scale)+1

          GraphicsWindow.DrawRectangle(PPTxs+Math.Round((G-Z/2)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-2, PPTys+Math.Round((E-Z/2)*Scale)-2, (B2-Z)*Scale+3, (A2-Z)*Scale+3)

          GraphicsWindow.PenColor = CutoutColor '"SlateGray"

          GraphicsWindow.PenWidth = 4

          GraphicsWindow.DrawRectangle(PPTxs+((G)*Scale)+((i-1)*(B2-(2*Z)+(S+2*Z))*Scale)-1, PPTys+((E)*Scale)-1, (B2-(2*Z))*Scale+1, (A2-(2*Z))*Scale+1)

      EndFor  

  Else

  EndIf 

  

ElseIf pptformat = "1:1" And picformat = "1:1" And decide23 = "unter" Then  

  If Z < 0 Then

      For i = 1 To ImgC

        GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)-1, PPTys+(E*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

    

  ElseIf Z = 0 Then

      For i = 1 to ImgC

        GraphicsWindow.DrawRectangle(PPTxs+((G+Z)*Scale)-1, PPTys+((E+Z)*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor

      

  ElseIf Z > 0 Then

      For i = 1 To ImgC    

        GraphicsWindow.PenColor = PPTColor '"Snow"

        GraphicsWindow.PenWidth = Math.Round(Z*Scale)+1

        GraphicsWindow.DrawRectangle(PPTxs+Math.Round((G-Z/2)*Scale)-2, PPTys+Math.Round((E-Z/2)*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-2, (B2-Z)*Scale+3, (A2-Z)*Scale+3)    

        GraphicsWindow.PenColor = CutoutColor '"SlateGray"

        GraphicsWindow.PenWidth = 4

        GraphicsWindow.DrawRectangle(PPTxs+(G*Scale)-1, PPTys+(E*Scale)+((i-1)*(A2-(2*Z)+(S+(2*Z)))*Scale)-1, (B2-(2*Z))*Scale+2, (A2-(2*Z))*Scale+2)

      EndFor  

  Else

  EndIf



Else

EndIf  

EndSub  







' Beschriftung des fertigen PPTs mit den SchneideDaten



Sub Labels

  

GraphicsWindow.FontSize = 13

GraphicsWindow.PenWidth = 2  





GraphicsWindow.BrushColor = "Black"

GraphicsWindow.PenColor = "Black"



' PPT B

GraphicsWindow.DrawText(1155, PPTys-35, "PPT B = " + B)

GraphicsWindow.DrawLine(PPTxs, PPTys-15, PPTxs+PPTxd, PPTys-15)



' PPT A

GraphicsWindow.DrawText(PPTxs-95, 400, "PPT A = " + A)

GraphicsWindow.DrawLine(PPTxs-15, PPTys, PPTxs-15, PPTys+PPTyd)





GraphicsWindow.BrushColor = "Blue"

GraphicsWindow.PenColor = "Blue"



' G

GraphicsWindow.DrawText(PPTxs, PPTys+PPTyd+20, G)

GraphicsWindow.DrawLine(PPTxs, PPTys+PPTyd+15, PPTxs+(G*Scale), PPTys+PPTyd+15)



' H

GraphicsWindow.DrawText(PPTxs+PPTxd-(H*Scale), PPTys+PPTyd+20, H)

GraphicsWindow.DrawLine(PPTxs+PPTxd-(H*Scale), PPTys+PPTyd+15, PPTxs+PPTxd, PPTys+PPTyd+15)



' E

GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys, E)

GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys, PPTxs+PPTxd+15, PPTys+(E*Scale))



' F

GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+PPTyd-(F*Scale), F)

GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+PPTyd-(F*Scale), PPTxs+PPTxd+15, PPTys+PPTyd)





' Bildausschnitte und S [und Z (Z nur dann, wenn negativ, also -Z)]



If ImgC = 1 Then

    GraphicsWindow.BrushColor = "Yellow"

    GraphicsWindow.PenColor = "Yellow"

    ' Y-Achse

    GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+(E*Scale), A2-2*Z)

    GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+(E*Scale), PPTxs+PPTxd+15, PPTys+(E*Scale)+((A2-(2*Z))*Scale) )

    ' X-Achse

    GraphicsWindow.DrawText(PPTxs+(G*Scale), PPTys+PPTyd+20, B2-2*Z)

    GraphicsWindow.DrawLine(PPTxs+(G*Scale), PPTys+PPTyd+15, PPTxs+(G*Scale)+((B2-(2*Z))*Scale), PPTys+PPTyd+15)    

    

    

ElseIf ImgC = 2 Or ImgC = 3 Then    

  

  If pptformat = "Hochformat" Or pptformat = "1:1" And picformat = "Querformat" Or picformat = "1:1" And decide23 ="unter" Then

    

    For i = 1 To ImgC

      GraphicsWindow.BrushColor = "Yellow"

      GraphicsWindow.PenColor = "Yellow"

      ' Y-Achse

      GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+(E*Scale)+((i-1)*((A2+S)*Scale)), A2-2*Z)

      GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+(E*Scale)+((i-1)*((A2+S)*Scale)), PPTxs+PPTxd+15, PPTys+(E*Scale)+ (i* ((A2-(2*Z))*Scale)) + ((i-1)*((S+2*Z)*Scale)) )

    EndFor

 

    For i = 1 To ImgC-1 

      GraphicsWindow.BrushColor = "Blue"

      GraphicsWindow.PenColor = "Blue"

      GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+(E*Scale)+(i*((A2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), S+2*Z)

      GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+(E*Scale)+(i*((A2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), PPTxs+PPTxd+15, PPTys+(E*Scale)+(i*((A2-(2*Z))*Scale))+(i*((S+(2*Z))*Scale)))

    EndFor

    

      ' X-Achse

      GraphicsWindow.BrushColor = "Yellow"

      GraphicsWindow.PenColor = "Yellow"

      GraphicsWindow.DrawText(PPTxs+(G*Scale), PPTys+PPTyd+20, B2-2*Z)

      GraphicsWindow.DrawLine(PPTxs+(G*Scale), PPTys+PPTyd+15, PPTxs+(G*Scale)+((B2-(2*Z))*Scale), PPTys+PPTyd+15)  

      

      

      

  ElseIf pptformat = "Querformat" Or pptformat = "1:1" And picformat = "Hochformat" Or picformat = "1:1" And decide23 ="neben" Then



    For i = 1 To ImgC

      GraphicsWindow.BrushColor = "Yellow"

      GraphicsWindow.PenColor = "Yellow"

      ' X-Achse

      GraphicsWindow.DrawText(PPTxs+(G*Scale)+((i-1)*((B2+S)*Scale)), PPTys+PPTyd+20 , B2-2*Z)

      GraphicsWindow.DrawLine(PPTxs+(G*Scale)+((i-1)*((B2+S)*Scale)), PPTys+PPTyd+15, PPTxs+(G*Scale)+ (i* ((B2-(2*Z))*Scale)) + ((i-1)*((S+2*Z)*Scale)), PPTys+PPTyd+15)

    EndFor

 

    For i = 1 To ImgC-1 

      GraphicsWindow.BrushColor = "Blue"

      GraphicsWindow.PenColor = "Blue"

      GraphicsWindow.DrawText(PPTxs+(G*Scale)+(i*((B2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), PPTys+PPTyd+20, S+2*Z)

      GraphicsWindow.DrawLine(PPTxs+(G*Scale)+(i*((B2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), PPTys+PPTyd+15, PPTxs+(G*Scale)+(i*((B2-(2*Z))*Scale))+(i*((S+(2*Z))*Scale)), PPTys+PPTyd+15, )

    EndFor

    

      ' Y-Achse

      GraphicsWindow.BrushColor = "Yellow"

      GraphicsWindow.PenColor = "Yellow"

      GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+(E*Scale), A2-2*Z)

      GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+(E*Scale), PPTxs+PPTxd+15, PPTys+(E*Scale)+((A2-(2*Z))*Scale))

    

  Else

  EndIf

  

  

ElseIf ImgC = 4 Then



    For i = 1 To ImgC-2

      GraphicsWindow.BrushColor = "Yellow"

      GraphicsWindow.PenColor = "Yellow"

      ' Y-Achse

      GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+(E*Scale)+((i-1)*((A2+S)*Scale)), A2-2*Z)

      GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+(E*Scale)+((i-1)*((A2+S)*Scale)), PPTxs+PPTxd+15, PPTys+(E*Scale)+ (i* ((A2-(2*Z))*Scale)) + ((i-1)*((S+2*Z)*Scale)) )

      

      ' X-Achse

      GraphicsWindow.DrawText(PPTxs+(G*Scale)+((i-1)*((B2+S)*Scale)), PPTys+PPTyd+20 , B2-2*Z)

      GraphicsWindow.DrawLine(PPTxs+(G*Scale)+((i-1)*((B2+S)*Scale)), PPTys+PPTyd+15, PPTxs+(G*Scale)+ (i* ((B2-(2*Z))*Scale)) + ((i-1)*((S+2*Z)*Scale)), PPTys+PPTyd+15)

    EndFor

    

    For i = 1 To ImgC-3 

      GraphicsWindow.BrushColor = "Blue"

      GraphicsWindow.PenColor = "Blue"

      ' Y-Achse

      GraphicsWindow.DrawText(PPTxs+PPTxd+20, PPTys+(E*Scale)+(i*((A2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), S+2*Z)

      GraphicsWindow.DrawLine(PPTxs+PPTxd+15, PPTys+(E*Scale)+(i*((A2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), PPTxs+PPTxd+15, PPTys+(E*Scale)+(i*((A2-(2*Z))*Scale))+(i*((S+(2*Z))*Scale)))

      

      ' X-Achse

      GraphicsWindow.DrawText(PPTxs+(G*Scale)+(i*((B2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), PPTys+PPTyd+20, S+2*Z)

      GraphicsWindow.DrawLine(PPTxs+(G*Scale)+(i*((B2-(2*Z))*Scale))+((i-1)*(S+(2*Z))*Scale), PPTys+PPTyd+15, PPTxs+(G*Scale)+(i*((B2-(2*Z))*Scale))+(i*((S+(2*Z))*Scale)), PPTys+PPTyd+15, )      

    EndFor    

    

    

Else

EndIf



EndSub

' -------------















' Enable the graphics window to respond to mouse and keyboard events. 

'GraphicsWindow.MouseDown = OnMouseDown

'GraphicsWindow.MouseUp = OnMouseUp

'GraphicsWindow.MouseMove = OnMouseMove

'GraphicsWindow.KeyDown = OnKeyDown

'GraphicsWindow.KeyUp = OnKeyUp

'GraphicsWindow.TextInput = OnTextInput



'Sub OnKeyDown

'  GraphicsWindow.Title = "The " + GraphicsWindow.LastKey + " key was pressed down."

'EndSub



'Sub OnKeyUp

'  GraphicsWindow.Title = "The " + GraphicsWindow.LastKey + " key was released."

'EndSub



Sub OnMouseDown

  GraphicsWindow.Title = "The mouse button was pressed down."

EndSub



Sub OnMouseUp

  GraphicsWindow.Title = "The mouse button was released."

EndSub



Sub OnMouseMove

  GraphicsWindow.Title = "The mouse moved to " + GraphicsWindow.MouseX + ", " + GraphicsWindow.MouseY + "."

EndSub



'Sub OnTextInput

'  GraphicsWindow.Title = "Some text was input."

'EndSub




