'if you have graphicswindow.hide() before graphicswindow.Show(), then it will make the window so you can't maximize it.

GraphicsWindow.Hide()'hide the window
GraphicsWindow.CanResize = "False" 'This makes the window so that you can't resize it.
GraphicsWindow.Show() '-Function - Show the GraphicsWindow
GraphicsWindow.Title = "Beginning Small Basic" '-Property - Set the Title of the GraphicsWindow
GraphicsWindow.BackgroundColor = "Gray" 'Set the background color to "Gray". you can also use RGB colors.
GraphicsWindow.Left = 0'set the position of the graphicswindow to 0
GraphicsWindow.Top = 0'set the position of the graphicswindow to 0
'                       use ' for comments
value = "True"
arraylist[1]="242" 'Use this format for arrays. Example:
'NameOfArray[index]="value".
'you can also use strings in arrays
If arraylist[1]="242" Then 'If Statement    The compiler only compiles contents of the condition if the statement between "If" and "Then"
  'Is true. If you actually have the value of a variable eqaul to "True" Then you can use
  If value Then 'you don't need the = sign.
    If "True" Then 'you can use If "True" Then      to just go through whatever's in the condition
      GraphicsWindow.BrushColor = "Black" 'Sets the brushcolor to "Black". You can also use RGB colors.
      arraytext = Shapes.AddText(arraylist[1])'Use shapes.addtext function to add text. You can also use the format of arrays to get the value
    EndIf 'Use endif to let the compiler know to stop the if statement.
  EndIf
EndIf
TextWindow.Show() 'shows the textwindow
For i = 1 To 100 'Use for loops in loops that go to a certain # of loops.
  TextWindow.WriteLine(i)'Write the value of "i" into the textwindow
  Program.Delay(10) 'wait ten milliseconds between each line
EndFor 'end the for loop

Program.Delay(1000) 'delays the rest of the program for 1000 milliseconds (1 seconds)

TextWindow.Clear() 'clear the textwindow
For i = 1 To 100 Step 2 'get the odd numbers from 1 to 100. Change the value of "i" to 0 for the even numbers
  TextWindow.WriteLine(i)
  Program.Delay(10) 'wait ten milliseconds between each line
EndFor

Program.Delay(1000)
TextWindow.Clear()
TextWindow.Write("Please write your name: ") 'use TextWindow.Write() so you can write your name after that text on the same line
name = TextWindow.Read() 'read input from the user.
TextWindow.WriteLine("hello " + name + "! Nice name!") 'Greet the user.
Program.Delay(1000)
TextWindow.Hide() 'hide the textwindow
gotosub() 'call a subroutine into action

Sub gotosub 'create a subroutine that is ignored by the compiler until the subroutine is called by using subname()
  GraphicsWindow.Width = Desktop.Width 'sets the width of the window to the desktop width
  GraphicsWindow.Height = Desktop.Height - 75 'sets the height of the window to the desktop height - 75 pixels
  GraphicsWindow.KeyDown = OnKeyDown 'create an event that calls the subroutine "OnKeyDown" when a key is pressed.
  Shapes.Remove(arraytext) 'remove the text from the graphicswindow
  char34 = Text.GetCharacter(34) 'sets the value of char34 to a character with the character code 34
  text1 = Shapes.AddText("Press any key to see its value, and press " + char34 + "Enter/Return" + char34 + " to end") 'adds more text
  string = "" 'sets the value of "string" to nothing
  texttowrite = Shapes.AddText("") 'adds text containing nothing.
EndSub

Sub OnKeyDown 'create a subroutine that corresponds with "GraphicsWindow.Keydown"
  Shapes.Remove(text1) 'removes "text1"
  lastkey = GraphicsWindow.LastKey 'gets the lastkey pressed on the keyboard
  string = Text.Append(string, lastkey) 'Sets the value of "string" to the value of string + the last key pressed.
  writetext() 'call the "writetext" subroutine
  If GraphicsWindow.LastKey = "Return" Then 'if the last key is "Enter" or "Return" Then
    Shapes.Remove(texttowrite) 'remove the text "texttowrite"
    nextstage() 'go to the next stage
  EndIf
EndSub

Sub writetext
  Shapes.SetText(texttowrite, string) 'set the text of "texttowrite" to the variable "string"
EndSub

Sub nextstage
  GraphicsWindow.MouseMove = OnMouseMove
  GraphicsWindow.MouseDown = OnMouseDown 'create 2 new events, which call the values when the mouse is moved, or clicked
  nextext = Shapes.AddText("Click and drag the mouse to draw. Click the clear button to clear")
  addbuttons() 'call a subroutine called "addbuttons"
EndSub

Sub OnMouseMove 'MouseMove subroutine
  x = GraphicsWindow.MouseX 'get the x position of the cursor
  y = GraphicsWindow.MouseY 'get the y position of the cursor
  If Mouse.IsLeftButtonDown Then 'if the left button on the mouse is pressed...
    count = count + 1'adds one to count every time the mouse is moved.
    line[count] = Shapes.AddLine(x, y, prevx, prevy) 'draw a line that has each value held in an array
  EndIf
  prevx = x
  prevy = y 'updates the values of prevx and prevy to x and y
EndSub

Sub OnMouseDown 'MouseDown subroutine
  prevx = GraphicsWindow.MouseX
  prevy = GraphicsWindow.MouseY 'sets the value of prevx and prevy to the x and y positions of the cursor
EndSub

Sub addbuttons
  button_clear = Controls.AddButton("Clear", GraphicsWindow.Width - 80, 5)'adds a button that says "Clear"
  Controls.ButtonClicked = OnButtonClicked 'Adds ANOTHER event that calls "OnButtonClicked" when a button is clicked
EndSub

Sub OnButtonClicked
  lastbuttonclicked = Controls.LastClickedButton 'Sets the value of "lastbuttonclicked" to the last button clicked
  If lastbuttonclicked = button_clear Then 'if that last button clicked is the clear button then
    For i = 1 To Array.GetItemCount(line) 'loop to how many lines there are
      Shapes.Remove(line[i]) 'remove all the lines
    EndFor
  EndIf
EndSub
  
