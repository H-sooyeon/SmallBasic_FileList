args=0
rcc="false
GraphicsWindow.Height=600

Sub Br_line
  x0=args[1]
  y0=args[2]
  x1=args[3]
  y1=args[4]
  
  dx = math.Abs(x1 - x0)
  dy = math.Abs(y1 - y0)
  sx = -1
  If x0 < x1 Then
    sx=1
  EndIf
  
  sy =-1
  If y0 < y1 Then
    sy=1
  EndIf
  
  er =-math.Floor(dy/2)
  If dx > dy Then
    er=math.Floor( dx/2)
  EndIf
  
  While 1=1
    GraphicsWindow.SetPixel(x0 y0 cllr)
    If (x0 = x1) And (y0 = y1) Then
      Goto xxx
    EndIf
    
    e2 = er
    If e2 > -dx Then
      Er = er-dy
      x0 = x0+sx
    EndIf
    
    If e2 <  dy Then
      Er = er+dx
      y0 = y0+sy
    EndIf
    
  EndWhile
  xxx:
EndSub


Sub bezierquad' Bitmap/BÃ©zier curves/Quadratic entry
  
  aa=LDText.Split(args[1] ":")
  bb=LDText.Split(args[2] ":")
  cc=LDText.Split(args[3] ":")
  x1=aa[1]
  y1=aa[2]
  x2=bb[1]
  y2=bb[2]
  x3=cc[1]
  y3=cc[2]

  n=args[4]
  For i = 0 To n
    t = i / n
    t1 = 1 - t
    a = t1 *t1
    b = t * t1 * 2
    c = t *t
    p[i][1] = math.Floor(a * x1 + b * x2  + c * x3 + .5)
    p[i][2] = math.Floor(a * y1 + b * y2  + c * y3 + .5)
  EndFor
  
  For i = 0 To n -1
    ldcall.Function4("Br_line" p[i][1], p[i][2], p[i +1][1], p[i +1][2])
  EndFor
  
EndSub
GraphicsWindow.BackgroundColor="teal
While 1=1
  For r200=50 To 250 Step 2
    cllr=LDColours.HSLtoRGB(ccc 1 .5)
    ccc=math.Remainder(ccc+3 360)
    For rrr=0 To 360 Step 60
      x1=LDMath.Cos(rrr+ccc/2)*r200+300
      y1=LDMath.Sin(rrr+ccc/2)*r200+300
      x2=LDMath.Cos(rrr+60+ccc/2)*r200+300
      y2=LDMath.Sin(rrr+60+ccc/2)*r200+300
      ldcall.Function4 ("bezierquad" x1+":"+y1 "300:300" x2+":"+y2 15 )
    EndFor
    Program.Delay(22)
    
    ' GraphicsWindow.Clear()
  EndFor
  
EndWhile
