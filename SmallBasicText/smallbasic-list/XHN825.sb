' Tokyo 2020 Paralympic Games Emblem
' Copyright Â© 2018 Nonki Takahashi.  The MIT License.

GraphicsWindow.Title = "TOKYO 2020 PARALYMPIC GAMES"
Init()
Turtle.PenUp()
Turtle.X = gw / 2
Turtle.Y = gh / 2
Turtle.Turn(a / 2 + 180)
Turtle.Move(r)
Turtle.Turn(-a / 2)
Turtle.Turn(90)
Turtle.PenDown()
' draw a regular icositetragon (24-gon)
nEdge = 24
MoveArc()
' draw 45 regular dodecagons (12-gons)
' #1-5
Turtle.Turn(a2 - 90)
type = 1
For j = 1 To 5
  DrawDodecagon()
  Turtle.Move(-e2)
  Turtle.Turn(a2)
  angle = j * 30
  AddRectangle()
EndFor
' #6
Turtle.Turn(-a2 -60)
Turtle.Move(e)
Turtle.Turn(a)
Turtle.Move(e)
Turtle.Turn(a)
Turtle.Turn(-90)
DrawDodecagon()
angle = 30
AddRectangle()
' #7-10
Turtle.Turn(90 - a)
Turtle.Move(-e)
Turtle.Turn(a2 - 90 - a)
MoveToOpposite()
Turtle.Turn(a2 + 180)
type = 2
For j = 1 To 4
  DrawDodecagon()
  Turtle.Move(-e2)
  Turtle.Turn(-a2)
  Turtle.Move(-e2)
  Turtle.Turn(a2)
  Turtle.Move(-e2)
  Turtle.Turn(a2)
  angle = j * 30 + 15
  AddRectangle()
EndFor
' #11
Turtle.Turn(180)
For i = 1 To 5
  Turtle.Move(e2)
  Turtle.Turn(a2)
EndFor
Turtle.Turn(-60 - a)
Turtle.Move(-e)
Turtle.Turn(90 - a - a2)
DrawDodecagon()
type = 1
angle = 150
AddRectangle()
' #12
Turtle.Turn(a2 - 90)
For i = 1 To 4
  Turtle.Turn(a)
  Turtle.Move(e)
EndFor
Turtle.Turn(90)
Turtle.Move(e2)
Turtle.Turn(a2 + 180)
DrawDodecagon()
type = 2
angle = 45
AddRectangle()
' #13-15
Turtle.Turn(-a2)
Turtle.Move(e2)
Turtle.Turn(-90)
For i = 1 To 2
  Turtle.Move(e)
  Turtle.Turn(-a)
EndFor
Turtle.Turn(120)
For j = 1 To 2
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
type = 3
For j = 1 To 3
  DrawDodecagon()
  angle = (j - 2) * 30
  AddRectangle()
  Turtle.Move(-e2)
  Turtle.Turn(-a2)
  Turtle.Move(-e2)
  Turtle.Turn(-a2)
  Turtle.Move(-e2)
  Turtle.Turn(a2)
  Turtle.Move(-e2)
  Turtle.Turn(a2)
  Turtle.Move(-e2)
  Turtle.Turn(a2)
EndFor
' #16
For i = 1 To 4
  Turtle.Move(-e2)
  Turtle.Turn(a2)
EndFor
MoveToOpposite()
Turtle.Turn(-a2)
For i = 1 To 2
  Turtle.Turn(-a)
  Turtle.Move(-e)
EndFor
Turtle.Turn(90)
Turtle.Move(e2)
Turtle.Turn(-2 * a2)
DrawDodecagon()
type = 2
angle = -45
AddRectangle()
' #17
Turtle.Turn(2 * a2)
Turtle.Move(-e2)
Turtle.Turn(-90 - a)
nEdge = 6
MoveArc()
Turtle.Turn(-90 + a)
DrawDodecagon()
type = 1
angle = 60
AddRectangle()
' #18
Turtle.Turn(90 - a)
Turtle.Move(-e)
Turtle.Turn(-90 - a)
Turtle.Move(-e2)
Turtle.Turn(a2)
MoveToOpposite()
Turtle.Turn(180 + a2)
DrawDodecagon()
type = 3
angle = -30
AddRectangle()
' #19
For j = 1 To 2
  For i = 1 To 5
    Turtle.Move(-e2)
    Turtle.Turn(a2)
  EndFor
  Turtle.Turn(180 + a2)
EndFor
Turtle.Turn(a)
Turtle.Move(-e)
Turtle.Turn(-a - 2 * a2)
For j = 1 To 3
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
DrawDodecagon()
type = 2
angle = -15
AddRectangle()
' #20
For i = 1 To 3
  Turtle.Move(-e2)
  Turtle.Turn(-a2)
EndFor
For i = 1 To 4
  Turtle.Move(-e2)
  Turtle.Turn(a2)
EndFor
DrawDodecagon()
angle = 15
AddRectangle()
' #21
For i = 1 To 2
  Turtle.Turn(a2)
  Turtle.Move(e2)
EndFor
For k = 1 To 4
  MoveToOpposite()
  Turtle.Turn(-120 - a2)
EndFor
Turtle.Turn(120)
For i = 1 To 2
  Turtle.Turn(-a)
  Turtle.Move(-e)
EndFor
Turtle.Turn(-90)
Turtle.Move(-e2)
Turtle.Turn(-a2)
For i = 1 To 5
  Turtle.Move(-e2)
  Turtle.Turn(a2)
EndFor
DrawDodecagon()
type = 3
angle = 30
AddRectangle()
' #22
Turtle.Turn(180)
Turtle.Move(e2)
For j = 1 To 2
  MoveToOpposite()
  Turtle.Turn(180 + a2)
EndFor
Turtle.Turn(90)
nEdge = -2
MoveArc()
Turtle.Turn(90 - a2)
DrawDodecagon()
type = 1
angle = -60
AddRectangle()
' #23
Turtle.Turn(-60)
nEdge = 8
MoveArc()
Turtle.Turn(90)
Turtle.Move(e2)
Turtle.Turn(a2 + 180)
DrawDodecagon()
type = 2
angle = 75
AddRectangle()
' #24
Turtle.Turn(-a2)
Turtle.Move(e2)
Turtle.Turn(90)
For i = 1 To 2
  Turtle.Move(-e)
  Turtle.Turn(-a)
EndFor
Turtle.Turn(90)
Turtle.Move(e2)
For k = 1 To 2
  Turtle.Turn(a2 + 180)
  MoveToOpposite()
EndFor
Turtle.Turn(a2 + 180)
DrawDodecagon()
type = 2
angle = -15
AddRectangle()
' #25
Turtle.Turn(180 - a2)
For k = 1 To 3
  MoveToOpposite()
  Turtle.Turn(180 - a2)
EndFor
Turtle.Turn(-60 - a)
Turtle.Move(-e)
Turtle.Turn(-a - 60)
For j = 1 To 4
  MoveToOpposite()
  Turtle.Turn(180 + a2)
EndFor
DrawDodecagon()
type = 1
angle = 0
AddRectangle()
' #26
Turtle.Turn(a2)
Turtle.Move(e2)
For j = 1 To 5
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
Turtle.Turn(120 - a)
Turtle.Move(-e)
Turtle.Turn(90 - a - a2)
For j = 1 To 3
  MoveToOpposite()
  Turtle.Turn(180 - a2)
EndFor
DrawDodecagon()
type = 2
angle = 15
AddRectangle()
' #27
For j = 1 To 3
  Turtle.Turn(a2 + 180)
  MoveToOpposite()
EndFor
Turtle.Turn(-a - a2)
For i = 1 To 2
  Turtle.Turn(-a)
  Turtle.Move(-e)
EndFor
Turtle.Turn(-a + 90 - a2)
MoveToOpposite()
Turtle.Turn(180 - a2)
DrawDodecagon()
type = 2
angle = -75
AddRectangle()
' #28
Turtle.Turn(2 * a2)
Turtle.Move(-e2)
Turtle.Turn(-90 - a)
nEdge = 10
MoveArc()
Turtle.Turn(-90 + a)
DrawDodecagon()
type = 1
angle = 90
AddRectangle()
' #29
Turtle.Turn(90 - a)
nEdge = -2
MoveArc()
Turtle.Turn(-90 + a)
For k = 1 To 2
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
DrawDodecagon()
type = 3
angle = 0
AddRectangle()
' #30
For k = 1 To 2
  Turtle.Turn(180 - a2)
  MoveToOpposite()
EndFor
Turtle.Turn(90 - a)
nEdge = -2
MoveArc()
Turtle.Turn(-90 + a)
For k = 1 To 4
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
DrawDodecagon()
type = 1
angle = 0
AddRectangle()
' #31
For j = 1 To 4
  Turtle.Turn(180 - a2)
  MoveToOpposite()
EndFor
Turtle.Turn(90 - a)
nEdge = -3
MoveArc()
Turtle.Turn(90 - a2)
For j = 1 To 4
  MoveToOpposite()
  Turtle.Turn(180 - a2)
EndFor
DrawDodecagon()
type = 1
angle = 0
AddRectangle()
' #32
For j = 1 To 4
  Turtle.Turn(180 + a2)
  MoveToOpposite()
EndFor
Turtle.Turn(-90 + a2)
nEdge = -2
MoveArc()
Turtle.Turn(90 - a2)
For j = 1 To 2
  MoveToOpposite()
  Turtle.Turn(180 - a2)
EndFor
DrawDodecagon()
type = 3
angle = 0
AddRectangle()
' #33
For j = 1 To 2
  Turtle.Turn(a2 + 180)
  MoveToOpposite()
EndFor
Turtle.Turn(a2 - 90)
nEdge = -2
MoveArc()
Turtle.Turn(90 - a2)
DrawDodecagon()
type = 1
angle = 90
AddRectangle()
' #34
Turtle.Turn(a2 - 90)
nEdge = 12
MoveArc()
Turtle.Turn(90)
Turtle.Move(e2)
Turtle.Turn(a2 + 180)
DrawDodecagon()
type = 2
angle = -75
AddRectangle()
' #35
Turtle.Turn(180 - a2)
MoveToOpposite()
Turtle.Turn(90 - a)
nEdge = -2
MoveArc()
Turtle.Turn(-45 - a2)
For j = 1 To 3
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
DrawDodecagon()
type = 2
angle = 15
AddRectangle()
' #36
For j = 1 To 3
  Turtle.Turn(180 - a2)
  MoveToOpposite()
EndFor
Turtle.Turn(90 - a)
nEdge = -7
MoveArc()
Turtle.Turn(90 - a2)
For j = 1 To 3
  MoveToOpposite()
  Turtle.Turn(180 - a2)
EndFor
DrawDodecagon()
type = 2
angle = -15
AddRectangle()
' #37
For j = 1 To 3
  Turtle.Turn(a2 + 180)
  MoveToOpposite()
EndFor
Turtle.Turn(-45 - a)
nEdge = -2
MoveArc()
Turtle.Turn(90 - a2)
MoveToOpposite()
Turtle.Turn(180 - a2)
DrawDodecagon()
type = 2
angle = 75
AddRectangle()
' #38
Turtle.Turn(a2 + 180)
MoveToOpposite()
Turtle.Turn(-45 - a)
nEdge = -10
MoveArc()
Turtle.Turn(90 - a2)
DrawDodecagon()
type = 1
angle = -60
AddRectangle()
' #39
Turtle.Turn(a2 - 90)
nEdge = -3
MoveArc()
Turtle.Turn(-45 - a2)
For j = 1 To 2
  MoveToOpposite()
  Turtle.Turn(a2 + 180)
EndFor
DrawDodecagon()
type = 3
angle = 30
AddRectangle()
' #40
For j = 1 To 2
  Turtle.Turn(180 - a2)
  MoveToOpposite()
EndFor
Turtle.Turn(90 - a)
nEdge = 13
MoveArc()
Turtle.Turn(90 - a2)
For j = 1 To 2
  MoveToOpposite()
  Turtle.Turn(180 - a2)
EndFor
DrawDodecagon()
type = 3
angle = 60
AddRectangle()
' #41
For j = 1 To 2
  Turtle.Turn(a2 + 180)
  MoveToOpposite()
EndFor
Turtle.Turn(-45 - a)
nEdge = -2
MoveArc()
Turtle.Turn(90 - a2)
DrawDodecagon()
type = 1
angle = 60
AddRectangle()
' #42
Turtle.Turn(-45 - a)
nEdge = -9
MoveArc()
Turtle.Turn(-45 - a2)
MoveToOpposite()
Turtle.Turn(a2 + 180)
DrawDodecagon()
type = 2
angle = -45
AddRectangle()
' #43
Turtle.Turn(180 - a2)
MoveToOpposite()
Turtle.Turn(90 - a)
nEdge = 9
MoveArc()
Turtle.Turn(90 - a2)
MoveToOpposite()
Turtle.Turn(180 - a2)
DrawDodecagon()
type = 2
angle = 45
AddRectangle()
' #44
Turtle.Turn(a2 + 180)
MoveToOpposite()
Turtle.Turn(-45 - a)
nEdge = -6
MoveArc()
Turtle.Turn(90 - a2)
DrawDodecagon()
type = 1
angle = -30
AddRectangle()
' #45
Turtle.Turn(a2 - 90)
nEdge = 3
MoveArc()
Turtle.Turn(a - 90)
DrawDodecagon()
type = 1
angle = 30
AddRectangle()
ClearBackground()

Sub AddRectangle
  ' param type - 1..3
  ' param angle
  ' param n - index of the center
  GraphicsWindow.PenWidth = 0
  o[n] = Shapes.AddRectangle(w[type], h[type])
  Shapes.Move(o[n], cx[n] - w[type] / 2, cy[n] - h[type] / 2)
  Shapes.Rotate(o[n], angle)
  Shapes.SetOpacity(o[n], 80)
  GraphicsWindow.PenWidth = 1
EndSub

Sub ClearBackground
  nLines = 24 + 45 * 12
  For i = 1 To nLines
    Shapes.Remove("_turtleLine" + i)
  EndFor
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillRectangle(0, 0, gw, gh)
  For i = 1 To n
    Shapes.SetOpacity(o[i], 100)
  EndFor
EndSub

Sub DrawDodecagon
  ' draw a regular 12-gon
  Turtle.PenDown()
  For i = 1 To 12
    If i = 1 Then
      n = n + 1
      cx[n] = Turtle.X
      cy[n] = Turtle.Y
    EndIf
    If i = 7 Then
      cx[n] = (cx[n] + Turtle.X) / 2
      cy[n] = (cy[n] + Turtle.Y) / 2
    EndIf
    Turtle.Turn(a2)
    If n = 1 Then
      k = Math.Remainder(Turtle.Angle + 90, 360) / 30
      vx[k] = Turtle.X
      vy[k] = Turtle.Y
    EndIf
    Turtle.Move(e2)
  EndFor
  Turtle.PenUp()
  GraphicsWindow.DrawText(cx[n] - 7, cy[n] - 6, n)
  If n = 1 Then
    w[1] = vx[9] - vx[4]
    h[1] = vy[3] - vy[4]
    _w = vx[9] - vx[5]
    _h = vy[9] - vy[5]
    w[2] = Math.SquareRoot(_w * _w + _h * _h) 
    _w = vx[5] - vx[3]
    _h = vy[3] - vy[5]
    h[2] = Math.SquareRoot(_w * _w + _h * _h)
    w[3] = vx[8] - vx[5]
    h[3] = vy[2] - vy[5]
  EndIf
EndSub

Sub Init
  gw = 600
  gh = 600
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.Top = 4
  GraphicsWindow.PenColor = "Gray"
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.BrushColor = "#012063"
  Turtle.Speed = 10
  n = 0
  ' calculate parameters for icositetragon (24-gon)
  a = 360 / 24
  r = 250
  _a = Math.GetRadians(a)
  e = 2 * r * Math.Sin(_a / 2)
  ' calculate parameters for dodecagon (12-gon)
  a2 = 360 / 12
  _a2 = Math.GetRadians(a2)
  r2 = e / 2 / Math.Cos(_a2 / 2)
  e2 = 2 * r2 * Math.Sin(_a2 / 2)
EndSub

Sub MoveArc
  ' param nEdge
  If 0 < nEdge Then
    For i = 1 To nEdge
      Turtle.Turn(a)
      Turtle.Move(e)
    EndFor
  Else
    For i = -1 To nEdge Step -1
      Turtle.Move(-e)
      Turtle.Turn(-a)
    EndFor
  EndIf
EndSub  

Sub MoveToOpposite
  For i = 1 To 6
    Turtle.Turn(a2)
    Turtle.Move(e2)
  EndFor
EndSub
