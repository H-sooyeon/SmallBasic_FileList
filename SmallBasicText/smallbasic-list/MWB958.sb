

'TRIANGELdemo

'[1] 452 - pause after first triangle draw

   '[A1] 788 - pause after Aim1

   '[A2] 801  - pause after Aim2

   '[A3]  814 - pause after Aim3

'[2] 885 - pause after drawing aim points just prior to drawing aim triangel

'[3] 900 - pause after drawing Aim Triangle

'[4] 955 - pause adter moving aim points

'[5] 980 - pause after drawing new triangle





FirstAlter=3

SecondAlter=1

ThirdAlter=2



InSizerFirst=3

InSizerSecond=1

InsizerThird=2



EndSizerFirst=1

EndSizerSecond=0

EndSizerThird=0



'OBTUSE

'SelectTriangle="LOS12>23"

'SelectTriangle="LOS12<23"

'SelectTriangle="ROS13>23"

'SelectTriangle="ROS13<23"

'SelectTriangle="CH"

'SelectTriangle="CL"

'SelectTriangle="CL12>23"

'SelectTriangle="CL12<23"'ACUTE

'SelectTriangle="LAS13>23"

'SelectTriangle="LAS13<23"

'SelectTriangle="RAS12>13"

'SelectTriangle="RAS12<13"

'SelectTriangle="CAL12>23"

'SelectTriangle="CAL12<23"



'RAS -- Right Acute

'CAL -- Centered Acute



'SelectTriangle="E"



Swiftness=10



AlterRate=10

AlterRate=AlterRate*(.01)

e=15

e=e*(.01)



ColorOne="Cyan"

ColorTwo="Yellow"

ColorThree="Green"



Loops=1000

            StopLoop=2

            PausePoint=0



'Select Sequence of Point Alteration

  'FirstAlter

  'Second Alter

  'ThirdAlter



'Select Sequence of Inside Resizing

  'InsizerFirst

  'InsizerSecond

  'Insizer'Third



'Select Sequence of Endcycle Resizing

  'EndSizerFirst

  'EndSizerSecond

  'EndSizerThird



'Select Percentage of Alteration

  'AlterRate



'Select Precision of Equilibirum Percentege

  'e



'Don't Change the Following!

  'StopLoop

  'PausePoint'



'END CALIBRATION

'=================================================



'TRIANGEL Aimer

'All Rights Reserved

'Copywrite 2015

'Roger Jacques





'LINE NUMBERS

'Open Textbox @ 118

'ManualTriangle @ 186

'Random @ 206

'Preset Definitions @ 219

'Presets @ 297

'First Calculations @ 477

'Start Program @ 524

'Open Graphics Window @ 555

'Draw Triangle @ 576

'MidEdge Definitions @ 624

'Obtuse Selectors @ 658

'Acute Selectors @ 792

'Aim Point Definitions @ 916

'Aim Edge Definitions @ 986 

'Aim Midpoints @ 1005

'Line/Length Definitions @ 1039

'Draw Aim Triangle @ 1078

'AlterPoints @ 1129

'Redefine Points @ 1184

'Redraw Triangle @ 1193

'Internal Resizing @ 1244

'CATCH @ 1326

'Final Resize @ 1360

'End Program @1450

'==Subs===============

'Alter Subs @ 1473

'EndSizer One @ 1523

'EndSizer Two @ 1614

'EndSizer Three @ 1713

'FirstHeader @ 1808

'MidHeader @ 1887

'LasHeader @ 2080

'TextOne @ 2204

'TextTwo @ 2222

'TextThree @ 2246

'TextFour @ 2265

'TextFive @ 2284

'TextSix @ 2302

'====START!====================================

'OPEN TEXTBOX

LineOne:

TextWindow.Title = "TRIANGELS"

TextWindow.Left = 10

TextWindow.Top = 10

TextWindow.BackgroundColor = "Black"

TextWindow.ForegroundColor = "White"



TextWindow.WriteLine("             TRIANGELS")

TextWindow.WriteLine("")

TextWindow.WriteLine("NOTE:  Some irregular triangles take up to 50 looping iterations")

TextWindow.WriteLine("to achieve equilibrium because their shape type has not been")

TextWindow.WriteLine("optimized by this program.  Close it at any time by tapping the 'x'")

TextWindow.WriteLine("in the upper right corner of this window.")

TextWindow.WriteLine("")

TextWindow.WriteLine("Start with [1]")

TextWindow.WriteLine("")

TextWindow.WriteLine("[1] SloMo Demo [2] New Triangle [3] Random Runs [4] Preset [5] End  ")

TextWindow.WriteLine("")

TextWindow.Write("Select by [#]: ")

SelectMode=TextWindow.Read()



If SelectMode = 1 Then  

  TextWindow.Clear()

  Runs=2

  Turtle.Speed=10

  SelectTriangle="LAS13<23"

EndIf



If SelectMode = 2 Then

TextWindow.Clear()

Runs=2

Turtle.Speed=10

SelectTriangle=2

EndIf



If SelectMode = 3 Then

  TextWindow.Clear()

TextWindow.WriteLine("WARNING!  Under Development.  May take up to fifty iterations.")

TextWindow.WriteLine("")

TextWindow.WriteLine("Tap 'x' in upper right corner to exit.")

TextWindow.WriteLine("")

TextWindow.Write("Number of triangles to run: ")

Runs=TextWindow.Read()

SelectTriangle = 3 

Turtle.Speed=10

EndIf

TextWindow.WriteLine("")

If SelectMode = 4 Then

TextWindow.Clear()

Runs=2

Turtle.Speed=10

SelectTriangle=4

EndIf





If SelectMode = 5 Then

Program.End()

EndIf



'START TRIANGLE SELECTION



For Run = 1 to Runs

R=0

  If Run = Runs Then

    TextWindow.Clear()

    Goto LineOne

  EndIf

  

  

'MANUAL



If SelectTriangle=(2) Then  

  

  TextWindow.WriteLine("'X' = # of Pixels from Left Edge.")

  TextWindow.WriteLine("'Y' = # of Pixels from Top.")

  TextWindow.WriteLine(" ")

TextWindow.Write("Point1X? ")

Point1X = TextWindow.Read()

TextWindow.Write("Point1Y? ")

Point1Y = TextWindow.Read()

TextWindow.Write("Point2X? ")

Point2X = TextWindow.Read()

TextWindow.Write("Point2Y? ")

Point2Y= TextWindow.Read()

TextWindow.Write("Point3X? ")

Point3X = TextWindow.Read()

TextWindow.Write("Point3Y? ")

Point3Y= TextWindow.Read()



EndIf



'RANDOM



If SelectTriangle=(3) Then

  

Point1X=(Math.GetRandomNumber(400)+200)

Point1Y=(Math.GetRandomNumber(400)+100)

Point2X=(Math.GetRandomNumber(400)+200)

Point2Y=(Math.GetRandomNumber(400)+100)

Point3X=(Math.GetRandomNumber(400)+200)

Point3Y=(Math.GetRandomNumber(400)+100)



EndIf



If SelectTriangle=(4) Then

  

't-------------



'TextWindow.WriteLine("Select a Preset Triangle by [#]")

'TextWindow.WriteLine(" ")



TextWindow.WriteLine("              PRESET TRIANGLES")

TextWindow.WriteLine("")

TextWindow.WriteLine("NOTE:  EP*P* means the edge between those two points.")

TextWindow.WriteLine("")

TextWindow.WriteLine("OBTUSE")

TextWindow.WriteLine("  [1] LOS12>23  Left Obtuse EP1P2 > EP2P3")

TextWindow.WriteLine("  [2] LOS12<23  Left Obtuse EP1P2 < EP2P3")

TextWindow.WriteLine("  [3] ROS13>23  Right Obtuse EP1P3 > EP2P3")

TextWindow.WriteLine("  [4] ROS13<23  Right Obtuse EP1P3 < EP2P3")

TextWindow.WriteLine("  [5] CH  Raised Centered Apex  Equal Sides")

TextWindow.WriteLine("  [6] CL  Lowered Centered Apex Equal Sides")

TextWindow.WriteLine("  [7] CL12>23  Centered/Lowered EP1P2 > EP2P3")

TextWindow.WriteLine("  [8] CL12<23  Centered/Lowered EP1P@ < EP2P3")

TextWindow.WriteLine("ACUTE")

TextWindow.WriteLine("  [9] LAS13>23  Left Acute EP1P3 > EP2P3")

TextWindow.WriteLine(" [10] LAS13<23  Left Acute EP1P3 < EP2P3")

TextWindow.WriteLine(" [11] RAS12>13  Right Acute EP1P2 > EP1P3")

TextWindow.WriteLine(" [12] RAS12<13  Right Acute EP1P2 < EP1P3")

TextWindow.WriteLine(" [13] CAL12>23  Centered Acute EP1P2 > EP2P3")

TextWindow.WriteLine(" [14] CAL12<23  Centered Acute EP1P2 < EP2P3")

TextWindow.WriteLine(" ")

TextWindow.WriteLine(" ")

TextWindow.Write("Select a Preset Triangle by [#]   ")

Preset = TextWindow.Read()



If Preset=1 Then

  SelectTriangle="LOS12>23"

EndIf

If Preset=2 Then

SelectTriangle="LOS12<23"

Endif

If Preset=3 Then

SelectTriangle="ROS13>23"

Endif

If Preset=4 Then

SelectTriangle="ROS13<23"

Endif

If Preset=5 Then

SelectTriangle="CH"

EndIf 

If Preset=6 Then

SelectTriangle="CL"

EndIf

If Preset=7 Then

SelectTriangle="CL12>23"

Endif

If Preset=8 Then

SelectTriangle="CL12<23"'

Endif

If Preset=9 Then

SelectTriangle="LAS13>23"

Endif

If Preset=10 Then

SelectTriangle="LAS13<23"

EndIf

If Preset=11 Then

SelectTriangle="RAS12>13"

Endif

If Preset=12 Then

SelectTriangle="RAS12<13"

Endif

If Preset=13 Then

SelectTriangle="CAL12>23"

Endif

If Preset=14 Then

SelectTriangle="CAL12<23"

EndIf

EndIf



't-------------



'PRESET



If SelectTriangle="E" Then



'Regular

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500





'LEFT OBTUSE

ElseIf SelectTriangle="LOS12>23" Then



'Left Obtuse E12 > E23

Point1X=250

Point1Y=500

Point2X=150

Point2Y=100

Point3X=650

Point3Y=500





ElseIf SelectTriangle="LOS12<23" Then



'Left Obtuse 12 < E23

Point1X=250

Point1Y=500

Point2X=200

Point2Y=300

Point3X=550

Point3Y=500



'RIGHT OBTUSE

ElseIf SelectTriangle="ROS13<23" Then

  

'Right Obtuse E12 < E23

Point1X=250

Point1Y=500

Point2X=550

Point2Y=200

Point3X=450

Point3Y=500





ElseIf SelectTriangle="ROS13>23" Then



'Right Obtuse E13 > E23

Point1X=250

Point1Y=500

Point2X=550

Point2Y=400

Point3X=450

Point3Y=500



'CENTERED OBTUSE

ElseIf SelectTriangle="CH" Then

  

'Centered High

Point1X=300

Point1Y=500

Point2X=400

Point2Y=50

Point3X=550

Point3Y=500



ElseIf SelectTriangle="CL" Then



'Centered Low

Point1X=150

Point1Y=500

Point2X=400

Point2Y=450

Point3X=650

Point3Y=500



ElseIf SelectTriangle="CL12>23" Then



'Centered Low E12 > E23

Point1X=150

Point1Y=500

Point2X=500

Point2Y=450

Point3X=650

Point3Y=500



ElseIf SelectTriangle="CL12<23" Then



'Centered Low E12 < E23

Point1X=150

Point1Y=500

Point2X=300

Point2Y=450

Point3X=650

Point3Y=500



'========End OBTUSE  TRIANGLES==================



'========Start ACUTE  TRIANGLES==================





ElseIf SelectTriangle="E" Then



'Regular

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500



ElseIf SelectTriangle="LAS13>23" Then



'Left Acute 13>23

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=600

Point3Y=400



ElseIf SelectTriangle="LAS13<23" Then



'Left Acute 13<23

Point1X=150

Point1Y=500

Point2X=400

Point2Y=100

Point3X=450

Point3Y=450



ElseIf SelectTriangle="RAS12>13" Then



'Right Acute 12>23

Point1X=300

Point1Y=450

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500



ElseIf SelectTriangle="RAS12<13" Then



'Right Acute 12<13

Point1X=200

Point1Y=400

Point2X=400

Point2Y=100

Point3X=650

Point3Y=500





ElseIf SelectTriangle="CAL12>23" Then



'Right Acute 12>23

Point1X=150

Point1Y=500

Point2X=450

Point2Y=150

Point3X=650

Point3Y=500



ElseIf SelectTriangle="CAL12<23" Then



'Right Acute 12<23 

Point1X=150

Point1Y=500

Point2X=350

Point2Y=200

Point3X=650

Point3Y=500



EndIf





'END TRIANGLE SELECTION





'CALIBRATE ORIGINAL Points, Edges & Centroid



EP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

 EdgeP1P2=Math.SquareRoot(EP1P2)

EdgeP1P2int=(Math.Floor(EdgeP1P2))

EP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

 EdgeP1P3=Math.SquareRoot(EP1P3)

EdgeP1P3int=(Math.Floor(EdgeP1P3))

EP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

 EdgeP2P3=Math.SquareRoot(EP2P3)

EdgeP2P3int=(Math.Floor(EdgeP1P3))



'Start Perimeter

PerimeterBase = EdgeP1P2 + EdgeP1P3 + EdgeP2P3

PerimeterBaseint = (Math.Floor(PerimeterBase))



'Start Edges

StartEdgeP1P2 = EdgeP1P2

StartEdgeP1P2Int=Math.Floor(StartEdgeP1P2)

StartEdgeP1P3 = EdgeP1P3

StartEdgeP1P3Int=Math.Floor(StartEdgeP1P3)

StartEdgeP2P3 = EdgeP2P3

StartEdgeP2P3Int=Math.Floor(StartEdgeP2P3)



'Start Points

StartPoint1X=Point1X

StartPoint1Xint=Math.Floor(Point1X)

StartPoint1Y=Point1Y

StartPoint1Yint=Math.Floor(Point1Y)

StartPoint2X=Point2X

StartPoint2Xint=Math.Floor(Point2X)

StartPoint2Y=Point2Y

StartPoint2Yint=Math.Floor(Point2Y)

StartPoint3X=Point3X

StartPoint3Xint=Math.Floor(Point3X)

StartPoint3Y=Point3Y

StartPoint3Yint=Math.Floor(Point3Y)





'Start Centroid

StartCentroidPX = ((Point1X+Point2X+Point3X)/3)

StartCentroidPXint = (Math.Floor(StartCentroidPX))

StartCentroidPY = ((Point1Y+Point2Y+Point3Y)/3)

StartCentroidPYint = (Math.Floor(StartCentroidPY))



'END CALIBRATE ORIGINAL Points, Edges & Centroid



'==========START PROGRAM============



For Loop = 1 To Loops

  LoopShapeNumber=LoopShapeNumber+1

  If Loop=1 Then

    StartTime = (Clock.ElapsedMilliseconds)

    StartLoopTime  = StartTime

  EndIf

  

  StartLoopTime = (Clock.ElapsedMilliseconds)

  ElapsedTime = EndLoopTime-StartTime

  ElapsedTimeint = (Math.Floor(ElapsedTime))

  ElapsedLoopTime = EndLoopTime-StartLoopTime

  ElapsedLoopTimeint = (Math.Floor(ElapsedLoopTime))









'CALIBRATE START-LOOP EDGES



EP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

EdgeP1P2=Math.SquareRoot(EP1P2)

EdgeP1P2int=(Math.Floor(EdgeP1P2))

EP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

EdgeP1P3=Math.SquareRoot(EP1P3)

EdgeP1P3int=(Math.Floor(EdgeP1P3))

EP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

EdgeP2P3=Math.SquareRoot(EP2P3)

EdgeP2P3int=(Math.Floor(EdgeP1P3))

Perimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3

Perimeterint = (Math.Floor(PerimeterBase))





'DEFINE GRAPHICS WINDOW



GraphicsWindow.Show()

GraphicsWindow.Clear()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TRIANGEL Demo"

GraphicsWindow.FontSize=3

Turtle.Speed = 10



't

If Loop=1 Then

  Speed=9

TextOne()

Else

  Speed=10

EndIF

't



GraphicsWindow.PenColor=ColorOne

GraphicsWindow.PenWidth=8

If Loop=1 Then

Turtle.Speed=9

Else

Turtle.Speed=10

Endif

FirstHeader()

Turtle.PenDown()

Turtle.X=(Point1X)

Turtle.Y=(Point1y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)

GraphicsWindow.PenColor="Black"

GraphicsWindow.PenWidth=3





'[1] Pause after First Triangle Draw

If Loop=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

Endif



Turtle.PenUp()

Turtle.Speed=10



'GraphicsWindow.Clear()

Shapes.HideShape(ShapeTRIANGELOne)



If Loop=1 Then

  Speed=10

TextTwo()

Else

  Speed=10

EndIF



'====FIRST HEADER=====

FirstHeader()

'====================



'Start MidEdge Definitions



Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.PenUp()

Turtle.MoveTo(Point2X, Point2Y)

Turtle.Turn(180)

Turtle.Move((EdgeP1P2/2))

  MidEP1P2X=(Turtle.X)

  MidEP1P2Y=(Turtle.Y)

MidEP1P2Xint=Math.Floor(MidEP1P2X)

MidEP1P2Yint=Math.Floor(MidEP1P2Y)



Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(180)

Turtle.Move((EdgeP1P3/2))

  MidEP1P3X=(Turtle.X)

  MidEP1P3Y=(Turtle.Y)

MidEP1P3Xint=Math.Floor(MidEP1P3X)

MidEP1P3Yint=Math.Floor(MidEP1P3Y)



Turtle.X=(Point2X)

Turtle.Y=(Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(180)

Turtle.Move((EdgeP2P3/2))

  MidEP2P3X=(Turtle.X)

  MidEP2P3Y=(Turtle.Y)

MidEP2P3Xint=Math.Floor(MidEP2P3X)

MidEP1P2Yint=Math.Floor(MidEP2P3Y)

Turtle.PenDown()

'Change speed after midpoints'

Turtle.Speed=10



'End MidEdge Definitions





'=====START OBTUSE SELECTORS=======



'LOS (Left Apex Obtuse South Base)

If ((EP1P2*EP1P2) + (EP1P3*EP1P3)) < (EP2P3*EP2P3) Then

  TempP=1

  

  If EP1P2>EP1P3 Then

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y  

  EndIf

  

  If EP1P2<EP1P3 Then

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y  

  EndIf



  

'ROS (Right Apex Obtuse South Base)

ElseIf ((EP1P3*EP1P3) + (EP2P3*EP2P3)) < (EP1P2*EP1P2) Then

  TempP=1

  If EP1P3>EP2P3 Then

  

  P1X = Point1X 

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y 

EndIf



If EP1P3<EP2P3 Then

  

  P1X = Point1X 

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y

  EndIf

  

'Centered Apex Obtuse South Base)

ElseIf ((EP1P2*EP1P2) + (EP2P3*EP2P3)) < (EP1P3*EP1P3) Then

    TempP=1

    

  If EP1P2>EP2P3 Then

  

  P1X = Point1X 

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P1X

  Point1Y = P1Y

  Point2X = P2X

  Point2Y = P2Y

  Point3X = P3X

  Point3Y = P3Y 

EndIf



If EP1P2<EP2P3 Then

  

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y

  EndIf

     

  P1X = Point1X 

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P1X

  Point1Y = P1Y

  Point2X = P2X

  Point2Y = P2Y

  Point3X = P3X

  Point3Y = P3Y



Endif



'=====END OBTUSE SELECTORS========



'=====START ACUTE SELECTORS========



If (EP1P2*EP1P2)+(EP2P3*EP2P3)>(EP1P3*EP1P3) OR (EP1P2*EP1P2)+(EP1P3*EP1P3)>(EP1P2*EP2P3) OR (EP1P3*EP1P3)+(EP1P2*EP1P2)>(EP2P3*EP2P3) Then

  TempP=1   





If (EP1P2)>(EP1P3) And (EP1P2)>(EP2P3) And (EP1P3)>(EP2P3) Then



  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P1X

  Point1Y = P1Y

  Point2X = P2X

  Point2Y = P2Y

  Point3X = P3X

  Point3Y = P3Y  



EndIf



If (EP1P2)>(EP1P3) And (EP1P2)>(EP2P3) And (EP1P3)<(EP2P3) Then



  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y  



EndIf

 

If (EP1P2)>(EP1P3) And (EP1P2)<(EP2P3) Then



  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P1X

  Point1Y = P1Y

  Point2X = P2X

  Point2Y = P2Y

  Point3X = P3X

  Point3Y = P3Y  



EndIf





If (EP1P2)<(EP1P3) And (EP1P2)>(EP2P3) Then



  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P3X

  Point1Y = P3Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P2X

  Point3Y = P2Y  



EndIf





If (EP1P2)<(EP1P3) And (EP1P2)<(EP2P3) And (EP1P3)>(EP2P3) Then

 

  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P1X

  Point1Y = P1Y

  Point2X = P2X

  Point2Y = P2Y

  Point3X = P3X

  Point3Y = P3Y  



EndIf



If (EP1P2)<(EP1P3) And (EP1P2)<(EP2P3) And (EP1P3)<(EP2P3) Then



  P1X = Point1X 

  P1Y = Point1Y 

  P2X = Point2X 

  P2Y = Point2Y 

  P3X = Point3X 

  P3Y = Point3Y 

  

  Point1X = P2X

  Point1Y = P2Y

  Point2X = P1X

  Point2Y = P1Y

  Point3X = P3X

  Point3Y = P3Y  



EndIf





'=====END ACUTES =================



EndIF





'=====END ACUTE SELECTORS========



'Start Aim Point Definitions



Turtle.PenUp()

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y) 

Turtle.PenDown()



If Loop=1 Then

Turtle.Speed=9

Else

Turtle.Speed=10

EndIf



' (1)23

Turtle.X=(Point2X)

Turtle.Y=(Point2y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(-120)

Turtle.Move(EdgeP2P3)

  AimPoint1X=Turtle.X

  AimPoint1Y=Turtle.Y

Turtle.MoveTo(Point2X, Point2Y)



'[A1] Stop at P1 Aim

'TextWindow.Pause()



'1(2)3

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.Turn(-120)

Turtle.Move(EdgeP1P3)

  AimPoint2X=Turtle.X

  AimPoint2Y=Turtle.Y

Turtle.MoveTo(Point1X, Point1Y)



'[A2] Stop at P2 Aim

'TextWindow.Pause()



'12(3)

Turtle.X=(Point2X)

Turtle.Y=(Point2Y)

Turtle.MoveTo(Point1X, Point1Y)

Turtle.Turn(-120)

Turtle.Move(EdgeP1P2)

  AimPoint3X=Turtle.X

  AimPoint3Y=Turtle.Y

Turtle.MoveTo(Point2X, Point2Y)



'[A3] Stop at P3 Aim

'TextWindow.Pause()



'End Aim Point Definitions



'====END OBTUSE ACUTE SELECTOR====

'restore points to original position

If TempP=321 Then 

  

  Point1X = P1X

  Point1Y = P1Y

  Point2X = P2X

  Point2Y = P2Y

  Point3X = P3X

  Point3Y = P3Y  

  

Endif 



''Start Aim Edge Definitions

Turtle.PenUp()

AimEP1P2=((AimPoint2X-AimPoint1X)*(AimPoint2X-AimPoint1X))+((AimPoint2Y-AimPoint1Y)*(AimPoint2Y-AimPoint1Y))

AimEdgeP1P2=Math.SquareRoot(AimEP1P2)

AimEdgeP1P2int=(Math.Floor(AimEdgeP1P2))



AimEP1P3=((AimPoint3X-AimPoint1X)*(AimPoint3X-AimPoint1X))+((AimPoint3Y-AimPoint1Y)*(AimPoint3Y-AimPoint1Y))

AimEdgeP1P3=Math.SquareRoot(AimEP1P3)

AimEdgeP1P3int=(Math.Floor(AimEdgeP1P3))



AimEP2P3=((AimPoint3X-AimPoint2X)*(AimPoint3X-AimPoint2X))+((AimPoint3Y-AimPoint2Y)*(AimPoint3Y-AimPoint2Y))

AimEdgeP2P3=Math.SquareRoot(AimEP2P3)

AimEdgeP2P3int=(Math.Floor(AimEdgeP1P3))



AimPerimeter = AimEdgeP1P2 + AimEdgeP1P3 + AimEdgeP2P3

AimPerimeterint = (Math.Floor(AimPerimeter))



'End Aim Edge Definitions



'Start Aim Edge Midpoint Definitions

Turtle.Speed=10

Turtle.X=(AimPoint1X)

Turtle.Y=(AimPoint1Y)

Turtle.MoveTo(AimPoint2X, AimPoint2Y)

Turtle.Turn(180)

Turtle.Move((AimEdgeP1P2/2))

  MidAimEP1P2X=(Turtle.X)

  MidAimEP1P2Y=(Turtle.Y)

MidAimEP1P2Xint=Math.Floor(MidAimEP1P2X)

MidAimEP1P2Yint=Math.Floor(MidAimEP1P2Y)



Turtle.X=(AimPoint1X)

Turtle.Y=(AimPoint1Y)

Turtle.MoveTo(AimPoint3X, AimPoint3Y)

Turtle.Turn(180)

Turtle.Move((AimEdgeP1P3/2))

  MidAimEP1P2X=(Turtle.X)

  MidAimEP1P2Y=(Turtle.Y)

MidAimEP1P2Xint=Math.Floor(MidAimEP1P2X)

MidAimEP1P2Yint=Math.Floor(MidAimEP1P2Y)



Turtle.X=(AimPoint2X)

Turtle.Y=(AimPoint2Y)

Turtle.MoveTo(AimPoint3X, AimPoint3Y)

Turtle.Turn(180)

Turtle.Move((AimEdgeP2P3/2))

  MidAimEP2P3X=(Turtle.X)

  MidAimEP2P3Y=(Turtle.Y)

MidAimEP2P3Xint=Math.Floor(MidAimEP2P3X)

MidAimEP1P2Yint=Math.Floor(MidAimEP2P3Y)

Turtle.PenDown()

'End Aim Edge MidPoint Definitions



'Start Line/Length Definitions



LineEdgeP1P2=((Point2X-AimPoint1X)*(Point2X-AimPoint1X))+((Point2Y-AimPoint1Y)*(Point2Y-AimPoint1Y))

LineP1P2=Math.SquareRoot(LineedgeP1P2)

LineP1P2int=(Math.Floor(LineP1P2))



LineEdgeP1P3=((Point3X-AimPoint1X)*(Point3X-AimPoint1X))+((Point3Y-AimPoint1Y)*(Point3Y-AimPoint1Y))

LineP1P3=Math.SquareRoot(LineEdgeP1P3)

LineP1P3int=(Math.Floor(LineP1P3))



LineEdgeP2P3=((Point3X-AimPoint2X)*(Point3X-AimPoint2X))+((Point3Y-AimPoint2Y)*(Point3Y-AimPoint2Y))

LineP2P3=Math.SquareRoot(LineEdgeP2P3)

LineP2P3int=(Math.Floor(LineP1P3))



Length = LineP1P2 + LineP1P3 + LineP2P3

Lengthint = (Math.Floor(Length))



'End Line/Length Definitions



'[2] Pause after Defining Aim Points and Defining Midlonts/Lengths

If Loop=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

EndIf

Turtle.Speed=10

'GraphicsWindow.Clear()

Shapes.HideShape(ShapeTRIANGELTwo1)

Shapes.HideShape(ShapeTRIANGELTwo2)







If Loop=1 Then

  Speed=10

TextThree()

Else 

  Speed=10

EndIf





'====DRAW AIM TRIANGLE==========

GraphicsWindow.PenColor="Yellow"

GraphicsWindow.PenWidth=8

Turtle.Speed=10

Turtle.X=(AimPoint1X)

Turtle.Y=(AimPoint1y)

Turtle.MoveTo(AimPoint2X, AimPoint2Y)

Turtle.MoveTo(AimPoint3X, AimPoint3Y)

Turtle.MoveTo(AimPoint1X, AimPoint1Y)

GraphicsWindow.PenWidth=3



'[3] Pause After Drawing Aim Triangle

If Loop=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

EndIf

'GraphicsWindow.Clear()

Shapes.HideShape(ShapeTRIANGELThree)



If Loop=1 Then

TextFour()

EndIF



'====MID HEADER==========

GraphicsWindow.Clear()

MidHeader()



GraphicsWindow.PenColor=ColorOne

GraphicsWindow.PenWidth=8

Turtle.Speed=10

Turtle.X=(Point1X)

Turtle.Y=(Point1y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)

GraphicsWindow.PenColor="Black"

GraphicsWindow.PenWidth=3





'========================



'==ALTERPOINT SEQUENCE===

Turtle.Speed=9

If FirstAlter=1 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterOne()

EndIf



If FirstAlter=2 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterTwo()

EndIf



If FirstAlter=3 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterThree()

EndIf



If SecondAlter=1 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterOne()

EndIf



If SecondAlter=2 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterTwo()

EndIf



If SecondAlter=3 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterThree()

EndIf



If ThirdAlter=1 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterOne()

EndIf



If ThirdAlter=2 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterTwo()

EndIf



If ThirdAlter=3 Then

  GraphicsWindow.PenColor=ColorTwo

  AlterThree()

EndIf



'[4] Pause after Aim Triangle Draw

If Loop=1 Then

  TextWindow.Pause()

  TextWindow.Clear()

EndIF



'END ALTERPOINT SEQUENCES



GraphicsWindow.Clear()



If Loop=1 Then

  Speed=10

TextFive()

Else

  Speed=10

EndIF





'REDEFINE POINTS



Point1X=NEWPoint1X 

Point1Y=NEWPoint1Y

Point2X=NEWPoint2X

Point2Y=NEWPoint2Y

Point3X=NEWPoint3X

Point3Y=NEWPoint3Y



'REDRAW TRIANGLE

GraphicsWindow.Clear()

MidHeader()

GraphicsWindow.PenColor="Blue"

GraphicsWindow.PenWidth=8

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)



'[5] Pause After Redrawing New Triangle

If Loop=1 Then

  GraphicsWindow.PenColor="Blue"

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)



MidHeader()



TextWindow.Pause()

TextWindow.Clear()



Else

  LastHeader()

  GraphicsWindow.PenColor="Blue"

Turtle.X=(Point1X)

Turtle.Y=(Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)

  'TextWindow.Pause()

EndIF



Turtle.PenUp()



'=========START RESIZER ZONE=========



NEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

NewEdgeP1P2=Math.SquareRoot(NEP1P2)

NewEdgeP1P2int=(Math.Floor(NewEdgeP1P2))

NEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

NewEdgeP1P3=Math.SquareRoot(NEP1P3)

NewEdgeP1P3int=(Math.Floor(NewEdgeP1P3))

NEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

NewEdgeP2P3=Math.SquareRoot(NEP2P3)

NewEdgeP2P3int=(Math.Floor(NewEdgeP1P3))

NewPerimeter = NewEdgeP1P2+NewEdgeP1P3+NewEdgeP2P3



'=======START INTERNAL RESIZING============



IF InSizerFirst=1 Then

  R=0

  EndSizerOne()

  MidHeader()

EndIf

IF InSizerFirst=2 Then

  R=0

  EndSizerTwo()

  LastHeader()

EndIf

IF InSizerFirst=3 Then

  R=0

  EndSizerThree()

  LastHeader()

EndIf



If InSizerSecond=1 Then

  R=0

  EndSizerOne()

  LastHeader()

EndIf

If InSizerSecond=2 Then

  R=0

  EndSizerTwo()

  LastHeader()

EndIf

If InSizerSecond=3 Then

  EndSizerThree()

  LastHeader()

EndIf



If InsizerThird=1 Then

  R=0

  EndSizerOne()

  LastHeader()

EndIf

If InsizerThird=2 Then

  R=0

  EndSizerTwo()

  LastHeader()

EndIf

If InsizerThird=3 Then

  R=0

  EndSizerThree()

  LastHeader()

EndIf



'=======END RESIZING=======



'===START RE-CENTROID======

NextCentroidPX = ((Point1X+Point2X+Point3X)/3)

NextCentroidPXint = (Math.Floor(NextCentroidPX))

NextCentroidPY = ((Point1Y+Point2Y+Point3Y)/3)

NextCentroidPYint = (Math.Floor(NextCentroidPY))



AlignPX = StartCentroidPX - NextCentroidPX

AlignPY = StartCentroidPY - NextCentroidPY



Turtle.MoveTo((Point1X+AlignPX), (Point1Y+AlignPY))

Point1X = Turtle.X

Point1Y = Turtle.Y

Turtle.MoveTo((Point2X+AlignPX), (Point2Y+AlignPY))

Point2X = Turtle.X

Point2Y = Turtle.Y

Turtle.MoveTo((Point3X+AlignPX), (Point3Y+AlignPY))

Point3X = Turtle.X

Point3Y = Turtle.Y



NextCentroidPX = ((Point1X+Point2X+Point3X)/3)

NextCentroidPXint = (Math.Floor(NextCentroidPX))

NextCentroidPY = ((Point1Y+Point2Y+Point3Y)/3)

NextCentroidPYint = (Math.Floor(NextCentroidPY))



'===END RECENTROID======



'=========================

'Temp -- DON'T CHANGE!!

IF StopLoop=2 THEN

'Temp



'==CATCH EQUAL EDGES=======



AA=EdgeP1P2

BB=EdgeP2P3

CC=EdgeP1P3



IF ((AA+(AA*e))>=BB and (AA-(AA*e)) <=BB) And ((BB+(BB*e))>=AA and (BB-(BB*e)) <=AA)  AND ((AA+(AA*e))>=CC and (AA-(AA*e)) <=CC) And ((CC+(CC*e))>=AA and (CC-(CC*e)) <=AA) AND ((CC+(CC*e))>=BB and (CC-(CC*e)) <=BB) And ((CC+(CC*e))>=BB and (CC-(CC*e)) <=BB)  THEN

  

               If R=1 Then

               'TextWindow.Pause()

               GraphicsWindow.Clear()

               

GraphicsWindow.PenColor=ColorOne

Turtle.PenDown()               

Turtle.X=(StartPoint1X)

Turtle.Y=(StartPoint1Y)

Turtle.MoveTo(StartPoint2X, StartPoint2Y)

Turtle.MoveTo(StartPoint3X, StartPoint3Y)

Turtle.MoveTo(StartPoint1X, StartPoint1Y)



GraphicsWindow.PenColor="Black"

Turtle.PenDown()               

Turtle.X=(Point1X)

Turtle.Y=(Point1y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)

Turtle.MoveTo(Point1X, Point1Y)



LastHeader()

TextSix()

               TextWindow.Pause()

               Goto LineRun

               EndIf

  

'======FINAL RESIZE========  



If EndSizerFirst=1 Then 

EndSizerOne() 

 LastHeader()



If EndSizerSecond = 0 Then

      'TextWindow.Pause()

      Goto LineRun

      EndIf

EndIF



If EndSizerFirst=2 Then 

EndsizerTwo()

LastHeader()



      If EndSizerSecond = 0 Then

      'TextWindow.Pause()

      Goto LineRun

      EndIf

EndIf



If EndSizerFirst=3 Then 

EndSizerThree()

LastHeader()



      If EndSizerSecond = 0 Then

      'TextWindow.Pause()

      Goto LineRun   

      EndIf

EndIf



If EndSizerSecond=1 Then 

EndSizerOne()

LastHeader()



     If EndSizerThird = 0 Then

     'TextWindow.Pause()

     Goto LineRun  

     EndIf

EndIf



If EndSizerSecond=2 Then 

EndSizerTwo()

LastHeader()



     If EndSizerThird = 0 Then

     'TextWindow.Pause()

     Goto LineRun    

     EndIf

EndIf



If EndSizerSecond=3 Then 

EndSizerThree()

LastHeader()



     If EndSizerThird = 0 Then

     'TextWindow.Pause()

     Goto LineRun   

     EndIf

EndIf



If EndSizerThird=1 Then 

EndsizerOne()

LastHeader()

         

     'TextWindow.Pause()

     Goto LineRun

   

EndIf



If EndSizerThird=2 Then 

EndSizerTwo()

LastHeader()

'

         

     'TextWindow.Pause()

     Goto LineRun   

EndIf



If EndSizerThird=3 Then 

EndSizerThree()

         LastHeader()

         

     'TextWindow.Pause()

     Goto LineRun

   

EndIf



'======END  RESIZER ZONE========

't---



TextSix()



't---

ENDIF

ENDIF 





'RECORD END LOOP  MOMENT



EndLoopTime = (Clock.ElapsedMilliseconds)





ENDFOR



'TERMINATE LOOPS and START NEXT RUN

LineRun:



ENDFOR



'==========END PROGRAM============

'==================================

'==========SUBROUTINES=============



'START ALTERPOINTS SUBROUTINE



Sub AlterOne

Turtle.MoveTo(Point1X, Point1Y)

Turtle.Turn(180)

GraphicsWindow.PenColor=ColorThree

GraphicsWindow.PenWidth="15"

Turtle.Move((AimEdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

  NEWPoint1X=Turtle.X

  Point1Xint=(Math.Floor(NEWPoint1X))

  NEWPoint1Y=Turtle.Y

  NEWPoint1Yint=(Math.Floor(NEWPoint1Y))

GraphicsWindow.PenColor=ColorTwo

GraphicsWindow.PenWidth="3"  

EndSub



Sub AlterTwo

Turtle.MoveTo(AimPoint2X, AimPoint2Y) 

Turtle.MoveTo(Point2X, Point2Y) 

Turtle.Turn(180)

GraphicsWindow.PenColor=ColorThree

GraphicsWindow.PenWidth="15"

Turtle.Move((AimEdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

  NEWPoint2X=Turtle.X

  Point2Xint=(Math.Floor(NEWPoint2X))

  NEWPoint2Y=Turtle.Y

  NEWPoint2Yint=(Math.Floor(NEWPoint2Y))

GraphicsWindow.PenColor=ColorTwo

GraphicsWindow.PenWidth="3"  

EndSub



Sub AlterThree

Turtle.MoveTo(AimPoint3X, AimPoint3Y) 

Turtle.MoveTo(Point3X, Point3Y) 

Turtle.Turn(180) 

GraphicsWindow.PenColor=ColorThree

GraphicsWindow.PenWidth="15"

Turtle.Move((AimEdgeP2P3*AlterRate)*((EdgeP1P2+EdgeP1P3)/Perimeter))

  NEWPoint3X=Turtle.X

  Point3Xint=(Math.Floor(NEWPoint3X))

  NEWPoint3Y=Turtle.Y

  NEWPoint3Yint=(Math.Floor(NEWPoint1Y))

GraphicsWindow.PenColor=ColorTwo

GraphicsWindow.PenWidth="3"  

EndSub



'END ALTER POINTS SUBROUTINE



'START ENDSIZER- ONE SUBROUTINE

 

Sub EndSizerOne 

  

If R=0 Then

 

Point1X = NewPoint1X

Point1Y = NewPoint1Y

Point2X = NewPoint2X

Point2Y = NewPoint2Y

Point3X = NewPoint3X

Point3Y = NewPoint3Y



EdgeP1P2 = NewEdgeP1P2

EdgeP1P3 = NewEdgeP1P3

EdgeP2P3 = NewEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIf



If R = 1 Then

  

Point1X = LastPoint1X

Point1Y = LastPoint1Y

Point2X = LastPoint2X

Point2Y = LastPoint2Y

Point3X = LastPoint3X

Point3Y = LastPoint3Y



EdgeP1P2 = LastEdgeP1P2

EdgeP1P3 = LastEdgeP1P3

EdgeP2P3 = LastEdgeP2P3



NewPerimeter = LastPerimeter



EndIF



'====Redefine Resizer==============

Resizer = PerimeterBase - Perimeter

'=============================



  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.Move(Resizer*(NEWEdgeP1P2/Perimeter))

Point2X=Turtle.X

Point2Y=Turtle.Y

  

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point3X, Point3Y)

  Turtle.Move(Resizer*(NEWEdgeP1P3/Perimeter))

Point3X=Turtle.X

Point3Y=Turtle.Y



LastPoint1X=Point1X

LastPoint1Xint=Math.Floor(LastPoint1X)

LastPoint1Y=Point1Y

LastPoint1Yint=Math.Floor(LastPoint1Y)

LastPoint2X=Point2X

LastPoint2Xint=Math.Floor(LastPoint2X)

LastPoint2Y=Point2Y

LastPoint2Yint=Math.Floor(LastPoint2Y)

LastPoint3X=Point3X

LastPoint3Xint=Math.Floor(LastPoint3X)

LastPoint3Y=Point3Y

LastPoint3Yint=Math.Floor(LastPoint3Y)



GraphicsWindow.Clear()

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



LastEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

LastEdgeP1P2=Math.SquareRoot(LastEP1P2)

LastEdgeP1P2int=(Math.Floor(LastEdgeP1P2))

LastEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

LastEdgeP1P3=Math.SquareRoot(LastEP1P3)

LastEdgeP1P3int=(Math.Floor(LastEdgeP1P3))

LastEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

LastEdgeP2P3=Math.SquareRoot(LastEP2P3)

LastEdgeP2P3int=(Math.Floor(LastEdgeP1P3))

LastPerimeter = LastEdgeP1P2+LastEdgeP1P3+LastEdgeP2P3

LastPerimeterInt = (Math.Floor(LastPerimeter))



Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



R=1

EndSub



'END SIZER-ONE SUBROUTINE



'START SIZER- TWO SUBROUTINE



Sub EndSizerTwo

 

If R=0 Then

 

Point1X = NewPoint1X

Point1Y = NewPoint1Y

Point2X = NewPoint2X

Point2Y = NewPoint2Y

Point3X = NewPoint3X

Point3Y = NewPoint3Y



EdgeP1P2 = NewEdgeP1P2

EdgeP1P3 = NewEdgeP1P3

EdgeP2P3 = NewEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIf



If R = 1 Then



Point1X = LastPoint1X

Point1Y = LastPoint1Y

Point2X = LastPoint2X

Point2Y = LastPoint2Y

Point3X = LastPoint3X

Point3Y = LastPoint3Y



EdgeP1P2 = LastEdgeP1P2

EdgeP1P3 = LastEdgeP1P3

EdgeP2P3 = LastEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIF 



'====Redefine Resizer=================

Resizer = PerimeterBase - NewPerimeter

'================================

  

  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.Move(Resizer*(NEWEdgeP1P2/Perimeter))

Point1X=Turtle.X

Point1Y=Turtle.Y



  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.MoveTo(Point3X, Point3Y)

  Turtle.Move(Resizer*(NEWEdgeP1P3/Perimeter))

Point3X=Turtle.X

Point3Y=Turtle.Y



LastPoint1X=Point1X

LastPoint1Xint=Math.Floor(LastPoint1X)

LastPoint1Y=Point1Y

LastPoint1Yint=Math.Floor(LastPoint1Y)

LastPoint2X=Point2X

LastPoint2Xint=Math.Floor(LastPoint2X)

LastPoint2Y=Point2Y

LastPoint2Yint=Math.Floor(LastPoint2Y)

LastPoint3X=Point3X

LastPoint3Xint=Math.Floor(LastPoint3X)

LastPoint3Y=Point3Y

LastPoint3Yint=Math.Floor(LastPoint3Y)





GraphicsWindow.Clear()

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



LastEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

LastEdgeP1P2=Math.SquareRoot(LastEP1P2)

LastEdgeP1P2int=(Math.Floor(LastEdgeP1P2))

LastEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

LastEdgeP1P3=Math.SquareRoot(LastEP1P3)

LastEdgeP1P3int=(Math.Floor(LastEdgeP1P3))

LastEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

LastEdgeP2P3=Math.SquareRoot(LastEP2P3)

LastEdgeP2P3int=(Math.Floor(LastEdgeP1P3))

LastPerimeter = LastEdgeP1P2+LastEdgeP1P3+LastEdgeP2P3

LastPerimeterInt = (Math.Floor(LastPerimeter))





Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



'TextWindow.WriteLine("PerimeterBase " + PerimeterBaseint)

'TextWindow.WriteLine("FinalPerimeter" + LastPerimeterInt)

'TextWindow.WriteLine("Difference " + (PerimeterBase-LastPerimeter))



R=1

EndSub



'END SIZER-TWO SUBROUTINE



'START SIZER- THREE SUBROUTINE



Sub EndSizerThree

  

If R=0 Then

 

Point1X = NewPoint1X

Point1Y = NewPoint1Y

Point2X = NewPoint2X

Point2Y = NewPoint2Y

Point3X = NewPoint3X

Point3Y = NewPoint3Y



EdgeP1P2 = NewEdgeP1P2

EdgeP1P3 = NewEdgeP1P3

EdgeP2P3 = NewEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



'=====Redefine Resizer================

Resizer = PerimeterBase - NewPerimeter

'================================



EndIf



If R = 1 Then



Point1X = LastPoint1X

Point1Y = LastPoint1Y

Point2X = LastPoint2X

Point2Y = LastPoint2Y

Point3X = LastPoint3X

Point3Y = LastPoint3Y



EdgeP1P2 = LastEdgeP1P2

EdgeP1P3 = LastEdgeP1P3

EdgeP2P3 = LastEdgeP2P3



NewPerimeter = EdgeP1P2 + EdgeP1P3 + EdgeP2P3



EndIf

  

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point2X, Point2Y)

  Turtle.Move(Resizer*(NEWEdgeP1P2/Perimeter))

Point2X=Turtle.X

Point2Y=Turtle.Y

  

  Turtle.MoveTo(Point1X, Point1Y)

  Turtle.MoveTo(Point3X, Point3Y)

  Turtle.Move(Resizer*(NEWEdgeP1P3/Perimeter))

Point3X=Turtle.X

Point3Y=Turtle.Y



LastPoint1X=Point1X

LastPoint1Xint=Math.Floor(LastPoint1X)

LastPoint1Y=Point1Y

LastPoint1Yint=Math.Floor(LastPoint1Y)

LastPoint2X=Point2X

LastPoint2Xint=Math.Floor(LastPoint2X)

LastPoint2Y=Point2Y

LastPoint2Yint=Math.Floor(LastPoint2Y)

LastPoint3X=Point3X

LastPoint3Xint=Math.Floor(LastPoint3X)

LastPoint3Y=Point3Y

LastPoint3Yint=Math.Floor(LastPoint3Y)



GraphicsWindow.Clear()

Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



LastEP1P2=((Point2X-Point1X)*(Point2X-Point1X))+((Point2Y-Point1Y)*(Point2Y-Point1Y))

LastEdgeP1P2=Math.SquareRoot(LastEP1P2)

LastEdgeP1P2int=(Math.Floor(LastEdgeP1P2))

LastEP1P3=((Point3X-Point1X)*(Point3X-Point1X))+((Point3Y-Point1Y)*(Point3Y-Point1Y))

LastEdgeP1P3=Math.SquareRoot(LastEP1P3)

LastEdgeP1P3int=(Math.Floor(LastEdgeP1P3))

LastEP2P3=((Point3X-Point2X)*(Point3X-Point2X))+((Point3Y-Point2Y)*(Point3Y-Point2Y))

LastEdgeP2P3=Math.SquareRoot(LastEP2P3)

LastEdgeP2P3int=(Math.Floor(LastEdgeP1P3))

LastPerimeter = LastEdgeP1P2+LastEdgeP1P3+LastEdgeP2P3

LastPerimeterInt = (Math.Floor(LastPerimeter))



Turtle.MoveTo(Point1X, Point1Y)

Turtle.MoveTo(Point2X, Point2Y)

Turtle.MoveTo(Point3X, Point3Y)



R=1

EndSub



'END SIZER-THREE SUBROUTINE



'=======HEADER SUBROUTINES=====



'START FIRSTHEADER SUBROUTINE



Sub FirstHeader

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TRIANGELS"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



If ClearHeader <> 1 Then

  

  'Row One

ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



FirstLabel="Initial Variables"

ShapeFirstLabel=Shapes.AddText(FirstLabel)

Shapes.Move(ShapeFirstLabel, 30, 1)

Shapes.SetText(ShapeFirstLabel, FirstLabel)



'Row Two

ShapeP1P2=Shapes.AddText(EdgeP1P2int)

  Shapes.Move(ShapeP1P2, 10, 20)

  Shapes.SetText(ShapeP1P2, EdgeP1P2int)

  

ShapeP1P3=Shapes.AddText(EdgeP1P3int)

  Shapes.Move(ShapeP1P3, 50, 20)

  Shapes.SetText(ShapeP1P3, EdgeP1P3int)



ShapeP2P3=Shapes.AddText(EdgeP2P3int)

  Shapes.Move(ShapeP2P3, 100, 20)

  Shapes.SetText(ShapeP2P3, EdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 20)

  Shapes.SetText(ShapeEquals, Equals)



Perimeter=EdgeP1P2+EdgeP1P3+EdgeP2P3

Perimeterint=(Math.Floor(Perimeter))

ShapePerimeter=Shapes.AddText(Perimeterint)

  Shapes.Move(ShapePerimeter, 150, 20)

  Shapes.SetText(ShapePerimeter, Perimeterint)   

  

ShapeStartP1X=Shapes.AddText(StartPoint1Xint)

  Shapes.Move(ShapeStartP1X, 225, 20)

  Shapes.SetText(ShapeStartP1X, StartPoint1Xint)

  

ShapeStartP1Y=Shapes.AddText(StartPoint1Yint)

  Shapes.Move(ShapeStartP1Y, 260, 20)

  Shapes.SetText(ShapeStartP1Y, StartPoint1Yint)

  

ShapeStartP2X=Shapes.AddText(StartPoint2Xint)

  Shapes.Move(ShapeStartP2X, 325, 20)

  Shapes.SetText(ShapeStartP2X, StartPoint2Xint)



ShapeStartP2Y=Shapes.AddText(StartPoint2Yint)

  Shapes.Move(ShapeStartP2Y, 360, 20)

  Shapes.SetText(ShapeStartP2Y, StartPoint2Yint)

  

ShapeStartP3X=Shapes.AddText(StartPoint3Xint)

  Shapes.Move(ShapeStartP3X, 425, 20)

  Shapes.SetText(ShapeStartP3X, StartPoint3Xint)

  

ShapeStartP3Y=Shapes.AddText(StartPoint3Yint)

  Shapes.Move(ShapeStartP3Y, 460, 20)

  Shapes.SetText(ShapeStartP3Y, StartPoint3Yint)

  

EndIf



EndSub



'END FIRSTHEADER SUBROUTINE



'START MIDHEADER SUBROUTINE



Sub MidHeader

  

ClearHeader=1



     'GraphicsWindow.Clear()



ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



SecondLabel="Interim Variables"

ShapeSecondLabel=Shapes.AddText(SecondLabel)

Shapes.Move(ShapeSecondLabel, 30, 1)

Shapes.SetText(ShapeSecondLabel, SecondLabel)



If Loop>1 Then

ShapeTime=Shapes.AddText(ElapsedTimeint)

Shapes.Move(ShapeTime, 200, 1)

Shapes.SetText(ShapeTime, ElapsedTimeint)

EndIf



ShapeStartP1P2=Shapes.AddText(StartEdgeP1P2int)

  Shapes.Move(ShapeStartP1P2, 10, 20)

  Shapes.SetText(ShapeStartP1P2, StartEdgeP1P2int)

  

ShapeStartP1P3=Shapes.AddText(StartEdgeP1P3int)

  Shapes.Move(ShapeStartP1P3, 50, 20)

  Shapes.SetText(ShapeStartP1P3, StartEdgeP1P3int)



ShapeStartP2P3=Shapes.AddText(StartEdgeP2P3int)

  Shapes.Move(ShapeStartP2P3, 100, 20)

  Shapes.SetText(ShapeStartP2P3, StartEdgeP2P3int)



Equals="="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 20)

  Shapes.SetText(ShapeEquals, Equals)



ShapePerimeterBase=Shapes.AddText(PerimeterBaseint)

  Shapes.Move(ShapePerimeterBase, 150, 20)

  Shapes.SetText(ShapePerimeterBase, PerimeterBaseint)   





StartPoint1Xint=Math.Floor(StartPoint1X)

ShapeStartP1X=Shapes.AddText(StartPoint1Xint)

  Shapes.Move(ShapeStartP1X, 225, 20)

  Shapes.SetText(ShapeStartP1X, StartPoint1Xint)

  

StartPoint1Yint=Math.Floor(StartPoint1Y)

ShapeStartP1Y=Shapes.AddText(StartPoint1Yint)

  Shapes.Move(ShapeStartP1Y, 260, 20)

  Shapes.SetText(ShapeStartP1Y, StartPoint1Yint)

  

StartPoint2Xint=Math.Floor(StartPoint2X)

ShapeStartP2X=Shapes.AddText(StartPoint2Xint)

  Shapes.Move(ShapeStartP2X, 325, 20)

  Shapes.SetText(ShapeStartP2X, StartPoint2Xint)



StartPoint2Yint=Math.Floor(StartPoint2Y)

ShapeStartP2Y=Shapes.AddText(StartPoint2Yint)

  Shapes.Move(ShapeStartP2Y, 360, 20)

  Shapes.SetText(ShapeStartP1X, StartPoint2Yint)

  

StartPoint3Xint=Math.Floor(StartPoint3X)

ShapeStartP3X=Shapes.AddText(StartPoint3Xint)

  Shapes.Move(ShapeStartP3X, 425, 20)

  Shapes.SetText(ShapeStartP3X, StartPoint3Xint)

  

StartPoint3Yint=Math.Floor(StartPoint3Y)

ShapeStartP3Y=Shapes.AddText(StartPoint3Yint)

Shapes.Move(ShapeStartP3Y, 460, 20)

Shapes.SetText(ShapeStartP3Y, StartPoint3Yint)

  

  

'Include Aimer Shape Definitions



  AimShapeP1P2=Shapes.AddText(AimEdgeP1P2int)

  Shapes.Move(AimShapeP1P2, 10, 40)

  Shapes.SetText(AimShapeP1P2, AimEdgeP1P2int)

  

  AimShapeP1P3=Shapes.AddText(AimEdgeP1P3int)

  Shapes.Move(AimShapeP1P3, 50, 40)

  Shapes.SetText(AimShapeP1P3, AimEdgeP1P3int)



  AimShapeP2P3=Shapes.AddText(AimEdgeP2P3int)

  Shapes.Move(AimShapeP2P3, 100, 40)

  Shapes.SetText(AimShapeP2P3, AimEdgeP2P3int)



Equals="="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 40)

  Shapes.SetText(ShapeEquals, Equals)

  

  AimShapePerimeter=Shapes.AddText(AimPerimeterint)

  Shapes.Move(AimShapePerimeter, 150, 40)

  Shapes.SetText(AimShapePerimeter, AimPerimeterint)  

  

  

AimPoint1Xint=Math.Floor(AimPoint1X)

AimShapeP1X=Shapes.AddText(AimPoint1Xint)

  Shapes.Move(AimShapeP1X, 225, 40)

  Shapes.SetText(AimShapeP1X, AimPoint1Xint)

  

AimPoint1Yint=Math.Floor(AimPoint1Y)

AimShapeP1Y=Shapes.AddText(AimPoint1Yint)

  Shapes.Move(AimShapeP1Y, 260, 40)

  Shapes.SetText(AimShapeP1Y, AimPoint1Yint)

  

AimPoint2Xint=Math.Floor(AimPoint2X)

AimShapeP2X=Shapes.AddText(AimPoint2Xint)

  Shapes.Move(AimShapeP2X, 325, 40)

  Shapes.SetText(AimShapeP2X, AimPoint2Xint)



AimPoint2Yint=Math.Floor(AimPoint2Y)

AimShapeP2Y=Shapes.AddText(AimPoint2Yint)

  Shapes.Move(AimShapeP2Y, 360, 40)

  Shapes.SetText(AimShapeP1X, AimPoint2Yint)

  

AimPoint3Xint=Math.Floor(AimPoint3X)

AimShapeP3X=Shapes.AddText(AimPoint3Xint)

  Shapes.Move(AimShapeP3X, 425, 40)

  Shapes.SetText(AimShapeP3X, AimPoint3Xint)

  

AimPoint3Yint=Math.Floor(AimPoint3Y)

AimShapeP3Y=Shapes.AddText(AimPoint3Yint)

  Shapes.Move(AimShapeP3Y, 460, 40)

  Shapes.SetText(AimShapeP3Y, AimPoint3Yint)

  

'End Include Aimer Definitions

  

'Start Include Line/Length Definitions

  

ShapeLineP1P2=Shapes.AddText(LineP1P2int)

  Shapes.Move(ShapeLineP1P2, 10, 60)

  Shapes.SetText(ShapeLineP1P2, LineP1P2int)

 

ShapeLineP1P3=Shapes.AddText(LineP1P3int)

  Shapes.Move(ShapeLineP1P3, 50, 60)

  Shapes.SetText(ShapeLineP1P3, LineP1P3int)



ShapeLineP2P3=Shapes.AddText(LineP2P3int)

  Shapes.Move(ShapeLineP2P3, 100, 60)

  Shapes.SetText(ShapeLineP2P3, LineP2P3int)



Equals="="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 60)

  Shapes.SetText(ShapeEquals, Equals)



ShapeLength=Shapes.AddText(Length)

  Shapes.Move(ShapeLength, 150, 60)

  Shapes.SetText(ShapeLength, Lengthint)  

   

'End Include Line/Length Definitions

   

'=====CONTINUE SHAPE POINTS==============

  

Point1Xint=Math.Floor(Point1X)

ShapeP1X=Shapes.AddText(Point1Xint)

  Shapes.Move(ShapeP1X, 225, 60)

  Shapes.SetText(ShapeP1X, Point1Xint)

  

Point1Yint=Math.Floor(Point1Y)

ShapeP1Y=Shapes.AddText(Point1Yint)

  Shapes.Move(ShapeP1Y, 260, 60)

  Shapes.SetText(ShapeP1Y, Point1Yint)

  

Point2Xint=Math.Floor(Point2X)

ShapeP2X=Shapes.AddText(Point2Xint)

  Shapes.Move(ShapeP2X, 325, 60)

  Shapes.SetText(ShapeP2X, Point2Xint)



Point2Yint=Math.Floor(Point2Y)

ShapeP2Y=Shapes.AddText(Point2Yint)

  Shapes.Move(ShapeP2Y, 360, 60)

  Shapes.SetText(ShapeP1X, Point2Yint)

  

Point3Xint=Math.Floor(Point3X)

ShapeP3X=Shapes.AddText(Point3Xint)

  Shapes.Move(ShapeP3X, 425, 60)

  Shapes.SetText(ShapeP3X, Point3Xint)

  

Point3Yint=Math.Floor(Point3Y)

ShapeP3Y=Shapes.AddText(Point3Yint)

  Shapes.Move(ShapeP3Y, 460, 60)

  Shapes.SetText(ShapeP3Y, Point3Yint)

  

ENDSUB



'======END SUB MIDHEADER=============



'======START LASTHEADER==============

Sub LastHeader

  

ClearHeader=1

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TRIANGELS"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



  

'Row One

ShapeLoop=Shapes.AddText(LoopShapeNumber)

Shapes.Move(ShapeLoop, 1, 1)

Shapes.SetText(ShapeLoop, LoopShapeNumber)



LastLabel="Resultant Variables"

ShapeLastLabel=Shapes.AddText(LastLabel)

Shapes.Move(ShapeLastLabel, 30, 1)

Shapes.SetText(ShapeLastLabel, LastLabel)

'temp

ShapeTime=Shapes.AddText(ElapsedTimeint)

Shapes.Move(ShapeTime, 200, 1)

Shapes.SetText(ShapeTime, ElapsedTimeint)

'temp



'Row Two

ShapeStartP1P2=Shapes.AddText(StartEdgeP1P2int)

  Shapes.Move(ShapeStartP1P2, 10, 20)

  Shapes.SetText(ShapeStartP1P2, StartEdgeP1P2int)

  

ShapeStartP1P3=Shapes.AddText(StartEdgeP1P3int)

  Shapes.Move(ShapeStartP1P3, 50, 20)

  Shapes.SetText(ShapeStartP1P3, StartEdgeP1P3int)



ShapeStartP2P3=Shapes.AddText(StartEdgeP2P3int)

  Shapes.Move(ShapeStartP2P3, 100, 20)

  Shapes.SetText(ShapeStartP2P3, StartEdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 20)

  Shapes.SetText(ShapeEquals, Equals)



ShapePerimeterBase=Shapes.AddText(PerimeterBaseint)

  Shapes.Move(ShapePerimeterBase, 150, 20)

  Shapes.SetText(ShapePerimeterBase, PerimeterBaseint)   

  

ShapeStartP1X=Shapes.AddText(StartPoint1Xint)

  Shapes.Move(ShapeStartP1X, 225, 20)

  Shapes.SetText(ShapeStartP1X, StartPoint1Xint)

  

ShapeStartP1Y=Shapes.AddText(StartPoint1Yint)

  Shapes.Move(ShapeStartP1Y, 260, 20)

  Shapes.SetText(ShapeStartP1Y, StartPoint1Yint)

  

ShapeStartP2X=Shapes.AddText(StartPoint2Xint)

  Shapes.Move(ShapeStartP2X, 325, 20)

  Shapes.SetText(ShapeStartP2X, StartPoint2Xint)



ShapeStartP2Y=Shapes.AddText(StartPoint2Yint)

  Shapes.Move(ShapeStartP2Y, 360, 20)

  Shapes.SetText(ShapeStartP2Y, StartPoint2Yint)

  

ShapeStartP3X=Shapes.AddText(StartPoint3Xint)

  Shapes.Move(ShapeStartP3X, 425, 20)

  Shapes.SetText(ShapeStartP3X, StartPoint3Xint)

  

ShapeStartP3Y=Shapes.AddText(StartPoint3Yint)

  Shapes.Move(ShapeStartP3Y, 460, 20)

  Shapes.SetText(ShapeStartP3Y, StartPoint3Yint)

  

'Row Three

ShapeLastP1P2=Shapes.AddText(LastEdgeP1P2int)

  Shapes.Move(ShapeLastP1P2, 10, 40)

  Shapes.SetText(ShapeLastP1P2, LastEdgeP1P2int)

  

ShapeLastP1P3=Shapes.AddText(LastEdgeP1P3int)

  Shapes.Move(ShapeLastP1P3, 50, 40)

  Shapes.SetText(ShapeLastP1P3, LastEdgeP1P3int)



ShapeP2P3=Shapes.AddText(LastEdgeP2P3int)

  Shapes.Move(ShapeP2P3, 100, 40)

  Shapes.SetText(ShapeP2P3, EdgeP2P3int)



Equals=" ="

ShapeEquals=Shapes.AddText(Equals)

  Shapes.Move(ShapeEquals, 130, 40)

  Shapes.SetText(ShapeEquals, Equals)



ShapeLastPerimeter=Shapes.AddText(LastPerimeterint)

  Shapes.Move(ShapeLastPerimeter, 150, 40)

  Shapes.SetText(ShapeLastPerimeter, LastPerimeterint)

  

ShapeLastP1X=Shapes.AddText(LastPoint1Xint)

  Shapes.Move(ShapeLastP1X, 225, 40)

  Shapes.SetText(ShapeLastP1X, LastPoint1Xint)

  

ShapeLastP1Y=Shapes.AddText(LastPoint1Yint)

  Shapes.Move(ShapeLastP1Y, 260, 40)

  Shapes.SetText(ShapeLastP1Y, LastPoint1Yint)

  

ShapeLastP2X=Shapes.AddText(LastPoint2Xint)

  Shapes.Move(ShapeLastP2X, 325, 40)

  Shapes.SetText(ShapeLastP2X, LastPoint2Xint)



ShapeLastP2Y=Shapes.AddText(LastPoint2Yint)

  Shapes.Move(ShapeLastP2Y, 360, 40)

  Shapes.SetText(ShapeLastP2Y, LastPoint2Yint)

  

ShapeLastP3X=Shapes.AddText(LastPoint3Xint)

  Shapes.Move(ShapeLastP3X, 425, 40)

  Shapes.SetText(ShapeLastP3X, LastPoint3Xint)

  

ShapeLastP3Y=Shapes.AddText(LastPoint3Yint)

  Shapes.Move(ShapeLastP3Y, 460, 40)

  Shapes.SetText(ShapeLastP3Y, LastPoint3Yint)



EndSub



Sub TextOne

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextOne"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



TRIANGELOne="Start with any irregular Triangle"

ShapeTRIANGELOne=Shapes.AddText(TRIANGELOne)

  Shapes.Move(ShapeTRIANGELOne, 20, 520)

  Shapes.SetText(ShapeTRIANGELOne, TRIANGELOne)

  

EndSub



Sub TextTwo

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextTwo"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



TRIANGELTwo1="Calculate the positions each point would take if they were the apexes"

ShapeTRIANGELTwo1=Shapes.AddText(TRIANGELTwo1)

  Shapes.Move(ShapeTRIANGELTwo1, 20, 500)

  Shapes.SetText(ShapeTRIANGELTwo1, TRIANGELTwo1)

  

TRIANGELTwo2="of Equilateral Triangles erected from the three bases."

ShapeTRIANGELTwo2=Shapes.AddText(TRIANGELTwo2)

  Shapes.Move(ShapeTRIANGELTwo2, 20, 520)

  Shapes.SetText(ShapeTRIANGELTwo2, TRIANGELTwo2)

  TextWindow.Pause()

   

EndSub



Sub TextThree

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextTwo"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



TRIANGELThree="This creates an imaginary triangle that guides the route to regularity."

ShapeTRIANGELThree=Shapes.AddText(TRIANGELThree)

  Shapes.Move(ShapeTRIANGELThree, 20, 520)

  Shapes.SetText(ShapeTRIANGELThree, TRIANGELThree)

  TextWindow.Pause()

  

EndSub



Sub TextFour

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextTwo"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



TRIANGELFour="Now step the three points toward this destination..."

ShapeTRIANGELFour=Shapes.AddText(TRIANGELFour)

  Shapes.Move(ShapeTRIANGELFour, 20, 500)

  Shapes.SetText(ShapeTRIANGELFour, TRIANGELFour)

  TextWindow.Pause()

  

EndSub



Sub TextFive

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextTwo"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



TRIANGELFive="Creating a new triangle. Repeat the process."

ShapeTRIANGELFive=Shapes.AddText(TRIANGELFive)

  Shapes.Move(ShapeTRIANGELFive, 20, 520)

  Shapes.SetText(ShapeTRIANGELFive, TRIANGELFive)

  TextWindow.Pause()

EndSub



Sub TextSix

  

GraphicsWindow.Show()

GraphicsWindow.Width = 800

GraphicsWindow.Height = 600

GraphicsWindow.Top = 60

GraphicsWindow.Left = 500

GraphicsWindow.Title = "TextTwo"

GraphicsWindow.FontSize=15

Turtle.Speed = Swiftness



TRIANGELSix1="Until the triangle is approximately equilateral."

ShapeTRIANGELSix1=Shapes.AddText(TRIANGELSix1)

  Shapes.Move(ShapeTRIANGELSix1, 20, 520)

  Shapes.SetText(ShapeTRIANGELSix1, TRIANGELSix1)

 

If SelectMode=3 Then

   

TRIANGELSix3="Tap a key for next random triangle."

ShapeTRIANGELSix3=Shapes.AddText(TRIANGELSix3)

  Shapes.Move(ShapeTRIANGELSix3, 20, 540)

  Shapes.SetText(ShapeTRIANGELSix3, TRIANGELSix3)      

 

Else

  

TRIANGELSix2="Tap a key to return to Start Menu."

ShapeTRIANGELSix2=Shapes.AddText(TRIANGELSix2)

  Shapes.Move(ShapeTRIANGELSix2, 20, 540)

  Shapes.SetText(ShapeTRIANGELSix2, TRIANGELSix2)  

  

Endif

EndSub





'======END LASTHEADER=================

'=====================================

'========END SUBROUTINES==============










