'****************************************************************************
'Main Code
'****************************************************************************
'Info Screen
Info()
'Initialise
Init()

'Play loop
While ("True")
  'Set components
  Select()
  'Return any processed event flags
  ResetEvents()
  'Attach components
  Attach()
  'Move components
  Move()
  'Update screen
  Update()
  'Run 
  Run()
  'Load or Save
  LoadSave()
  Program.Delay(10)
EndWhile

'****************************************************************************
'Info Screen
'****************************************************************************
Sub Info
  'Initialise Window
  InitWindow()
  'Set description
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawBoundText(100,100,gw-200,"Use the LEFT MOUSE button to grab components from the KEY PANE on the right and position in the main part of the screen.")
  GraphicsWindow.DrawBoundText(100,140,gw-200,"DELETE a component by dragging it back the the KEY PANE.")
  GraphicsWindow.DrawBoundText(100,180,gw-200,"CONNECT using the CONTROL key and mouse (click DOWN on the OUTPUT of one component and click UP on the INPUT to another component).")
  GraphicsWindow.DrawBoundText(100,220,gw-200,"To test a circuit use the RETURN key and MOUSE CLICK on an INPUT component to toggle its status and run the circuit, or just press the SPACE BAR to run the current circuit.")
  GraphicsWindow.DrawBoundText(100,260,gw-200,"ALL of the inputs to an AND component must be ON for it to activate.")
  GraphicsWindow.DrawBoundText(100,300,gw-200,"ANY of the inputs to an OR component must be ON for it to activate.")
  GraphicsWindow.DrawBoundText(100,340,gw-200,"The XOR component requires some inputs to be ON and some to be OFF to activate.")
  GraphicsWindow.DrawBoundText(100,380,gw-200,"The NOT component will reverse the signal of the last input (should only have one input).")
  GraphicsWindow.DrawBoundText(100,420,gw-200,"We can handle loops and any number of input/ouput connections.  Save with 'S', Load with 'L' and Clear with 'C'.")
  GraphicsWindow.DrawBoundText(100,460,gw-200,"TO DO : Images, Gameplay(some objective), More component devices.")
  GraphicsWindow.DrawBoundText(100,500,gw-200,"Hit a key to continue.")
  GraphicsWindow.TextInput = OnTextInput
  key = 0
  While (key = 0)
  EndWhile
  GraphicsWindow.Clear()
EndSub

Sub InitWindow
  'Window
  gw = 800
  gh = 600
  gk = 200
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.Left = (Desktop.Width-gw)/2
  GraphicsWindow.Top = (Desktop.Height-gh)/2
  GraphicsWindow.Title = "Small Boots"
  GraphicsWindow.BackgroundColor = "LightBlue"
EndSub

Sub OnTextInput
  key = 1
EndSub

'****************************************************************************
'Initialisation
'****************************************************************************

Sub Init
  'Variables
  InitVariables()
  'Key in Window
  InitKey()
  'Events
  InitEvents()
EndSub

Sub InitVariables
  'Global variables
  diameter = 30
  radius = diameter/2
  nComp = 0
  Components = ""
  Nodes = ""
  activeComponent = 0
  connectComponent = 0
  activePort = 0
  connectPort = 0
  nConnect = 0
  Connections = ""
  runComponent = 0
  pi = Math.Pi
  'Component types
  nType = 6
  color[1] = "Red"
  color[2] = "Blue"
  color[3] = "Green"
  color[4] = "Orange"
  color[5] = "Purple"
  color[6] = "Gray"
EndSub

Sub InitKey
  'Key
  GraphicsWindow.PenColor = "Black"
  GraphicsWindow.DrawLine(gw-gk,0,gw-gk,gh)
  For i = 1 To gh/nType-1
    GraphicsWindow.DrawLine(gw-gk,i*gh/nType,gw,i*gh/nType)
  EndFor
  
  'Draw Input
  GraphicsWindow.BrushColor = color[1]
  DrawComponent_X = gw-gk*3/4-radius
  DrawComponent_Y = (1-0.5)*gh/nType-radius
  'Draw basic shape
  GraphicsWindow.FillEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
  GraphicsWindow.DrawEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
  'Draw output port
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FillEllipse(DrawComponent_X+diameter*7/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  GraphicsWindow.DrawEllipse(DrawComponent_X+diameter*7/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  
  'Draw OR, AND, XOR
  For i = 2 To (nType-2)
    GraphicsWindow.BrushColor = color[i]
    DrawComponent_X = gw-gk*3/4-radius
    DrawComponent_Y = (i-0.5)*gh/nType-radius
    'Draw basic shape
    GraphicsWindow.FillEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
    GraphicsWindow.DrawEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
    'Draw input ports
    GraphicsWindow.BrushColor = "White"
    GraphicsWindow.FillEllipse(DrawComponent_X,DrawComponent_Y,diameter/4,diameter/4)
    GraphicsWindow.DrawEllipse(DrawComponent_X,DrawComponent_Y,diameter/4,diameter/4)
    GraphicsWindow.FillEllipse(DrawComponent_X,DrawComponent_Y+diameter*3/4,diameter/4,diameter/4)
    GraphicsWindow.DrawEllipse(DrawComponent_X,DrawComponent_Y+diameter*3/4,diameter/4,diameter/4)
    'Draw output port
    GraphicsWindow.BrushColor = "Black"
    GraphicsWindow.FillEllipse(DrawComponent_X+diameter*7/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
    GraphicsWindow.DrawEllipse(DrawComponent_X+diameter*7/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  EndFor
  
  GraphicsWindow.BrushColor = color[nType-1]
  DrawComponent_X = gw-gk*3/4-radius
  DrawComponent_Y = (nType-1-0.5)*gh/nType-radius
  'Draw basic shape
  GraphicsWindow.FillEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
  GraphicsWindow.DrawEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
  'Draw input port
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillEllipse(DrawComponent_X-diameter/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  GraphicsWindow.DrawEllipse(DrawComponent_X-diameter/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  'Draw output port
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FillEllipse(DrawComponent_X+diameter*7/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  GraphicsWindow.DrawEllipse(DrawComponent_X+diameter*7/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  
  
  'Draw Output
  GraphicsWindow.BrushColor = color[nType]
  DrawComponent_X = gw-gk*3/4-radius
  DrawComponent_Y = (nType-0.5)*gh/nType-radius
  'Draw basic shape
  GraphicsWindow.FillEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
  GraphicsWindow.DrawEllipse(DrawComponent_X,DrawComponent_Y,diameter,diameter)
  'Draw input port
  GraphicsWindow.BrushColor = "White"
  GraphicsWindow.FillEllipse(DrawComponent_X-diameter/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  GraphicsWindow.DrawEllipse(DrawComponent_X-diameter/8,DrawComponent_Y+diameter*3/8,diameter/4,diameter/4)
  
  
  
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.DrawText(gw-gk/2,(1-0.5)*gh/nType-10,"INPUT")
  GraphicsWindow.DrawText(gw-gk/2,(2-0.5)*gh/nType-10,"AND")
  GraphicsWindow.DrawText(gw-gk/2,(3-0.5)*gh/nType-10,"OR")
  GraphicsWindow.DrawText(gw-gk/2,(4-0.5)*gh/nType-10,"XOR")
  GraphicsWindow.DrawText(gw-gk/2,(5-0.5)*gh/nType-10,"NOT")
  GraphicsWindow.DrawText(gw-gk/2,(6-0.5)*gh/nType-10,"OUTPUT")
EndSub

'****************************************************************************
'Event subroutines
'****************************************************************************
Sub InitEvents
  'Event variables
  MouseDown = 0
  MouseClickDown = 0
  MouseClickUp = 0
  MouseMove = 0
  KeyDown = 0
  SpaceDown = 0
  ReturnDown = 0
  ControlDown = 0
  SDown = 0
  LDown = 0
  CDown = 0
  Moving = 0
  GraphicsWindow.MouseDown = OnMouseDown
  GraphicsWindow.MouseUp = OnMouseUp
  GraphicsWindow.MouseMove = OnMouseMove
  GraphicsWindow.KeyDown = OnKeyDown
  GraphicsWindow.KeyUp = OnKeyUp
EndSub
Sub OnMouseDown
  MouseDown = 1
  MouseClickDown = 1
EndSub
Sub OnMouseUp
  MouseDown = 0
  MouseClickUp = 1
EndSub
Sub OnMouseMove
  MouseMove = 1
  xM = GraphicsWindow.MouseX
  yM = GraphicsWindow.MouseY
EndSub
Sub OnKeyDown
  key = GraphicsWindow.LastKey
  KeyDown = 1
  If (key = "Space") Then
    SpaceDown = 1
  ElseIf (key = "Return") Then
    ReturnDown = 1
  ElseIf (key = "LeftCtrl" Or key = "RightCtrl") Then
    ControlDown = 1
  ElseIf (key = "S") Then
    SDown = 1
  ElseIf (key = "L") Then
    LDown = 1
  ElseIf (key = "C") Then
    CDown = 1
  EndIf
EndSub
Sub OnKeyUp
  key = GraphicsWindow.LastKey
  KeyDown = 0
  If (key = "Space") Then
    SpaceDown = 0
  ElseIf (key = "Return") Then
    ReturnDown = 0
  ElseIf (key = "LeftCtrl" Or key = "RightCtrl") Then
    ControlDown = 0
  ElseIf (key = "S") Then
    SDown = 0
  ElseIf (key = "L") Then
    LDown = 0
  ElseIf (key = "C") Then
    CDown = 0
  EndIf
EndSub
Sub ResetEvents
  MouseClickDown = 0
  MouseClickUp = 0
  MouseMove = 0
EndSub

'****************************************************************************
'Game Subroutines
'****************************************************************************

Sub Select
  'Mouse Clicked
  If (MouseClickDown = 1) Then
    'Is Mouse in game or key area
    If (xM < gw-gk) Then
      'Game area
      'Select a componet to move or connect
      OverComponent()
      activeComponent = selected
      activePort = selectedPort
    ElseIf (KeyDown = 0) Then
      'Key area
      'Add Something
      nComp = nComp+1
      activeComponent = nComp
      Components[activeComponent]["Type"] = Math.Ceiling(yM/100)
      Components[activeComponent]["X"] = xM
      Components[activeComponent]["Y"] = yM
      Components[activeComponent]["W"] = diameter
      Components[activeComponent]["H"] = diameter
      Components[activeComponent]["in1"] = 0
      Components[activeComponent]["in2"] = 0
      Components[activeComponent]["out"] = activeComponent
      Components[activeComponent]["Status"] = 0
      GraphicsWindow.BrushColor = color[Components[activeComponent]["Type"]]
      Components[activeComponent]["S"] = Shapes.AddEllipse(diameter,diameter)
      GraphicsWindow.BrushColor = "White"
      If (Components[activeComponent]["Type"] > 1) Then
        Components[activeComponent]["Sin1"] = Shapes.AddEllipse(diameter/4,diameter/4)
        If (Components[activeComponent]["Type"] <= 4) Then
          Components[activeComponent]["Sin2"] = Shapes.AddEllipse(diameter/4,diameter/4)
        Endif
      EndIf
      GraphicsWindow.BrushColor = "Black"
      If (Components[activeComponent]["Type"] < 6) Then
        Components[activeComponent]["Sout"] = Shapes.AddEllipse(diameter/4,diameter/4)
      EndIf
      Nodes[activeComponent]["Status"] = 0
    EndIf
  ElseIf (MouseClickUp = 1) Then
    If (ControlDown = 1 And activeComponent > 0) Then
      'Select component to connect
      OverComponent()
      connectComponent = selected
      connectPort = selectedPort
    ElseIf (ReturnDown = 1 And activeComponent > 0) Then
      'Select component to run
      runComponent = activeComponent
    Else
      'Delete selected component released in Key area - also delete any connections
      If (activeComponent > 0 And xM > gw-gk) Then
        node = Components[activeComponent]["out"]
        Comp = Array.GetAllIndices(Components)
        For i = 1 To Array.GetItemCount(Components)
          If (Components[Comp[i]]["in1"] = node) Then
            Components[Comp[i]]["in1"] = 0
            Moving = 1 'To ensure a clear before redraw
          EndIf
          If (Components[Comp[i]]["in2"] = node) Then
            Components[Comp[i]]["in2"] = 0
            Moving = 1 'To ensure a clear before redraw
          EndIf
        EndFor
        Shapes.Remove(Components[activeComponent]["S"])
        Shapes.Remove(Components[activeComponent]["Sin1"])
        Shapes.Remove(Components[activeComponent]["Sin2"])
        Shapes.Remove(Components[activeComponent]["Sout"])
        Components[activeComponent] = ""
        Nodes[activeComponent] = ""
      EndIf
      'Release selected components
      activeComponent = 0
      activePort = 0
      connectComponent = 0
      connectPort = 0
      runComponent = 0
    EndIf
  ElseIf (MouseDown = 0) Then
    'Release selected components - sometimes MouseClickUp isn't registered
    activeComponent = 0
      activePort = 0
      connectComponent = 0
      connectPort = 0
    runComponent = 0
  EndIf
EndSub

Sub OverComponent
  'Is mouse over a component
  selected = 0
  selectedPort = ""
  Comp = Array.GetAllIndices(Components)
  For i = 1 To Array.GetItemCount(Comp)
    iComp = Comp[i]
    type = Components[iComp]["Type"]
    x = Components[iComp]["X"]
    y = Components[iComp]["Y"]
    w = Components[iComp]["W"]
    h = Components[iComp]["H"]
    If (xM > x-w/2 And xM < x+w/2 And yM > y-h/2 And yM < y+h/2) Then
      selected = iComp
      If (type > 1 And xM < x) Then
        If (type <= 4 And yM > y) Then
          selectedPort = "in2"
        Else
          selectedPort = "in1"
        EndIf
      ElseIf (type < 6) Then
        selectedPort = "out"
      EndIf
    EndIf
  EndFor
EndSub

Sub Move
  If (activeComponent > 0 And KeyDown = 0) Then
    Components[activeComponent]["X"] = xM
    Components[activeComponent]["Y"] = yM
    Moving = 1
  EndIf
EndSub

Sub Update
  'Draw components
  Comp = Array.GetAllIndices(Components)
  For i = 1 To Array.GetItemCount(Comp)
    type = Components[Comp[i]]["Type"]
    x = Components[Comp[i]]["X"]
    y = Components[Comp[i]]["Y"]
    w = Components[Comp[i]]["W"]
    h = Components[Comp[i]]["H"]
    s = Components[Comp[i]]["S"]
    status = Components[Comp[i]]["Status"]
    Shapes.Move(s,x-w/2,y-h/2)
    If (type > 1) Then
      sin1 = Components[Comp[i]]["Sin1"]
      If (type >= 5) Then
        Shapes.Move(sin1,x-w*5/8,y-h/8)
      Else
        Shapes.Move(sin1,x-w/2,y-h/2)
        sin2 = Components[Comp[i]]["Sin2"]
        Shapes.Move(sin2,x-w/2,y+h/4)
      EndIf
    EndIf
    If (type < 6) Then
      sout = Components[Comp[i]]["Sout"]
      Shapes.Move(sout,x+w*3/8,y-h/8)
    EndIf
    If (activeComponent = Comp[i]) Then
      Shapes.SetOpacity(s,30)
    Else
      If (status = 0) Then
        Shapes.SetOpacity(s,50)
      Else
        Shapes.SetOpacity(s,100)
      EndIf
    EndIf
  EndFor
  'Clear screen if needed (component moved)
  If (Moving = 1) Then
    GraphicsWindow.BrushColor = GraphicsWindow.BackgroundColor
    GraphicsWindow.FillRectangle(0,0,gw-gk,gh)
    Moving = 0
  EndIf
  'Draw connections
  Comp = Array.GetAllIndices(Components)
  For i = 1 To Array.GetItemCount(Comp)
    comp1 = Components[Comp[i]]["in1"]
    If(comp1 > 0) Then
      x1 = Math.Min(Components[comp1]["X"]+Components[comp1]["W"]/2,gw-gk) 'Don't draw into Key area
      y1 = Components[comp1]["Y"]
      x2 = Math.Min(Components[Comp[i]]["X"]-Components[Comp[i]]["W"]/2,gw-gk)
      If (Components[Comp[i]]["Type"] <= 4) Then
        y2 = Components[Comp[i]]["Y"]-Components[comp1]["H"]/2
      Else
        y2 = Components[Comp[i]]["Y"]
      EndIf  
      If (Nodes[comp1]["Status"] = 0) Then
        GraphicsWindow.PenColor = "Black"
        GraphicsWindow.BrushColor = "Black"
      Else
        GraphicsWindow.PenColor = "Red"
        GraphicsWindow.BrushColor = "Red"
      EndIf
      GraphicsWindow.DrawLine(x1,y1,x2,y2)
    EndIf
    
    comp1 = Components[Comp[i]]["in2"]
    If(comp1 > 0) Then
      x1 = Math.Min(Components[comp1]["X"]+Components[comp1]["W"]/2,gw-gk) 'Don't draw into Key area
      y1 = Components[comp1]["Y"]
      x2 = Math.Min(Components[Comp[i]]["X"]-Components[Comp[i]]["W"]/2,gw-gk)
      y2 = Components[Comp[i]]["Y"]+Components[comp1]["H"]/2
      If (Nodes[comp1]["Status"] = 0) Then
        GraphicsWindow.PenColor = "Black"
        GraphicsWindow.BrushColor = "Black"
      Else
        GraphicsWindow.PenColor = "Red"
        GraphicsWindow.BrushColor = "Red"
      EndIf
      GraphicsWindow.DrawLine(x1,y1,x2,y2)
    EndIf
  EndFor
EndSub
  

Sub Attach
  If (activeComponent > 0 And connectComponent > 0 And activeComponent <> connectComponent) Then
    If(activePort = "out" And (connectPort = "in1" Or connectPort = "in2")) Then
      Components[connectComponent][connectPort] = Components[activeComponent]["out"]
    ElseIf(connectPort = "out" And (activePort = "in1" Or activePort = "in2")) Then
      Components[activeComponent][activePort] = Components[connectComponent]["out"]
    EndIf
    Moving = 1 'To ensure a clear before redraw
    activeComponent = 0
    connectComponent = 0
  EndIf
EndSub

Sub Run
  If (runComponent > 0 And Components[runComponent]["Type"] = 1) Then
    Components[runComponent]["Status"] = 1-Components[runComponent]["Status"] ' Switch status
  EndIf
  If (SpaceDown = 1) Then
    RunUpdate()
  EndIf
  runComponent = 0
EndSub

Sub RunUpdate
  CompList = Array.GetAllIndices(Components)
  
  'First update all components
  For i = 1 To Array.GetItemCount(CompList)
    type = Components[i]["Type"]
    'Set status by checking inputs and component type
    If (type = 1) Then 'Input
      status = Components[i]["Status"]
    ElseIf (type = 2) Then 'And
      If(Nodes[Components[i]["in1"]]["Status"] = 1 And Nodes[Components[i]["in2"]]["Status"] = 1) Then
        status = 1
      Else
        status = 0
      EndIf
    ElseIf (type = 3 Or type = 6) Then 'Or Output
      If(Nodes[Components[i]["in1"]]["Status"] = 1 Or Nodes[Components[i]["in2"]]["Status"] = 1) Then
        status = 1
      Else
        status = 0
      EndIf
    ElseIf (type = 4) Then 'XOR
      If(Nodes[Components[i]["in1"]]["Status"] + Nodes[Components[i]["in2"]]["Status"] = 1) Then
        status = 1
      Else
        status = 0
      EndIf
    ElseIf (type = 5) Then 'Not
        status = 1 - Nodes[Components[i]["in1"]]["Status"]
    EndIf
    Components[i]["Status"] = status
  EndFor
  
  'Then update all nodes
  For i = 1 To Array.GetItemCount(CompList)
    Nodes[Components[i]["out"]]["Status"] = Components[i]["Status"]
  EndFor
EndSub

'****************************************************************************
'Load and Save
'****************************************************************************

Sub LoadSave
  If (LDown = 1) Then
    Load()
  EndIf
  If (SDown = 1) Then
    Save()
  EndIf
  If (CDown = 1) Then
    Clear()
  EndIf
EndSub

Sub Save
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   File.WriteLine(Program.Directory+"\boots.txt",1,Components)
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   File.WriteLine(Program.Directory+"\boots.txt",2,Connections)
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   File.WriteLine(Program.Directory+"\boots.txt",3,nComp)
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   File.WriteLine(Program.Directory+"\boots.txt",4,nConnect)
EndSub

Sub Load
  CompList = Array.GetAllIndices(Components)
  For i = 1 To Array.GetItemCount(CompList)
    Shapes.Remove(Components[CompList[i]]["S"])
  EndFor
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   Components = File.ReadLine(Program.Directory+"\boots.txt",1)
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   Connections = File.ReadLine(Program.Directory+"\boots.txt",2)
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   nComp = File.ReadLine(Program.Directory+"\boots.txt",3)
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' The following line could be harmful and has been automatically commented.
' ' '   nConnect = File.ReadLine(Program.Directory+"\boots.txt",4)
  For i = 1 To Array.GetItemCount(Components)
    GraphicsWindow.BrushColor = color[Components[i]["Type"]]
    Components[i]["S"] = Shapes.AddEllipse(diameter,diameter)
  EndFor
  Moving = 1
EndSub

Sub Clear
  CompList = Array.GetAllIndices(Components)
  For i = 1 To Array.GetItemCount(CompList)
    Shapes.Remove(Components[CompList[i]]["S"])
  EndFor
  Components = ""
  Connections = ""
  nComp = 0
  nConnect = 0
  Moving = 1
EndSub


