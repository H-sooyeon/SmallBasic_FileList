Initialise()

GraphicsWindow.MouseMove = OnMouseMove

GraphicsWindow.MouseDown = OnMouseDown

GraphicsWindow.MouseUp = OnMouseUp

init="true

While ("True")

  

  If (mww And mouseDown) or init Then

    mww="false

    GraphicsWindow.BrushColor = bg

    GraphicsWindow.FillRectangle(0,0,gw,gh)

    If init then 

 init="false   

 else

      theta = -(GraphicsWindow.MouseX-mouseX)/gw*PI

      phi = -(GraphicsWindow.MouseY-mouseY)/gh*PI/2

      GraphicsWindow.Title =theta +":"+phi

   

   

    setRotation()

    matrix1 = matrix

    matrix2 = rotationOLD

    multiply()

    rotation = matrix

   endif  

    

    matrix = rotation

    For iBall = 1 To numBall

      X = ballX[iBall]

      Y = ballY[iBall]

      Z = ballZ[iBall]

      getScreen()

      ballSX[iBall] = SX

      ballSY[iBall] = SY

      ballSZ[iBall] = SZ

    EndFor

    

    

    For iBall =  numBall To 18 Step -1

      SX = ballSX[iBall]

      SY = ballSY[iBall]

      SZ = ballSZ[iBall]

      pp[1][1]=sx

      pp[1][2]=sy

      

      pp[2][1] = ballSX[iBall-1]

      pp[2][2] = ballSY[iBall-1]

      pp[3][1] = ballSX[iBall-19]

      pp[3][2] = ballSY[iBall-19]

      pp[4][1] = ballSX[iBall-18]

      pp[4][2] = ballSY[iBall-18]

      

      cc[1]=LDColours.HSLtoRGB (10+iball*2 1 0.6)

      cc[2]=LDColours.HSLtoRGB (10+iball*2 1 0.2)

      

      gr= LDShapes.BrushGradient (cc, "DD")

      LDShapes.BrushPolygon (gr pp)   

      

      ldShapes.Centre (ball[iBall],SX,SY)

      Shapes.Zoom(ball[iBall],(1+SZ),(1+SZ))

      Shapes.SetOpacity(ball[iBall],(1+SZ)*100)

      

    EndFor

  endif

  Program.Delay(15)

EndWhile







'#####################################################

'SUBROUTINES

'#####################################################



Sub Initialise

  PI = 2.0*Math.ArcCos(0)

  gw = 1200

  gh = 800

  bg = "darkblue

  GraphicsWindow.PenWidth=0

  GraphicsWindow.Width = gw

  GraphicsWindow.Height = gh

  GraphicsWindow.BackgroundColor = bg

  GraphicsWindow.Top = 0

  GraphicsWindow.Left = 0

  centreX = 0

  centreY = 0

  centreZ = 0

  numBall = 100

  radBall = 15

  scale = 2

  theta = .21

  phi = .02

  

  For i = 1 To numBall

    ballX[i] = LDMath.Cos(i*20)*(110-i)

    ballY[i] = LDMath.sin(i*20)*(110-i)

    ballZ[i] = i

    GraphicsWindow.BrushColor = LDColours.HSLtoRGB (i*4 1 .6)

    pc[i] = GraphicsWindow.BrushColor

    GraphicsWindow.BrushColor="#00000000

    ball[i] = Shapes.AddEllipse(5,5)

  EndFor

  

  GraphicsWindow.PenColor = "#05ff0000"

  setRotation()

  rotation = matrix

EndSub



'Input : theta, phi

'Output : matrix

Sub setRotation

  matrix[1][1] = Math.Cos(theta)*Math.Cos(phi)

  matrix[1][2] = Math.Sin(theta)

  matrix[1][3] = Math.Cos(theta)*Math.Sin(phi)

  

  matrix[2][1] = -Math.Sin(theta)*Math.Cos(phi)

  matrix[2][2] = Math.Cos(theta)

  matrix[2][3] = -Math.Sin(theta)*Math.Sin(phi)

  

  matrix[3][1] = -Math.Sin(phi)

  matrix[3][2] = 0

  matrix[3][3] = Math.Cos(phi)

EndSub



'Input : matrix

'Output : inverse

Sub setInverse ' Just a transpose for a rotation matrix

  For i = 1 To 3

    For j = 1 To 3

      inverse[i][j] = matrix[j][i]

    EndFor

  EndFor

EndSub



'Input : matrix1, matrix2

'Output : matrix

Sub multiply

  For i = 1 To 3

    For j = 1 To 3

      matrix[i][j] = 0

      For k = 1 To 3

        matrix[i][j] = matrix[i][j] + matrix1[i][k]*matrix2[k][j]

      EndFor

    EndFor

  EndFor

EndSub



'Input : matrix

'Output : theta, phi

Sub printMatrix

  For i = 1 To 3

    For j = 1 To 3

      TextWindow.Write(0.001*Math.Floor(0.5+1000*matrix[i][j])) 'Rounded to nearest 3 digit decimal number

      TextWindow.Write("   ")

    EndFor

    TextWindow.WriteLine("")

  EndFor

  TextWindow.WriteLine("")

  getAngles()

  TextWindow.Write(0.001*Math.Floor(0.5+1000*theta*180/PI))

  TextWindow.Write("   ")

  TextWindow.WriteLine(0.001*Math.Floor(0.5+1000*phi*180/PI))

  TextWindow.WriteLine("")

EndSub



'Input : matrix

'Output theta, phi

Sub getAngles

  phi = Math.ArcCos(Math.Min(1.0,Math.Max(-1.0,matrix[3][3])))

  theta = Math.ArcCos(Math.Min(1.0,Math.Max(-1.0,matrix[2][2])))

  If (matrix[1][2] < 0) Then

    theta = theta+PI

  EndIf

EndSub



Sub testInverse

  theta = PI/2.0

  phi = 0.0

  

  setRotation()

  rotation = matrix

  printMatrix()

  

  setInverse()

  matrix = inverse

  printMatrix()

  

  matrix1 = rotation

  matrix2 = inverse

  multiply()

  printMatrix()

EndSub



'Input matrix, scale, centreX, centreY, centreZ, X, Y, Z

'Output SX, SY, SZ(depth)

Sub getScreen

  DX = (X-centreX)*scale

  DY = (Y-centreY)*scale

  DZ = (Z-centreZ)*scale

  SX = gw/2 + DX*matrix[2][1] + DY*matrix[2][2] + DZ*matrix[2][3]

  SY = gh/2 + DX*matrix[3][1] + DY*matrix[3][2] + DZ*matrix[3][3]

  SZ = (DX*matrix[1][1] + DY*matrix[1][2] + DZ*matrix[1][3])/255/scale

EndSub



Sub OnMouseMove

  mww="true

  

EndSub



Sub OnMouseDown

  mww="true

  mouseX = GraphicsWindow.MouseX

  mouseY = GraphicsWindow.MouseY

  rotationOLD = rotation

  

  mouseDown = "true

EndSub



Sub OnMouseUp

  mouseDown = "false

EndSub

  


