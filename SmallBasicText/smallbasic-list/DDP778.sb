'My Maze Maker

'By Tucker S

'Oak View Middle School

'Version I forgot to keep track :)

'READ ALL OF THE GREEN STUFF HERE!

'This is designed to be random, not hard.

'(O,O) is top left corner.

'Move with WASD or with the arrow keys.

' ss is start, ee is end. If you don't see this, you will after playing with the settings.

' Plus signs and exclamation points/tildes indicate walls and borders.

'All paths and walls are two characters wide.

'This is very complicated, if you want to look at the code then it may be hard to understand.

'Questions, comments, or concerns? Contact me at thshea@gm.sbac.edu <---BUT if you share this program with a friend out side of the school district, DELETE THIS LINE! If their email doesn't end with @gm.sbac.edu , they are not in the school district!

'Feel free to share this program with people you know, but do not give out my email without first reading the above line. 



'SETTINGS

'Use MazeX and MazeY to change maze size

'With large mazes, you will have to go fullscreen for the graphicswindow to work correctly.

'Add one to the value for maze size with borders and subtract one for maze size without borders. This is because this is counted in computer numbers, starting at 0 instead of 1.

MazeX = 6           'The legnth of the maze in blocks from 0. It MUST be an even number greater than 0.

MazeY = 6           'The legnth of the maze in blocks from 0. It MUST be an even number greater than 0.

gridlines = "false"  'Controls whether a grid is made or if the maze is made without a grid behind it. Possible values are "true" and "false".

Textoutput = "true" 'Controls whether the maze gives a textwindow output. Possible values are "true" or "false".

Speed = 10           'Controls the speed at which the maze is generated. Possible values are between 1 and 10, inclusive.

topleftX = 25        'Controls where the top left corner is on the X axis. 10 is recommended.

topleftY = 25        'Controls where the top left corner is on the Y axis. 10 is recommended.

CellsizeX = 10       'Controls how large the grid cells are on the X axis. Anything 25 or less is recommended. Actual results will vary with maze size.

CellsizeY = 10       'Controls how large the grid cells are on the Y axis. Anything 25 or less is recommended. Actual results will vary with maze size.

mazegendelay = 1500     'Controls how long it takes to print the maze. Multiplying the maze size in blocks squared by this will equal the amount of time it will take to generate the maze with gridlines and Textoutput equal to false. Change this if you can't get the graphicswindow to fullscreen fast enough.

solvespeed = 100     'Controls how much of a delay, in ms, for the solve character to move.

playerXsize = 8      'Controls the size of the player object on the X axis, in pixels.

playerYsize = 8      'Controls the size of the player object on the Y axis, in pixels.

movelatency = 20     'Controls the latency given after a move in ms. A larger number will provide less movement glitches, but will increase the delay until you can next move.

'Do not mess with anything after this line without either knowing what you are doing or have the undo button at the ready!

currentXpos = 0

currentYpos = 0

solved = "nope"

repeat = "n"

Baseoffset = 30

B64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

For Basecoversions = 0 to 63

BintoBase[Basecoversions] = Text.GetSubText(B64, Basecoversions, 1)

Endfor







beginning()

Sub beginning

GraphicsWindow.Width = 775

GraphicsWindow.Height = 500

GraphicsWindow.Title = "My Maze Maker by Tucker S"

GraphicsWindow.BackgroundColor = GraphicsWindow.GetColorFromRGB(0, 204, 0)

GraphicsWindow.PenColor =  GraphicsWindow.GetColorFromRGB(0, 102, 204)

GraphicsWindow.FontSize = 48

GraphicsWindow.DrawBoundText(200, 100, 400, "My Maze Maker")

GraphicsWindow.FontSize = 24

GraphicsWindow.PenColor =  GraphicsWindow.GetColorFromRGB(0, 153, 255)

GraphicsWindow.DrawBoundText(300, 150, 250, "by Tucker S")

GraphicsWindow.FontSize = 15

GraphicsWindow.BrushColor = GraphicsWindow.GetColorFromRGB(255, 102, 0)

rand = Controls.AddButton("Random Generation", 200, 250)

seed = Controls.AddButton("From-Seed Generation", 375, 250)

Controls.ButtonClicked = Click

EndSub

Sub Click

  Controls.Remove("rand")

  Controls.Remove("seed")

  GraphicsWindow.Clear()

  GraphicsWindow.Hide()

  If Controls.LastClickedButton = rand Then

    initgraphics()

    randgen()

    makegraphics()

    initsolve()

    dosolve()

  ElseIf Controls.LastClickedButton = seed Then

    initgraphics()

    'seedgen()

    makegraphics()

    initsolve()

    dosolve()

  ElseIf Controls.LastClickedButton = rep Then

    beginning()

  ElseIf Controls.LastClickedButton = end Then

    End()

  EndIf

EndSub



  

  Sub end

    GraphicsWindow.Width = 775

    GraphicsWindow.Height = 500

    GraphicsWindow.Title = "My Maze Maker by Tucker S"

    GraphicsWindow.BackgroundColor = GraphicsWindow.GetColorFromRGB(0, 204, 0)

    GraphicsWindow.PenColor =  GraphicsWindow.GetColorFromRGB(0, 102, 204)

    GraphicsWindow.FontSize = 48

    GraphicsWindow.DrawBoundText(200, 100, 400, "My Maze Maker")

GraphicsWindow.FontSize = 24

GraphicsWindow.PenColor =  GraphicsWindow.GetColorFromRGB(0, 153, 255)

GraphicsWindow.DrawBoundText(275, 170, 350, "You beat the maze!")

GraphicsWindow.FontSize = 20

GraphicsWindow.BrushColor = GraphicsWindow.GetColorFromRGB(51, 51, 204)

GraphicsWindow.DrawBoundText(20, 210, 140, "Seed:")

GraphicsWindow.FontSize = 20

GraphicsWindow.DrawBoundText(20, 235, 250, "seedbinval")

GraphicsWindow.FontSize = 15

GraphicsWindow.BrushColor = GraphicsWindow.GetColorFromRGB(255, 102, 0)

rep = Controls.AddButton("Play Again", 275, 280)

end = Controls.AddButton("Close", 375, 280)

  EndSub

  

  

  

  Sub randgen

    

  If Textoutput = "true" Then

  TextWindow.WriteLine(currentXpos+","+currentYpos)

endif

For MakeMaze1Y = 0 To MazeY

  For  MakeMaze1X = 0 To MazeX

  If MakeMaze1X = 0 or MakeMaze1X = MazeX or MakeMaze1Y = 0 or MakeMaze1Y = MazeY Then

  Mazeblock[MakeMaze1X][MakeMaze1Y] = "!~"

  Else

  Mazeblock[MakeMaze1X][MakeMaze1Y] = "++"

Endif

  EndFor

EndFor

MazestartX = ((Math.GetRandomNumber((MazeX/2))*2)-1)

MazestartY = 0

Mazeblock[MazestartX][MazestartY] = "ss"

Mazeblock[MazestartX][MazestartY+1] = "  "

currentXpos = MazestartX

currentYpos = MazestartY+1

MazeendX = ((Math.GetRandomNumber((MazeX/2))*2)-1)

MazeendY = MazeY

Mazeblock[MazeendX][MazeendY] = "ee"

If Textoutput = "true" Then

TextWindow.WriteLine(currentXpos+","+currentYpos)

Endif

currentstatus = "OK"

dropBreadcrumb()

dropBreadcrumb()

lastdirectionmoved = "south"

moveresult = "success"



While currentstatus = "OK"

  trytomove()

  after:

  If Textoutput = "true" Then

    TextWindow.WriteLine(currentXpos+","+currentYpos)

    EndIf

    northerror = 0

    easterror = 0

    southerror = 0

    westerror = 0

    If Textoutput = "true" Then

      TextWindow.WriteLine("MOVED")

      EndIf

  If currentXpos = MazestartX And currentYpos = 1 Then

    currentstatus = "ERROR"

    If Textoutput = "true" Then

    TextWindow.WriteLine("SYSFINISHED")

    EndIf

  Else

    If moveresult = "fail" Then

      Backtrack()

      moveresult = "success"

      If Textoutput = "true" Then

      TextWindow.WriteLine("BACKTRACKED")

      TextWindow.WriteLine("Crumb POPPED")

      EndIf

    ElseIf moveresult = "success" Then

      dropBreadcrumb()

      

      EndIf

    EndIf

  EndWhile

  If Textoutput = "true" Then

  TextWindow.WriteLine("WRITING")

  TextWindow.WriteLine("")

  TextWindow.WriteLine("")

For PrintY = 0 To MazeY

  For PrintX = 0 To MazeX

    TextWindow.Write(Mazeblock[PrintX][PrintY])

  EndFor

  TextWindow.WriteLine("")

  EndFor

Endif

EndSub



'Program.End()



'Now for the subprograms...



Sub dropBreadcrumb

  Stack.PushValue("BreadcrumbX", currentXpos)

  Stack.PushValue("BreadcrumbY", currentYpos)

  If Textoutput = "true" Then

    TextWindow.WriteLine("Crumb PUSHED")

    EndIf

EndSub



Sub trytomove

  If northerror = "YES" And easterror = "YES" And southerror = "YES" And westerror = "YES" Then

    moveresult = "fail"

    northerror = 0

    easterror = 0

    southerror = 0

    westerror = 0

  If Textoutput = "true" Then

    TextWindow.WriteLine("FINAL FAIL")

    Endif

    Goto after

    Else

  

  nextwaytomove = 0

  nextwaytomove = (Math.GetRandomNumber(4))

  If Textoutput = "true" Then

  TextWindow.WriteLine(nextwaytomove)

  TextWindow.WriteLine(nextwaytomove)

  EndIf

  If nextwaytomove = 1 Then

  If Textoutput = "true" Then

    TextWindow.WriteLine("11")

    EndIf

    If currentYpos-2 = -1 Or Mazeblock[currentXpos][currentYpos-2] = "  " Or Mazeblock[currentXpos][currentYpos-1] = "!~" Or Mazeblock[currentXpos][currentYpos-1] = "ss" Then

      northerror = "YES"

  If Textoutput = "true" Then

    TextWindow.WriteLine("NORTH FAIL")

    EndIf

      trytomove()

    Else

      appendY = currentYpos-1

  If Textoutput = "true" Then

      TextWindow.WriteLine(currentYpos)

      TextWindow.WriteLine(appendY)

      EndIf

      Mazeblock[currentXpos][appendY] = "  "

      appendY = appendY-1

      Mazeblock[currentXpos][appendY] = "  "

  If Textoutput = "true" Then

  TextWindow.WriteLine("NORTH")

  EndIf

      currentYpos = currentYpos-2

    EndIf

  ElseIf nextwaytomove = 2 Then

  If Textoutput = "true" Then

    TextWindow.WriteLine("22")

    EndIf

    If currentXpos+2 = MazeX+1 Or Mazeblock[currentXpos+2][currentYpos] = "  " Or Mazeblock[currentXpos+1][currentYpos] = "!~" Then

      easterror = "YES"

  If Textoutput = "true" Then

    TextWindow.WriteLine("EAST  FAIL")

    EndIf

      trytomove()

    Else

      appendX = currentXpos+1

      Mazeblock[appendX][currentYpos] = "  "

      appendX = appendX+1

      Mazeblock[appendX][currentYpos] = "  "

  If Textoutput = "true" Then

  TextWindow.WriteLine("EAST")

  EndIf

      currentXpos = currentXpos+2

    EndIf

  ElseIf nextwaytomove = 3 Then

  If Textoutput = "true" Then

    TextWindow.WriteLine("33")

    EndIf

    If currentYpos+2 = MazeY+1 Or Mazeblock[currentXpos][currentYpos+2] = "  " Or Mazeblock[currentXpos][currentYpos+1] = "!~" Or Mazeblock[currentXpos][currentYpos+1] = "ee" Then

      southerror = "YES"

  If Textoutput = "true" Then

    TextWindow.WriteLine("SOUTH FAIL")

    EndIf

      trytomove()

    Else

      appendY = currentYpos+1

      Mazeblock[currentXpos][appendY] = "  "

      appendY = appendY+1

      Mazeblock[currentXpos][appendY] = "  "

      currentYpos = currentYpos+2

  If Textoutput = "true" Then

  TextWindow.WriteLine("SOUTH")

  EndIf

    EndIf

  ElseIf nextwaytomove = 4 Then

  If Textoutput = "true" Then

    TextWindow.WriteLine("44")

    EndIf

    If currentXpos-2 = -1 Or Mazeblock[currentXpos-2][currentYpos] = "  " Or Mazeblock[currentXpos-1][currentYpos] = "!~" Then

      westerror = "YES"

  If Textoutput = "true" Then

    TextWindow.WriteLine("WEST  FAIL")

    EndIf

      trytomove()

    Else

      appendX = currentXpos-1

      Mazeblock[appendX][currentYpos] = "  "

      appendX = appendX-1

      Mazeblock[appendX][currentYpos] = "  "

  If Textoutput = "true" Then

    TextWindow.WriteLine("WEST")

    EndIf

      currentXpos = currentXpos-2

    EndIf

  EndIf

  EndIf

    

  

EndSub





Sub Backtrack

  lastbreadcrumbX = Stack.PopValue("BreadcrumbX")

  lastbreadcrumbY = Stack.PopValue("BreadcrumbY")

  currentXpos = lastbreadcrumbX

  currentYpos = lastbreadcrumbY

  

EndSub

  

  

  

  

  

  

  'Initgraphics

  

  Sub initgraphics

    GraphicsWindow.Show()

    GraphicsWindow.BackgroundColor = "white"

GraphicsWindow.Width = ((MazeX + 1) * CellsizeX) + (topleftX * 2.5)

GraphicsWindow.Height = ((MazeY + 1) * CellsizeY) + (topleftY * 2.5) + Baseoffset

Turtle.Speed = Speed

Turtle.X = topleftX

StartposX = Turtle.X

Turtle.Y = topleftY

StartposY = Turtle.Y

SizeX = MazeX

GraphsizeX = SizeX + 1

SizeY = MazeY

GraphsizeY = SizeY + 1

EndSub



Sub makegraphics

If gridlines = "true" Then

For Graphdown = 0 To GraphsizeX

  Turtle.X = StartposX + Graphdown * CellsizeX

  Turtle.Y = StartposY

  Turtle.MoveTo(StartposX + Graphdown * CellsizeX, StartposY + GraphsizeY * CellsizeY)

  Program.Delay(100)

EndFor

For Graphright = 0 To GraphsizeY

  Turtle.X = StartposX

  Turtle.Y = StartposY + Graphright * CellsizeY

  Turtle.MoveTo(StartposX + GraphsizeX * CellsizeX, StartposY + Graphright * CellsizeY)

  Program.Delay(100)

EndFor

EndIf

Turtle.Hide()

For PointonY = 0 To SizeY

  TextWindow.WriteLine("Y>" + PointonY)

  For PointonX = 0 To SizeX

  TextWindow.WriteLine("X>" + PointonX)

    If Mazeblock[PointonX][PointonY] = "++" Then

      GraphicsWindow.BrushColor = "dark gray"

      GraphicsWindow.FillRectangle((PointonX) * CellsizeX + StartposX, (PointonY) * CellsizeY + StartposY, CellsizeX, CellsizeY)

    TextWindow.WriteLine(Mazeblock[PointonX][PointonY])

    ElseIf Mazeblock[PointonX][PointonY] = "!~" Then

      GraphicsWindow.BrushColor = "black"

      GraphicsWindow.FillRectangle((PointonX) * CellsizeX + StartposX, (PointonY) * CellsizeY + StartposY, CellsizeX, CellsizeY)

    TextWindow.WriteLine(Mazeblock[PointonX][PointonY])

    Elseif Mazeblock[PointonX][PointonY] = "ss" Then

      GraphicsWindow.BrushColor = "green"

      GraphicsWindow.FillRectangle((PointonX) * CellsizeX + StartposX, (PointonY) * CellsizeY + StartposY, CellsizeX, CellsizeY)

    TextWindow.WriteLine(Mazeblock[PointonX][PointonY])

    Elseif Mazeblock[PointonX][PointonY] = "ee" Then

      GraphicsWindow.BrushColor = "red"

      GraphicsWindow.FillRectangle((PointonX) * CellsizeX + StartposX, (PointonY) * CellsizeY + StartposY, CellsizeX, CellsizeY)

    TextWindow.WriteLine(Mazeblock[PointonX][PointonY])

    EndIf

  'Program.Delay(mazegendelay)

  EndFor

EndFor

EndSub





Sub initsolve

playerXoffset = (CellsizeX - playerXsize) / 2

playerYoffset = (CellsizeY - playerYsize) / 2

playerX = ((MazestartX*CellsizeX)+topleftX)

playerY = ((MazestartY*CellsizeY)+topleftY)

playerblockX = MazestartX

playerblockY = MazestartY



mycircle = Shapes.AddEllipse(playerXsize, playerYsize)

Shapes.Move(mycircle, playerX + playerXoffset, playerY + playerYoffset)

EndSub











Sub dosolve

  While solved = "nope"

GraphicsWindow.KeyDown = keypressed

GraphicsWindow.KeyUp = keyreleased

  

  If playerblockX = MazeendX And playerblockY = MazeendY Then

    solved = "very much so"

    EndIf

  

  

  If ifkeydown = "y" And repeat = "n" And solved = "nope" Then

    repeat = "y"

    If GraphicsWindow.LastKey = "Up" Or GraphicsWindow.LastKey = "W" Then

      dir = 0

    ElseIf GraphicsWindow.LastKey = "Right" Or GraphicsWindow.LastKey = "D" Then

      dir = 1

    ElseIf GraphicsWindow.LastKey = "Down" Or GraphicsWindow.LastKey = "S" Then

      dir = 2

    ElseIf GraphicsWindow.LastKey = "Left" Or GraphicsWindow.LastKey = "A" Then

      dir = 3

    EndIf

    playermove()

    Shapes.Animate(mycircle, playerX + playerXoffset, playerY + playerYoffset, solvespeed)

    Program.Delay(movelatency)

  EndIf

  EndWhile

    EndSub

  

  

  

  

Sub keypressed

  ifkeydown = "y"

  If Textoutput = "true" Then

    TextWindow.WriteLine("keypressed")

    EndIf

Endsub

Sub keyreleased

  ifkeydown = "n"

  repeat = "n"

EndSub



Sub Playermove

  If dir = 0 Then

    If Mazeblock[playerblockX][playerblockY - 1] = "  " Then

      playerblockY = playerblockY - 2

      playerY = playerY - CellsizeY * 2

    ElseIf Mazeblock[playerblockX][playerblockY - 1] = "ss" Then

      playerblockY = playerblockY - 1

      playerY = playerY - CellsizeY

    EndIf

  ElseIf dir  = 1 Then

    If Mazeblock[playerblockX + 1][playerblockY] = "  " Then

      playerblockX = playerblockX + 2

      playerX = playerX + CellsizeX * 2

    EndIf

  Elseif dir = 2 Then

    If Mazeblock[playerblockX][playerblockY] = "ss" or Mazeblock[playerblockX][playerblockY + 1] = "ee" Then

      playerblockY = playerblockY + 1

      playerY = playerY + CellsizeY

    Elseif Mazeblock[playerblockX][playerblockY + 1] = "  " Then

      playerblockY = playerblockY + 2

      playerY = playerY + CellsizeY * 2

    EndIf

  Elseif dir = 3 Then

    If Mazeblock[playerblockX - 1][playerblockY] = "  " Then

      playerblockX = playerblockX - 2

      playerX = playerX - CellsizeX * 2

    EndIf

  EndIf

EndSub

  


