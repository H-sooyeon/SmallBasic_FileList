title = "Curves"
ver = ""
LDUtilities.ShowNoShapeErrors="False
GraphicsWindow.BackgroundColor="#aabbcc
cc=0
lsc=0
inn=0
inpn=0
lmd=1
nct=12
Shapes.AddEllipse(2,2)
LDDialogs.AddRightClickMenu(LDText.Split ("AllOFF NodesON NodesOFF LinesON LinesOFF ShwON ShwOFF"," "),"")
LDDialogs.RightClickMenu =rmmn
GraphicsWindow.KeyDown=kdd
GraphicsWindow.Title = title + " " + ver + " - Quadratic Bezier Curve"
Not = "False=True;True=False;"
nth = "1=first;2=second;3=third;4=fourth;"
Form()
i=1
while i < nct
  tsl=0
  msg = "Click "+ nth[i] + " point on the screen."
  ShowInstruction()
  GetPoint()
  If FCKeyboard.IsControlPressed and i>2 Then
    ox=px[i-2]
    nx=px[i-1]
    oy=py[i-2]
    ny=py[i-1]
    
    aag= mathplus.GetDegrees ( MathPlus.ATan2(nx-ox,ny-oy)+Math.Pi/2)
    If aag>180 Then
      aag=aag-360
    elseIf aag<-180 Then
      aag=aag+360
      
    endif
    aag=math.Round(aag)
    '   rr=ldmath.Convert2Radial (px[i-1],py[i-1],px[i-2],py[i-2])  
    dx=x-px[i-1]
    dy=y-py[i-1]
    dst=math.SquareRoot (dx*dx+dy*dy)
    qq= LDMath.Convert2Cartesian (px[i-1],py[i-1],dst,aag-90 )
    'GraphicsWindow.Title=aag+" : "+dst
    x=qq[1]
    y=qq[2]
  endif
  ShowPoint()
  px[i] = x
  py[i] = y
  i=i+1
Endwhile
msg = ""
ShowInstruction()
GraphicsWindow.PenColor = "Gray"
For c=0 to nct-4 step 2
  dpx[1]=px[1+c]
  dpy[1]=py[1+c]
  dpx[2]=px[2+c]
  dpy[2]=py[2+c]
  dpx[3]=px[3+c]
  dpy[3]=py[3+c]
  GraphicsWindow.PenColor="Gray
  lsc=lsc+1
  ls[lsc]=Shapes.AddLine (dpx[1], dpy[1], dpx[2], dpy[2])
  lsc=lsc+1
  ls[lsc]=Shapes.AddLine (dpx[2], dpy[2], dpx[3], dpy[3])
  GraphicsWindow.PenColor="Red
  crc=c+1
  DrawQuadraticBezier()
endfor
GraphicsWindow .MouseMove =mmww
While 1=1
  Program.Delay(5)
  If dopann=1 and inn=0 And inpn=0 Then
    inn=1
    mpan ()
    inn=0
    dopann =0
  Endif
endwhile

'---------------------------------subs---------------------------------****************************************
Sub rmmn
  lm= LDDialogs.LastRightClickMenuItem 
  If lm=1 Then 
    For x=1 To cc
      Shapes.HideShape (cs[x])
    EndFor
    For x=1 To lsc
      Shapes.HideShape (ls[x])
    EndFor
    lmd=0
  elseIf lm=2 Then
    For x=1 To cc
      Shapes.ShowShape (cs[x])
    EndFor 
  elseIf lm=3 Then
    For x=1 To cc
      Shapes.HideShape (cs[x])
    EndFor
  elseIf lm=4 Then
    For xx=1 To lsc
      Shapes.showShape (ls[xx])
    EndFor
   lmd=1 
  elseIf lm=5 Then
    For x=1 To lsc
      Shapes.HideShape (ls[x])
    EndFor
    lmd=0
  elseIf lm=6 Then
    ssln=1
  elseIf lm=7 Then
    ssln=0
  endif
EndSub 

Sub kdd
  lky=GraphicsWindow.LastKey 
  GraphicsWindow.Title =lky
  If lky="Back" Then
    Shapes.Remove (cs[cc])
    cc=cc-1
    i=i-1
  ElseIf lky="Tab" then
    tsl=tsl+1
    If tsl=nct then 
      tsl=1
      
    endif
    For kx=1 to nct-1
      LDShapes.BrushColour (cs[kx],"Blue")
      
    endfor 
    LDShapes.BrushColour (cs[tsl],"Red")
  endif
EndSub 

Sub Form
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.FontName = "Trebuchet MS"
  GraphicsWindow.BrushColor = "Black"
  GraphicsWindow.FontSize = 20
  instruction = Shapes.AddText("")
  Shapes.Move(instruction, 10, 10)
  GraphicsWindow.MouseDown = OnMouseDown
  
EndSub

Sub DrawQuadraticBezier
  ' param px, py - array of three control points for quadratic Bezier curve
  ff=0
  For k = 0 To 1 Step 0.05
    x1 = dpx[1] + k * (dpx[2] - dpx[1])
    y1 = dpy[1] + k * (dpy[2] - dpy[1])
    x2 = dpx[2] + k * (dpx[3] - dpx[2])
    y2 = dpy[2] + k * (dpy[3] - dpy[2])
    GraphicsWindow.PenColor = "Gray"
    if ssln=1 then
      line = Shapes.AddLine(x1, y1, x2, y2)
    EndIf 
    x = x1 + k * (x2 - x1)
    y = y1 + k * (y2 - y1)
    If 0 < k Then
      ff=ff+1
      GraphicsWindow.PenColor = "Red
      dline[crc][ff] = Shapes.AddLine(_x, _y, x, y)
      
    EndIf
    _x = x  ' last x
    _y = y  ' last y
    msg = "k = " + k
    
    If ssln=1 then 
      Program.Delay(30)
      Shapes.Remove(line)
    EndIf 
  EndFor
EndSub

Sub GetPoint
  ' return x, y - clicked point
  mouseDown = "False"
  While Not[mouseDown]
    Program.Delay(300)
  EndWhile
  x = GraphicsWindow.MouseX
  y = GraphicsWindow.MouseY
EndSub

Sub mmww
  if Mouse.IsLeftButtonDown  then
    
    mx= GraphicsWindow.MouseX 
    my= GraphicsWindow.MouseY 
    If (mx<>omx Or my<>omy) Then
      
      dopann=1
      
    endif
    omx=x
    omy=y
  EndIf 
EndSub 



Sub OnMouseDown
  mouseDown = "True"
  if mouse.IsLeftButtonDown then 
    mpan()
    endif
EndSub

Sub mpan
  If tsl>0 Then
    inpn=1
    x= GraphicsWindow.MouseX 
    y= GraphicsWindow.MouseY 
    If FCKeyboard.IsControlPressed and tsl>2 Then
      i=tsl
      ox=px[i-2]
      nx=px[i-1]
      oy=py[i-2]
      ny=py[i-1]
      
      aag= mathplus.GetDegrees ( MathPlus.ATan2(nx-ox,ny-oy)+Math.Pi/2)
      If aag>180 Then
        aag=aag-360
      elseIf aag<-180 Then
        aag=aag+360
        
      endif
      aag=math.Round(aag)
      '   rr=ldmath.Convert2Radial (px[i-1],py[i-1],px[i-2],py[i-2])  
      dx=x-px[i-1]
      dy=y-py[i-1]
      dst=math.SquareRoot (dx*dx+dy*dy)
      qq= LDMath.Convert2Cartesian (px[i-1],py[i-1],dst,aag-90 )
      'GraphicsWindow.Title=aag+" : "+dst
      x=qq[1]
      y=qq[2]
    endif
    
    px[tsl ] = x
    py[tsl ] = y
    ldShapes.Centre (cs[tsl], x,Y ) 
    Shapes.Remove (ls[tsl])
    Shapes.Remove (ls[tsl-1])
    If tsl>1 and lmd=1 then
      ls[tsl-1]=Shapes.AddLine (x,y,px[tsl-1],py[tsl-1])
    EndIf 
    If tsl<nct-1 And lmd=1 then
      ls[tsl]=Shapes.AddLine (x,y,px[tsl+1],py[tsl+1])
    endif
    LDShapes.PenColour (ls[tsl],"gray")
    LDShapes.PenColour (ls[tsl-1],"gray")
    
    If math.Remainder ( tsl,2)=0 Then
      dpx [1]=px[tsl-1]
      dpy [1]=py[tsl-1]
      dpx [2]=x
      dpy [2]=y
      dpx [3]=px[tsl+1]
      dpy [3]=py[tsl+1]  
      For d=1 To Array.GetItemCount(dline[tsl-1]) 
        
        Shapes.Remove(dline[tsl-1][d])
        
      EndFor
      crc=tsl-1
      DrawQuadraticBezier()
    Else
      For d=1 To Array.GetItemCount(dline[tsl-2]) 
        Shapes.Remove(dline[tsl-2][d])
        
      EndFor
      For d=1 To Array.GetItemCount(dline[tsl]) 
        Shapes.Remove(dline[tsl][d])
        
      EndFor
      
      dpx [1]=px[tsl-2]
      dpy [1]=py[tsl-2]
      dpx [3]=x
      dpy [3]=y
      dpx [2]=px[tsl-1]
      dpy [2]=py[tsl-1]
      crc=tsl-2
      If tsl>1 then
        DrawQuadraticBezier()
      endif
      
      dpx [3]=px[tsl+2]
      dpy [3]=py[tsl+2]
      dpx [1]=x
      dpy [1]=y
      dpx [2]=px[tsl+1]
      dpy [2]=py[tsl+1]  
      
      crc=tsl
      If tsl<nct-1 then
        DrawQuadraticBezier()
      endif
    EndIf 
    inpn=0
  EndIf 
EndSub 

Sub ShowInstruction
  ' param msg - instruction message to show
  Shapes.SetText(instruction, msg)
EndSub

Sub ShowPoint
  cc=cc+1
  cs[cc]=Shapes.AddEllipse(15,15)
  LDShapes.Centre (cs[cc],x,y)
  Shapes.SetOpacity (cs[cc],70)
  If FCKeyboard.IsControlPressed  and cc>2 Then
    LDShapes.BrushColour (cs[cc],"Brown")
    
  Else
    LDShapes.BrushColour (cs[cc],"Blue")
  EndIf 
EndSub

