Initialise()



While 0=0  

  UpdateGame()  

  

  Shapes.Move(_turtle, X, Y)  

  

  Program.Delay(Math.Max(0, 15 - (Clock.ElapsedMilliseconds - start)))

  start = Clock.ElapsedMilliseconds   

EndWhile



Sub Initialise  

  wall = "#FF00DC"   

  speed = "1=3.5;2=4;3=4.5;4=5"

  startX = "1=40;2=296;3=400;4=245"

  startY = "1=30;2=292;3=0;4=376"   

  

  GraphicsWindow.Top = 20

  GraphicsWindow.Left = (Desktop.Width - GraphicsWindow.Width) / 2

  GraphicsWindow.CanResize = "False"   

  

  LoadLevel()

  

  GraphicsWindow.KeyDown = OnKeyDown

  GraphicsWindow.KeyUp = OnKeyUp

EndSub



Sub OnKeyDown

  keyDown = "True"

EndSub



Sub OnKeyUp

  keyDown = "False"

EndSub



Sub LoadLevel

  i = i + 1

  GraphicsWindow.Clear()

  GraphicsWindow.DrawText(100, 80, "Wait... d/loading level " + i)

  GraphicsWindow.Title = "Turtle Maze (level " + i + ")"  

  

  host = "http://rickmurphy.byethost5.com/SmallBasic/ProgramListing/Maze/assets/images/"

  'host = Program.Directory + "\images\"  

  

  maze = ImageList.LoadImage(host + "maze[" + i + "].png")

  texture = ImageList.LoadImage(host + "texture[" + i + "].png")  

  _turtle = ImageList.LoadImage(host + "turtle[" + i + "].png")  

  

  If ImageList.GetWidthOfImage(maze) = 0 Or ImageList.GetWidthOfImage(texture) = 0 Or ImageList.GetWidthOfImage(_turtle) = 0 Then

    GraphicsWindow.ShowMessage("A network error has occured!" + Text.GetCharacter(10) + "Close and try again.", "NETWORK ERROR!")

    Program.End()

  EndIf

  

  size = ImageList.GetHeightOfImage(_turtle) 'turtle MUST be square

  X = startX[i]

  Y = startY[i]

  startClock = Clock.ElapsedMilliseconds  

  

  GraphicsWindow.Width = ImageList.GetWidthOfImage(maze)

  GraphicsWindow.Height = ImageList.GetHeightOfImage(maze)

  GraphicsWindow.Left = (Desktop.Width - GraphicsWindow.Width) / 2  

  

  GraphicsWindow.Clear()

  GraphicsWindow.DrawImage(maze, 0, 0)  

  

  Shapes.AddImage(texture)

  _turtle = Shapes.AddImage(_turtle)  

EndSub



Sub UpdateGame

  'Update Turtle

  If keyDown And GraphicsWindow.LastKey = "Down" Then    

    If GraphicsWindow.GetPixel(X, Y + size + speed[i]) <> wall And GraphicsWindow.GetPixel(X + size, Y + size + speed[i]) <> wall Then

      If GraphicsWindow.GetPixel(X + size /2, Y + size + speed[i]) <> wall Then

        Y = Shapes.GetTop(_turtle) + speed[i]

        Shapes.Rotate(_turtle, 180)

      EndIf

    EndIf

  ElseIf keyDown And GraphicsWindow.LastKey = "Up" And Y > speed[i] Then

    If GraphicsWindow.GetPixel(X, Y - speed[i]) <> wall And GraphicsWindow.GetPixel(X + size, Y - speed[i]) <> wall Then

      If GraphicsWindow.GetPixel(X + size /2, Y - speed[i]) <> wall Then

        Y = Shapes.GetTop(_turtle) - speed[i]

        Shapes.Rotate(_turtle, 0)

      EndIf

    EndIf

  ElseIf keyDown And GraphicsWindow.LastKey = "Right" Then

    If GraphicsWindow.GetPixel(X + size + speed[i], Y) <> wall And GraphicsWindow.GetPixel(X + size + speed[i], Y + size) <> wall Then

      If GraphicsWindow.GetPixel(X + size + speed[i], Y + size /2) <> wall Then

        X = Shapes.GetLeft(_turtle) + speed[i]

        Shapes.Rotate(_turtle, 90)    

      EndIf

    EndIf

  ElseIf keyDown And GraphicsWindow.LastKey = "Left" Then

    If GraphicsWindow.GetPixel(X - speed[i], Y) <> wall And GraphicsWindow.GetPixel(X - speed[i], Y + size) <> wall Then

      If GraphicsWindow.GetPixel(X - speed[i], Y + size /2) <> wall Then

        X = Shapes.GetLeft(_turtle) - speed[i]

        Shapes.Rotate(_turtle, 270)

      EndIf

    EndIf

  EndIf

  

  'Update Progress  

  If X > GraphicsWindow.Width - size / 2 Or Y > GraphicsWindow.Height - size / 2 Then    

    seconds = Math.Floor((Clock.ElapsedMilliseconds - startClock) / 1000)

    formatSeconds = Math.Floor(Math.Remainder(seconds / 60, 60)) + ":" + Text.GetSubText(Text.Append("0", Math.Remainder(seconds, 60)), Text.GetLength(Text.Append("0", Math.Remainder(seconds, 60))) - 1, Text.GetLength(Text.Append("0", Math.Remainder(seconds, 60))))

    GraphicsWindow.ShowMessage("Time taken: " + formatSeconds + " (m:ss)", "Congratulations")    

    gameTime = gameTime + seconds

    

    If i < Array.GetItemCount(startX) Then      

      LoadLevel()

      keyDown = "False"

    Else

      formatGameTime = Math.Floor(Math.Remainder(gameTime / 60, 60)) + ":" + Text.GetSubText(Text.Append("0", Math.Remainder(gameTime, 60)), Text.GetLength(Text.Append("0", Math.Remainder(gameTime, 60))) - 1, Text.GetLength(Text.Append("0", Math.Remainder(gameTime, 60))))

      GraphicsWindow.ShowMessage("Total time taken: " + formatGameTime + " (m:ss)" + Text.GetCharacter(10) + "Close program", "Game Over")

      Program.End()

    EndIf

  EndIf

EndSub



'NOTES

'Frame Rate: https://social.msdn.microsoft.com/Forums/en-US/5c578a4b-b640-4387-bc62-36b7bd488627/program-delay-bug-for-executables?forum=smallbasic


