' Prism
' Version 0.2
' Copyright © 2017 Nonki Takahashi.  The MIT License.
' Challenge 2017-09
' Last update 2017-09-08
' Program ID MLM021-1

GraphicsWindow.Title = "Prism"
caption = "False"
Init()
glass = "F2"  ' C7 or F2
θ1 = 60
_θ1 = Math.GetRadians(θ1)
n1 = 1    ' refractive index of air
_xo = r
_yo = 0
xo = gw / 2 + Math.Cos(_a) * _xo - Math.Sin(_a) * _yo
yo = gh / 2 + Math.Sin(_a) * _xo + Math.Cos(_a) * _yo
x = xo + 300 * Math.Cos(_a - _θ1)
y = yo + 300 * Math.Sin(_a - _θ1)
GraphicsWindow.DrawLine(x, y, xo, yo)
nc = Array.GetItemCount(color)
index = Array.GetAllIndices(color)
For ic = 1 To nc
  clr = color[index[ic]]
  n2 = clr[glass]       ' refractive index of glass
  GraphicsWindow.PenColor = clr["c"]
  Stack.PushValue("local", xo)
  Stack.PushValue("local", yo)
  Stack.PushValue("local", a)
  Stack.PushValue("local", _a)
  DrawLight()
  _a = Stack.PopValue("local")
  a = Stack.PopValue("local")
  yo = Stack.PopValue("local")
  xo = Stack.PopValue("local")
EndFor

Sub Dump
  buf = "θ1=" + (Math.Floor(θ1 * 100) / 100) + LF
  buf = buf + "θ2=" + (Math.Floor(θ2 * 100) / 100) + LF
  buf = buf + "θ3=" + (Math.Floor(θ3 * 100) / 100) + LF
  buf = buf + "θ4=" + (Math.Floor(θ4 * 100) / 100) + LF
  GraphicsWindow.FontSize = 12
  GraphicsWindow.DrawText(10, 10, buf)
EndSub

Sub DrawLight
  _θ2 = Math.ArcSin(n1 / n2 * Math.Sin(_θ1))
  θ2 = Math.GetDegrees(_θ2)
  l = e / (Math.Sin(_θ2) + 1 / r3 * Math.Cos(_θ2))
  xo2 = xo + l * Math.Cos(_a + Math.Pi - _θ2)
  yo2 = yo + l * Math.Sin(_a + Math.Pi - _θ2)
  GraphicsWindow.DrawLine(xo, yo, xo2, yo2)
  If caption Then
    param = "r=30;x="+xo+";y="+yo+";a1="+(a)+";a2="+(a-θ1)+";"
    DrawArc()
    _a = Math.GetRadians(a - θ1 / 2)
    r = 50
    GraphicsWindow.FontSize = 12
    x = xo + r * Math.Cos(_a) - 4
    y = yo + r * Math.Sin(_a) - 6
    GraphicsWindow.DrawText(x, y, "θ")
    GraphicsWindow.FontSize = 9
    GraphicsWindow.DrawText(x + 8, y + 6, "1")
    param = "r=30;x="+xo+";y="+yo+";a1="+(a+180)+";a2="+(a+180-θ2)+";"
    DrawArc()
    _a = Math.GetRadians(a + 180 - θ2 / 2)
    r = 50
    GraphicsWindow.FontSize = 12
    x = xo + r * Math.Cos(_a) - 4
    y = yo + r * Math.Sin(_a) - 6
    GraphicsWindow.DrawText(x, y, "θ")
    GraphicsWindow.FontSize = 9
    GraphicsWindow.DrawText(x + 8, y + 6, "2")
  EndIf
  θ3 = 60 - θ2
  _θ3 = Math.GetRadians(θ3)
  _θ4 = Math.ArcSin(n2 / n1 * Math.Sin(_θ3))
  θ4 = Math.GetDegrees(_θ4)
  If caption Then
    r = e * r3 / 3
    a = 150
    _a = Math.GetRadians(a)
    param = ""
    param["x2"] = xo2 + r * Math.Cos(_a)
    param["y2"] = yo2 + r * Math.Sin(_a)
  EndIf
  a = -30
  _a = Math.GetRadians(a)
  If caption Then
    param["x1"] = xo2 + r * Math.Cos(_a)
    param["y1"] = yo2 + r * Math.Sin(_a)
    DrawDottedLine()
  EndIf
  x = xo2 + 300 * Math.Cos(_a + _θ4)
  y = yo2 + 300 * Math.Sin(_a + _θ4)
  GraphicsWindow.DrawLine(x, y, xo2, yo2)
EndSub

Sub Init
  LF = Text.GetCharacter(10)
  Not = "False=True;True=False;"
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  'Wavelength to Color
  color[404] = "sp=h;c=#660800FF;C7=1.52532;F2=1.65070;"
  color[436] = "sp=g;c=#660000FF;C7=1.52155;F2=1.64206;"
  ' color[480] = "sp=F';c=#660074FF;C7=1.51747;F2=1.63312;"
  color[486] = "sp=F;c=#6600A6FF;C7=1.51699;F2=1.63210;"
  color[546] = "sp=e;c=#6600FE00;C7=1.51314;F2=1.62409;"
  color[588] = "sp=d;c=#66FF5A00;C7=1.51112;F2=1.62004;"
  ' color[590] = "sp=D;c=#66FF5000;C7=1.51105;F2=1.61989;"
  color[632] = "sp=632.8;c=#66FF0800;C7=1.50934;F2=1.61655;"
  ' color[644] = "sp=C';c=#66FF0400;C7=1.50895;F2=1.61581;"
  color[656] = "sp=C;c=#66FF0200;C7=1.50854;F2=1.61502;"
  GraphicsWindow.BackgroundColor = "Black"
  GraphicsWindow.BrushColor = "#666666"
  r3 = Math.SquareRoot(3)
  e = 100
  x1 = gw / 2
  y1 = gh / 2 - e * r3 * 2 / 3
  x2 = gw / 2 - e
  y2 = gh / 2 + e * r3 / 3
  x3 = gw / 2 + e
  y3 = y2
  GraphicsWindow.FillTriangle(x1, y1, x2, y2, x3, y3)
  GraphicsWindow.PenColor = "White"
  GraphicsWindow.BrushColor = "White"
  If caption Then
    a = -150
    _a = Math.GetRadians(a)
    param = ""
    r = e * r3 * 2 / 3
    param["x1"] = gw / 2 + r * Math.Cos(_a)
    param["y1"] = gh / 2 + r * Math.Sin(_a)
    param["x2"] = gw / 2
    param["y2"] = gh / 2
    DrawDottedLine()
  EndIf
  a = -150
  _a = Math.GetRadians(a)
  r = e * r3 / 3
  If caption Then
    _x1 = r + 10 
    _y1 = 0
    _x2 = r + 10 
    _y2 = 10
    x1 = gw / 2 + Math.Cos(_a) * _x1 - Math.Sin(_a) * _y1
    y1 = gh / 2 + Math.Sin(_a) * _x1 + Math.Cos(_a) * _y1
    x2 = gw / 2 + Math.Cos(_a) * _x2 - Math.Sin(_a) * _y2
    y2 = gh / 2 + Math.Sin(_a) * _x2 + Math.Cos(_a) * _y2
    GraphicsWindow.DrawLine(x1, y1, x2, y2)
    _x1 = r
    _y1 = 10
    _x2 = r + 10 
    _y2 = 10
    x1 = gw / 2 + Math.Cos(_a) * _x1 - Math.Sin(_a) * _y1
    y1 = gh / 2 + Math.Sin(_a) * _x1 + Math.Cos(_a) * _y1
    x2 = gw / 2 + Math.Cos(_a) * _x2 - Math.Sin(_a) * _y2
    y2 = gh / 2 + Math.Sin(_a) * _x2 + Math.Cos(_a) * _y2
    GraphicsWindow.DrawLine(x1, y1, x2, y2)
  EndIf
EndSub

Sub DrawArc
  Stack.PushValue("local", a)
  xo = param["x"]
  yo = param["y"]
  r = param["r"]
  a1 = param["a1"]
  a2 = param["a2"]
  aMin = Math.Min(a1, a2)
  aMax = Math.Max(a1, a2)
  last = "False"
  For a = aMin To aMax Step 5
    _a = Math.GetRadians(a)
    x = xo + r * Math.Cos(_a)
    y = yo + r * Math.Sin(_a)
    If aMin < a Then
      GraphicsWindow.DrawLine(x, y, xLast, yLast)
    EndIf
    If Not[last] And (aMax < a + 5) Then
      a = aMax - 5
      last = "True"
    EndIf
    xLast = x
    yLast = y
  EndFor
  a = Stack.PopValue("local")
EndSub

Sub DrawDottedLine
  x1 = param["x1"]
  y1 = param["y1"]
  x2 = param["x2"]
  y2 = param["y2"]
  l = Math.SquareRoot(Math.Power(x2 - x1, 2) + Math.Power(y2 - y1, 2))
  dl = 3
  r = 1
  dr = dl / l * r
  i = 0
  For r = 0 To 1 Step dr
    x = x1 + (x2 - x1) * r
    y = y1 + (y2 - y1) * r
    If Math.Remainder(i, 2) = 1 Then
      GraphicsWindow.DrawLine(x, y, xLast, yLast)
    EndIf
    xLast = x
    yLast = y
    i = i + 1
  EndFor
EndSub
