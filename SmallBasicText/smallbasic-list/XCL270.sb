GraphicsWindow.Title="Shapes3 (beta V0.3)
GraphicsWindow.BackgroundColor="tan
args=0
dffs()
ssh="x
LDShapes.ShapeEvent       = see
GraphicsWindow.MouseDown  = mmm
GraphicsWindow.MouseMove  = mww
GraphicsWindow.MouseUp    = muu
LDEvents.MouseWheel       = mwwl
LDUtilities.ShowNoShapeErrors="false
lss=""
LDList.Add(lss "NewDrwng")
ldrw()
GraphicsWindow.Width=1050
GraphicsWindow.Height=800 

While 1=1'-----------------------mainloop----------------------------------
  If cmd="opn" Then
    fff=LDDialogs.OpenFile("Sb|*.sb|SVG|*.svg|Nonki's shapes|*.nsh|HTML|*.htm;*.html|All|*.*" "e:/")
    If fff="" Then
    ElseIf Text.IsSubText(Text.ConvertToLowerCase(fff) ".nsh") Then
' The following line could be harmful and has been automatically commented.
'       buf1 = File.ReadContents(fff)
      If Text.StartsWith(buf1 "!") Then '----cmprss mode File
        bf2=LDText.Split(buf1 cr+lf)
        spp="|"
        for lm=1 to Array.GetItemCount(bf2)
          if Text.StartsWith(bf2[lm] "!") Then
            qq=LDText.Split(bf2[lm] " ")
            buf1=LDText.Replace(buf1 qq[2] qq[3])
            ElseIf Text.StartsWith(bf2[lm] "$") Then
            shape=LDText.Split(buf1 Text.GetSubText(bf2[lm] 3 1))
          EndIf 
        EndFor
       
        'shape=LDText.Split(buf1 spp)
        n1=2
          
      Else'----------------------------------normal mode file
        n1=1
        buf2=LDText.Split(buf1 ";"+qt+cr+lf)
        'TextWindow.WriteLine(buf2[1])
        shape=""
        For ww=1 To Array.GetItemCount(buf2)
          bb=LDText.Split(buf2[ww] "] = "+qt)
          
          shape[ww]= bb[2]
          'TextWindow.WriteLine(buf[ww])
        EndFor
      EndIf
      scale=1
      iMin=n1 
      iMax=Array.GetItemCount(shape)
      ' TextWindow.WriteLine(buf)
      GraphicsWindow.ShowMessage("objs:"+imax+cr+"click insert point (top+left)" "Shapes3")
      inss="false
      mins="true
      While not[inss]
        Program.Delay(1)
      EndWhile
      mins="false
      Shapes_Add()
      
    ElseIf Text.IsSubText(Text.ConvertToLowerCase(fff) ".svg") Then
' The following line could be harmful and has been automatically commented.
'       buf = File.ReadContents(fff)
      Parse_SVG()
      Shapes_Add()
      
    EndIf
    cmd=""
    
  ElseIf cmd="sav" Then
    fff=LDDialogs.SaveFile("SVG|*.svg|Sb|*.sb|Nonki's shapes|*.nsh|HTML|*.htm;*.html|All|*.*" "e:/")
    If fff="" Then
    ElseIf Text.IsSubText(Text.ConvertToLowerCase(fff) ".svg") Then
      GenerateSVG()
' The following line could be harmful and has been automatically commented.
'       File.WriteContents(fff, buf)
    EndIf
    
    cmd=""
  EndIf
  
  Program.Delay(1)
EndWhile

sub ldrw
  Controls.Remove(lsb)
  GraphicsWindow.BrushColor="darkblue
  lsb=LDControls.AddListBox(lss 550 800)
  Controls.Move(lsb 900 0)  
EndSub

Sub mwwl
  If Mouse.IsRightButtonDown Then
    aaa[ssh]=aaa[ssh]+LDEvents.LastMouseWheelDelta*3
    Shapes.Rotate(ssh aaa[ssh])
  Else
    zz[ssh]=zz[ssh]+LDEvents.LastMouseWheelDelta/20
    Shapes.Zoom(ssh zz[ssh] zz[ssh])
  EndIf
  
EndSub

Sub muu
  lsh=ssh
  ssh="x"
  inss="true
  shX=GraphicsWindow.MouseX
  shY=GraphicsWindow.MouseY
  'GraphicsWindow.Title=lsh
EndSub

Sub mww
  If Mouse.IsLeftButtonDown and GraphicsWindow.MouseY>25 Then
    If ssh="x" Then
    Else
      ldShapes.Centre(ssh GraphicsWindow.MouseX GraphicsWindow.MouseY)
    EndIf
  EndIf
EndSub

Sub mmm
  If ssh="x" Then
  Else
    ldShapes.Centre(ssh GraphicsWindow.MouseX GraphicsWindow.MouseY)
  EndIf
  
EndSub

Sub see
  If LDShapes.LastEventType="MouseDown" Then
    ssh=LDShapes.LastEventShape
  EndIf
  
EndSub

Sub dffs
  p50=30
  DIGIT = "0123456789"
  buf=""
  Not = "False=True;True=False
  WQ = Text.GetCharacter(34)
  qt = WQ
  CR = Text.GetCharacter(13)
  LF = Text.GetCharacter(10)
  LT = "<"
  tt=Text.GetCharacter(9)
  pcolor="black
  bcolor="white
  pwidth=1.5
  mnn["File"]="Main"
  mnn["New"]="File
  mnn["---"]="File
  mnn["Open ..."]="File
  mnn["Save"]="File
  mnn["Save As ..."]="File
  mnn["Import ..."]="File
  mnn["Make HTML..."]="file
  mnn["-"]="File
  mnn["Exit"]="File
  url = "D:\yotta\MySmallBasic\MySmallBasic\Sample\Shapes-master\img/"
  fffc=""
  imm=ImageList.LoadImage(url+"open.png")
  icc["Open ..."]=imm
  imm=ImageList.LoadImage(url+"save.png")
  icc["Save"]=imm
  icc["Save As ..."]=imm
  imm=ImageList.LoadImage(url+"open.png")
  icc["Import ..."]=imm
  
  mnn["Edit"]="Main"
  cpy="Copy"+tt+tt+"^C"
  mnn[cpy]="edit"
  imm=ImageList.LoadImage(url+"copy.png")
  icc[cpy]=imm
  
  mnn["Cut"+tt+tt+"Delete"]="edit"
  imm=ImageList.LoadImage(url+"cut.png")
  icc["cut"+tt+tt+"delete"]=imm
  pst="Paste"+tt+tt+"^V"
  mnn[pst]="edit"
  imm=ImageList.LoadImage(url+"paste.png")
  icc[pst]=imm
  dpp="Duplicate"+tt+"^D"
  mnn[dpp]="edit"
  imm=ImageList.LoadImage(url+"copy.png")
  icc[dpp]=imm
  li=ImageList.LoadImage("e:\shpp.png")
  ll=LDImage.SplitImage(li 8 3)
  ' GraphicsWindow.DrawImage(ll[1][1] 30 30)
  mnn["--"]="edit"
  mnn["Grid"+tt+tt+"^G"]="edit"
  
  mnn["Draw"]="main
  lnn="Line"+tt+tt+"^L"
  mnn[lnn]="draw
  
  icc[lnn]=  ll[5][1]
  ddd="Curve"+tt+tt+"^U"
  mnn[ddd]="draw
  icc[ddd]=ll[8][1]
  
  ddd="Triangle"+tt+"^A"
  
  mnn[ddd]="draw
  icc[ddd]=ll[7][1]
  
  ddd="Rectangle"+tt+"^R"
  
  mnn[ddd]="draw
  icc[ddd]=ll[1][1]
  ddd="Ellipse"+tt+tt+"^E"
  fffc["elli"]="ell
  mnn[ddd]="draw
  icc[ddd]=ll[2][1]
  ddd="Circle"+tt+tt+"^I"
  mnn[ddd]="draw
  icc[ddd]=ll[3][1]
  ddd="Polygon"+tt+"^P"
  mnn[ddd]="draw
  icc[ddd]=ll[6][1]
  ddd="Reg.Polyg"+tt+"^Y"
  mnn[ddd]="draw
  icc[ddd]=ll[2][1]
  ddd="Text"+tt+tt+"^T"
  mnn[ddd]="draw
  icc[ddd]=ll[4][1]
  mnn["----"]="draw
  mnn["Shaded"]="draw
  mnn["Shape"]="main
  mnn["Star5"]="Shape
  icc["star5"]=ll[7][2]
  mnn["Star6"]="Shape
  icc["star6"]=ll[8][2]
  mnn["Arrow"]="Shape
  icc["arrow"]=ll[1][3]
  mnn["Baloon"]="Shape
  
  icc["baloon"]=ll[8][3]
  mnn["Image"]="Shape
  mnn["Sphere"]="Shape
  mnn["Cone"]="Shape
  mnn["Pyramid"]="Shape
  mnn["Cube"]="Shape
  mnn["Pipe"]="Shape
  
  mnn=LDText.Replace(mnn "^" "Ctrl+")
  icc=LDText.Replace(icc "^" "Ctrl+")
  
  LDControls.AddMenu(1600 20 mnn icc "")
  LDControls.MenuClicked=mnncl
  
  rmm=LDText.Split("Outline clr!Outline pen!Fill clr!Gradient!BgColor!BgImage!New Drawing!Shadow!Size_X!Size_Y!Unzoom!UnRot" "!")
  LDDialogs.AddRightClickMenu(rmm "")
  LDDialogs.RightClickMenu=rcc
EndSub

Sub rcc'-----------------------------rightclickmenu----------
  ll=LDDialogs.LastRightClickMenuItem
  If ll=2 Then
    pwidth=FCDialogs.AskForTextLine("Width:")
    LDShapes.PenWidth(lsh pwidth)
    
  ElseIf ll=7 Then
    ccd=LDDialogs.Confirm("Ok to clear all?" "Shapes")
    If ccd="Yes" Then
      rsst="true
    EndIf
    
  ElseIf ll=8 Then
    LDEffect.DropShadow(lsh "")
    LDList.Add(lss lsh+"/Shdw")
    ldrw()
    
  ElseIf ll=1 Then
    pcolor= LDDialogs.Colour()
    LDShapes.PenColour(lsh pcolor)
    LDList.Add(lss lsh+"/pclr:"+pcolor)
    ldrw()
    
  ElseIf ll=9 Then
    ss=FCDialogs.AskForTextLine("SizeX:")
    LDShapes.SetSize(lsh ss LDShapes.Height(lsh))
    
  ElseIf ll=10 Then
    ss=FCDialogs.AskForTextLine("SizeY:")
    LDShapes.SetSize(lsh LDShapes.Width(lsh) ss)
    
  ElseIf ll=11 Then
    zz[lsh]=1
    Shapes.Zoom(lsh 1 1)
    
  ElseIf ll=3 Then
    bcolor= LDDialogs.Colour()
    LDShapes.BrushColour(lsh bcolor)
        LDList.Add(lss lsh+"/bclr:"+bcolor)
    ldrw()
    
  ElseIf ll=4 Then
    cl[1]= LDDialogs.Colour()
    cl[2]= LDDialogs.Colour()
    LDGraphicsWindow.BackgroundBrush( LDShapes.BrushGradient(cl "DD"))
    
  ElseIf ll=5 Then
    GraphicsWindow.BackgroundColor= LDDialogs.Colour()
        LDList.Add(lss "Bg/clr:"+GraphicsWindow.BackgroundColor)
    ldrw()
    
  ElseIf ll=6 Then
    fff=LDDialogs.OpenFile("1=png;2=jpg;3=bmp" "e:/")
    ldGraphicsWindow.BackgroundImage(imagelist.LoadImage(fff))
        LDList.Add(lss "Bg/img:"+fff)
    ldrw()
  EndIf
  
EndSub

Sub mnncl'---------------------------menu click routine---------------------------
  ll=LDControls.LastMenuItem
  If Text.StartsWith(ll "Bal") Then
    tt=FCDialogs.AskForTextLine("txt:")
    GraphicsWindow.BrushColor=bcolor
    GraphicsWindow.PenColor=pcolor
    GraphicsWindow.PenWidth=pwidth
    ff=LDFigures.AddCallout(100 50 tt "Cloud" "x=0;y=1.25")
    LDShapes.SetShapeEvent(ff)
    zz[ff]=1
    Shapes.Move(ff 0 50)
    
  ElseIf  Text.StartsWith(ll "Open") Then
    cmd="opn"
    
  ElseIf  (ll= "Save") Then
    cmd="sav"
    
  ElseIf (ll="Star5") Then
    ff=LDShapes.AddStar(5 20 45)
    LDShapes.SetShapeEvent(ff)
    zz[ff]=1
    Shapes.Move(ff 0 50)
    
  ElseIf (ll="Star6") Then
    ff=LDShapes.AddStar(6 20 45)
    LDShapes.SetShapeEvent(ff)
    zz[ff]=1
    Shapes.Move(ff 0 50)
    
  ElseIf Text.StartsWith(ll "Ell") Then
    ff=Shapes.AddEllipse(100 50)
    LDShapes.SetShapeEvent(ff)
    zz[ff]=1
    Shapes.Move(ff 0 50)
    
  ElseIf Text.StartsWith(ll "Rect") Then
    ff=Shapes.AddRectangle(100 50)
    LDShapes.SetShapeEvent(ff)
    zz[ff]=1
    Shapes.Move(ff 0 50)
  EndIf
EndSub

Sub Parse_SVG  ' param buf - SVG buffer
  scale = 1
  iMin = nShapes + 1
  iMax = nShapes
  p = 1
  Parse_Header()
  Parse_Space()
  ' Parse_Defs()
  match="true
  
  While match
    Parse_Space()
    Parse_Rect()
    If match Then
      iMax = iMax + 1
      shape[iMax] = shp
    EndIf
    
    If Not[match] Then
      Parse_Ellipse()
      If match Then
        iMax = iMax + 1
        shape[iMax] = shp
      EndIf
    EndIf
    
    If Not[match] Then
      Parse_Polygon()
      If match Then
        iMax = iMax + 1
        shape[iMax] = shp
      EndIf
    EndIf
    
    If Not[match] Then
      Parse_Line()
      If match Then
        iMax = iMax + 1
        shape[iMax] = shp
      EndIf
    EndIf
  EndWhile
  nShapes = iMax
  Parse_Use()
EndSub

Sub Parse_Line
  match = "False"
  If Text.StartsWith(Text.GetSubTextToEnd(buf, p), LT + "line") Then
    param = "tag=line;"
    Parse_FindTag() ' p is updated
    Parse_GetAttrAndText()
    Parse_SetStyle()
    points = attr["x1"] + "," + attr["y1"] + " " + attr["x2"] + "," + attr["y2"]
    Parse_Points()
    shp = ""
    shp["func"] = "line"
    shp["x"] = x
    shp["y"] = y+p50
    shp["width"] = width
    shp["height"] = height
    shp["x1"] = px[1] - x
    shp["y1"] = py[1] - y
    shp["x2"] = px[2] - x
    shp["y2"] = py[2] - y
    shp["pw"] = pw
    shp["pc"] = pc
    match = "True"
  EndIf
EndSub

Sub Parse_Rect
  match = "False"
  If Text.StartsWith(Text.GetSubTextToEnd(buf, p), LT + "rect") Then
    param = "tag=rect;"
    Parse_FindTag() ' p is updated
    Parse_GetAttrAndText()
    x = attr["x"]
    y = attr["y"]
    width = attr["width"]
    height = attr["height"]
    Parse_SetStyle()
    Parse_Angle()
    shp = ""
    shp["func"] = "rect"
    shp["x"] = x - Math.Floor(pw / 2)
    shp["y"] = y - Math.Floor(pw / 2)+p50
    shp["width"] = width + pw
    shp["height"] = height + pw
    shp["angle"] = angle
    shp["pw"] = pw
    shp["pc"] = pc
    shp["bc"] = bc
    match = "True"
  EndIf
EndSub

Sub Parse_Polygon
  match = "False"
  If Text.StartsWith(Text.GetSubTextToEnd(buf, p), LT + "polygon") Then
    param = "tag=polygon;"
    Parse_FindTag() ' p is updated
    Parse_GetAttrAndText()
    points = attr["points"]
    Parse_Points()
    Parse_SetStyle()
    Parse_Angle()
    shp = ""
    shp["func"] = "tri"
    shp["x"] = x
    shp["y"] = y+p50
    shp["width"] = width
    shp["height"] = height
    shp["angle"] = angle
    shp["x1"] = px[1] - x
    shp["y1"] = py[1] - y
    shp["x2"] = px[2] - x
    shp["y2"] = py[2] - y
    shp["x3"] = px[3] - x
    shp["y3"] = py[3] - y
    shp["pw"] = pw
    shp["pc"] = pc
    shp["bc"] = bc
    match = "True"
  EndIf
EndSub

Sub Parse_Points
  len = Text.GetLength(points)
  px = ""
  py = ""
  nPoints = 1
  For pPoints = 1 To len
    c = Text.GetSubText(points, pPoints, 1)
    While (pPoints <= len) And Text.IsSubText(DIGIT, c)
      px[nPoints] = Text.Append(px[nPoints], c)
      pPoints = pPoints + 1
      c = Text.GetSubText(points, pPoints, 1)
    EndWhile
    If c = "," Then
      pPoints = pPoints + 1
      c = Text.GetSubText(points, pPoints, 1)
    EndIf
    While (pPoints <= len) And Text.IsSubText(DIGIT, c)
      py[nPoints] = Text.Append(py[nPoints], c)
      pPoints = pPoints + 1
      c = Text.GetSubText(points, pPoints, 1)
    EndWhile
    If nPoints = 1 Then
      xmin = px[1]
      ymin = py[1]
      xmax = px[1]
      ymax = py[1]
    Else
      If px[nPoints] < xmin Then
        xmin = px[nPoints]
      EndIf
      If py[nPoints] < ymin Then
        ymin = py[nPoints]
      EndIf
      If xmax < px[nPoints] Then
        xmax = px[nPoints]
      EndIf
      If ymax < py[nPoints] Then
        ymax = py[nPoints]
      EndIf
    EndIf
    If c = " " Then
      nPoints = nPoints + 1
    EndIf
  EndFor
  x = xmin
  y = ymin
  width = xmax - xmin
  height = ymax - ymin
EndSub

Sub Parse_Angle
  angle = ""
  If attr["transform"] <> "" Then
    pAngle = 8
    lAngle = Text.GetIndexOf(Text.GetSubTextToEnd(attr["transform"], pAngle), " ") - 1
    angle = Text.GetSubText(attr["transform"], pAngle, lAngle)
  EndIf
EndSub

Sub Parse_Ellipse
  
  match = "False"
  If Text.StartsWith(Text.GetSubTextToEnd(buf, p), LT + "ellipse") Then
    param = "tag=ellipse;"
    Parse_FindTag() ' p is updated
    Parse_GetAttrAndText()
    cx = attr["cx"]
    cy = attr["cy"]
    rx = attr["rx"]
    ry = attr["ry"]
    Parse_SetStyle()
    Parse_Angle()
    shp = ""
    shp["func"] = "ell"
    shp["x"] = cx - rx - Math.Floor(pw / 2)
    shp["y"] = cy - ry - Math.Floor(pw / 2)+p50
    shp["width"] = 2 * rx + pw
    shp["height"] = 2 * ry + pw
    shp["angle"] = angle
    shp["pw"] = pw
    shp["pc"] = pc
    shp["bc"] = bc
    match = "True"
  EndIf
EndSub

Sub Parse_FindTag
  pSave = p
  tag = ""
  findNext = "True"
  While findNext
    findNext = "False"        ' tag may be not found
    pTag = Text.GetIndexOf(Text.GetSubTextToEnd(buf, p), LT + param["tag"])
    If 0 < pTag Then
      lTag = Text.GetLength(param["tag"]) + 1
      pTag = p + pTag - 1
      len = Text.GetIndexOf(Text.GetSubTextToEnd(buf, pTag), "/" + param["tag"] + ">")
      If len = 0 Then
        lTag = 1
        len = Text.GetIndexOf(Text.GetSubTextToEnd(buf, pTag), "/>")
      EndIf
      If param["class"] = "" Then
        len = len + lTag
        tag = Text.GetSubText(buf, pTag, len)
        findNext = "False"    ' found the tag
      ElseIf 0 < len Then
        findNext = "True"     ' tag may have different class
        len = len + lTag
        attr = "class=" + qt + param["class"] + qt
        pAttr = pTag + lTag + 1
        lAttr = Text.GetLength(attr)
        If Text.GetSubText(buf, pAttr, lAttr) = attr Then
          tag = Text.GetSubText(buf, pTag, len)
          findNext = "False"  ' found the tag
        EndIf
      EndIf
      p = pTag + len
    EndIf
  EndWhile
  If tag = "" Then
    p = pSave
  EndIf
EndSub

Sub Parse_GetAttrAndText
  pTag = Text.GetIndexOf(tag, " ") + 1
  pEnd = Text.GetIndexOf(tag, ">")
  attr = ""
  While pTag <= pEnd
    Parse_SkipSpaceInTag()
    pEq = Text.GetIndexOf(Text.GetSubTextToEnd(tag, pTag), "=")
    If 0 < pEq Then
      pEq = pTag + pEq - 1
      If Text.GetSubText(tag, pEq + 1, 1) = qt Then
        pQ = Text.GetIndexOf(Text.GetSubTextToEnd(tag, pEq + 2), qt)
        If 0 < pQ Then
          pQ = pEq + 2 + pQ - 1
          attr[Text.GetSubText(tag, pTag, pEq - pTag)] = Text.GetSubText(tag, pEq + 2, pQ - pEq - 2)
          pTag = pQ + 2
        EndIf
      EndIf
    Else
      pTag = pEnd + 1
    EndIf
  EndWhile
  If pEnd + 1 < pTag Then
    pTag = pEnd + 1
  EndIf
  len = Text.GetLength(tag)
  txt = ""
  While pTag <= len
    pL = Text.GetIndexOf(Text.GetSubTextToEnd(tag, pTag), LT)
    If pL = 0 Then
      txt = Text.Append(txt, Text.GetSubTextToEnd(tag, pTag))
      pTag = len + 1
    Else
      pL = pTag + pL - 1
      txt = Text.Append(txt, Text.GetSubText(tag, pTag, pL - pTag))
      pR = Text.GetIndexOf(Text.GetSubTextToEnd(tag, pTag), ">")
      If 0 < pR Then
        pTag = pTag + pR
      Else
        pTag = len + 1
      EndIf
    EndIf
  EndWhile
EndSub

Sub Parse_GetStyleAttr
  pKw = Text.GetIndexOf(Text.GetSubTextToEnd(attr["style"], pStyle), kw)
  If pKw = 0 Then
    value = ""
  Else
    pValue = pStyle + pKw + Text.GetLength(kw)
    pColon = Text.GetIndexOf(Text.GetSubTextToEnd(attr["style"], pValue), ";")
    If pColon = 0 Then
      pColon = Text.GetLength(kw) + 1
    EndIf
    value = Text.GetSubText(attr["style"], pValue, pColon - 1)
  EndIf
EndSub

Sub Parse_Header
  If Text.StartsWith(Text.GetSubTextToEnd(buf, p), LT + "svg") Then
    len = Text.GetIndexOf(Text.GetSubTextToEnd(buf, p), ">")
    If 0 < len Then
      tag = Text.GetSubText(buf, p, len)
      Parse_GetAttrAndText()
      wi = attr["viewbox"]
      aaa=ldtext.Split(wi " ")
      width=aaa[3]-aaa[1]
      height = aaa[4]-aaa[2]
      GraphicsWindow.ShowMessage(width+":"+height "svg")
      p = p + len
      match = "True"
    EndIf
  EndIf
EndSub

Sub Parse_Space
  isSpace = "True"
  While isSpace
    char = Text.GetSubText(buf, p, 1)
    If Text.IsSubText(" " + CR + LF, char) Then
      p = p + 1
    Else
      isSpace = "False"
    EndIf
  EndWhile
EndSub

Sub Parse_SetStyle
  pStyle = 1
  kw = "fill"
  Parse_GetStyleAttr()
  bc = Text.ConvertToUpperCase(value)
  kw = "stroke"
  Parse_GetStyleAttr()
  pc = Text.ConvertToUpperCase(value)
  kw = "stroke-width"
  Parse_GetStyleAttr()
  pw = value
EndSub

Sub Parse_Use
  param = "tag=use;"
  Parse_FindTag() ' p is updated
  Parse_GetAttrAndText()
  shX = 0
  shY = 0
  For i = iMin To iMax
    shp = shape[i]
    shp["x"] = shp["x"] + attr["x"]
    shp["y"] = shp["y"] + attr["y"]
    If shp["func"] = "tri" And (shp["y2"] < shp["y1"]) Then
      shp["y2"] = shp["y1"]
      shp["y1"] = shp["y3"]
      shp["y3"] = shp["y2"]
      shp["angle"] = shp["angle"] + 180
      If 360 <= shp["angle"] Then
        shp["angle"] = shp["angle"] - 360
      EndIf
    EndIf
    If shp["pc"] <> "" Then
      color = shp["pc"]
      '   CS_AddColorToPalette()
    EndIf
    If shp["bc"] <> "" Then
      color = shp["bc"]
      '  CS_AddColorToPalette()
    EndIf
    shape[i] = shp
    CalcDetectBorder()
  EndFor
EndSub

Sub Parse_SkipSpaceInTag
  isSpace = "True"
  While isSpace
    char = Text.GetSubText(tag, pTag, 1)
    If Text.IsSubText(" " + CR + LF, char) Then
      pTag = pTag + 1
    Else
      isSpace = "False"
    EndIf
  EndWhile
EndSub

Sub CalcDetectBorder
  ' param i - index of shapes
  shp = shape[i]
  If shp["func"] = "line" Then           ' line
    x = shp["x2"] - shp["x1"]
    y = shp["y2"] - shp["y1"]
    rr=LDMath.Convert2Radial(shp["x1"] shp["y1"] shp["x2"] shp["y2"])
    aa=rr[2]
    If 180 <= a Then
      a = a - 180
    EndIf
    shp["angle"] = a
    
    len = rr[1]
    shp["_x0"] = Math.Floor(cx - len / 2)
    shp["_x1"] = Math.Floor(cx + len / 2)
    shp["_y0"] = cy - 4
    shp["_y1"] = cy + 4
    
  Else                                   ' rectangle, ellipse or triangle
    If shp["func"] = "tri" Then          ' triangle
      shp["width"] = shp["x3"]
      shp["height"] = shp["y2"]
    EndIf
    shp["_x0"] = shp["x"]
    shp["_y0"] = shp["y"]
    shp["_x1"] = shp["x"] + shp["width"]
    shp["_y1"] = shp["y"] + shp["height"]
  EndIf
  shape[i] = shp
EndSub

sub fxxn
  qa=args[1]
  qb=args[2]
  qc=Math.Floor(qa)
  qd=4-Text.GetLength(qc)
  qe=text.GetSubText("____" 1 qd)
  return=qe+LDMath.FixDecimal(qa qb)  
EndSub


Sub Shapes_Add
  Shapes_CalcWidthAndHeight()
  s = scale
  ttt=Text.GetCharacter(9)
    For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    x = shp["x"]
    y = shp["y"]
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
          LDList.Add(lss "Rct"+ttt+"/wh:"+ldcall.function2("fxxn"  shp["width"]*s 2)+":"+ldcall.function2("fxxn" shp["height"]*s 2)+ttt+"/xy:"+ldcall.function2("fxxn" shX + x * s 2)+":"+ldcall.function2("fxxn"  shY + y * s 2)+ttt+ttt+"|"+shp["obj"] )
  
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
              LDList.Add(lss "Ell"+ttt+"/wh:"+ldcall.function2("fxxn"  shp["width"]*s 2)+":"+ldcall.function2("fxxn" shp["height"]*s 2)+ttt+"/xy:"+ldcall.function2("fxxn" shX + x * s 2)+":"+ldcall.function2("fxxn"  shY + y * s 2)+ttt+ttt+"|"+shp["obj"] )

    ElseIf shp["func"] = "bll" Then
      shp["obj"] = LDFigures.AddCallout(shp["width"]*s, shp["height"]*s "" "Cloud" "x=0;y=1.25")
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      
      fs = shp["fs"]
      
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    ldShapes.SetShapeEvent( shp["obj"])

    shp["rx"] = x
    shp["ry"] = y
    
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      'Shapes.Rotate(shp["obj"], shp["angle"])
      ccx=LDShapes.GetLeft(shp["obj"])+LDShapes.Width(shp["obj"])/2
      ccy=LDShapes.GetTop(shp["obj"])+LDShapes.Height(shp["obj"])/2
      LDShapes.RotateAbout(shp["obj"],ccx ccy shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
    ldrw()
EndSub

Sub Shapes_CalcRotatePos
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  rr=LDMath.Convert2Radial( param["cx"] param["cy"] _cx _cy)
  a=rr[2]
  r=rr[1]
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub

Sub Shapes_CalcWidthAndHeight
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Move
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    
    _x = shp["rx"]
    _y = shp["ry"]
    
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub

Sub Shapes_Remove
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub

Sub Shapes_Rotate
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  
EndSub

Sub GenerateSVG
  sp[4] = "    "
  sp[6] = "      "
  sp[8] = "        "
  buf =LDText.Replace("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1000 1000'>" "'" wq)+cr+lf
  
  If nShapes > 0 Then
    shp = shape[1]
    xmin = shp["x"]
    ymin = shp["y"]
    xmax = shp["x"]
    ymax = shp["y"]
  EndIf
  For i = 2 To nShapes
    shp = shape[i]
    If shp["x"] < xmin Then
      xmin = shp["x"]
    EndIf
    If shp["y"] < ymin Then
      ymin = shp["y"]
    EndIf
    If xmax < shp["x"] Then
      xmax = shp["x"]
    EndIf
    If ymax < shp["y"] Then
      ymax = shp["y"]
    EndIf
  EndFor
  For i = 1 To nShapes
    shp = shape[i]
    If shp["func"] = "rect" Then
      buf = buf + sp[6] + LT + "rect "
      buf = buf + "x=" + WQ + Math.Floor(shp["x"] + shp["pw"] / 2 - xmin) + WQ + " "
      buf = buf + "y=" + WQ + Math.Floor(shp["y"] + shp["pw"] / 2 - ymin) + WQ + " "
      buf = buf + "width=" + WQ + (shp["width"] - shp["pw"]) + WQ + " "
      buf = buf + "height=" + WQ + (shp["height"] - shp["pw"]) + WQ + " "
      If shp["angle"] <> 0 And shp["angle"] <> "" Then
        buf = buf + CR + LF + sp[8]
        buf = buf + "transform=" + WQ + "rotate(" + shp["angle"] + " "
        buf = buf + Math.Floor(shp["width"] / 2 + shp["x"] - xmin) + " "
        buf = buf + Math.Floor(shp["height"] / 2 + shp["y"] - ymin) + ")" + WQ + " "
      EndIf
      buf = buf + CR + LF + sp[8]
      buf = buf + "style=" + WQ + "fill:" + Text.ConvertToLowerCase(shp["bc"]) + ";"
    ElseIf shp["func"] = "ell" Then
      buf = buf + sp[6] + LT + "ellipse "
      cx = Math.Floor(shp["width"] / 2 + shp["x"] - xmin)
      cy = Math.Floor(shp["height"] / 2 + shp["y"] - ymin)
      rx = Math.Floor((shp["width"] - shp["pw"]) / 2)
      ry = Math.Floor((shp["height"] - shp["pw"]) / 2)
      buf = buf + "cx=" + WQ + cx + WQ + " "
      buf = buf + "cy=" + WQ + cy + WQ + " "
      buf = buf + "rx=" + WQ + rx + WQ + " "
      buf = buf + "ry=" + WQ + ry + WQ + " "
      If shp["angle"] <> 0 And shp["angle"] <> "" Then
        buf = buf + CR + LF + sp[8]
        buf = buf + "transform=" + WQ + "rotate(" + shp["angle"] + " "
        buf = buf + cx + " "
        buf = buf + cy + ")" + WQ + " "
      EndIf
      buf = buf + CR + LF + sp[8]
      buf = buf + "style=" + WQ + "fill:" + Text.ConvertToLowerCase(shp["bc"]) + ";"
    ElseIf shp["func"] = "tri" Then
      buf = buf + sp[6] + LT + "polygon points=" + WQ
      buf = buf + (shp["x1"] + shp["x"] - xmin) + ","
      buf = buf + (shp["y1"] + shp["y"] - ymin) + " "
      buf = buf + (shp["x2"] + shp["x"] - xmin) + ","
      buf = buf + (shp["y2"] + shp["y"] - ymin) + " "
      buf = buf + (shp["x3"] + shp["x"] - xmin) + ","
      buf = buf + (shp["y3"] + shp["y"] - ymin) + WQ + " "
      If shp["angle"] <> 0 And shp["angle"] <> "" Then
        buf = buf + CR + LF + sp[8]
        buf = buf + "transform=" + WQ + "rotate(" + shp["angle"] + " "
        buf = buf + (shp["x1"] + shp["x"] - xmin) + " "
        buf = buf + Math.Floor((shp["y2"] - shp["y1"]) / 2 + shp["y"] - ymin) + ")" + WQ + " "
      EndIf
      buf = buf + CR + LF + sp[8]
      buf = buf + "style=" + WQ + "fill:" + Text.ConvertToLowerCase(shp["bc"]) + ";"
    ElseIf shp["func"] = "line" Then
      buf = buf + sp[6] + LT + "line "
      buf = buf + "x1=" + WQ + (shp["x1"] + shp["x"] - xmin) + WQ + " "
      buf = buf + "y1=" + WQ + (shp["y1"] + shp["y"] - ymin) + WQ + " "
      buf = buf + "x2=" + WQ + (shp["x2"] + shp["x"] - xmin) + WQ + " "
      buf = buf + "y2=" + WQ + (shp["y2"] + shp["y"] - ymin) + WQ + " "
      buf = buf + CR + LF + sp[8]
      buf = buf + "style=" + WQ
    EndIf
    If shp["pw"] > 0 Then
      buf = buf + "stroke:" + Text.ConvertToLowerCase(shp["pc"]) + ";"
    EndIf
    buf = buf + "stroke-width:" + shp["pw"] + WQ + "/>" + CR + LF
  EndFor
  
  buf = buf + cr+lf+ "</svg>"
EndSub
