' SmallBasic Version 1.2
' Program: FractalRecursionTree
' Changelog: 
' Author: Tryhest
' Website: https://social.msdn.microsoft.com/Forums/en-US/52b66e69-98db-444e-902a-50d838405f49/small-basic-graphic-and-animations-and-more-4
' ImportURL: http://smallbasic.com/program/?JPT045-0
' Extension: LitDev
' Comment: http://www.codeproject.com/Articles/17115/DotNet-Real-Tree
'  http://www.codeproject.com/Articles/33225/Real-Tree
' Variables: 
' ToDo: 
' ================================================================================
args = 0
p = 0

'GraphicsWindow.Left = 0
'GraphicsWindow.Top = 0
'GraphicsWindow.Width = Desktop.Width ' 1500
'GraphicsWindow.Height = Desktop.Height ' 800
GraphicsWindow.BackgroundColor = "Teal"
GraphicsWindow.Title = "Tree"
GraphicsWindow.PenWidth = 1
GraphicsWindow.PenColor = "Lime"

'LDGraphicsWindow.Style = 0
LDGraphicsWindow.State = 2

GraphicsWindow.KeyDown = OnKeyDown

tx = 600
ty = 600
tang = -20
LDCall.Function("Tree", 330)

tx = 600
ty = 600
tang = 20
LDCall.Function("Tree", 330)

tx = 600
ty = 600
tang = 40
LDCall.Function("Tree", 300)


' //////////  FUNCTION  \\\\\\\\\\
Sub Tree ' (size)
  p = p + 1
  size[p] = args[1]
  
  If size[p] < 5 Then
    dd = size
    tmov()
    dd = size
    tmov()
    
  Else
    dd = size[p] / 3
    tmov()
    tang = tang - 30
    LDCall.Function("Tree", size[p] * 2 / 3)
    p = p - 1
    tang = tang + 30
    
    dd = size[p] / 6
    tmov()
    tang = tang + 25
    LDCall.Function("Tree", size[p] / 2)
    p = p - 1
    tang = tang - 25
    
    dd = size[p] / 3
    tmov()
    tang = tang + 25
    LDCall.Function("Tree", size[p] / 2)
    p = p - 1
    tang = tang - 25
    
    dd = size[p] / 6
    tmov()
    dd = -size[p]
    tmov()
  EndIf
EndSub

' //////////  SUB  \\\\\\\\\\
Sub tmov
  mm = LDMath.Convert2Cartesian(tx,ty, dd,tang - 90)
  GraphicsWindow.DrawLine(tx,ty, mm[1],mm[2])
  tx = mm[1]
  ty = mm[2]
EndSub

' //////////  EVENT  \\\\\\\\\\
Sub OnKeyDown
  If GraphicsWindow.LastKey = "Escape" Then
    Program.End()
  EndIf  
EndSub
  
