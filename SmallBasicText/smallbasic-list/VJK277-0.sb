GraphicsWindow.PenWidth = 5
GraphicsWindow.PenColor = "#88FF8C00"
GraphicsWindow.BrushColor = "#99FF4500"

GW = 600
Drop_Amount = 20

GraphicsWindow.Width = GW
GraphicsWindow.Height = GW

For i = 1 To Drop_Amount
  Drop_Radius[i] = 15
  Drop_X[i] = Math.GetRandomNumber(GW)-30
  Drop_Y[i] = Math.GetRandomNumber(GW)-30
  Drop[i] = Shapes.AddEllipse(Drop_Radius[i]*2,Drop_Radius[i]*2)
endfor

While "True"
  TimeStart = Clock.ElapsedMilliseconds
  For i = 1 To Drop_Amount 
    If Drop_Radius[i] > 0 Then
      Distance2 = math.SquareRoot(math.Power(Drop_X[i]-GraphicsWindow.MouseX,2)+math.Power(Drop_Y[i]-GraphicsWindow.MouseY,2))
      If Distance2 <= Drop_Radius[i] then
        TextWindow.WriteLine(Math.GetRandomNumber(999))
      endif
      Shapes.Zoom(Drop[i],Drop_Radius[i]/12,Drop_Radius[i]/12) '/15
      Shapes.Move(Drop[i],Drop_X[i]-15,Drop_Y[i]-15) 'original radius offset required here
      CheckDistance()
    endif
  endfor
  PerfectDelay = 20-(Clock.ElapsedMilliseconds-TimeStart)
  If PerfectDelay > 0 Then
    Program.Delay(PerfectDelay)
  EndIf
endwhile

Sub CheckDistance
  For b = i+1 to Drop_Amount 'Only consider each atom pair once
    If Drop_Radius[b] > 0 Then 'Only consider if atom i and atom b are still present
      'Distance = math.SquareRoot(math.Power(Drop_X[i]-Drop_X[b],2)+math.Power(Drop_Y[i]-Drop_Y[b],2))
      Distance = math.SquareRoot((Drop_X[i]-Drop_X[b])*(Drop_X[i]-Drop_X[b])+(Drop_Y[i]-Drop_Y[b])*(Drop_Y[i]-Drop_Y[b])) 'More efficient I thin
      If Distance <= (Drop_Radius[b] + Drop_Radius[i]) Then
        'Always delete atom b and resize atom i
        'Resize atom i
        If Drop_Radius[b] < Drop_Radius[i] Then
          Drop_Radius[i] = Drop_Radius[i] + Drop_Radius[b]/3
        Else
          Drop_Radius[i] = Drop_Radius[b] + Drop_Radius[i]/3
        endif
        'Set position of Atom i, depending on the size weighted mean position - this will give smoother joining
        Drop_X[i] = (Drop_Radius[i]*Drop_X[i]+Drop_Radius[b]*Drop_X[b])/(Drop_Radius[i] + Drop_Radius[b])
        Drop_Y[i] = (Drop_Radius[i]*Drop_Y[i]+Drop_Radius[b]*Drop_Y[b])/(Drop_Radius[i] + Drop_Radius[b])
        'Delete atom b
        Drop_X[b] = -1000
        Drop_Y[b] = -1000
        Drop_Radius[b] = 0
        Shapes.Remove(Drop[b])
      Else 'No other condition need here (either collided or not collided)
        'Calculate velocity change, inversely proportional to distance and proportional to attracting atom radius
        velX = (Drop_X[i] - Drop_X[b]) / Distance / Distance * 2
        velY = (Drop_Y[i] - Drop_Y[b]) / Distance / Distance * 2
        Drop_X[b] = Drop_X[b] + velX * Drop_Radius[i]
        Drop_Y[b] = Drop_Y[b] + velY * Drop_Radius[i]
        Drop_X[i] = Drop_X[i] - velX * Drop_Radius[b]
        Drop_Y[i] = Drop_Y[i] - velY * Drop_Radius[b]
      endif
    endif
  endfor
endsub

