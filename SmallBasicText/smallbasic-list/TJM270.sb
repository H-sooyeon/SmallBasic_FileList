bx=100
by=100
bw=600
bh=400
bzy=200
bzx=150
GraphicsWindow.Left =10
GraphicsWindow.Top =10
GraphicsWindow.Title ="3Dobjshow
LDUtilities.ShowNoShapeErrors="False
LDUtilities.ShowErrors="False
GraphicsWindow.Width=900
GraphicsWindow.Height=900
wh=900
e=ESLMaths.e
GraphicsWindow.BackgroundColor="Gray
args=0
GraphicsWindow.FillEllipse(1,1,2,2)
LDUtilities.ShowNoShapeErrors="False
bx=0.1*bw
by=0.1*bh
bw=bw-2*bx
bh=bh-2*by
zff=0

x1=-2
x2=2
y1=-2
y2=2
z1=-1
z2=1
sx=0.4
sy=0.4
sz=0.2
ebene=0   ' ! Projektionsebene (y-Koordinate)
prozy=-4  '! Projektionszentrum
prozx=0
prozz=0
stx=0.8   '      ! Beobachterstandpunkt
sty=-0.9
stz=0.8
bbx=-1    '     ! Beobachterblickrichtung
bby=1
bbz=-1
nwink=0   '    ! Neigungswinkel
If bby<0 then 
  bb=1
else
  bb=0
endif

zwink=MathPlus.SiGN(bby)*MathPlus.SiGN(bbx)*math.ArcTaN(math.ABS(bbx/bby))+math.PI*bb
xwink=-MathPlus.SiGN(bbz)*math.ArcTaN(math.ABS(bbz/Math.SquareRoot (bbz*bbz+bby*bby)))

'GraphicsWindow.Mousemove=mmw
bd=1
GraphicsWindow.MouseDown=mdd
mmwq()

Sub mdd
  bd=bd+2
endsub


Sub mmwq
  hh=0
  d=bd
  For zf=1 To 2.2 Step 0.3
    FOR y=3 TO -3 STEP -0.8
      hh=hh+5
      yy=y
      FOR x=-1 TO 2.2 STEP 0.8
        ' x=GraphicsWindow.MouseX /300
        ' y=(wh-GraphicsWindow.MouseY) /100
        z=zf'ldcall.Function2 ("f",x,y)
        zz=zf'ldcall.Function2 ("f",x+sx,y)
        zzz=zf-0.2'ldcall.Function2 ("f",x,y+sy)
        zzzz=zf-0.2'ldcall.Function2 ("f",x+sx,y+sy)
        pU[1][1]=ldcall.Function3 ("kx",x,y,z)+bzx
        pU[1][2]=ldcall.Function3 ("ky",x,y,z)+bzy
        pU[2][1]=ldcall.Function3 ("kx",x+sx,y,zz)+bzx
        pU[2][2]=ldcall.Function3 ("ky",x+sx,y,zz)+bzy
        pU[3][1]=ldcall.Function3 ("kx",x+sx,y,zzzz)+bzx
        pU[3][2]=ldcall.Function3 ("ky",x+sx,y,zzzz)+bzy
        pU[4][1]=ldcall.Function3 ("kx",x,y,zzz)+bzx
        pU[4][2]=ldcall.Function3 ("ky",x,y,zzz)+bzy
        
        color=LDColours.HSLtoRGB(hh,0.8,0.6)
        'Shapes.Remove (ss[bd])
        ss[d]=ldshapes.AddPolygon (pu)
        
        LDShapes.BrushColour (ss[d],color)
        LDShapes.PenWidth (ss[d],0)
        ' LDShapes.ZIndex (ss[d],200+d+(z-1)*5000)
        fss[d]=LDFastShapes.ShapeIndex(ss[d]) 
        d=d+1
        pU[1][1]=ldcall.Function3 ("kx",x,y,zz)+bzx
        pU[1][2]=ldcall.Function3 ("ky",x,y,zz)+bzy
        pU[2][1]=ldcall.Function3 ("kx",x+sx,y,zz)+bzx
        pU[2][2]=ldcall.Function3 ("ky",x+sx,y,zz)+bzy
        pU[3][1]=ldcall.Function3 ("kx",x+sx,y+sy,zz)+bzx
        pU[3][2]=ldcall.Function3 ("ky",x+sx,y+sy,zz)+bzy
        pU[4][1]=ldcall.Function3 ("kx",x,y+sy,zz)+bzx
        pU[4][2]=ldcall.Function3 ("ky",x,y+sy,zz)+bzy
        color=LDColours.HSLtoRGB(hh,0.8,0.4+(zf-1)/2)
        ' Shapes.Remove (ss[bd+1])
        ss[d]=ldshapes.AddPolygon (pu)
        LDShapes.BrushColour (ss[d],color)
        LDShapes.PenWidth (ss[d],0)
        LDShapes.SetShapeEvent (ss[d])
        ' LDShapes.ZIndex (ss[d],200-d+(z-1)*5000)
        fss[d]=LDFastShapes.ShapeIndex(ss[d]) 
        
        d=d+1
        pU[1][1]=ldcall.Function3 ("kx",x+sx,y,zz)+bzx
        pU[1][2]=ldcall.Function3 ("ky",x+sx,y,zz)+bzy
        pU[2][1]=ldcall.Function3 ("kx",x+sx,y,zzz)+bzx
        pU[2][2]=ldcall.Function3 ("ky",x+sx,y,zzz)+bzy
        pU[3][1]=ldcall.Function3 ("kx",x+sx,y+sy,zzz)+bzx
        pU[3][2]=ldcall.Function3 ("ky",x+sx,y+sy,zzz)+bzy
        pU[4][1]=ldcall.Function3 ("kx",x+sx,y+sy,zz)+bzx
        pU[4][2]=ldcall.Function3 ("ky",x+sx,y+sy,zz)+bzy
        color=LDColours.HSLtoRGB(hh,0.4,0.2+(zf-1)/2)
        '   Shapes.Remove (ss[bd+1])
        ss[d]=ldshapes.AddPolygon (pu)
        
        LDShapes.BrushColour (ss[d],color)
        LDShapes.PenWidth (ss[d],0)
        fss[d]=LDFastShapes.ShapeIndex(ss[d]) 
        d=d+1
      endfor'
    endfor
  EndFor 
EndSub 
LDShapes.ShapeEvent =seew
LDEvents.MouseWheel=mww


Sub seew
  lee= LDShapes.LastEventShape 
  let= LDShapes.LastEventType 
  If let="MouseDown" Then
    If LDShapes.GetOpacity (lee)>50 then
      LDShapes.BrushColour (lee,"red")
    EndIf 
  endif
EndSub 

Sub mww
  zff=zff+ LDEvents.LastMouseWheelDelta *9
  For x=1 To d-1-zff
    ' ldfastShapes.Zoom (fss[x],zf,zf)
    ' LDFastShapes.Rotate (fss[x],zf)
    LDFastShapes.SetOpacity (fss[x],100)
   LDFastShapes.ShowShape (fss[x]) 
  EndFor 
  For x=d-1-zff To d-1
    ' ldfastShapes.Zoom (fss[x],zf,zf)
    ' LDFastShapes.Rotate (fss[x],zf)
    If FCKeyboard.IsControlPressed Then
      LDFastShapes.HideShape  (fss[x])  
    else
      LDFastShapes.SetOpacity (fss[x],10)
    endif 
  EndFor 
  
  LDFastShapes.Update ()
EndSub 


sub f '(x,y)=
  ax=args[1]
  ay=args[2]
  ret=math.Log (math.Abs(math.sin(ax*ay)*math.cos(ay)))
  
  If  ret<-3 Then 
    ' TextWindow.WriteLine (ret)
    return=0
  Else 
    return=ret
  EndIf 
endsub

sub kx
  ax=args[1]
  ay=args[2]
  az=args[3]
  lx=ax-stx
  ly=ay-sty
  lz=az-stz
  xx=lx
  lx=math.COS(zwink)*lx-math.SIN(zwink)*ly
  ly=math.SIN(zwink)*xx+math.COS(zwink)*ly
  xx=lz
  lz=math.COS(xwink)*lz+math.SIN(xwink)*ly
  ly=-math.SIN(xwink)*xx+math.COS(xwink)*ly
  lx=math.COS(nwink)*lx+math.SIN(nwink)*lz
  px=(lx-prozx)*(ebene-prozy)/(ly-prozy)
  RETURN=( bx+bw/2+px*bw/(x2-x1))
ENDsub 

sub ky
  ax=args[1]
  ay=args[2]
  az=args[3]
  lx=ax-stx
  ly=ay-sty
  lz=az-stz
  xx=lx
  lx=math.COS(zwink)*lx-math.SIN(zwink)*ly
  ly=math.SIN(zwink)*xx+math.COS(zwink)*ly
  xx=lz
  lz=math.COS(xwink)*lz+math.SIN(xwink)*ly
  ly=-math.SIN(xwink)*xx+math.COS(xwink)*ly
  xx=lx
  lz=-math.SIN(nwink)*xx+math.COS(nwink)*lz
  py=(lz-prozz)*(ebene-prozy)/(ly-prozy)
  RETURN= ( by+bh/2-py*bh/(z2-z1))
ENDsub
