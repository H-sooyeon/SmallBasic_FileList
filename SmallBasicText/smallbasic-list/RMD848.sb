ballspeed  = 10
removecount = 0
linelength = 0
roundnumber = 1
shots = 0
par = 1
totalscore = 0
obstacleplaced = "false"
numberofobstacles = 0
ballbouncedleft = "true"
ballbounceddown = "true"
ballbouncedup = "true"
ballbouncedright = "true"
lastballdirectx = ""
lastballdirecty = ""
GraphicsWindow.BackgroundColor = "lightBlue"
GraphicsWindow.BrushColor = "Green"
GraphicsWindow.Title="MiniGolf"
button = Controls.AddButton("Restart Hole", 405,0)
Controls.ButtonClicked = buttonclicked
round[roundnumber] = Shapes.AddRectangle(200, 400)
roundheight = 400
roundwidth = 200
Shapes.Move(round[roundnumber], 200, 20)
GraphicsWindow.BrushColor = "White"
ball = Shapes.AddEllipse(20,20)
ballstartx = 290
ballstarty = 390
Shapes.Move(ball, ballstartx, ballstarty)
GraphicsWindow.BrushColor = "Black"
hole = Shapes.AddEllipse(25,25)
Shapes.Move(hole, 290, 60)
GraphicsWindow.Mousedown = mousedown
GraphicsWindow.MouseUp = mouseup
textbox = Controls.AddTextBox(0,0)
textboxr = Controls.AddTextBox(0,20)
textboxs = Controls.AddTextBox(0,40)
textboxp = Controls.AddTextBox(0,60)
textboxtot = Controls.AddTextBox(0,80)
Controls.SetTextBoxText(textbox, "Power: " + linelength)
Controls.SetTextBoxText(textboxs, "Shots: " + shots)
Controls.SetTextBoxText(textboxp, "Par: " + par)
Controls.SetTextBoxText(textboxr, "Hole Number: " + roundnumber)
Controls.SetTextBoxText(textboxtot, "Total Score: " + totalscore)
GraphicsWindow.ShowMessage("Welcome to MiniGolf! In this fun game your goal is to get the ball in the hole in as few shots as possible! By clicking on a location on the screen you will hit your ball there! The further you click from the ball, the more power you will use! Watch out for obstacles! You can bounce off of obstacles and the border! How much power you use will determine how much you bounce! You can restart each hole if you want! Have Fun!", "MiniGolf")
loop:
moveball()
Goto loop

Sub checkball
  roundtopborder = Shapes.GetTop(round[roundnumber])
  roundbottomborder = Shapes.GetTop(round[roundnumber]) + roundheight
  roundleftborder = Shapes.Getleft(round[roundnumber])
  roundrightborder = Shapes.Getleft(round[roundnumber]) + roundwidth
  balltopborder = Shapes.GetTop(ball)
  ballbottomborder = Shapes.GetTop(ball) + 20
  ballleftborder = Shapes.Getleft(ball)
  ballrightborder = Shapes.Getleft(ball) + 20
  ballmiddlex = Shapes.Getleft(ball) + 10
  ballmiddley = Shapes.Gettop(ball) + 10
  holetopborder = Shapes.GetTop(hole)
  holebottomborder = Shapes.GetTop(hole) + 25
  holeleftborder = Shapes.Getleft(hole)
  holerightborder = Shapes.Getleft(hole) + 25
  If (ballleftborder = roundleftborder) Or (ballleftborder < roundleftborder) then
    ballbouncedright = "false"  
       ballmoved = "true"  
       bounceright()
  endif
  If (ballrightborder = roundrightborder) Or (ballrightborder > roundrightborder) then
    ballbouncedleft = "false"  
       ballmoved = "true"  
       bounceleft()
  endif
  If (balltopborder = roundtopborder) Or (balltopborder < roundtopborder) then
    ballbounceddown = "false"  
       ballmoved = "true"  
       bouncedown()
  endif
 ��If (ballbottomborder = roundbottomborder) Or (ballbottomborder > roundbottomborder) then
    ballbouncedup = "false"  
       ballmoved = "true"  
       bounceup()
  endif
  If (ballmiddlex > holeleftborder) And (ballmiddlex < holerightborder) And (ballmiddley > holetopborder) And (ballmiddley < holebottomborder)  then
    Shapes.Remove(ball)
    Shapes.Remove(round[roundnumber])
    Shapes.Remove(hole)
    For nmbr = 0 To 10
      Shapes.Remove(obstacle[nmbr])
    EndFor
    roundnumber = roundnumber + 1
    score = shots - par
    GraphicsWindow.ShowMessage("Congratulations! You scored a " + score + " this round!", "Congratulations!")
    Program.Delay(500)
    totalscore = totalscore + score
    Controls.SetTextBoxText(textboxtot, "Total Score: " + totalscore)
    if roundnumber = 2 Then
      newround2()
    EndIf
    If roundnumber = 3 Then
      newround3()
    endif
    If roundnumber = 4 Then
      newround4()
    endif
    If roundnumber = 5 Then
      newround5()
    endif
    If roundnumber = 6 Then
      newround6()
    endif
    If roundnumber = 7 Then
      newround7()
    endif
    If roundnumber = 8 Then
      newround8()
    endif
    If roundnumber = 9 Then
      newround9()
    endif
    If roundnumber = 10 Then
      GraphicsWindow.ShowMessage("Congratulations! You scored " + totalscore + " this game!", "Congratulations!")
      Program.End()
    endif
  EndIf

  If obstacleplaced = "true" then
    For rn = 0 to numberofobstacles
      obstacleleft = Shapes.GetLeft(obstacle[rn])
      obstacleright = Shapes.GetLeft(obstacle[rn]) + obstaclewidth
      obstacletop = Shapes.Gettop(obstacle[rn])
      obstaclebottom = Shapes.Gettop(obstacle[rn]) + obstacleheight

      If (ballrightborder = obstacleleft) And (balltopborder > obstacletop) And (ballbottomborder < obstaclebottom) and (ballleftborder < obstacleleft) or (ballrightborder > obstacleleft) And (balltopborder > obstacletop) And (ballbottomborder < obstaclebottom) and (ballleftborder < obstacleleft) Then
      ballbouncedleft = "false" 
       ballmoved = "true" 
       bounceleft()
      endif
      If (ballrightborder = obstacleleft) And (balltopborder < obstaclebottom) And (balltopborder > obstacletop) and (ballleftborder < obstacleleft) And (ballbottomborder > obstacletop) or (ballrightborder > obstacleleft) And (balltopborder < obstaclebottom) And (balltopborder < obstacletop) and (ballleftborder < obstacleleft) And (ballbottomborder > obstacletop) Then 
        ballbouncedleft = "false" 
        ballmoved = "true" 
        bounceleft()
        endif
     If (ballrightborder = obstacleleft) And (ballbottomborder > obstaclebottom) And (balltopborder < obstaclebottom) and (ballleftborder < obstacleleft) or (ballrightborder > obstacleleft) And (ballbottomborder > obstaclebottom) And (balltopborder < obstaclebottom) and (ballleftborder < obstacleleft) Then
     If (lastballdirectx = "right") And (lastballdirecty <> "up") then
      ballbouncedleft = "false"  
       ballmoved = "true"  
       bounceleft()
       endif
      endif
      If (balltopborder = obstaclebottom) And (ballrightborder < obstacleright) And (ballleftborder > obstacleleft) And (ballbottomborder > obstaclebottom) or (balltopborder < obstaclebottom) And (ballrightborder < obstacleright) And (ballleftborder > obstacleleft) And (ballbottomborder > obstaclebottom) then
        ballbounceddown = "false"  
       ballmoved = "true"  
       bouncedown()
      endif
      If (balltopborder = obstaclebottom) And (ballleftborder < obstacleright) And (ballrightborder > obstacleleft) And (ballbottomborder > obstaclebottom) or (balltopborder < obstaclebottom) And (ballleftborder < obstacleright) And (ballrightborder > obstacleleft) And (ballbottomborder > obstaclebottom) then
        ballbounceddown = "false"  
       ballmoved = "true"  
       bouncedown()
     endif
     If (balltopborder = obstaclebottom) And (ballleftborder < obstacleleft) And (ballrightborder > obstacleleft) And (ballbottomborder > obstaclebottom) or (balltopborder < obstaclebottom) And (ballleftborder < obstacleleft) And (ballrightborder > obstacleleft) And (ballbottomborder > obstaclebottom) then
     If (lastballdirecty = "up") And (lastballdirectx <> "right") then 
      ballbounceddown = "false"  
       ballmoved = "true"  
       bouncedown()
       endif
     endif

    EndFor
  EndIf
endsub

Sub mousedown
  linecount = linecount + 1
  bx = Shapes.Getleft(ball) + 10
  by = Shapes.Gettop(ball) + 10
  mx = GraphicsWindow.MouseX
  my = GraphicsWindow.MouseY
  line[linecount] = Shapes.AddLine(bx, by, mx, my)
  calculatelinelength()
endsub

Sub calculatelinelength
  xdif1 = bx - mx
  ydif1 = by - my
  xdif = Math.abs(xdif1)
  ydif = Math.abs(ydif1)
  xpwr = Math.Power(xdif, 2)
  ypwr = Math.Power(ydif, 2)
  pwrdif = xpwr + ypwr
  pwrdif = Math.round(pwrdif)
  linelengthprelim = Math.SquareRoot(pwrdif)
  linelength = Math.Round(linelengthprelim)
  Controls.SetTextBoxText(textbox, "Power: " + linelength)
EndSub

Sub mouseup
  If (linecount = 1) Or (linecount > 1) Then
    removecount = removecount + 1
    Shapes.remove(line[removecount])
    Controls.SetTextBoxText(textbox, "Power: 0")
  endif
  ballx = GraphicsWindow.MouseX - 10
  bally = GraphicsWindow.MouseY - 10
  movecount = 0
  ballmoved = "false"
  shots = shots + 1
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)


EndSub

Sub buttonclicked
  Sound.PlayClick()
  shots = 0
  Shapes.Move(ball, ballstartx, ballstarty)
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
EndSub

Sub moveball

  While (movecount < 100) And (ballmoved = "false")
    ballxinit = Shapes.GetLeft(ball)
    ballyinit = Shapes.Gettop(ball)
    movecount  = movecount + 1
    Program.Delay(ballspeed)
    xdif = Math.Abs(xdif)
    newxdif = xdif / 100
    If ballx > ballxinit then
      lastballdirectx = "right"
      ballxdet = Shapes.GetLeft(ball) + newxdif
    Else
      lastballdirectx = "left"
      ballxdet = Shapes.GetLeft(ball) - newxdif
    endif
    ydif = Math.Abs(ydif)
    newydif = ydif / 100
    If bally > ballyinit then
      lastballdirecty = "down"
      ballydet = Shapes.Gettop(ball) + newydif
    Else
      lastballdirecty = "up"
      ballydet = Shapes.Gettop(ball) - newydif
    endif
    Shapes.Move(ball, ballxdet, ballydet)
    checkball()
  endwhile
  If movecount = 100 then
    ballmoved  = "true"
    movecount = 0
  endif
endsub


Sub newround2
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 5
  roundheight = 200
  roundwidth = 400
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
     GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(400, 200)
  Shapes.Move(round[roundnumber], 100, 110)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 420, 200)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 120
ballstarty = 200
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "red"
  obstacle[1] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[1], 180, 120)
  obstacle[2] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[2], 180, 200)
  obstacle[3] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[3], 240, 160)
  obstacle[4] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[4], 240, 240)
  obstacle[5] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[5], 300, 120)
  obstacle[6] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[6], 300, 200)
  obstacle[7] = Shapes.AddRectangle(10, 35)
  Shapes.Move(obstacle[7], 330, 260)
  obstacleplaced = "true"
  numberofobstacles = 7
  obstacleheight = 35
  obstaclewidth = 10
endsub


Sub��newround3
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 3
  roundheight = 400
  roundwidth = 200
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
  GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(200, 400)
  Shapes.Move(round[roundnumber], 200, 20)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
Shapes.Move(hole, 290, 60)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 280
ballstarty = 390
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "orange"
  obstacle[1] = Shapes.AddRectangle(40, 10)
  Shapes.Move(obstacle[1], 220, 140)
  obstacle[2] = Shapes.AddRectangle(40, 10)
  Shapes.Move(obstacle[2], 280, 200)
  obstacle[3] = Shapes.AddRectangle(40, 10)
  Shapes.Move(obstacle[3], 320, 260)
  obstacleplaced = "true"
  numberofobstacles = 3
  obstacleheight = 10
  obstaclewidth = 40
endsub

Sub newround4
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 4
  roundheight = 400
  roundwidth = 200
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
  GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(200, 400)
  Shapes.Move(round[roundnumber], 200, 20)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 340, 60)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 290
ballstarty = 400
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "pink"
  obstacle[1] = Shapes.AddRectangle(60, 10)
  Shapes.Move(obstacle[1], 325, 100)
  obstacle[2] = Shapes.AddRectangle(60, 10)
  Shapes.Move(obstacle[2], 240, 200)
  obstacle[3] = Shapes.AddRectangle(60, 10)
  Shapes.Move(obstacle[3], 320, 260)
  obstacleplaced = "true"
  numberofobstacles = 3
  obstacleheight = 10
  obstaclewidth = 60
endsub

Sub newround5
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 4
  roundheight = 200
  roundwidth = 400
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
  GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(400, 200)
  Shapes.Move(round[roundnumber], 100, 110)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 465, 120)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 120
ballstarty = 200
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "blue"
  obstacle[1] = Shapes.AddRectangle(60, 60)
  Shapes.Move(obstacle[1], 180, 135)
  obstacle[2] = Shapes.AddRectangle(60, 60)
  Shapes.Move(obstacle[2], 270, 200)
  obstacle[3] = Shapes.AddRectangle(60, 60)
  Shapes.Move(obstacle[3], 380, 160)
  obstacleplaced = "true"
  numberofobstacles = 3
  obstacleheight = 60
  obstaclewidth = 60
endsub

Sub newround6
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 5
  roundheight = 200
  roundwidth = 400
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
  GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(400, 200)
  Shapes.Move(round[roundnumber], 100, 110)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 390, 180)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 120
ballstarty = 200
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "yellow"
  obstacle[1] = Shapes.AddRectangle(10, 100)
  Shapes.Move(obstacle[1], 175, 110)
  obstacle[2] = Shapes.AddRectangle(10, 100)
  Shapes.Move(obstacle[2], 250, 210)
  obstacle[3] = Shapes.AddRectangle(10, 100)
  Shapes.Move(obstacle[3], 380, 140)
  obstacleplaced = "true"
  numberofobstacles = 3
  obstacleheight = 100
  obstaclewidth = 10
endsub

Sub newround7
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 3
  roundheight = 400
  roundwidth = 200
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
      GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(200, 400)
  Shapes.Move(round[roundnumber], 200, 20)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 220, 40)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 290
ballstarty = 400
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "purple"
  obstacle[1] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[1], 350, 130)
  obstacle[2] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[2], 220, 210)
  obstacle[3] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[3], 320, 260)
  obstacle[4] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[4], 230, 80)
  obstacle[5] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[5], 270, 320)
  obstacle[6] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[6], 300, 60)
  obstacle[7] = Shapes.AddRectangle(20, 20)
  Shapes.Move(obstacle[7], 285, 155)
  obstacleplaced = "true"
  numberofobstacles = 7
  obstacleheight = 20
  obstaclewidth = 20
endsub

Sub newround8
  GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 4
  roundheight = 200
  roundwidth = 400
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
  GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(400, 200)
  Shapes.Move(round[roundnumber], 100, 110)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 430, 220)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 120
ballstarty = 200
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "gray"
  obstacle[1] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[1], 175, 110)
  obstacle[2] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[2], 250, 210)
  obstacle[3] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[3], 380, 140)
  obstacle[4] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[4], 200, 180)
  obstacle[5] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[5], 330, 240)
  obstacle[6] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[6], 420, 215)
  obstacle[7] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[7], 175, 270)
  obstacle[8] = Shapes.AddRectangle(10, 40)
  Shapes.Move(obstacle[8], 330, 160)
  obstacleplaced = "true"
  numberofobstacles = 8
  obstacleheight = 40
  obstaclewidth = 10
endsub

Sub newround9
 GraphicsWindow.BackgroundColor = "lightblue"
  shots = 0
  par = 6
  roundheight = 400
  roundwidth = 200
  Controls.SetTextBoxText(textboxs, "Shots: " + shots)
  Controls.SetTextBoxText(textboxp, "Par: " + par)
  Controls.SetTextBoxText(textboxr, "Round: " + roundnumber)
    GraphicsWindow.BrushColor = "green"
  round[roundnumber] = Shapes.AddRectangle(200, 400)
  Shapes.Move(round[roundnumber], 200, 20)
  GraphicsWindow.BrushColor = "black"
  hole = Shapes.AddEllipse(25,25)
  Shapes.Move(hole, 210, 70)
  GraphicsWindow.BrushColor = "white"
  ball = Shapes.AddEllipse(20,20)
  ballstartx = 280
ballstarty = 390
Shapes.Move(ball, ballstartx, ballstarty)
  GraphicsWindow.BrushColor = "orange"
  obstacle[1] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[1], 220, 250)
  obstacle[2] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[2], 200, 310)
  obstacle[3] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[3], 320, 310)
  obstacle[4] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[4], 320, 210)
  obstacle[5] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[5], 200, 100)
  obstacle[6] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[6], 280, 100)
  obstacle[7] = Shapes.AddRectangle(80, 10)
  Shapes.Move(obstacle[7], 220, 170)
  obstacleplaced = "true"
  numberofobstacles = 7
  obstacleheight = 10
  obstaclewidth = 80
endsub


Sub bounceleft
bouncepower = linelength / 100
  While (movecount2 < 10) And (ballbouncedleft = "false")
    ballxinit2 = Shapes.GetLeft(ball) - bouncepower
    ballyinit2 = Shapes.Gettop(ball)
    movecount2  = movecount2 + 1
    Program.Delay(10)
    Shapes.Move(ball, ballxinit2, ballyinit2)

    checkball()
    EndWhile
    If movecount2 = 10 then
    ballbouncedleft  = "true"
    movecount2 = 0
  endif
endsub

Sub bounceright
bouncepower = linelength / 100
  While (movecount5 < 10) And (ballbouncedright = "false")
    ballxinit5 = Shapes.GetLeft(ball) + bouncepower
    ballyinit5 = Shapes.Gettop(ball)
    movecount5  = movecount5 + 1
    Program.Delay(10)
    Shapes.Move(ball, ballxinit5, ballyinit5)

    checkball()
    EndWhile
    If movecount5 = 10 then
    ballbouncedright  = "true"
    movecount5 = 0
  endif
endsub

Sub bouncedown
bouncepower = linelength / 100
  While (movecount3 < 10) And (ballbounceddown = "false")
    ballxinit3 = Shapes.GetLeft(ball)
    ballyinit3 = Shapes.Gettop(ball) + bouncepower
    movecount3  = movecount3 + 1
    Program.Delay(10)
    Shapes.Move(ball, ballxinit3, ballyinit3)

    checkball()
    EndWhile
    If movecount3 = 10 then
    ballbounceddown  = "true"
    movecount3 = 0
  endif
endsub

Sub bounceup
bouncepower = linelength / 100
  While (movecount4 < 10) And (ballbouncedup = "false")
    ballxinit4 = Shapes.GetLeft(ball)
    ballyinit4= Shapes.Gettop(ball) - bouncepower
    movecount4  = movecount4 + 1
    Program.Delay(10)
    Shapes.Move(ball, ballxinit4, ballyinit4)
    checkball()
    EndWhile
  If movecount4 = 10 then
    ballbouncedup  = "true"
    movecount4 = 0
  endif
endsub
