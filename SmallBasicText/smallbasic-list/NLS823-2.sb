' Aries
' Version 0.32
' おひつじ
' April
' Copyright © 2016 Nonki Takahashi.  The MIT License.
' Update 2016-04-02
' Program ID NLS823-2
'
' Reference:
'  http://en.wikipedia.org/wiki/List_of_stars_in_Aries
'
GraphicsWindow.Title = "Aries 0.32"
SB_Workaround()
wrap = "True"
gw = 598
gh = 428
GraphicsWindow.Width = gw
GraphicsWindow.Height = gh
GraphicsWindow.BackgroundColor = "Black"
' initialize shapes
Shapes_Init()
' add shapes
scale = 1
angle = 0
iMin = 1
iMax = 27
Shapes_Add()
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontName = "Tahoma"
GraphicsWindow.FontSize = 100
GraphicsWindow.BrushColor = "Gray"
symbol = Shapes.AddText("♈")
Shapes.Move(symbol, gw - 120, 10)
InitStars()
num = Array.GetItemCount(star)
index = Array.GetAllIndices(star)
offsetX = 0
offsetY = 0
GetMinMax()
offsetX = -xMin + 130
offsetY = -yMin + 170
DrawGrids()
GraphicsWindow.PenWidth = 1
GraphicsWindow.PenColor = "DarkGray"
num = Array.GetItemCount(edge)
index = Array.GetAllIndices(edge)
For i = 1 To num
  e = edge[index[i]]
  m = Text.GetIndexOf(e, "-")
  ra = star[Text.GetSubText(e, 1, m - 1)]["RA"]
  dec = star[Text.GetSubText(e, 1, m - 1)]["Dec"]
  RADec2XY()
  x1 = x
  y1 = y
  ra = star[Text.GetSubTextToEnd(e, m + 1)]["RA"]
  dec = star[Text.GetSubTextToEnd(e, m + 1)]["Dec"]
  RADec2XY()
  x2 = x
  y2 = y
  Shapes.AddLine(x1, y1, x2, y2)
EndFor
num = Array.GetItemCount(star)
index = Array.GetAllIndices(star)
GraphicsWindow.BrushColor = "White"
For i = 1 To num
  ra = star[index[i]]["RA"]
  dec = star[index[i]]["Dec"]
  RADec2XY()
  mag = star[index[i]]["Mag"]
  d = 20 / mag
  ell = Shapes.AddEllipse(d, d)
  Shapes.Move(ell, x - d / 2, y - d / 2) 
EndFor
GraphicsWindow.BrushColor = "White"
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 30
x = 440
y = 330
GraphicsWindow.DrawText(x, y, "April")
If silverlight Then
  Program.Delay(msWait)
EndIf
GraphicsWindow.FontSize = 40
year = 2016
GraphicsWindow.DrawText(x, y + 30, year)
Cal_Init()
sBuf = year + ",4"
Command_GetArgs()
iYear = sArg[1]
if iYear = "" Then
  Goto lEnd
Endif
If Math.Remainder(iYear, 4) = 0 And Math.Remainder(iYear, 100) > 0 Or Math.Remainder(iYear, 400) = 0 Then
  iDoM[2] = iDoM[2] + 1
Endif
iNoL = Math.Floor((iYear - 1) / 4) - Math.Floor((iYear - 1) / 100) + Math.Floor((iYear - 1) / 400)  ' number of leap year
iWoY = Math.Remainder((iYear + iNoL), 7)  ' week of year
iMonth = sArg[2]
If iMonth = "" Then
  iM0 = 1
  iM1 = 12
Else
  iM0 = iMonth
  iM1 = iMonth
Endif
iDoY = 0  ' days of year
iNoM = 1  ' number of month
For iM = iM0 To iM1
  While iNoM < iM
    iDoY = iDoY + iDoM[iNoM]
    iNoM = iNoM + 1
  EndWhile
  Cal_DrawMonth()
EndFor  
lEnd:
' Blink start
While "True"
  Program.Delay(2900)
  Shapes.HideShape(shape[14]["obj"])
  Program.Delay(100)
  Shapes.ShowShape(shape[14]["obj"])
EndWhile
' end of main
Sub Cal_Init
  ' Calendar | Initialize days of month
  CRLF = Text.GetCharacter(13) + Text.GetCharacter(10)
  iDoM = "1=31;2=28;3=31;4=30;5=31;6=30;7=31;8=31;9=30;10=31;11=30;12=31;"
EndSub
Sub Cal_DrawMonth
  ' Calendar | Print month
  ' param iM - month
  ' param iDoY - days of year
  ' param iWoY - week of year
  If silverlight Then
    Program.Delay(msWait)
  EndIf
  GraphicsWindow.FontSize = 16
  GraphicsWindow.FontName = "Consolas"
  iW = Math.Remainder((iDoY + iWoY), 7)
  line = "SUN MON TUE WED THU FRI SAT" + CRLF
  iWoM = 0
  While iWoM < iW
    line = line + "    "
    iWoM = iWoM + 1
  EndWhile
  For iD = 1 To iDoM[iM]
    If iD < 10 Then
      line = line + "  " + iD + " "
    Else
      line = line + " " + iD + " "
    EndIf
    If Math.Remainder(iWoM, 7) = 6 Then
      line = line + CRLF
    EndIf
    iWoM = iWoM + 1
  EndFor
  If Math.Remainder(iWoM, 7) > 0 Then
    line = line + CRLF
  EndIf
  cal = Shapes.AddText(line)
  Shapes.Move(cal, 60, 30)
EndSub
Sub Command_GetArgs
  ' Command line | Get arguments
  ' param sBuf - input buffer
  ' return sArg[] - arguments
  ' return iN - number of arguments
  iP = 1  ' buffer pointer
  iN = 1  ' number of args
  iC = Text.GetIndexOf(sBuf, ",")   ' index of comma
  While iC > iP
    sArg[iN] = Text.GetSubText(sBuf, iP, iC - iP)
    iP = iC + 1
    iN = iN + 1
    iC = Text.GetIndexOf(sBuf, ",")
  EndWhile
  iE = Text.GetLength(sBuf) + 1     ' end of buffer
  sArg[iN] = Text.GetSubText(sBuf, iP, iE - iP)  
EndSub
Sub GetMinMax
  For i = 1 To num
    ra = star[index[i]]["RA"]
    dec = star[index[i]]["Dec"]
    RADec2XY()
    ra1 = Text.GetSubText(ra, 1, 2)
    If wrap And 12 < ra1 Then
      ra1 = ra1 - 24
    EndIf
    If i = 1 Then
      raMin = ra1
      decMin = Text.GetSubText(dec, 1, 3)
      raMax = ra1
      decMax = Text.GetSubText(dec, 1, 3)
      xMin = x
      yMin = y
      xMax = x
      yMax = y
    Else
      raMin = Math.Min(ra1, raMin)
      decMin = Math.Min(Text.GetSubText(dec, 1, 3), decMin)
      raMax = Math.Max(ra1, raMax)
      decMax = Math.Max(Text.GetSubText(dec, 1, 3), decMax)
      xMin = Math.Min(x, xMin)
      yMin = Math.Min(y, yMin)
      xMax = Math.Max(x, xMax)
      yMax = Math.Max(y, yMax)
    EndIf
  EndFor
  decMin = Math.Floor(decMin / 10) * 10
  raMax = raMax + 1
  decMax = decMax + 1
EndSub
Sub InitStars
  ' Initialize stars in Aries
  ' index: Flamsteed designation
  ' RA (Right ascension), Dec (Declination), Mag (Apparent magnitude)
  star[13] = "name=α Ari;ra=02 07 10.29;dec=+23 27 46.0;mag=2.01;"
  star[6] = "name=β Ari;ra=01 54 38.35;dec=+20 48 29.9;mag=2.64;"
  star[41] = "name=41 Ari;ra=02 49 58.99;dec=+27 15 38.8;mag=3.61;"
  star[57] = "name=δ Ari;ra=03 11 37.67;dec=+19 43 36.1;mag=4.35;"
  star[39] = "name=39 Ari;ra=02 47 54.44;dec=+29 14 50.7;mag=4.52;"
  star[5] = "name=γ2 Ari;ra=01 53 31.80;dec=+19 17 45.0;mag=4.62;"
  star[35] = "name=35 Ari;ra=02 43 27.11;dec=+27 42 25.8;mag=4.65;"
  star[5] = "name=γ1 Ari;ra=01 53 31.77;dec=+19 17 38.7;mag=4.70;"
  star[9] = "name=λ Ari;ra=01 57 55.78;dec=+23 35 45.9;mag=4.79;"
  star[58] = "name=ζ Ari;ra=03 14 54.11;dec=+21 02 40.7;mag=4.87;"
  star[14] = "name=14 Ari;ra=02 09 25.29;dec=+25 56 23.9;mag=4.98;"
  star[12] = "name=κ Ari;ra=02 06 33.91;dec=+22 38 54.3;mag=5.03;"
  star[8] = "name=ι Ari;ra=01 57 21.03;dec=+17 49 03.3;mag=5.09;"
  star[63] = "name=τ2 Ari;ra=03 22 45.27;dec=+20 44 31.6;mag=5.10;"
  star[38] = "name=38 Ari;ra=02 44 57.51;dec=+12 26 45.5;mag=5.18;"
  star[48] = "name=ε Ari A;ra=02 59 12.70;dec=+21 20 25.0;mag=5.2;"
  star[17] = "name=η Ari;ra=02 12 47.98;dec=+21 12 39.5;mag=5.23;"
  star[42] = "name=π Ari;ra=02 49 17.56;dec=+17 27 51.6;mag=5.26;"
  star[61] = "name=τ1 Ari;ra=03 21 13.61;dec=+21 08 49.7;mag=5.27;"
  star[33] = "name=33 Ari;ra=02 40 41.03;dec=+27 03 39.6;mag=5.30;"
  star[32] = "name=ν Ari;ra=02 38 49.00;dec=+21 57 41.2;mag=5.45;"
  star[52] = "name=52 Ari A;ra=03 05 26.69;dec=+25 15 18.7;mag=5.45;"
  star[24] = "name=ξ Ari;ra=02 24 49.04;dec=+10 36 38.2;mag=5.48;"
  star[48] = "name=ε Ari B;ra=02 59 12.73;dec=+21 20 25.6;mag=5.5;"
  star[64] = "name=64 Ari;ra=03 24 18.46;dec=+24 43 27.1;mag=5.50;"
  star[43] = "name=σ Ari;ra=02 51 29.57;dec=+15 04 55.7;mag=5.52;"
  star[62] = "name=62 Ari;ra=03 22 11.89;dec=+27 36 27.3;mag=5.55;"
  star[21] = "name=21 Ari;ra=02 15 42.83;dec=+25 02 35.7;mag=5.57;"
  star[22] = "name=θ Ari;ra=02 18 07.55;dec=+19 54 04.2;mag=5.58;"
  star[46] = "name=ρ3 Ari;ra=02 56 25.98;dec=+18 01 25.1;mag=5.58;"
  star[10] = "name=10 Ari;ra=02 03 39.26;dec=+25 56 07.6;mag=5.64;"
  star[31] = "name=31 Ari;ra=02 36 37.75;dec=+12 26 52.2;mag=5.64;"
  star[15] = "name=15 Ari;ra=02 10 37.54;dec=+19 30 01.5;mag=5.68;"
  star[19] = "name=19 Ari;ra=02 13 03.25;dec=+15 16 47.7;mag=5.72;"
  star[34] = "name=μ Ari;ra=02 42 21.92;dec=+20 00 41.7;mag=5.74;"
  star[55] = "name=55 Ari;ra=03 09 36.73;dec=+29 04 37.6;mag=5.74;"
  star[7] = "name=7 Ari;ra=01 55 51.03;dec=+23 34 38.4;mag=5.76;"
  star[45] = "name=ρ2 Ari;ra=02 55 48.50;dec=+18 19 54.0;mag=5.76;"
  star[37] = "name=ο Ari;ra=02 44 32.97;dec=+15 18 42.8;mag=5.78;"
  star[56] = "name=56 Ari;ra=03 12 14.24;dec=+27 15 25.2;mag=5.78;"
  star[20] = "name=20 Ari;ra=02 15 45.94;dec=+25 46 59.2;mag=5.79;"
  star[47] = "name=47 Ari;ra=02 58 05.08;dec=+20 40 07.7;mag=5.80;"
  star[1] = "name=1 Ari A;ra=01 50 08.58;dec=+22 16 31.3;mag=5.83;"
  star[40] = "name=40 Ari;ra=02 48 32.06;dec=+18 17 01.9;mag=5.83;"
  star[4] = "name=4 Ari;ra=01 48 10.90;dec=+16 57 20.3;mag=5.86;"
  star[(16)] = "name=HR 830;ra=02 48 45.87;dec=+25 11 17.1;mag=5.89;"
  star[1] = "name=1 Ari B;ra=01 50 08.50;dec=+22 16 33.0;mag=5.90;"
  star[49] = "name=49 Ari;ra=03 01 54.15;dec=+26 27 44.4;mag=5.91;"
  star[59] = "name=59 Ari;ra=03 19 55.81;dec=+27 04 16.7;mag=5.91;"
  star[(54)] = "name=54 Cet;ra=01 50 52.01;dec=+11 02 36.4;mag=5.93;"
  star[29] = "name=29 Ari;ra=02 32 54.15;dec=+15 02 04.1;mag=6.00;"
  star[11] = "name=11 Ari;ra=02 06 49.22;dec=+25 42 16.5;mag=6.01;"
  star[16] = "name=16 Ari;ra=02 11 12.06;dec=+25 56 13.0;mag=6.01;"
  star[66] = "name=66 Ari;ra=03 28 26.57;dec=+22 48 15.4;mag=6.03;"
  star[65] = "name=65 Ari;ra=03 24 26.11;dec=+20 48 12.6;mag=6.07;"
  star[53] = "name=53 Ari;ra=03 07 25.69;dec=+17 52 47.9;mag=6.13;"
  star[26] = "name=26 Ari;ra=02 30 38.37;dec=+19 51 19.4;mag=6.14;"
  star[60] = "name=60 Ari;ra=03 20 25.57;dec=+25 39 46.7;mag=6.14;"
  star[27] = "name=27 Ari;ra=02 30 54.38;dec=+17 42 14.6;mag=6.21;"
  star[54] = "name=54 Ari;ra=03 08 21.09;dec=+18 47 42.3;mag=6.25;"
  star[(85)] = "name=85 Cet;ra=02 42 28.95;dec=+10 44 30.4;mag=6.32;"
  star[36] = "name=36 Ari;ra=02 44 19.09;dec=+17 45 50.5;mag=6.46;"
  star[30] = "name=30 Ari A;ra=02 37 00.44;dec=+24 38 50.1;mag=6.48;"
  star[51] = "name=51 Ari;ra=03 02 25.87;dec=+26 36 34.7;mag=6.62;"
  star[52] = "name=52 Ari B;ra=03 05 26.70;dec=+25 15 19.0;mag=7.00;"
  star[44] = "name=ρ1 Ari;ra=02 54 55.17;dec=+17 44 05.3;mag=7.01;"
  star[30] = "name=30 Ari B;ra=02 36 57.64;dec=+24 38 53.1;mag=7.09;"
  edge = "1=5-6;2=6-13;3=13-32;4=32-57;"
EndSub
Sub DrawGrids
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "DimGray"
  GraphicsWindow.BrushColor = "DimGray"
  If silverlight Then
    Program.Delay(msWait)
  EndIf
  GraphicsWindow.FontSize = 12
  y1 = 0
  y2 = GraphicsWindow.Height
  For ra = raMin To raMax
    RADec2XY()
    Shapes.AddLine(x, y1, x, y2)
    raTxt = ra
    If wrap And raTxt < 0 Then
      raTxt = raTxt + 24
    EndIf
    txt = Shapes.AddText(raTxt + "h")
    Shapes.Move(txt, x, 5) 
  EndFor
  x1 = 0
  x2 = GraphicsWindow.Width
  For dec = decMin To decMax + 10 Step 10
    If dec > 0 Then
      dec = Text.Append("+", Math.Abs(dec))
    EndIf
    RADec2XY()
    Shapes.AddLine(x1, y, x2, y)
    txt = Shapes.AddText(dec)
    Shapes.Move(txt, x1, y) 
  EndFor
EndSub
Sub RADec2XY
  ' param ra - right ascension
  ' param dec - declination
  ' return x, y
  x = Text.GetSubText(ra, 1, 2)
  If wrap And 12 < x Then
    x = x - 24
  EndIf
  x = x + Text.GetSubText(ra, 4, 2) / 60
  x = x + Text.GetSubText(ra, 7, 5) / 3600
  x = offsetX - (x - raMin) * 3600 / 24
  y = Text.GetSubText(dec, 2, 2)
  y = y + Text.GetSubText(dec, 5, 2) / 60
  y = y + Text.GetSubText(dec, 8, 5) / 3600
  y = y * Text.Append(Text.GetSubText(dec, 1, 1), "1")
  y = offsetY - y * 3600 / 360
EndSub
Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 96 ' x offset
  shY = 183 ' y offset
  shape = ""
  shape[1] = "func=ell;x=62;y=33;width=99;height=97;bc=#5E5E5E;pw=0;"
  shape[2] = "func=ell;x=0;y=59;width=67;height=37;angle=348;bc=#5E5E5E;pw=0;"
  shape[3] = "func=ell;x=45;y=80;width=2;height=0;bc=#5E5E5E;pw=0;"
  shape[4] = "func=ell;x=222;y=0;width=47;height=48;bc=#000000;pc=#5E5E5E;pw=16;"
  shape[5] = "func=ell;x=186;y=58;width=99;height=97;bc=#5E5E5E;pw=0;"
  shape[6] = "func=rect;x=107;y=44;width=127;height=98;angle=11;bc=#5E5E5E;pw=0;"
  shape[7] = "func=rect;x=68;y=139;width=103;height=17;angle=28;bc=#5E5E5E;pw=0;"
  shape[8] = "func=rect;x=196;y=147;width=70;height=16;angle=27;bc=#5E5E5E;pw=0;"
  shape[9] = "func=rect;x=192;y=164;width=70;height=16;angle=356;bc=#5E5E5E;pw=0;"
  shape[10] = "func=rect;x=218;y=141;width=70;height=16;angle=9;bc=#5E5E5E;pw=0;"
  shape[11] = "func=rect;x=238;y=172;width=70;height=16;angle=292;bc=#5E5E5E;pw=0;"
  shape[12] = "func=ell;x=218;y=36;width=37;height=54;angle=34;bc=#5E5E5E;pc=#000000;pw=4;"
  shape[13] = "func=ell;x=229;y=11;width=78;height=78;bc=#5E5E5E;pw=0;"
  shape[14] = "func=ell;x=255;y=51;width=20;height=20;bc=#000000;pw=0;"
  shape[15] = "func=line;x=218;y=71;x1=0;y1=4;x2=11;y2=0;pc=#000000;pw=4;"
  shape[16] = "func=tri;x=238;y=76;x1=40;y1=0;x2=0;y2=25;x3=80;y3=25;angle=288;bc=#5E5E5E;pw=0;"
  shape[17] = "func=ell;x=287;y=27;width=47;height=48;bc=#000000;pc=#5E5E5E;pw=16;"
  shape[18] = "func=line;x=284;y=49;x1=0;y1=0;x2=26;y2=9;pc=#000000;pw=4;"
  shape[19] = "func=line;x=284;y=49;x1=18;y1=32;x2=0;y2=0;pc=#000000;pw=4;"
  shape[20] = "func=tri;x=165;y=161;x1=6;y1=0;x2=0;y2=28;x3=13;y3=28;angle=133;bc=#5E5E5E;pw=0;"
  shape[21] = "func=tri;x=162;y=168;x1=6;y1=0;x2=0;y2=28;x3=13;y3=28;angle=133;bc=#5E5E5E;pw=0;"
  shape[22] = "func=tri;x=252;y=205;x1=6;y1=0;x2=0;y2=28;x3=13;y3=28;angle=210;bc=#5E5E5E;pw=0;"
  shape[23] = "func=tri;x=246;y=203;x1=7;y1=0;x2=0;y2=27;x3=15;y3=27;angle=214;bc=#5E5E5E;pw=0;"
  shape[24] = "func=tri;x=179;y=160;x1=6;y1=0;x2=0;y2=28;x3=13;y3=28;angle=294;bc=#5E5E5E;pw=0;"
  shape[25] = "func=tri;x=182;y=153;x1=6;y1=0;x2=0;y2=28;x3=13;y3=28;angle=294;bc=#5E5E5E;pw=0;"
  shape[26] = "func=rect;x=97;y=127;width=103;height=17;angle=12;bc=#5E5E5E;pw=0;"
  shape[27] = "func=tri;x=196;y=140;x1=6;y1=0;x2=0;y2=28;x3=13;y3=28;angle=133;bc=#5E5E5E;pw=0;"
EndSub
Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub
Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub
Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub
Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      If silverlight Then
        Program.Delay(msWait)
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
Sub Shapes_CalcRotatePos
  ' Shapes | Calculate position for rotated shape
  ' param["x"], param["y"] - position of a shape
  ' param["width"], param["height"] - size of a shape
  ' param ["cx"], param["cy"] - center of rotation
  ' param ["angle"] - rotate angle
  ' return x, y - rotated position of a shape
  _cx = param["x"] + param["width"] / 2
  _cy = param["y"] + param["height"] / 2
  x = _cx - param["cx"]
  y = _cy - param["cy"]
  Math_CartesianToPolar()
  a = a + param["angle"]
  x = r * Math.Cos(a * Math.Pi / 180)
  y = r * Math.Sin(a * Math.Pi / 180)
  _cx = x + param["cx"]
  _cy = y + param["cy"]
  x = _cx - param["width"] / 2
  y = _cy - param["height"] / 2
EndSub
Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
Sub Shapes_Move
  ' Shapes | Move shapes
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - to zoom
  ' param x, y - position to move
  ' return shX, shY - new position of shapes
  Stack.PushValue("local", i)
  s = scale
  shX = x
  shY = y
  For i = iMin To iMax
    shp = shape[i]
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _x = shp["wx"]
      _y = shp["wy"]
    Else
      _x = shp["rx"]
      _y = shp["ry"]
    EndIf
    Shapes.Move(shp["obj"], shX + _x * s, shY + _y * s)
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Remove
  ' Shapes | Remove shapes
  ' param iMin, iMax - shapes indices to remove
  ' param shape - array of shapes
  Stack.PushValue("local", i)
  For i = iMin To iMax
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub
Sub Shapes_Rotate
  ' Shapes | Rotate shapes
  ' param iMin, iMax - shapes indices to rotate
  ' param shape - array of shapes
  ' param cx, cy - rotation center
  ' param scale - to zoom
  ' param angle - to rotate
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  s = scale
  param["angle"] = angle
  If cx <> "" Then
    param["cx"] = cx
  Else
    cx = ""   ' to avoid syntax error
    param["cx"] = shWidth / 2
  EndIf
  If cy <> "" Then
    param["cy"] = cy
  Else
    cy = ""   ' to avoid syntax error
    param["cy"] = shHeight / 2
  EndIf
  For i = iMin To iMax
    shp = shape[i]
    param["x"] = shp["x"]
    param["y"] = shp["y"]
    param["width"] = shp["width"]
    param["height"] = shp["height"]
    Shapes_CalcRotatePos()
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(angle + shp["angle"])
      SB_RotateWorkAround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    Shapes.Rotate(shp["obj"], angle + shp["angle"])
    shape[i] = shp
  EndFor
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
