'?ù–? –≤–µ??Å–∏–? O –±?É–¥—É—? –¥–æ–±–∞–≤–ª–µ–Ω?? –ø–ª–∞–≤–Ω?ã–? ?–∞–∑–≥–æ–Ω –∏ ?Ç–æ—?–º–æ–∂–µ–Ω–∏–µ



'?ö–æ–Ω—Å—Ç–∞–Ω—Ç—? ?Å–∫–æ—?–æ?Å—Ç–µ–?

bricks_move = -90

bricks_catch = 100

rotate_speed = -60

speed = -60

pow = -50

item_taking_pow = -30

item_put = -50

item_catch = 30

before_catch = 100



'?ö–æ–Ω—Å—Ç–∞–Ω—Ç—? ?Ü–≤–µ—Ç–æ–?

black_step = 50



'?ö–æ–Ω—Å—Ç–∞–Ω—Ç—? ?–∞?Å—Å—Ç–æ—è–Ω–∏–?

rotate_degree = 470

to_box = 160



'?ö–æ–Ω—Å—Ç–∞–Ω—Ç—? ?ü–ò–î–?

pid_kp = 0.62

pid_kd = 4

color_pid_kp = 0.7

color_pid_kd = 0

middle_pid_kp = 0.3

middle_pid_kd = 0



'?û–±–Ω—É–ª–µ–Ω–∏–? –ø–µ?–µ–º–µ–Ω?Ω—ã—?

For i = 1 To 6

  bricks[i] = 0

EndFor

target_speed = 0

now_speed = 0

last_motor_way_B = 0

last_motor_way_C = 0

pid_p = 0

pid_d = 0

pid = 0

pid_last_p = 0

pid_middle_value = 45

row = 0

For i = 1 to 2

  tree_colors[i] = 0

endfor

box = 0

For i = 1 to 4

  filled[i] = 0

endfor

For i = 1 to 2

  target_box[i] = 0

endfor



'?ù–∞—Å—Ç—?–æ–π–∫–∞ ?Å–µ–Ω—Å–æ—?–æ–≤ –∏ –º–æ?Ç–æ—?–æ–≤

Sensor.SetMode(1, 0)

Sensor.SetMode(2, 0)

Sensor.SetMode(3, 2)

Sensor.SetMode(4, 0)

Motor.ResetCount("A")

Motor.ResetCount("B")

Motor.ResetCount("C")

Motor.ResetCount("D")



'?ü—É—Å—Ç–æ—Ç–? - 12

'?ó–µ–ª—ë–Ω—ã–? - 37     =>     1

'?ñ—ë–ª—Ç—ã–? - 87 –∏–ª–∏ 50     =>     2

'?ö—?–∞?Å–Ω—ã–? - 62     =>     3

'?ë–µ–ª—ã–? - 25 –∏–ª–∏ 75     =>     0



'?ü–ª–∞–≤–Ω—ã–? ?–∞–∑–≥–æ–Ω –∏ ?Ç–æ—?–º–æ–∂–µ–Ω–∏–µ

Sub speed_change

  If (now_speed < target_speed) And ((Math.Abs(Motor.GetCount("B") - last_motor_way_B) > 1) Or (Math.Abs(Motor.GetCount("C") - last_motor_way_C) > 1)) Then

    now_speed = now_speed + 2

    If now_speed > target_speed Then

      now_speed = target_speed

    EndIf

    last_motor_way_B = Motor.GetCount("B")

    last_motor_way_C = Motor.GetCount("C")

  EndIf

  If (now_speed > target_speed) And ((Math.Abs(Motor.GetCount("B") - last_motor_way_B) > 1) Or (Math.Abs(Motor.GetCount("C") - last_motor_way_C) > 1)) Then

    now_speed = now_speed - 2

    If now_speed < target_speed Then

      now_speed = target_speed

    EndIf

    last_motor_way_B = Motor.GetCount("B")

    last_motor_way_C = Motor.GetCount("C")

  EndIf

EndSub



'?ü–ò–?

Sub left_pid

  speed_change()

  pid_p = Sensor.ReadPercent(1) - pid_middle_value

  pid_d = pid_p - pid_last_p

  pid_last_p = pid_p

  pid = pid_p * pid_kp + pid_d * pid_kd

  If (pid > 0) Then

    Motor.StartSync("BC", now_speed, now_speed + pid)

  Else

    Motor.StartSync("BC", now_speed - pid, now_speed)

  EndIf

EndSub



Sub right_pid

  speed_change()

  pid_p = Sensor.ReadPercent(2) - pid_middle_value

  pid_d = pid_p - pid_last_p

  pid_last_p = pid_p

  pid = pid_p * pid_kp + pid_d * pid_kd

  If (pid > 0) Then

    Motor.StartSync("BC", now_speed + pid, now_speed)

  Else

    Motor.StartSync("BC", now_speed, now_speed - pid)

  EndIf

EndSub



Sub color_pid

  speed_change()

  pid_p = Sensor.ReadPercent(1) - Sensor.ReadPercent(2)

  pid_d = pid_p - pid_last_p

  pid_last_p = pid_p

  pid = pid_p * color_pid_kp + pid_d * color_pid_kd

  If (pid > 0) Then

    Motor.StartSync("BC", now_speed, now_speed + pid)

  Else

    Motor.StartSync("BC", now_speed - pid, now_speed)

  EndIf

EndSub



Sub middle_pid

  speed_change()

  pid_p = Sensor.ReadPercent(1) - Sensor.ReadPercent(2)

  pid_d = pid_p - pid_last_p

  pid_last_p = pid_p

  pid = pid_p * middle_pid_kp + pid_d * middle_pid_kd

  If (pid > 0) Then

    Motor.StartSync("BC", now_speed, now_speed + pid)

  Else

    Motor.StartSync("BC", now_speed - pid, now_speed)

  EndIf

EndSub



'?í–∑—è—Ç–∏–? –∫?É–±–∏–∫–æ–?

Sub take_bricks

  '?û–±–Ω—É–ª–µ–Ω–∏–? –ø–µ?–µ–º–µ–Ω–Ω?ã—?

  brick_num = 0

  already_closed = 0

  '?ó–∞–¥–∞—ë–? ?Å–∫–æ—?–æ?Å—Ç–? –¥–ª?? ?–∞–∑–≥–æ–Ω–∞

  now_speed = -10

  target_speed = bricks_move

  While (brick_num < 6)

    if now_speed > target_speed Then

      speed_change() '?ü–ª–∞–≤–Ω–æ–? –∏–∑–º–µ–Ω–µ–Ω–∏–µ ?Å–∫–æ—?–æ?Å—Ç–µ–?

      Motor.StartSync("BC", now_speed, now_speed + 1)

    EndIf

    '–°?á–∏—Ç—ã–≤–∞–Ω–∏–? ?Ü–≤–µ—Ç–?

    current_col = Sensor.ReadPercent(3)

    If (current_col <> 12) Then

      '?ï—Å–ª–? ?É–≤–∏–¥–µ–? –∫?É–±–∏–?

      brick_num = brick_num + 1

      bricks[brick_num] = current_col

      '?ñ–¥—ë–?, –ø–æ–∫–∞ –∫?É–±–∏–? –Ω–µ –≥–æ?Ç–æ–? –∫ –∑–∞?Ö–≤–∞—Ç—?

      motor_memory = Motor.GetCount("B")

      While ((Motor.GetCount("B") - motor_memory) > -20)

      EndWhile

      If ((current_col <> 25) and (current_col <> 75)) then

        '–•–≤–∞?Ç–∞–µ–? –∫?É–±–∏–?, –µ?Å–ª–? –æ–Ω –Ω–µ –±–µ–ª?ã–?

        Motor.Move("A", bricks_catch, 87, "True")

        if (brick_num < 6) then

          '?û—Ç–∫—??ã–≤–∞–µ–? –∫–ª–µ?à–Ω—?, –µ?Å–ª–? –∫?É–±–∏–? –Ω–µ –ø–æ?Å–ª–µ–¥–Ω–∏–?

          Motor.Move("A", -bricks_catch, 87, "True")

        Else

          '?ï—Å–ª–? –∫?É–±–∏–? –ø–æ?Å–ª–µ–¥–Ω–∏–?, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, ?á—Ç–? –ø–∞–ª–∫–∞ ?É–∂–? –∑–∞–∫??ã—Ç–?

          already_closed = 1

        EndIf

      Else

        '?ï—Å–ª–? –∫?É–±–∏–? –±–µ–ª?ã–?, –∂–¥?ë–?, ?á—Ç–æ–±—? –æ–Ω ?Å–∫—??ã–ª—Å—? –∏–∑ –≤–∏–¥??

        motor_memory = Motor.GetCount("B")

        While ((Motor.GetCount("B") - motor_memory) > -50)

        EndWhile

      EndIf

    EndIf

  EndWhile

  '?û—Å—Ç–∞–Ω–æ–≤–∫–?

  target_speed = 0

  While (now_speed < 0)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  if (already_closed = 0) then

    '?ï—Å–ª–? –ø–∞–ª–∫–∞ –µ?â—? –Ω–µ –∑–∞–∫??ã—Ç–?, –∑–∞–∫??ã–≤–∞–µ–?

    Motor.Move("A", bricks_catch, 87, "True")

  EndIf

  '?ü—?–∏?Å–≤–æ–µ–Ω–∏–? ?Ü–≤–µ—Ç–∞–? ?É–¥–æ–±–Ω—ã—? –∑–Ω–∞?á–µ–Ω–∏–?

  For i = 1 To 6

    If ((bricks[i] = 25) Or (bricks[i] = 75)) Then

      bricks[i] = 0

    EndIf

    If (bricks[i] = 37) Then

      bricks[i] = 1

    EndIf

    If ((bricks[i] = 87) Or (bricks[i] = 50)) Then

      bricks[i] = 2

    EndIf

    If (bricks[i] = 62) Then

      bricks[i] = 3

    EndIf

  EndFor

EndSub



'?í–∑—è—Ç–∏–? –ø?–µ–¥–º–µ?Ç–?

Sub take_item 'row

  '?î–æ–µ–∑–? –¥–æ ??è–¥–?

  Motor.ResetCount("BC")

  Motor.MoveSync("BC", pow, pow, 30, "False")

  now_speed = pow

  target_speed = item_taking_pow

  If (row = 1) Then

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -40) And ((((Sensor.ReadPercent(1) + Sensor.ReadPercent(2)) / 2) > 42) Or (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -80))

      middle_pid()

    EndWhile

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -40)

      color_pid()

    EndWhile

  EndIf

  If (row = 2) Then

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -320) And ((((Sensor.ReadPercent(1) + Sensor.ReadPercent(2)) / 2) > 42) Or (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -80))

      middle_pid()

    EndWhile

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -320)

      color_pid()

    EndWhile

  EndIf

  If (row = 3) Then

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -575) And ((((Sensor.ReadPercent(1) + Sensor.ReadPercent(2)) / 2) > 42) Or (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -80))

      middle_pid()

    EndWhile

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -575)

      color_pid()

    EndWhile

  EndIf

  Motor.Stop("BC", "True")

  motor_memory = (Motor.GetCount("B") + Motor.GetCount("C")) / 2 '?ó–∞–ø–æ–º–∏–Ω–∞–µ–?, –≥–¥–µ –º??

  '?ü–æ–¥—ä–µ–∑–? –∫ –ø–µ?–≤–æ–º?? –Ω–æ–º–µ???

  Motor.ResetCount("BC")

  now_speed = -10

  target_speed = rotate_speed

  While (Motor.GetCount("C") > -90)

    speed_change()

    Motor.StartSync("BC", 0, now_speed)

  EndWhile

  Motor.Stop("BC", "True")

  Motor.ResetCount("BC")

  now_speed = -10

  target_speed = item_taking_pow

  While (Motor.GetCount("C") > -100)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  Motor.Stop("BC", "True")

  '?ó–∞—Ö–≤–∞—?

  Motor.Move("D", before_catch, 250, "False")

  Motor.Move("D", item_catch, 310, "True")

  Program.Delay(200)

  tree_colors[1] = Sensor.ReadRawValue(4, 0)

  '?û—Ç—ä–µ–∑–? –æ?? –ø–µ?–≤–æ–≥–æ –Ω–æ–º–µ?–∞

  Motor.ResetCount("BC")

  now_speed = 10

  target_speed = -item_taking_pow

  While (Motor.GetCount("C") < 100)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  Motor.Stop("BC", "True")

  Motor.ResetCount("BC")

  now_speed = 10

  target_speed = -rotate_speed

  While (Motor.GetCount("C") < 90)

    speed_change()

    Motor.StartSync("BC", 0, now_speed)

  EndWhile

  Motor.Stop("BC", "True")

  '?ü–æ–¥—ä–µ–∑–? –∫–æ –≤?Ç–æ—?–æ–º?? –Ω–æ–º–µ???

  Motor.ResetCount("BC")

  now_speed = -10

  target_speed = rotate_speed

  While (Motor.GetCount("B") > -110)

    speed_change()

    Motor.StartSync("BC", now_speed, 0)

  EndWhile

  Motor.Stop("BC", "True")

  Motor.Move("D", item_put, 310, "True")

  Motor.Move("D", -before_catch, 250, "True")

  Motor.Move("BC", -10, 100, "True")

  '?ó–∞—Ö–≤–∞—?

  Motor.Move("D", before_catch, 250, "False")

  Motor.Move("D", item_catch, 310, "True")

  Program.Delay(200)

  tree_colors[2] = Sensor.ReadRawValue(4, 0)

  '?û—Ç—ä–µ–∑–? –æ?? –≤?Ç–æ—?–æ–≥–æ –Ω–æ–º–µ?–∞

  Motor.ResetCount("BC")

  now_speed = 10

  target_speed = -item_taking_pow

  While (Motor.GetCount("B") < 100)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  Motor.Stop("BC", "True")

  Motor.ResetCount("BC")

  now_speed = 10

  target_speed = -rotate_speed

  While (Motor.GetCount("B") < 110)

    speed_change()

    Motor.StartSync("BC", now_speed, 0)

  EndWhile

  Motor.Stop("BC", "True")

  '?í—Ö–æ–? –Ω–∞ –ø–æ–∑–∏?Ü–∏—?

  Motor.ResetCount("BC")

  If (motor_memory + 320) > 0 Then

    now_speed = -10

    target_speed = pow

    While (Motor.GetCount("B") > -(motor_memory + 320))

      If (target_speed = now_speed) = "False" Then

        speed_change()

        Motor.StartSync("BC", now_speed, now_speed)

      EndIf

    EndWhile

  Else

    now_speed = 10

    target_speed = -pow

    While (Motor.GetCount("B") < (motor_memory + 320))

      If (target_speed = now_speed) = "False" Then

        speed_change()

        Motor.StartSync("BC", now_speed, now_speed)

      EndIf

    EndWhile

  EndIf

  Motor.Stop("BC", "True")

  '?ü–æ–≤–æ—?–æ?? 180

  Motor.ResetCount("BC")

  now_speed = -10

  target_speed = rotate_speed / 2

  While (Motor.GetCount("B") > -(rotate_degree))

    speed_change()

    Motor.StartSync("BC", now_speed, -now_speed)

  EndWhile

  While (Sensor.ReadPercent(1) > (black_step - 10)) '?î–? –ø–µ?–≤–æ–π –ª–∏–Ω–∏–∏

  EndWhile

  While (Sensor.ReadPercent(1) < (black_step + 10)) '?ü—?–æ–ø?É—Å–∫–∞–µ–? –ø–µ?–≤?É—? –ª–∏–Ω–∏??

  EndWhile

  While (Sensor.ReadPercent(1) > (black_step - 10)) '?î–? –≤?Ç–æ—?–æ–π –ª–∏–Ω–∏–∏

  EndWhile

  Motor.Stop("BC", "True")

  '?ü—?–µ–æ–±?–∞–∑–æ?≤–∞–Ω–∏–? ?Ü–≤–µ—Ç–æ–?

  For i = 1 To 2

    If (tree_colors[i] = 4) Then

      tree_colors[i] = 1

    EndIf

    If (tree_colors[i] = 5) Or (tree_colors[i] = 6) Then

      tree_colors[i] = 2

    EndIf

    If (tree_colors[i] = 8) Or (tree_colors[i] = 9) Then

      tree_colors[i] = 3

    EndIf

  EndFor

EndSub



'?û—Ç–≤–æ–∑–∏–? –ø–∞–Ω–µ–ª–∏(–ø–µ?–≤?ã–? ?–∞–∑, –≤–æ–∑–≤–æ–∂–Ω–æ –≤–æ–∑–∏?Ç—? –¥–≤–∞ –¥–µ?–µ–≤–∞ –≤ –æ–¥–Ω?? –∫–æ?–æ–±–∫??)

Sub bring_two_items_to_one_box 'box

  '?î–æ–µ–∑–? –¥–æ –∫–æ?–æ–±–∫–∏

  now_speed = -10

  target_speed = pow

  For i = 1 To box

    Motor.ResetCount("BC")

    If ((i - Math.Floor(i / 2) * 2) = 0) Then

      '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ ?á—ë—Ç–Ω–∞—?

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -120) Or (Sensor.ReadPercent(2) > black_step)

        left_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ –Ω–µ?á—ë—Ç–Ω–∞—?

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -120) Or (Sensor.ReadPercent(1) > black_step)

        right_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", pow, pow, 40, "False")

  EndFor

  '?î–?–µ–∑–¥ –¥–æ –∫–æ?–æ–±–∫–∏

  Motor.ResetCount("BC")

  If ((box - Math.Floor(box / 2) * 2) = 0) Then

    '?ï—Å–ª–? –≤ ?á—ë—Ç–Ω—É—? –∫–æ?–æ–±–∫??

    If (filled[box] = 1) Then

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -820)

        right_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -660)

        right_pid()

      EndWhile

    EndIf

    filled[box] = 1

    Motor.Stop("BC", "False")

    '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

    now_speed = -10

    target_speed = Math.Round(rotate_speed / 2)

    Motor.ResetCount("BC")

    While (Motor.GetCount("B") > -rotate_degree / 2)

      speed_change()

      Motor.StartSync("BC", now_speed, -now_speed)

    EndWhile

    Motor.Stop("BC", "True")

  Else

    '?ï—Å–ª–? –≤ –Ω–µ?á—ë—Ç–Ω—É—? –∫–æ?–æ–±–∫??

    If (filled[box] = 1) Then

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -820)

        left_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -660)

        left_pid()

      EndWhile

    EndIf

    filled[box] = 1

    Motor.Stop("BC", "False")

    '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

    now_speed = -10

    target_speed = Math.Round(rotate_speed / 2)

    Motor.ResetCount("BC")

    While (Motor.GetCount("C") > -rotate_degree / 2)

      speed_change()

      Motor.StartSync("BC", -now_speed, now_speed)

    EndWhile

    Motor.Stop("BC", "True")

  EndIf

  '?ü–æ–¥—ä–µ–∑–? –∫ –∫–æ?–æ–±–∫–µ

  now_speed = -10

  target_speed = item_taking_pow

  Motor.ResetCount("BC")

  While (Motor.GetCount("B") > -to_box)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  Motor.Stop("BC", "True")

  '?í—ã–≥—??É–∑–∫–? –ø?–µ–¥–º–µ?Ç–æ–?

  Motor.Move("D", item_put, 310, "False")

  if box < 4 then

    Motor.Move("D", -before_catch, 90, "True")

  Else

    Motor.Move("D", -before_catch, 250, "True")

  EndIf

  '?û—Ç—ä–µ–∑–? –∫ –ª–∏–Ω–∏–∏

  now_speed = 10

  target_speed = -item_taking_pow

  Motor.ResetCount("BC")

  While (Motor.GetCount("B") < to_box)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  Motor.Stop("BC", "False")

  Motor.ResetCount("BC")

  now_speed = -10

  target_speed = rotate_speed / 2

  If ((box - Math.Floor(box / 2) * 2) = 0) Then

    '?ï—Å–ª–? –≤ ?á—ë—Ç–Ω—É—? –∫–æ?–æ–±–∫??

    While (Sensor.ReadPercent(1) > black_step) Or (Motor.GetCount("B") > -100)

      speed_change()

      Motor.StartSync("BC", now_speed, -now_speed)

    EndWhile

    Motor.Stop("BC", "False")

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, 10, "True")

  Else

    '?ï—Å–ª–? –≤ –Ω–µ?á—ë—Ç–Ω—É—? –∫–æ?–æ–±–∫??

     While (Sensor.ReadPercent(2) > black_step) Or (Motor.GetCount("C") > -100)

      speed_change()

      Motor.StartSync("BC", -now_speed, now_speed)

    EndWhile

    Motor.Stop("BC", "False")

    Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, 10, "True")

  EndIf

  Motor.Stop("BC", "True")

  if box < 4 then

    Motor.Move("D", -before_catch, 160, "True")

  EndIf

  '?í–æ–∑–≤—?–∞?â–µ–Ω–∏–?

  Motor.ResetCount("BC")

  now_speed = -10

  target_speed = pow

  While (Motor.GetCount("B") > -50)

    speed_change()

    Motor.StartSync("BC", now_speed, now_speed)

  EndWhile

  For i = box To 1 Step -1

    Motor.ResetCount("BC")

    If ((i - Math.Floor(i / 2) * 2) = 0) Then

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -90) Or (Sensor.ReadPercent(1) > black_step)

        '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ ?á—ë—Ç–Ω–∞—?

        right_pid()

      EndWhile

    Else

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -90) Or (Sensor.ReadPercent(2) > black_step)

        '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ –Ω–µ?á—ë—Ç–Ω–∞—?

        left_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", pow, pow, 40, "False")

  EndFor

  '?í—ã—Ö–æ–? –Ω–∞ –ø–æ–∑–∏?Ü–∏—?

  Motor.ResetCount("BC")

  While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -70) Or (Sensor.ReadPercent(2) > black_step)

    left_pid()

  EndWhile

  Motor.Stop("BC", "True")

EndSub



Sub bring_first_item_nearer 'target_box[2]

  '?î–æ–µ–∑–? –¥–æ –∫–æ?–æ–±–∫–∏

  For i = 1 To (target_box[1] + 2)

    Motor.ResetCount("BC")

    If ((i - Math.Floor(i / 2) * 2) = 0) Then

      '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ ?á—ë—Ç–Ω–∞—?

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -120) Or (Sensor.ReadPercent(2) > black_step)

        left_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ –Ω–µ?á—ë—Ç–Ω–∞—?

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -120) Or (Sensor.ReadPercent(1) > black_step)

        right_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", pow, pow, 40, "False")

  EndFor

  Motor.MoveSync("BC", pow, pow, 60, "True") '?ü—?–æ–µ–∑–∂–∞–µ–º –≤–ø–µ??ë–?

  Motor.Move("D", item_put, 310, "True") '?û—Ç–∫—??ã–≤–∞–µ–? –∫–ª–µ?à–Ω–?

  Motor.MoveSync("BC", -item_taking_pow, -item_taking_pow, 70, "True") '?û—Ç—ä–µ–∑–∞–µ–? –Ω–∞–∑–∞–¥

  Motor.Move("D", item_catch, 130, "True") '?ü—?–∏–ø–æ–¥–Ω–∏–º–∞–µ–º –ø–µ?–≤–æ–µ –¥–µ?–µ–≤–æ

  If (filled[target_box[1]] = 1) Then

    '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? ?É–∂–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

    Motor.MoveSync("BC", -pow, -pow, 50, "True")

    motor_memory = 50

  Else

    '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –µ?â—? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

    Motor.MoveSync("BC", -pow, -pow, 240, "True")

    motor_memory = 240

  EndIf

  filled[target_box[1]] = 1

  Motor.Move("D", item_catch, 180, "True") '?ü—?–∏–ø–æ–¥–Ω–∏–º–∞–µ–º –ø–µ?–≤–æ–µ –¥–µ?–µ–≤–æ –¥–æ –≤–µ??Ö–?

  If ((target_box[1] - Math.Floor(target_box[1] / 2) * 2) = 0) Then

    Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

  Else

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

  EndIf

  '?ü–æ–¥—ä–µ–∑–? –∫ –∫–æ?–æ–±–∫–µ

  Motor.MoveSync("BC", item_taking_pow, item_taking_pow, to_box - 45, "True")

  '?í—ã–≥—??É–∑–∫–? –ø?–µ–¥–º–µ?Ç–æ–?

  Motor.Move("D", item_put, 310, "False")

  Motor.Move("D", -before_catch, 90, "True")

  '?û—Ç—ä–µ–∑–? –∫ –ª–∏–Ω–∏–∏

  Motor.MoveSync("BC", -speed, -speed, to_box - 45, "True")

  Motor.Move("D", -before_catch, 160, "True")

  '?ü–æ–≤–æ—?–æ??

  Motor.ResetCount("BC")

  If ((target_box[1] - Math.Floor(target_box[1] / 2) * 2) = 0) Then

    Motor.StartSync("BC", -rotate_speed / 2, rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

    While (Sensor.ReadPercent(1) > (black_step - 10)) Or (Motor.GetCount("C") > -100)

    EndWhile

    While Sensor.ReadPercent(1) < (black_step + 10)

    EndWhile

    Motor.Stop("BC", "True")

    Motor.ResetCount("BC")

    While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -(50 + motor_memory)

      left_pid()

    EndWhile

  Else

    Motor.StartSync("BC", rotate_speed / 2, -rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

    While (Sensor.ReadPercent(2) > (black_step - 10)) Or (Motor.GetCount("B") > -100)

    EndWhile

    While Sensor.ReadPercent(2) < (black_step + 10)

    EndWhile

    Motor.Stop("BC", "True")

    Motor.ResetCount("BC")

    While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -(50 + motor_memory)

      right_pid()

    EndWhile

  EndIf

  Motor.Stop("BC", "True")

  '?ó–∞—Ö–≤–∞—?

  Motor.Move("D", before_catch, 250, "False")

  Motor.Move("D", item_catch, 310, "True")

  If (target_box[2] - target_box[1] < 2) Then 

    '?ï—Å–ª–? –≤?Ç–æ—?–æ–µ –¥–µ?–µ–≤–æ –Ω–∞–¥–æ –≤–µ–∑?Ç–? –≤ ?Å–ª–µ–¥—É—é—â—É—? –∫–æ?–æ–±–∫??

    Motor.ResetCount("BC")

    If target_box[2] = 2 Then

      '?ï—Å–ª–? –≤–æ –≤?Ç–æ—??É—? –∫–æ?–æ–±–∫??

      If (filled[2] = 1) Then

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -340

          left_pid()

        EndWhile

      Else

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -150

          left_pid()

        EndWhile

      EndIf

      Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

    Else

      '?ï—Å–ª–? –≤ ?Ç—?–µ?Ç—å—? –∫–æ?–æ–±–∫??

      If (filled[3] = 1) Then

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -340

          right_pid()

        EndWhile

      Else

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -150

          right_pid()

        EndWhile

      EndIf

      Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

    EndIf

  Else

    Motor.ResetCount("BC")

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -60) Or (Sensor.ReadPercent(2) > black_step)

      left_pid()

    EndWhile

    Motor.ResetCount("BC")

    If (filled[3] = 1) Then

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -410

        left_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While ((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -220

        left_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

  EndIf

  filled[target_box[2]] = 1

  '?ü–æ–¥—ä–µ–∑–? –∫ –∫–æ?–æ–±–∫–µ

  Motor.MoveSync("BC", item_taking_pow, item_taking_pow, to_box - 10, "True")

  '?í—ã–≥—??É–∑–∫–? –ø?–µ–¥–º–µ?Ç–?

  Motor.Move("D", item_put, 310, "False")

  Motor.Move("D", -before_catch, 90, "True")

  '?û—Ç—ä–µ–∑–? –∫ –ª–∏–Ω–∏–∏

  Motor.MoveSync("BC", -speed, -speed, to_box - 10, "True")

  Motor.Move("D", -before_catch, 160, "True")

  '?ü–æ–≤–æ—?–æ??

  Motor.ResetCount("BC")

  If ((target_box[2] - Math.Floor(target_box[2] / 2) * 2) = 0) Then

    '?ï—Å–ª–? –≤ ?á—ë—Ç–Ω—É—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", rotate_speed / 2, -rotate_speed / 2)

    While (Sensor.ReadPercent(1) > black_step) Or (Motor.GetCount("B") > -100)

    EndWhile

    Motor.Stop("BC", "False")

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, 10, "True")

  Else

    '?ï—Å–ª–? –≤ –Ω–µ?á—ë—Ç–Ω—É—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", -rotate_speed / 2, rotate_speed / 2)

    While (Sensor.ReadPercent(2) > black_step) Or (Motor.GetCount("C") > -100)

    EndWhile

    Motor.Stop("BC", "False")

    Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, 10, "True")

  EndIf

  Motor.Stop("BC", "True")

  '?í–æ–∑–≤—?–∞?â–µ–Ω–∏–?

  Motor.MoveSync("BC", pow, pow, 50, "False")

  For i = target_box[2] To 1 Step -1

    Motor.ResetCount("BC")

    If ((i - Math.Floor(i / 2) * 2) = 0) Then

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -90) Or (Sensor.ReadPercent(1) > black_step)

        '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ ?á—ë—Ç–Ω–∞—?

        right_pid()

      EndWhile

    Else

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -90) Or (Sensor.ReadPercent(2) > black_step)

        '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ –Ω–µ?á—ë—Ç–Ω–∞—?

        left_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", pow, pow, 40, "False")

  EndFor

  '?í—ã—Ö–æ–? –Ω–∞ –ø–æ–∑–∏?Ü–∏—?

  Motor.ResetCount("BC")

  While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -70) Or (Sensor.ReadPercent(2) > black_step)

    left_pid()

  EndWhile

  Motor.Stop("BC", "True")

EndSub



Sub bring_second_item_nearer 'target_box[2]

  '?î–æ–µ–∑–? –¥–æ –∫–æ?–æ–±–∫–∏

  For i = 1 To (target_box[1] + 1)

    Motor.ResetCount("BC")

    If ((i - Math.Floor(i / 2) * 2) = 0) Then

      '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ ?á—ë—Ç–Ω–∞—?

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -120) Or (Sensor.ReadPercent(2) > black_step)

        left_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ –Ω–µ?á—ë—Ç–Ω–∞—?

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -120) Or (Sensor.ReadPercent(1) > black_step)

        right_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", pow, pow, 40, "False")

  EndFor

  '?†–∞–∑–≤–æ—?–æ??

  Motor.ResetCount("BC")

  If (target_box[1] = 2) Then

    '?ï—Å–ª–? –≤–æ –≤?Ç–æ—??É—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", -rotate_speed / 2, rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

    While (Sensor.ReadPercent(1) > (black_step - 10)) Or (Motor.GetCount("C") > -200)

    EndWhile

    While (Sensor.ReadPercent(1) < (black_step + 10))

    EndWhile

  Else

    '?ï—Å–ª–? –≤ ?Ç—?–µ?Ç—å—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", rotate_speed / 2, -rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

    While (Sensor.ReadPercent(2) > (black_step - 10)) Or (Motor.GetCount("B") > -200)

    EndWhile

    While (Sensor.ReadPercent(2) < (black_step + 10))

    EndWhile

  EndIf

  Motor.Stop("BC", "True")

  Motor.Move("D", item_put, 310, "True") '?û—Ç–∫—??ã–≤–∞–µ–? –∫–ª–µ?à–Ω–?

  Motor.MoveSync("BC", -item_taking_pow, -item_taking_pow, 75, "True") '?û—Ç—ä–µ–∑–∞–µ–? –Ω–∞–∑–∞–¥

  Motor.Move("D", item_catch, 130, "True") '?ü—?–∏–ø–æ–¥–Ω–∏–º–∞–µ–º –ø–µ?–≤–æ–µ –¥–µ?–µ–≤–æ

  If (filled[target_box[1]] = 1) Then

    '?ï—Å–ª–? –ø–µ?–≤–æ–µ  –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

    Motor.MoveSync("BC", -pow, -pow, 310, "True")

    motor_memory = 310

  Else

    '?ï—Å–ª–? –ø–µ?–≤–æ–µ  –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

    Motor.MoveSync("BC", -pow, -pow, 120, "True")

    motor_memory = 120

  EndIf

  Motor.Move("D", item_catch, 180, "True") '?ü–æ–¥–Ω–∏–º–∞–µ–? –ø–µ?–≤–æ–µ –¥–µ?–µ–≤–æ

  filled[target_box[1]] = 1

  If target_box[1] = 2 Then

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

  Else

    Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

  EndIf

  '?ü–æ–¥—ä–µ–∑–? –∫ –∫–æ?–æ–±–∫–µ

  Motor.MoveSync("BC", item_taking_pow, item_taking_pow, to_box - 45, "True")

  '?í—ã–≥—??É–∑–∫–? –ø?–µ–¥–º–µ?Ç–æ–?

  Motor.Move("D", item_put, 310, "False")

  Motor.Move("D", -before_catch, 90, "True")

  '?û—Ç—ä–µ–∑–? –∫ –ª–∏–Ω–∏–∏

  Motor.MoveSync("BC", -speed, -speed, to_box - 45, "True")

  Motor.Move("D", -before_catch, 160, "True")

  '?ü–æ–≤–æ—?–æ??

  Motor.ResetCount("BC")

  If (target_box[1] = 2) Then

    '?ï—Å–ª–? –≤–æ –≤?Ç–æ—??É—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", rotate_speed / 2, -rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

    While (Sensor.ReadPercent(1) > black_step) Or (Motor.GetCount("B") > -100)

    EndWhile

  Else

    '?ï—Å–ª–? –≤ ?Ç—?–µ?Ç—å—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", -rotate_speed / 2, rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

    While (Sensor.ReadPercent(2) > black_step) Or (Motor.GetCount("C") > -100)

    EndWhile

  EndIf

  Motor.Stop("BC", "True")

  '?ü–æ–¥—ä–µ–∑–∂–∞–µ–? –∫–æ –≤?Ç–æ—?–æ–º?? –¥–µ?–µ–≤??

  Motor.ResetCount("BC")

  If (target_box[1] = 2) Then

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -(motor_memory + 50))

      right_pid()

    EndWhile

  Else

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -(motor_memory + 50))

      left_pid()

    EndWhile

  EndIf

  Motor.Stop("BC", "True")

  '?ó–∞—Ö–≤–∞—?

  Motor.Move("D", before_catch, 250, "False")

  Motor.Move("D", item_catch, 310, "True")

  '?û—Ç–≤–æ–∑–∏–? –≤?Ç–æ—?–æ–µ –¥–µ?–µ–≤–æ

  If ((target_box[1] - target_box[2]) < 2) Then

    '?ï—Å–ª–? –∫–æ?–æ–±–∫–∏ ?Å–æ—Å–µ–¥–Ω–∏–?

    Motor.ResetCount("BC")

    If (target_box[2] = 1) Then

      '?ï—Å–ª–? ?Å—Ç–∞–≤–∏–? –≤ –ø–µ?–≤?É—? –∫–æ?–æ–±–∫??

      If (filled[1] = 0) Then

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -220)

          right_pid()

        EndWhile

      Else

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -50)

          right_pid()

        EndWhile

      EndIf

    Else

      '?ï—Å–ª–? ?Å—Ç–∞–≤–∏–? –≤–æ –≤?Ç–æ—??É—? –∫–æ?–æ–±–∫??

      If (filled[2] = 0) Then

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -220)

          left_pid()

        EndWhile

      Else

        '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

        While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -50)

          left_pid()

        EndWhile

      EndIf

    EndIf

    Motor.Stop("BC", "True")

  Else

    '?ï—Å–ª–? –∫–æ?–æ–±–∫–∏ –ø–µ?–≤–∞?? –∏ ?Ç—?–µ?Ç—å—?

    Motor.MoveSync("BC", pow, pow, 90, "False")

    Motor.ResetCount("BC")

    '?î–? –ø–µ?–µ–∫??ë—Å—Ç–∫–?

    While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -180) Or (Sensor.ReadPercent(1) > black_step)

      right_pid()

    EndWhile

    Motor.ResetCount("BC")

    If (filled[1] = 0) Then

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -230)

        left_pid()

      EndWhile

    Else

      '?ï—Å–ª–? –ø–µ?–≤–æ–µ –º–µ?Å—Ç–? –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -60)

        left_pid()

      EndWhile

    EndIf

  EndIf

  '?ü–æ–≤–æ—?–æ??

  If (target_box[2] = 1) Then

    '?ï—Å–ª–? –≤ –ø–µ?–≤?É—? –∫–æ?–æ–±–∫??

    Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

  Else

    '?ï—Å–ª–? –≤–æ –≤?Ç–æ—??É—? –∫–æ?–æ–±–∫??

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, rotate_degree / 2, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

  EndIf

  '?ü–æ–¥—ä–µ–∑–? –∫ –∫–æ?–æ–±–∫–µ

  Motor.MoveSync("BC", item_taking_pow, item_taking_pow, to_box - 10, "True")

  '?í—ã–≥—??É–∑–∫–? –ø?–µ–¥–º–µ?Ç–æ–?

  Motor.Move("D", item_put, 310, "False")

  Motor.Move("D", -before_catch, 90, "True")

  '?û—Ç—ä–µ–∑–? –∫ –ª–∏–Ω–∏–∏

  Motor.MoveSync("BC", -speed, -speed, to_box - 10, "True")

  Motor.Move("D", -before_catch, 160, "True")

  '?ü–æ–≤–æ—?–æ??

  Motor.ResetCount("BC")

  If (target_box[2] = 1) Then

    '?ï—Å–ª–? –≤ –ø–µ?–≤?É—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", -rotate_speed / 2, rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

    While (Sensor.ReadPercent(2) > black_step) Or (Motor.GetCount("C") > -100)

    EndWhile

    Motor.Stop("BC", "False")

    Motor.MoveSync("BC", rotate_speed / 2, -rotate_speed / 2, 10, "True")

  Else

    '?ï—Å–ª–? –≤–æ –≤?Ç–æ—??É—? –∫–æ?–æ–±–∫??

    Motor.StartSync("BC", rotate_speed / 2, -rotate_speed / 2) '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

    While (Sensor.ReadPercent(1) > black_step) Or (Motor.GetCount("B") > -100)

    EndWhile

    Motor.Stop("BC", "False")

    Motor.MoveSync("BC", -rotate_speed / 2, rotate_speed / 2, 10, "True")

  EndIf

  Motor.Stop("BC", "True")

  filled[target_box[1]] = 1

  filled[target_box[2]] = 1

  '?í–æ–∑–≤—?–∞?â–µ–Ω–∏–?

  Motor.MoveSync("BC", pow, pow, 50, "False")

  For i = target_box[2] To 1 Step -1

    Motor.ResetCount("BC")

    If ((i - Math.Floor(i / 2) * 2) = 0) Then

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -90) Or (Sensor.ReadPercent(1) > black_step)

        '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ ?á—ë—Ç–Ω–∞—?

        right_pid()

      EndWhile

    Else

      While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -90) Or (Sensor.ReadPercent(2) > black_step)

        '?ï—Å–ª–? –∫–æ?–æ–±–∫–∞ –Ω–µ?á—ë—Ç–Ω–∞—?

        left_pid()

      EndWhile

    EndIf

    Motor.MoveSync("BC", pow, pow, 40, "False")

  EndFor

  '?í—ã—Ö–æ–? –Ω–∞ –ø–æ–∑–∏?Ü–∏—?

  Motor.ResetCount("BC")

  While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -70) Or (Sensor.ReadPercent(2) > black_step)

    left_pid()

  EndWhile

  Motor.Stop("BC", "False")

EndSub



Sub finish

  '?†–∞—Å–∫—??ã–≤–∞–µ–? –∫–ª–µ?à–Ω—?

  Motor.Move("D", item_put, math.Abs(Motor.GetCount("D")), "True")

  '?ï–¥–µ–? –ø–æ ?Å–∫–ª–∞–¥—?

  Motor.ResetCount("BC")

  Motor.MoveSync("BC", pow, pow, 30, "False")

  While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -760) And ((((Sensor.ReadPercent(1) + Sensor.ReadPercent(2)) / 2) > 42) Or (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -80))

    middle_pid()

  EndWhile

  While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -760)

    color_pid()

  EndWhile

  '?ö—?–∞?Å–∏–≤—ã–? –ø–æ–≤–æ?–æ??

  Motor.Move("B", rotate_speed, rotate_degree + 50, "True") '?ü–æ–≤–æ—?–æ?? –Ω–∞–ø?–∞–≤–æ

  Motor.MoveSync("BC", speed, speed, 370, "True")

EndSub



'?ü—?–æ–≥?–∞–º–º–∞

Program.Delay(1000)

take_bricks() '?í–∑—è—Ç–∏–? –∫?É–±–∏–∫–æ–?

'?í—ã–≤–æ–? –∑–Ω–∞?á–µ–Ω–∏–? –Ω–∞ ?ç–∫—?–∞–Ω

LCD.Clear()

For i = 1 To 6

  LCD.Write(i * 20, 30, bricks[i])

EndFor

'?î–æ–µ–∑–? –¥–æ ?ø–æ–∑–∏—Ü–∏–? –ø–µ?–µ–¥ –∑–∞?Ö–≤–∞—Ç–æ–? –¥–µ?–µ–≤–∞

'?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

Motor.ResetCount("BC")

Motor.Stop("B", "True")

now_speed = -10

target_speed = rotate_speed

While (Motor.GetCount("C") > -rotate_degree)

  speed_change() '?ü–ª–∞–≤–Ω–æ–? –∏–∑–º–µ–Ω–µ–Ω–∏–µ ?Å–∫–æ—?–æ?Å—Ç–µ–?

  Motor.StartSync("BC", 0, now_speed)

EndWhile

Motor.Stop("BC", "False")

'?ï–¥–µ–? –¥–æ –ª–∏–Ω–∏–∏

now_speed = -10

target_speed = speed

While (Sensor.ReadPercent(2) > (black_step - 10)) '?î–? –ø–µ?–≤–æ–π –ª–∏–Ω–∏–∏

  speed_change() '?ü–ª–∞–≤–Ω–æ–? –∏–∑–º–µ–Ω–µ–Ω–∏–µ ?Å–∫–æ—?–æ?Å—Ç–µ–?

  Motor.StartSync("BC", now_speed, now_speed)

EndWhile

While (Sensor.ReadPercent(2) < (black_step + 10)) '?ü—?–æ–ø?É—Å–∫–∞–µ–? –ø–µ?–≤?É—? –ª–∏–Ω–∏??

EndWhile

While (Sensor.ReadPercent(2) > (black_step - 10)) '?î–? –≤?Ç–æ—?–æ–π –ª–∏–Ω–∏–∏

EndWhile

Motor.ResetCount("BC")

While (Motor.GetCount("B") > -30)

EndWhile

'?ü–æ–≤–æ—?–æ?? –Ω–∞–ª–µ–≤–æ

Motor.ResetCount("BC")

Motor.Stop("B", "True")

target_speed = rotate_speed

While (Sensor.ReadPercent(1) > (black_step - 10)) Or (Motor.GetCount("C") > -200)

  speed_change() '?ü–ª–∞–≤–Ω–æ–? –∏–∑–º–µ–Ω–µ–Ω–∏–µ ?Å–∫–æ—?–æ?Å—Ç–µ–?

  Motor.StartSync("BC", 0, now_speed)

EndWhile

While (Sensor.ReadPercent(1) < (black_step + 10))

  speed_change() '?ü–ª–∞–≤–Ω–æ–? –∏–∑–º–µ–Ω–µ–Ω–∏–µ ?Å–∫–æ—?–æ?Å—Ç–µ–?

  Motor.StartSync("BC", 0, now_speed)

EndWhile

Motor.Stop("BC", "False")

'?ï–¥–µ–? –¥–æ –ø–æ–∑–∏?Ü–∏–?

Motor.ResetCount("BC")

now_speed = -10

target_speed = pow

While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -80) Or (Sensor.ReadPercent(2) > black_step)

  '?ü–ò–? –¥–æ –ª–∏–Ω–∏–∏

  left_pid()

EndWhile

Motor.ResetCount("BC")

While (((Motor.GetCount("B") + Motor.GetCount("C")) / 2) > -80) Or (Sensor.ReadPercent(2) > black_step)

  '?ü–ò–? –¥–æ –ª–∏–Ω–∏–∏

  left_pid()

EndWhile

Motor.Stop("BC", "True")

Motor.Move("D", 100, 320, "True")



row = 1

take_item()

box = 4

bring_two_items_to_one_box()



For target_row = 2 To 3

  row = target_row

  take_item()

  box = 0

  '?ü–æ–∏—Å–? –ø–∞??? –≤ –æ–¥–Ω–æ–π –∫–æ?–æ–±–∫–µ

  For g = 1 To 5 Step 2

    If ((bricks[g] = tree_colors[1]) And (bricks[g + 1] = tree_colors[2])) Or ((bricks[g] = tree_colors[2]) And (bricks[g + 1] = tree_colors[1])) Then

      box = Math.Floor((g + 1) / 2)

      '?ó–∞–Ω—É–ª–µ–Ω–∏–? –º–µ?Å—?, –≤ –∫–æ?Ç–æ—??ã–? –ø–æ–≤–µ–∑?ë–?

      bricks[g] = 0

      bricks[g + 1] = 0

      If (box = 1) then

        box = 2

      Else

        If (box = 2) then

          box = 1

        EndIf

      EndIf

    EndIf

  EndFor

  if box > 0 then

    '?ï—Å–ª–? –Ω–∞?à—ë–?, –æ?Ç–≤–µ–∑–?

    LCD.Clear()

    LCD.Write(10, 10, "?î–≤–? –≤ –æ–¥–Ω?? –∫–æ?–æ–±–∫??")

    bring_two_items_to_one_box()

  Else

    '?ï—Å–ª–? –Ω–µ –Ω–∞?à—ë–?

    For g = 1 to 2

      target_box[g] = 0

    endfor

    '?ü–æ–∏—Å–? –æ–¥–∏–Ω–æ?á–Ω—ã—? –º–µ?Å—? –≤ –∫–æ?–æ–±–∫–∞??

    For g = 1 To 2

      For b = 1 to 5 step 2

        If (((bricks[b] = tree_colors[g]) And (bricks[b + 1] = 0)) Or ((bricks[b + 1] = tree_colors[g]) And (bricks[b] = 0))) And (target_box[g] = 0) Then

          bricks[b] = 0

          bricks[b + 1] = 0

          target_box[g] = Math.Floor((b + 1) / 2)

        EndIf

      EndFor

    EndFor

    '?ü–æ–∏—Å–? –º–µ?Å—Ç–? –≤ –ø–∞?–µ ?? –∫–∞–∫–∏–º-?Ç–? –¥??É–≥–∏–? –¥–µ?–µ–≤–æ–º, –µ?Å–ª–? –æ–¥–∏–Ω–æ?á–Ω–æ–≥–? –º–µ?Å—Ç–? –Ω–µ??

    For g = 1 To 2

      If (target_box[g] = 0) Then

        For b = 1 To 6

          If (bricks[b] = tree_colors[g]) And (target_box[g] = 0) then

            bricks[b] = 0

            target_box[g] = Math.Floor((b - 1) / 2) + 1

          EndIf

        EndFor

      EndIf

    EndFor

    '–≠–ª–µ–≥–∞–Ω?Ç–Ω—ã–? –∫–æ?Å—Ç—ã–ª—?

    For g = 1 To 2

      If (target_box[g] = 1) then

        target_box[g] = 2

      Else

        If (target_box[g] = 2) then

          target_box[g] = 1

        EndIf

      EndIf

    EndFor

    '?†–∞–∑–≤–æ–∑–∏–? –¥–µ?–µ–≤?å—?

    LCD.Clear()

    LCD.Write(10, 10, target_box[1])

    LCD.Write(30, 10, target_box[2])

    If target_box[1] < target_box[2] then

      bring_first_item_nearer()

    Else

      bring_second_item_nearer()

    EndIf

  EndIf

EndFor



finish()


