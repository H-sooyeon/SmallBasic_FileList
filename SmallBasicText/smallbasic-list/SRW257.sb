' ==========================================================================
' PROGRAM:         api_2_html.sb       Ver: 1.0        Rev: 2017.08.24
' TOOL CHAIN:    Microsoft Small Basic version 1.2 
' DESCRIPTION: user inputs a SB api.xml file name for input program outputs a formated html file
' BY:                        Jan Zumwalt - ZoomAviation.com
' COPYRIGHT:    Copyright (C) 2017 by Jan Zumwalt
' LICENSE  :        This program is released to the public domain under the GNU 
'                               license and may be used free of charge, for any purpose so 
'                               long as it and all revision or modifications are also made 
'                               free to the public.
'                              see: https://www.gnu.org/licenses/agpl.txt
' ==========================================================================
' NOTES:            Processes about 75 lines per second with a 3.5 ghz computer
'
' Possible enhancments:  May include using <table> to correctly align all comments.
'                                             File name checking
'                                             Abbreviated table of contents
' 

VERSION = "1.0 - 2017.08.24"
CR = Text.GetCharacter(10)
LF = Text.GetCharacter(13)
CRLF = CR + LF
QUOTE = Text.GetCharacter(34)
BACKDEL = Text.GetCharacter(8)
TITLE = "api_2_html.sb    by Jan Zumwalt    " + VERSION

' window title
TextWindow.Title = TITLE

' user supplied filenames
TextWindow.Write(CRLF + CRLF + "     XML source filename?  ")
xmlFile = TextWindow.Read()

TextWindow.Write("     HTML output filename? ")
htmlFile = TextWindow.Read()
TextWindow.WriteLine(CRLF)

' The following line could be harmful and has been automatically commented.
' File.WriteContents(htmlFile, "") ' new empty html output file

' +-----------------------------------------------------------------------------+
' |                                                   Main Loop                                                 |
' |   Read file a line at a time and process, then save to output file.    |
' +-----------------------------------------------------------------------------+


n = 1 ' line count
startTime = Clock.ElapsedMilliseconds
' The following line could be harmful and has been automatically commented.
' lineIn = File.ReadLine(xmlFile, n)
While lineIn <> ""    ' will stop at first empty line
' The following line could be harmful and has been automatically commented.
'   lineIn = File.ReadLine(xmlFile, n)
  string = lineIn
  trim()    ' trim spaces and special char
  string = RETURN  
  formatLine() '  edit line 
  formatedText = RETURN  ' final processed line
' The following line could be harmful and has been automatically commented.
'   File.AppendContents(htmlFile, formatedText) ' write line to html file
  whirly()       ' TextWindow.Write(".") ' show we are busy doing something
  endTime = Clock.ElapsedMilliseconds
  totalSecs = (endTime - startTime) / 1000
  n = n + 1 
EndWhile

' Program stats
endTime = Clock.ElapsedMilliseconds
totalSecs = (endTime - startTime) / 1000
TextWindow.WriteLine(CRLF + CRLF + "     lines per sec: " + math.Ceiling(n / totalSecs))
TextWindow.WriteLine("     Program end: SUCCESS" + CRLF)

' ------------------------------     end of program loop   --------------------------------


' +----------------------------------------------------------------------------------------+
' |                                                            Subroutines                                                        |
' +----------------------------------------------------------------------------------------+

' process each line
Sub formatLine
  If Text.StartsWith(string, "<?xml") Then
    text1 = text1 + "<html>" + LF + "<!DOCTYPE html>" + LF + "<head>" + LF
    text1 = text1 + "<title>Small Basic API Guide</title>" + LF
    text1 = text1 + "<style>" + LF + "body { font-family:arial; text-decoration:none; margin:75px; background-color:#ddd;color:navy;}" + LF
    text1 = text1 + "h1 {}" + LF + "h2 {color:#a00; font-size:18pt;}" + LF
    text1 = text1 + "p {margin-left: 6em;}" + LF
    text1 = text1 + "p.purpose {margin-left: 7em; text-indent: -5em}" + LF
    text1 = text1 + "p.param {margin-left: 7em; text-indent: -5em; color:navy}" + LF
    text1 = text1 + "p.return {margin-left: 7em; text-indent: -5em; color:black}" + LF
    text1 = text1 + "p.example {margin-left: 7em; text-indent: -5em; color:black}" + LF
    text1 = text1 + "footer {margin-top:50px;font-size:70%;color:#557}" + LF
     text1 = text1 + "</style>" + LF + "</head>" + LF
    RETURN = text1
  ElseIf Text.StartsWith(string, "<doc>") Then
    text1 = "<body>" + LF
    RETURN = text1
  ElseIf Text.StartsWith(string, "</doc>") Then
    text1 = "</body>" + LF
    text2 =  "<footer align=center>" + TITLE + "</footer>" + LF
    text3 = "</html>"
    RETURN = text1 + text2 + text3   
  ElseIf Text.StartsWith(string, "<assembly>") Or Text.StartsWith(string, "</assembly>") Then
    RETURN = ""
  ElseIf Text.StartsWith(string, "<members>") Or Text.StartsWith(string, "</members>") Then
    RETURN = ""
  ElseIf Text.StartsWith(string, "<name>") Then
    end = Text.GetLength(string) - 13
    RETURN = "<h1>" + Text.GetSubText(string, 7, end) + "</h1>"
  ElseIf (Text.StartsWith(string, "member name="+QUOTE+"T:") Or Text.StartsWith(string, "<member name="+QUOTE+"M:")) Then
    
    'string = input text
    find= "<member name="+QUOTE+"T:"
    paste = "<h2>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    'string = input text
    find= QUOTE+">"
    paste = "</h2>"
    replace()
    string = RETURN ' formated text returned in RETURN
   
    'string = input text
    find="<member name="+QUOTE+"M:"
    paste = "<h2>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    'string = input text
    find="Microsoft.SmallBasic.Library.Primitive"
    paste = "<i style='font-weight:normal'>var</i>"
    replace()
    string = RETURN ' formated text returned in RETURN
  
    RETURN = string

    'string = input text
    find="System.String"
    paste = "<i style='font-weight:normal'>var</i>"
    replace()
    string = RETURN ' formated text returned in RETURN
  
    RETURN = string
  
    'string = input text
    find="System.Nullable{System.Double}"
    paste = "<i style='font-weight:normal'>var</i>"
    replace()
    string = RETURN ' formated text returned in RETURN
  
    RETURN = string
  
    'string = input text
    find="System.Nullable{System.Double}"
    paste = "<i style='font-weight:normal'>var</i>"
    replace()
    string = RETURN ' formated text returned in RETURN
  
    RETURN = string
  
ElseIf Text.StartsWith(string, "<summary>") Then
    'string = input text
    find= "<summary>"
    paste = "<p class=purpose><span style='font-weight:bold;color:#a00'>Purpose:&ensp;</span>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    RETURN = string  

  ElseIf Text.StartsWith(string, "</member>") Then
    'string = input text
    find= "</member>"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN
    RETURN = string

  ElseIf Text.StartsWith(string, "</param><param name="+QUOTE) Then
    'string = input text
    find= QUOTE+">"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN

    'string = input text
    find= "</param><param name="+QUOTE
    paste = "<p class=param><span style='font-weight:bold;color:#070;'>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    RETURN = string + "</span>"
      
  ElseIf Text.StartsWith(string, "</summary><param name=" + QUOTE) Then
    'string = input text
    find= QUOTE+">"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN

    'string = input text
    find= "</summary><param name=" + QUOTE
    paste = "<p class=param><span style='font-weight:bold;color:#070;'>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    RETURN = string + "</span>"

  ElseIf Text.StartsWith(string, "</param><returns>") Then
    find= "</param><returns>"
    paste = "<p class=param><span style='font-weight:bold;color:#a00;'>Returns</span>"
    replace()
    string = RETURN ' formated text returned in RETURN
    RETURN = string

  ElseIf Text.StartsWith(string, "<returns>") Then
    find= "<returns>"
    paste = "<p class=return><span style='font-weight:bold;color:#a00;'>Returns: </span>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    RETURN = string
    
  ElseIf Text.StartsWith(string, "</summary>") Then
    'string = input text
    find= "</summary>"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN
    
    RETURN = string

  ElseIf Text.StartsWith(string, "</returns>") Then
    'string = input text
    find= "</returns>"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN
    
    RETURN = string    
    
  ElseIf Text.StartsWith(string, "<param name=" + QUOTE) Then
    'string = input text
    find= "<param name=" + QUOTE
    paste = "<p class=param><span style='font-weight:bold;color:#070;'>Param:&emsp;</span>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    'string = input text
    find= "</param>"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN  
    
    'string = input text
    find= QUOTE + ">"
    paste = ""
    replace()
    string = RETURN ' formated text returned in RETURN  
    
    RETURN = string    
    
  ElseIf Text.StartsWith(string, "<para>") Then
    'string = input text
    find= "</para>"
    paste = "</p>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    'string = input text
    find= "<para>"
    paste = "<p>"
    replace()
    string = RETURN ' formated text returned in RETURN  
    
    RETURN = string    
       
  ElseIf Text.StartsWith(string, "<example>") Then
    'string = input text
    find= "<example>"
    paste = "<p class=example><span style='font-weight:bold;color:#a00;'>Example:&emsp;</span>"
    replace()
    string = RETURN ' formated text returned in RETURN
    
    'string = input text
    find= "</example>"
    paste = "</pre></code>"
    replace()
    string = RETURN ' formated text returned in RETURN  
    
    RETURN = string     
    
Else
    RETURN = string
  EndIf
  
EndSub

'  remove  [spaces, CR, LF] from START and END of line
sub trim           ' string = text to modify
  trimStart()      ' result returned in RETURN
  string = RETURN  ' text sent in STRING
  trimEnd()        ' result returned in RETURN
EndSub 

' remove [spaces, CR, LF] from START of line
sub trimStart    ' trimtxt = text to modify
  While (Text.StartsWith(string, " ") Or Text.StartsWith(string, CR) Or Text.StartsWith(string, LF))
    string = text.GetSubTextToEnd(string,2)
  EndWhile
  RETURN = string
endsub
 
' remove [spaces, CR, LF] from END of line
sub trimend   ' trimtxt = text to modify
  While (Text.EndsWith(string, " ") Or Text.EndsWith(string, CR) Or Text.EndsWith(string, LF))
    string = Text.GetSubText(string, 1, Text.GetLength(string) - 1)
  EndWhile
  RETURN = string
endsub

'subroutine - replace 
  ' call replace()
  '  string = txt ' A working copy
  ' find = "text" 'The text to find
  ' paste = "TEXT" 'The text to replace with
  ' result = "" 'The result of the find and replace

Sub replace
  inputText = string
  result = ""
  ' TextWindow.WriteLine(CRLF + "inpuText: " + inputText)
  ' TextWindow.WriteLine("find: " + find)
  ' TextWindow.WriteLine("paste: " + paste)
  pos = Text.GetIndexOf(inputText,find) ' The next occurence of our search text
  While (pos > 0)
    result = result+Text.GetSubText(inputText,1,pos-1) 'The text before our search text
    result = result+paste 'Add the replace text
    inputText = Text.GetSubTextToEnd(inputText,pos+Text.GetLength(find)) 'The text after our search text
    pos = Text.GetIndexOf(inputText,find) 'The next occurence of our next search text
  EndWhile
  RETURN = result + inputText 'The final text after our search text (if any).
EndSub

Sub whirly
  If whirlyCount < 20 then
    whirlyCount = whirlyCount + 1
    
  Else
    If whirlyChar = "|" then
      whirlyChar = "/"
      whirlyCount = 1
      For count = 1 to 30
        TextWindow.Write(BACKDEL)
      EndFor
      TextWindow.Write("     " + whirlyChar)
      TextWindow.Write("  Line: " + n + "  Sec: " + Math.Ceiling(totalSecs))
      
    ElseIf whirlyChar = "/" then
      whirlyChar = "-"
      whirlyCount = 1    
      For count = 1 to 30
        TextWindow.Write(BACKDEL)
      EndFor
      TextWindow.Write("     " + whirlyChar)
      TextWindow.Write("  Line: " + n + "  Sec: " + Math.Ceiling(totalSecs))

   ElseIf whirlyChar = "-" then
      whirlyChar = "\"
      whirlyCount = 1     
      For count = 1 to 30
        TextWindow.Write(BACKDEL)
      EndFor
      TextWindow.Write("     " + whirlyChar)
      TextWindow.Write("  Line: " + n + "  Sec: " + Math.Ceiling(totalSecs))
 
   ElseIf whirlyChar = "\" then
      whirlyChar = "|"
      whirlyCount = 1     
      For count = 1 to 30
        TextWindow.Write(BACKDEL)
      EndFor
      TextWindow.Write("     " + whirlyChar)
      TextWindow.Write("  Line: " + n + "  Sec: " + Math.Ceiling(totalSecs))
      
  Else 
      whirlyChar = "|"     
  EndIf
    
  EndIf
  
EndSub
