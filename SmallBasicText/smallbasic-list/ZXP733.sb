Initialise()
GraphicsWindow.MouseMove = OnMouseMove
GraphicsWindow.MouseDown = OnMouseDown
GraphicsWindow.MouseUp = OnMouseUp

While ("True")
  
  If (mouseMove = 1 And mouseDown = 1) Then
    theta = -(GraphicsWindow.MouseX-mouseX)/gw*PI
    phi = -(GraphicsWindow.MouseY-mouseY)/gh*PI/2
    setRotation()
    matrix1 = matrix
    matrix2 = rotationOLD
    multiply()
    rotation = matrix
    mouseMove = 0
  EndIf
  
  matrix = rotation
  For iBall = 1 To numBall
    X = ballX[iBall]
    Y = ballY[iBall]
    Z = ballZ[iBall]
    getScreen()
    ballSX[iBall] = SX
    ballSY[iBall] = SY
    ballSZ[iBall] = SZ
  EndFor
  
  If ("False") Then
    For iBall = 1 To numBall
      For jBall = iBall+1 To numBall
        If (ballSZ[jBall] < ballSZ[iBall]) Then
          GraphicsWindow.BrushColor = ballColour[jBall]
          Shapes.Remove(ballSZ[jBall])
          ballSZ[jBall] = Shapes.AddEllipse(2*radBall,2*radBall)
        EndIf
      EndFor
    EndFor
  EndIf
  
  For iBall = 1 To numBall
    SX = ballSX[iBall]
    SY = ballSY[iBall]
    SZ = ballSZ[iBall]
    Shapes.Move(ball[iBall],SX-radBall,SY-radBall)
    Shapes.Zoom(ball[iBall],(1+SZ),(1+SZ))
    Shapes.SetOpacity(ball[iBall],(1+SZ)*100)
    'GraphicsWindow.DrawLine(SX,SY,gw/2,gh/2)
  EndFor
  
  Program.Delay(50)
EndWhile

'testInverse()

If (1=0) Then
  theta = PI/2.0
  phi = PI/2.0
  
  setRotation()
  current = matrix
  
  matrix = current
  printMatrix()
  
  theta = 0
  phi = PI/2.0
  setRotation()
  
  matrix1 = current
  matrix2 = matrix
  multiply()
  printMatrix()
EndIf

'#####################################################
'SUBROUTINES
'#####################################################

Sub Initialise
  PI = 2.0*Math.ArcCos(0)
  gw = 1200
  gh = 800
  bg = "White"
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BackgroundColor = bg
  GraphicsWindow.Top = 0
  GraphicsWindow.Left = 0
  centreX = 0
  centreY = 0
  centreZ = 0
  numBall = 50
  radBall = 15
  scale = 2
  theta = 0
  phi = 0
  mouseMove = 0
  mouseDown = 0
  
  For i = 1 To numBall
    ballX[i] = Math.GetRandomNumber(255)-129
    ballY[i] = Math.GetRandomNumber(255)-129
    ballZ[i] = Math.GetRandomNumber(255)-129
    GraphicsWindow.BrushColor = GraphicsWindow.GetColorFromRGB(ballX[i]+129,ballY[i]+129,ballZ[i]+129)
    ballColour[i] = GraphicsWindow.BrushColor
    ball[i] = Shapes.AddEllipse(2*radBall,2*radBall)
  EndFor
  
  GraphicsWindow.PenColor = "#05ff0000"
  setRotation()
  rotation = matrix
EndSub

'Input : theta, phi
'Output : matrix
Sub setRotation
  matrix[1][1] = Math.Cos(theta)*Math.Cos(phi)
  matrix[1][2] = Math.Sin(theta)
  matrix[1][3] = Math.Cos(theta)*Math.Sin(phi)
  
  matrix[2][1] = -Math.Sin(theta)*Math.Cos(phi)
  matrix[2][2] = Math.Cos(theta)
  matrix[2][3] = -Math.Sin(theta)*Math.Sin(phi)
  
  matrix[3][1] = -Math.Sin(phi)
  matrix[3][2] = 0
  matrix[3][3] = Math.Cos(phi)
EndSub

'Input : matrix
'Output : inverse
Sub setInverse ' Just a transpose for a rotation matrix
  For i = 1 To 3
    For j = 1 To 3
      inverse[i][j] = matrix[j][i]
    EndFor
  EndFor
EndSub

'Input : matrix1, matrix2
'Output : matrix
Sub multiply
  For i = 1 To 3
    For j = 1 To 3
      matrix[i][j] = 0
      For k = 1 To 3
        matrix[i][j] = matrix[i][j] + matrix1[i][k]*matrix2[k][j]
      EndFor
    EndFor
  EndFor
EndSub

'Input : matrix
'Output : theta, phi
Sub printMatrix
  For i = 1 To 3
    For j = 1 To 3
      TextWindow.Write(0.001*Math.Floor(0.5+1000*matrix[i][j])) 'Rounded to nearest 3 digit decimal number
      TextWindow.Write("   ")
    EndFor
    TextWindow.WriteLine("")
  EndFor
  TextWindow.WriteLine("")
  getAngles()
  TextWindow.Write(0.001*Math.Floor(0.5+1000*theta*180/PI))
  TextWindow.Write("   ")
  TextWindow.WriteLine(0.001*Math.Floor(0.5+1000*phi*180/PI))
  TextWindow.WriteLine("")
EndSub

'Input : matrix
'Output theta, phi
Sub getAngles
  phi = Math.ArcCos(Math.Min(1.0,Math.Max(-1.0,matrix[3][3])))
  theta = Math.ArcCos(Math.Min(1.0,Math.Max(-1.0,matrix[2][2])))
  If (matrix[1][2] < 0) Then
    theta = theta+PI
  EndIf
EndSub

Sub testInverse
  theta = PI/2.0
  phi = 0.0
  
  setRotation()
  rotation = matrix
  printMatrix()
  
  setInverse()
  matrix = inverse
  printMatrix()
  
  matrix1 = rotation
  matrix2 = inverse
  multiply()
  printMatrix()
EndSub

'Input matrix, scale, centreX, centreY, centreZ, X, Y, Z
'Output SX, SY, SZ(depth)
Sub getScreen
  DX = (X-centreX)*scale
  DY = (Y-centreY)*scale
  DZ = (Z-centreZ)*scale
  SX = gw/2 + DX*matrix[2][1] + DY*matrix[2][2] + DZ*matrix[2][3]
  SY = gh/2 + DX*matrix[3][1] + DY*matrix[3][2] + DZ*matrix[3][3]
  SZ = (DX*matrix[1][1] + DY*matrix[1][2] + DZ*matrix[1][3])/255/scale
EndSub

Sub OnMouseMove
  mouseMove = 1
EndSub

Sub OnMouseDown
  mouseX = GraphicsWindow.MouseX
  mouseY = GraphicsWindow.MouseY
  rotationOLD = rotation
  GraphicsWindow.BrushColor = bg
  GraphicsWindow.FillRectangle(0,0,gw,gh)
  If ("False") Then
    For i = 1 To numBall
      DX = ballSX[i]-mouseX
      DY = ballSY[i]-mouseY
      dist = Math.SquareRoot(DX*DX + DY*DY)
      If (dist < radBall) Then
        centreX = ballX[i]
        centreY = ballY[i]
        centreZ = ballZ[i]
      EndIf
    EndFor
  EndIf
  mouseDown = 1
EndSub

Sub OnMouseUp
  mouseDown = 0
EndSub
